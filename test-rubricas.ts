/**
 * Test de Validaci√≥n - Sistema de R√∫bricas Completo
 *
 * Valida la integraci√≥n completa del sistema de r√∫bricas:
 * - Uso de r√∫bricas espec√≠ficas por fase (1-4)
 * - C√°lculo de scores ponderados seg√∫n algoritmo oficial
 * - C√°lculo de 5 m√©tricas de habilidades seg√∫n f√≥rmulas oficiales
 * - Prompt Caching autom√°tico (para r√∫bricas >2048 tokens)
 */

import dotenv from 'dotenv';
dotenv.config();

import analyzer, { type Answer } from './src/services/ai/claude/analyzer';

console.log('üß™ Test de Validaci√≥n - Sistema de R√∫bricas Completo\n');
console.log('=' .repeat(80));

// Respuestas de prueba realistas para FASE 2 (Identificaci√≥n de Variables)
const respuestasPruebaFase2: Answer[] = [
  {
    id: 'test-q1',
    questionId: 'q1',
    questionText: '¬øQu√© temas trabajaste esta semana y cu√°l es tu nivel de dominio?',
    answer: `Esta semana trabajamos con identificaci√≥n de variables en movimiento parab√≥lico.
    Aprend√≠ a distinguir entre:
    - Variables conocidas: velocidad inicial (v‚ÇÄ), √°ngulo de lanzamiento (Œ∏), gravedad (g)
    - Variables desconocidas: altura m√°xima (h), alcance horizontal (R), tiempo de vuelo (t)
    - Variables controlables: v‚ÇÄ y Œ∏ (las podemos modificar en el experimento)
    - Variables no controlables: g (constante)

    Tambi√©n trabaj√© con magnitudes f√≠sicas: velocidad (m/s), √°ngulo (grados), distancia (m), tiempo (s).
    Siento que tengo buen dominio del tema, aunque a veces me cuesta clasificar variables en problemas complejos.`,
    type: 'text'
  },
  {
    id: 'test-q2',
    questionId: 'q2',
    questionText: '¬øQu√© evidencias tienes de tu aprendizaje esta semana?',
    answer: `Hice 5 ejercicios de identificaci√≥n de variables en problemas de cinem√°tica.

    Por ejemplo, en el problema del proyectil:
    - Identifiqu√© v‚ÇÄ = 20 m/s (conocida, controlable)
    - Œ∏ = 45¬∞ (conocida, controlable)
    - g = 9.8 m/s¬≤ (conocida, no controlable)
    - h = ? (desconocida)
    - R = ? (desconocida)

    Tambi√©n integr√© la Fase 1 (identificaci√≥n del problema) con la Fase 2: primero identifiqu√© que el problema era calcular el alcance, luego list√© todas las variables necesarias.

    Adjunto foto de mi carpeta con los ejercicios resueltos.`,
    type: 'text'
  },
  {
    id: 'test-q3',
    questionId: 'q3',
    questionText: '¬øQu√© dificultades tuviste y qu√© estrategias usaste?',
    answer: `Mi mayor dificultad fue distinguir entre variables controlables y no controlables en problemas con fricci√≥n.

    Por ejemplo, en un problema de plano inclinado:
    - ¬øEl coeficiente de fricci√≥n (Œº) es controlable? Depende si podemos cambiar las superficies o no.
    - ¬øLa masa del objeto es controlable? S√≠, si podemos elegir el objeto.

    Mi estrategia fue preguntarme: "En un experimento real, ¬øpodr√≠a modificar esta variable?"

    Tambi√©n me cost√≥ al principio recordar todas las magnitudes f√≠sicas involucradas. Para mejorar, cre√© una tabla de referencia con las magnitudes m√°s comunes y sus unidades.`,
    type: 'text'
  },
  {
    id: 'test-q4',
    questionId: 'q4',
    questionText: '¬øC√≥mo conectas lo aprendido con situaciones reales?',
    answer: `Conect√© la identificaci√≥n de variables con situaciones cotidianas:

    1. **Lanzar una pelota de b√°squet**:
       - Variables controlables: fuerza del lanzamiento, √°ngulo
       - No controlables: distancia al aro, altura del aro
       - Desconocidas: trayectoria √≥ptima

    2. **Salto en largo**:
       - Controlables: velocidad de carrera, √°ngulo de despegue
       - No controlables: gravedad, resistencia del aire
       - Desconocidas: distancia m√°xima alcanzable

    Este ejercicio me ayud√≥ a ver que en la vida real siempre hay variables que podemos controlar y otras que no, igual que en f√≠sica. Aprend√≠ que identificar qu√© podemos cambiar es el primer paso para resolver un problema.`,
    type: 'text'
  },
  {
    id: 'test-q5',
    questionId: 'q5',
    questionText: '¬øComentarios adicionales?',
    answer: `Me doy cuenta de que la Fase 2 es m√°s compleja que la Fase 1. Ahora no solo hay que identificar el problema, sino tambi√©n todas las variables involucradas.

    Me gustar√≠a profundizar en c√≥mo identificar variables en problemas de termodin√°mica, porque ah√≠ hay muchas variables (presi√≥n, volumen, temperatura, etc.) y me confundo.

    Una idea: ¬øpodr√≠amos hacer un ejercicio donde nosotros mismos dise√±emos un experimento y tengamos que identificar todas las variables desde cero?`,
    type: 'text'
  }
];

async function testRubricas() {
  try {
    console.log('\nüìù Testing FASE 2: Identificaci√≥n de Variables y Datos');
    console.log('Materia: F√≠sica');
    console.log('Respuestas:', respuestasPruebaFase2.length);
    console.log('-'.repeat(80));

    // Test con Fase 2
    const resultado = await analyzer.analyzeAnswers(
      respuestasPruebaFase2,
      'F√≠sica',
      2,  // Fase 2
      'structured'
    );

    console.log('\n‚úÖ RESULTADOS DEL AN√ÅLISIS:');
    console.log('‚ïê'.repeat(80));

    console.log('\nüéØ SCORE FINAL PONDERADO:', resultado.score, '/100');

    console.log('\nüìä M√âTRICAS DE HABILIDADES (F√≥rmulas Oficiales):');
    console.log('  Comprehension:................', resultado.skillsMetrics.comprehension, '/100');
    console.log('  Critical Thinking:............', resultado.skillsMetrics.criticalThinking, '/100');
    console.log('  Self Regulation:..............', resultado.skillsMetrics.selfRegulation, '/100');
    console.log('  Practical Application:........', resultado.skillsMetrics.practicalApplication, '/100');
    console.log('  Metacognition:................', resultado.skillsMetrics.metacognition, '/100');

    console.log('\nüí™ FORTALEZAS:');
    console.log(resultado.strengths);

    console.log('\nüìà √ÅREAS DE MEJORA:');
    console.log(resultado.improvements);

    console.log('\nüí¨ COMENTARIOS GENERALES:');
    console.log(resultado.generalComments);

    console.log('\nüìÑ AN√ÅLISIS COMPLETO:');
    console.log('='.repeat(80));
    console.log(resultado.rawAnalysis);
    console.log('='.repeat(80));

    console.log('\n‚ïê'.repeat(80));
    console.log('‚úÖ Test completado exitosamente');
    console.log('‚ïê'.repeat(80));

    // Validaciones autom√°ticas
    console.log('\nüîç VALIDACIONES AUTOM√ÅTICAS:');
    const validaciones = [];

    if (resultado.score >= 0 && resultado.score <= 100) {
      validaciones.push('‚úÖ Score en rango v√°lido (0-100)');
    } else {
      validaciones.push(`‚ùå Score fuera de rango: ${resultado.score}`);
    }

    const metricasValidas = Object.values(resultado.skillsMetrics).every(m => m >= 0 && m <= 100);
    if (metricasValidas) {
      validaciones.push('‚úÖ Todas las m√©tricas en rango v√°lido (0-100)');
    } else {
      validaciones.push('‚ùå Algunas m√©tricas fuera de rango');
    }

    if (resultado.strengths && resultado.strengths.length > 20) {
      validaciones.push('‚úÖ Fortalezas generadas correctamente');
    } else {
      validaciones.push('‚ùå Fortalezas insuficientes o vac√≠as');
    }

    if (resultado.improvements && resultado.improvements.length > 20) {
      validaciones.push('‚úÖ Mejoras generadas correctamente');
    } else {
      validaciones.push('‚ùå Mejoras insuficientes o vac√≠as');
    }

    if (resultado.generalComments && resultado.generalComments.length > 20) {
      validaciones.push('‚úÖ Comentarios generales generados correctamente');
    } else {
      validaciones.push('‚ùå Comentarios generales insuficientes o vac√≠os');
    }

    validaciones.forEach(v => console.log(v));

    const todosValidos = validaciones.every(v => v.startsWith('‚úÖ'));
    if (todosValidos) {
      console.log('\nüéâ TODAS LAS VALIDACIONES PASARON');
    } else {
      console.log('\n‚ö†Ô∏è  ALGUNAS VALIDACIONES FALLARON');
    }

  } catch (error: any) {
    console.error('\n‚ùå ERROR EN EL TEST:', error.message);
    console.error('Stack:', error.stack);
    throw error;
  }
}

// Ejecutar test
testRubricas()
  .then(() => {
    console.log('\n‚úÖ Script de test finalizado exitosamente');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå El test fall√≥:', error);
    process.exit(1);
  });
