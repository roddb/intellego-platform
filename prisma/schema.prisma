// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             UserRole          @default(STUDENT)
  studentId        String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  // Academic fields
  program          String?
  academicYear     String?
  enrollmentYear   Int?
  status           UserStatus        @default(ACTIVE)
  phoneNumber      String?
  dateOfBirth      DateTime?
  address          String?
  emergencyContact Json?
  accounts         Account[]
  sessions         Session[]
  progressReports  ProgressReport[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id          String   @id @default(cuid())
  text        String
  type        QuestionType
  options     String   @default("")
  required    Boolean  @default(true)
  order       Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  answers     Answer[]
}

model ProgressReport {
  id          String   @id @default(cuid())
  userId      String
  weekStart   DateTime
  weekEnd     DateTime
  submittedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     Answer[]

  @@unique([userId, weekStart])
}

model Answer {
  id               String         @id @default(cuid())
  questionId       String
  progressReportId String
  answer           String
  question         Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  progressReport   ProgressReport @relation(fields: [progressReportId], references: [id], onDelete: Cascade)

  @@unique([questionId, progressReportId])
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum QuestionType {
  TEXT
  TEXTAREA
  RADIO
  CHECKBOX
  SCALE
}
