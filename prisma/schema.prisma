// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String
  email            String            @unique
  emailVerified    DateTime?
  image            String?
  password         String
  role             UserRole          @default(STUDENT)
  studentId        String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  // Academic fields - specific for the institution
  sede             String?           // "Congreso" | "Colegiales"
  academicYear     String?           // "4to Año" | "5to Año"
  division         String?           // "A"|"B"|"C"|"D"|"E"
  subjects         String?           // "Física,Química" | "Física" | "Química" (comma-separated)
  status           UserStatus        @default(ACTIVE)
  accounts         Account[]
  sessions         Session[]
  progressReports    ProgressReport[]
  calendarEvents     CalendarEvent[]
  tasks              Task[]
  recurringSchedules RecurringSchedule[]
  conversations      ConversationSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id          String   @id @default(cuid())
  text        String
  type        QuestionType
  options     String   @default("")
  required    Boolean  @default(true)
  order       Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  answers     Answer[]
}

model ProgressReport {
  id          String   @id @default(cuid())
  userId      String
  subject     String   // "Física" | "Química"
  weekStart   DateTime
  weekEnd     DateTime
  submittedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     Answer[]

  @@unique([userId, weekStart, subject])
}

model Answer {
  id               String         @id @default(cuid())
  questionId       String
  progressReportId String
  answer           String
  question         Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  progressReport   ProgressReport @relation(fields: [progressReportId], references: [id], onDelete: Cascade)

  @@unique([questionId, progressReportId])
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum QuestionType {
  TEXT
  TEXTAREA
  RADIO
  CHECKBOX
  SCALE
}

// Organizador Inteligente - Phase 1: Calendar & Task Management
model CalendarEvent {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  type        EventType @default(PERSONAL)
  subject     String?   // Subject/materia if academic event
  location    String?
  color       String    @default("#3B82F6") // Default blue color
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id             String       @id @default(cuid())
  userId         String
  title          String
  description    String?
  dueDate        DateTime?
  priority       TaskPriority @default(MEDIUM)
  status         TaskStatus   @default(PENDING)
  subject        String?      // Subject/materia if academic task
  estimatedHours Float?       // Estimated hours to complete
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum EventType {
  ACADEMIC     // Classes, exams, academic events
  PERSONAL     // Personal appointments, activities
  STUDY        // Study sessions, homework time
  EXAM         // Exams and evaluations
  ASSIGNMENT   // Assignment deadlines
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

// Organizador Inteligente - Phase 1.5: Smart Scheduling System
model RecurringSchedule {
  id          String       @id @default(cuid())
  userId      String
  title       String
  description String?
  type        ScheduleType @default(CLASS)
  dayOfWeek   DayOfWeek
  startTime   String       // Format: "HH:MM" (e.g., "08:30")
  endTime     String       // Format: "HH:MM" (e.g., "10:00")
  location    String?
  color       String       @default("#3B82F6")
  category    String?      // Subject name for classes, activity type for extracurricular
  isActive    Boolean      @default(true)
  semester    String?      // "2025-1", "2025-2", etc.
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dayOfWeek])
  @@index([userId, isActive])
}

model ScheduleTemplate {
  id           String           @id @default(cuid())
  name         String
  description  String?
  type         ScheduleType
  targetGroup  String           // "secondary", "high-school", "university"
  scheduleData Json             // Array of schedule items
  isPublic     Boolean          @default(true)
  usageCount   Int              @default(0)
  createdBy    String?          // User ID who created it (null for system templates)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([type, targetGroup])
  @@index([isPublic])
}

enum ScheduleType {
  CLASS           // Academic classes
  EXTRACURRICULAR // Sports, music, art, etc.
  PERSONAL        // Personal recurring appointments
  STUDY_GROUP     // Study groups, tutoring
  TRANSPORT       // Commute time
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// AI Chat System - Conversation Management
model ConversationSession {
  id        String   @id @default(cuid())
  userId    String
  title     String?  // Optional title for the conversation
  startedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  ConversationMessage[]

  @@index([userId, isActive])
  @@index([userId, updatedAt])
}

model ConversationMessage {
  id               String              @id @default(cuid())
  conversationId   String
  role             MessageRole
  content          String
  timestamp        DateTime            @default(now())
  metadata         Json?               // For storing additional data like context, tokens, etc.
  conversation     ConversationSession @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, timestamp])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
