/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/debug-sara-memory/route";
exports.ids = ["app/api/debug-sara-memory/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdebug-sara-memory%2Froute&page=%2Fapi%2Fdebug-sara-memory%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdebug-sara-memory%2Froute.ts&appDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdebug-sara-memory%2Froute&page=%2Fapi%2Fdebug-sara-memory%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdebug-sara-memory%2Froute.ts&appDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_rodrigodibernardo33gmail_com_Documents_App_Development_Proyects_Intellego_Platform_src_app_api_debug_sara_memory_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/debug-sara-memory/route.ts */ \"(rsc)/./src/app/api/debug-sara-memory/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/debug-sara-memory/route\",\n        pathname: \"/api/debug-sara-memory\",\n        filename: \"route\",\n        bundlePath: \"app/api/debug-sara-memory/route\"\n    },\n    resolvedPagePath: \"/Users/rodrigodibernardo33gmail.com/Documents/App Development Proyects/Intellego Platform/src/app/api/debug-sara-memory/route.ts\",\n    nextConfigOutput,\n    userland: _Users_rodrigodibernardo33gmail_com_Documents_App_Development_Proyects_Intellego_Platform_src_app_api_debug_sara_memory_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZkZWJ1Zy1zYXJhLW1lbW9yeSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGZGVidWctc2FyYS1tZW1vcnklMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZkZWJ1Zy1zYXJhLW1lbW9yeSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnJvZHJpZ29kaWJlcm5hcmRvMzNnbWFpbC5jb20lMkZEb2N1bWVudHMlMkZBcHAlMjBEZXZlbG9wbWVudCUyMFByb3llY3RzJTJGSW50ZWxsZWdvJTIwUGxhdGZvcm0lMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGcm9kcmlnb2RpYmVybmFyZG8zM2dtYWlsLmNvbSUyRkRvY3VtZW50cyUyRkFwcCUyMERldmVsb3BtZW50JTIwUHJveWVjdHMlMkZJbnRlbGxlZ28lMjBQbGF0Zm9ybSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDcUI7QUFDZ0Y7QUFDN0o7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlHQUFtQjtBQUMzQztBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBc0Q7QUFDOUQ7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDMEY7O0FBRTFGIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9yb2RyaWdvZGliZXJuYXJkbzMzZ21haWwuY29tL0RvY3VtZW50cy9BcHAgRGV2ZWxvcG1lbnQgUHJveWVjdHMvSW50ZWxsZWdvIFBsYXRmb3JtL3NyYy9hcHAvYXBpL2RlYnVnLXNhcmEtbWVtb3J5L3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9kZWJ1Zy1zYXJhLW1lbW9yeS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2RlYnVnLXNhcmEtbWVtb3J5XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9kZWJ1Zy1zYXJhLW1lbW9yeS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9yb2RyaWdvZGliZXJuYXJkbzMzZ21haWwuY29tL0RvY3VtZW50cy9BcHAgRGV2ZWxvcG1lbnQgUHJveWVjdHMvSW50ZWxsZWdvIFBsYXRmb3JtL3NyYy9hcHAvYXBpL2RlYnVnLXNhcmEtbWVtb3J5L3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdebug-sara-memory%2Froute&page=%2Fapi%2Fdebug-sara-memory%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdebug-sara-memory%2Froute.ts&appDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/ai-calendar/create-event/route.ts":
/*!*******************************************************!*\
  !*** ./src/app/api/ai-calendar/create-event/route.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/auth */ \"(rsc)/./src/lib/auth.ts\");\n/* harmony import */ var _lib_calendar_data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n\n\n\n\nasync function POST(request) {\n    try {\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_lib_auth__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Authentication required',\n                success: false\n            }, {\n                status: 401\n            });\n        }\n        const body = await request.json();\n        const { title, type, subject, date, startTime, endTime, duration, location, description, priority } = body;\n        // Validaciones básicas\n        if (!title || !type || !date) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Missing required fields: title, type, date',\n                success: false\n            }, {\n                status: 400\n            });\n        }\n        // Validar tipo de evento\n        const validTypes = [\n            'exam',\n            'study_session',\n            'class',\n            'personal',\n            'extracurricular'\n        ];\n        if (!validTypes.includes(type)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `Invalid event type. Must be one of: ${validTypes.join(', ')}`,\n                success: false\n            }, {\n                status: 400\n            });\n        }\n        // Procesar fecha\n        let eventDate;\n        try {\n            eventDate = new Date(date);\n            if (isNaN(eventDate.getTime())) {\n                throw new Error('Invalid date');\n            }\n        } catch (error) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid date format',\n                success: false\n            }, {\n                status: 400\n            });\n        }\n        // Calcular endTime si no se proporciona pero se tiene duration\n        let finalEndTime = endTime;\n        if (!endTime && startTime && duration) {\n            const start = new Date(`2000-01-01T${startTime}:00`);\n            const end = new Date(start.getTime() + duration * 60000);\n            finalEndTime = end.toTimeString().substring(0, 5);\n        }\n        // Crear el evento\n        const event = {\n            id: `ai-event-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            title: title.trim(),\n            date: eventDate,\n            startTime: startTime || '15:00',\n            endTime: finalEndTime || '16:00',\n            type: type,\n            color: (0,_lib_calendar_data__WEBPACK_IMPORTED_MODULE_3__.getEventTypeColor)(type),\n            subject: subject || undefined,\n            location: location || undefined,\n            description: description || 'Creado automáticamente por IA Tutora',\n            priority: priority || 'medium',\n            duration: duration || 60\n        };\n        // Intentar agregar el evento al calendario del usuario\n        const userId = session.user.id;\n        const success = (0,_lib_calendar_data__WEBPACK_IMPORTED_MODULE_3__.addCalendarEvent)(userId, event);\n        if (!success) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to create event in calendar',\n                success: false\n            }, {\n                status: 500\n            });\n        }\n        // Verificar que el evento se guardó correctamente\n        const userData = (0,_lib_calendar_data__WEBPACK_IMPORTED_MODULE_3__.getUserCalendarData)(userId);\n        const savedEvent = userData?.events.find((e)=>e.id === event.id);\n        if (!savedEvent) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Event was not saved correctly',\n                success: false\n            }, {\n                status: 500\n            });\n        }\n        console.log(`🤖 IA creó evento: ${event.title} para ${userId}`);\n        // Disparar evento global para notificar a los componentes frontend\n        if (typeof globalThis !== 'undefined') {\n            // Usar setTimeout para evitar problemas de timing\n            setTimeout(()=>{\n                if (false) {}\n            }, 100);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            event: savedEvent,\n            message: `Evento \"${event.title}\" creado exitosamente`,\n            totalEvents: userData?.events.length || 0\n        });\n    } catch (error) {\n        console.error('❌ Error in AI calendar creation:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error while creating event',\n            success: false\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/ai-calendar/create-event/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/app/api/debug-sara-memory/route.ts":
/*!************************************************!*\
  !*** ./src/app/api/debug-sara-memory/route.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n// Debugging endpoint for Sara's memory and conversation system\n\nasync function POST(req) {\n    try {\n        const { action, userId, message, sessionId, testType } = await req.json();\n        const results = {\n            timestamp: new Date(),\n            action,\n            userId: userId || 'debug-test-user',\n            sessionId: sessionId || 'debug-session-001',\n            results: {}\n        };\n        console.log(`🧪 Debug Sara Memory - Action: ${action}`);\n        switch(action){\n            case 'test_persistent_memory':\n                results.results = await testPersistentMemory(results.userId, results.sessionId);\n                break;\n            case 'test_calendar_execution':\n                results.results = await testCalendarExecution(results.userId, message);\n                break;\n            case 'test_conversation_coherence':\n                results.results = await testConversationCoherence(results.userId, results.sessionId);\n                break;\n            case 'full_integration_test':\n                results.results = await fullIntegrationTest(results.userId);\n                break;\n            case 'memory_inspection':\n                results.results = await inspectMemoryState(results.userId, results.sessionId);\n                break;\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: 'Invalid action. Available: test_persistent_memory, test_calendar_execution, test_conversation_coherence, full_integration_test, memory_inspection'\n                }, {\n                    status: 400\n                });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            results,\n            message: `Debug action '${action}' completed successfully`\n        });\n    } catch (error) {\n        console.error('❌ Debug Sara Memory error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error',\n            message: 'Debug test failed'\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * Test 1: Persistent Memory System\n */ async function testPersistentMemory(userId, sessionId) {\n    console.log('🧠 Testing persistent memory system...');\n    const { getConversationSession, createConversationSession, addConversationTurn, addPendingTask, getPendingTasks } = __webpack_require__(/*! @/lib/temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n    const { ContextualConversationManager } = __webpack_require__(/*! @/lib/contextual-conversation-manager */ \"(rsc)/./src/lib/contextual-conversation-manager.ts\");\n    // Step 1: Send first message\n    const message1 = \"Hola Sara, explícame qué son las ecuaciones cuadráticas en matemáticas\";\n    const response1 = await ContextualConversationManager.processContextualMessage(userId, message1, sessionId, \"Estudiante Prueba\");\n    // Step 2: Check if conversation was stored\n    let session = getConversationSession(userId, sessionId);\n    const turnsAfterFirst = session ? session.turns.length : 0;\n    // Step 3: Send follow-up message to test memory\n    const message2 = \"Continúa explicando con ejemplos prácticos\";\n    const response2 = await ContextualConversationManager.processContextualMessage(userId, message2, sessionId, \"Estudiante Prueba\");\n    // Step 4: Check memory persistence\n    session = getConversationSession(userId, sessionId);\n    const turnsAfterSecond = session ? session.turns.length : 0;\n    // Step 5: Add a calendar task and test persistence\n    addPendingTask(userId, sessionId, 'calendar_event', 'Examen de matemáticas para el viernes', {\n        title: 'Examen de matemáticas',\n        date: '2025-07-25',\n        startTime: '10:00'\n    });\n    const pendingTasks = getPendingTasks(userId, sessionId);\n    return {\n        memoryPersistence: {\n            firstResponse: !!response1.content,\n            secondResponse: !!response2.content,\n            continuityScore: response2.continuityScore,\n            turnsAfterFirst,\n            turnsAfterSecond,\n            memoryWorking: turnsAfterSecond > turnsAfterFirst,\n            contextMaintained: response2.content.toLowerCase().includes('ecuaciones') || response2.content.toLowerCase().includes('matemáticas')\n        },\n        taskManagement: {\n            taskAdded: true,\n            pendingTasksCount: pendingTasks.length,\n            hasCalendarTask: pendingTasks.some((t)=>t.type === 'calendar_event'),\n            taskDetails: pendingTasks.length > 0 ? pendingTasks[0] : null\n        },\n        conversationData: {\n            sessionExists: !!session,\n            currentTopic: session?.currentTopic,\n            currentSubject: session?.currentSubject,\n            lastUpdate: session?.lastUpdate\n        }\n    };\n}\n/**\n * Test 2: Calendar Task Execution\n */ async function testCalendarExecution(userId, testMessage) {\n    console.log('📅 Testing calendar task execution...');\n    const { ContextualConversationManager } = __webpack_require__(/*! @/lib/contextual-conversation-manager */ \"(rsc)/./src/lib/contextual-conversation-manager.ts\");\n    // Test message that should trigger calendar creation\n    const calendarMessage = testMessage || \"Agrega un examen de química sobre reacciones químicas para el 25 de julio a las 9 AM en aula 104\";\n    console.log(`Sending calendar test message: \"${calendarMessage}\"`);\n    const response = await ContextualConversationManager.processContextualMessage(userId, calendarMessage, 'calendar-test-session', \"Estudiante Prueba\");\n    // Check if calendar task was handled\n    const wasCalendarTaskHandled = response.personalizations.includes('calendar_task_executed') || response.personalizations.includes('task_aware');\n    // Check response content for calendar confirmation\n    const hasCalendarConfirmation = response.content.toLowerCase().includes('calendario') || response.content.toLowerCase().includes('evento') || response.content.toLowerCase().includes('creado') || response.content.toLowerCase().includes('agregado');\n    return {\n        taskExecution: {\n            messageProcessed: !!response.content,\n            calendarTaskDetected: wasCalendarTaskHandled,\n            hasCalendarConfirmation,\n            responseLength: response.content.length,\n            personalizations: response.personalizations,\n            suggestedActions: response.suggestedFollowups\n        },\n        responseAnalysis: {\n            containsCalendarKeywords: hasCalendarConfirmation,\n            containsSuccessIndicators: response.content.toLowerCase().includes('✅') || response.content.toLowerCase().includes('perfecto') || response.content.toLowerCase().includes('creado'),\n            mentionsSpecificDetails: response.content.toLowerCase().includes('química') && response.content.toLowerCase().includes('25') && response.content.toLowerCase().includes('9')\n        },\n        fullResponse: response.content.substring(0, 300) + (response.content.length > 300 ? '...' : '')\n    };\n}\n/**\n * Test 3: Conversation Coherence Over Multiple Messages\n */ async function testConversationCoherence(userId, sessionId) {\n    console.log('💬 Testing conversation coherence...');\n    const { ContextualConversationManager } = __webpack_require__(/*! @/lib/contextual-conversation-manager */ \"(rsc)/./src/lib/contextual-conversation-manager.ts\");\n    // Simulate a 3-message conversation like the user's example\n    const messages = [\n        \"Sara, necesito ayuda con física, específicamente con cinemática\",\n        \"Explícame qué es el movimiento rectilíneo uniforme\",\n        \"¿Puedes darme ejemplos de la vida real?\"\n    ];\n    const responses = [];\n    let coherenceScores = [];\n    let contextMaintained = true;\n    for(let i = 0; i < messages.length; i++){\n        console.log(`Sending message ${i + 1}: \"${messages[i]}\"`);\n        const response = await ContextualConversationManager.processContextualMessage(userId, messages[i], sessionId, \"Estudiante Prueba\");\n        responses.push({\n            messageIndex: i + 1,\n            response: response.content.substring(0, 200) + '...',\n            continuityScore: response.continuityScore,\n            personalizations: response.personalizations,\n            contextSubject: response.context.currentSubject,\n            contextTopic: response.context.currentTopic\n        });\n        coherenceScores.push(response.continuityScore);\n        // Check if context is maintained\n        if (i > 0) {\n            const maintainsPhysics = response.content.toLowerCase().includes('física') || response.content.toLowerCase().includes('cinemática') || response.context.currentSubject === 'física';\n            if (!maintainsPhysics) {\n                contextMaintained = false;\n            }\n        }\n        // Small delay to simulate real conversation timing\n        await new Promise((resolve)=>setTimeout(resolve, 100));\n    }\n    const averageContinuityScore = coherenceScores.reduce((a, b)=>a + b, 0) / coherenceScores.length;\n    return {\n        conversationFlow: {\n            messagesProcessed: responses.length,\n            averageContinuityScore,\n            contextMaintained,\n            allResponsesGenerated: responses.every((r)=>r.response.length > 0),\n            subjectConsistency: responses.every((r)=>r.contextSubject === 'física' || r.contextSubject === responses[0].contextSubject)\n        },\n        detailedResponses: responses,\n        coherenceAnalysis: {\n            firstMessageCoherent: coherenceScores[0] >= 0.5,\n            secondMessageCoherent: coherenceScores[1] >= 0.6,\n            thirdMessageCoherent: coherenceScores[2] >= 0.7,\n            improvingCoherence: coherenceScores[2] > coherenceScores[0]\n        }\n    };\n}\n/**\n * Test 4: Full Integration Test\n */ async function fullIntegrationTest(userId) {\n    console.log('🎯 Running full integration test...');\n    // Test all systems together\n    const memoryTest = await testPersistentMemory(userId, 'integration-session');\n    const calendarTest = await testCalendarExecution(userId, \"Agrega una sesión de estudio de matemáticas para mañana a las 3 PM\");\n    const coherenceTest = await testConversationCoherence(userId, 'coherence-session');\n    const overallScore = (memoryTest.memoryPersistence.memoryWorking ? 25 : 0) + (memoryTest.taskManagement.hasCalendarTask ? 15 : 0) + (calendarTest.taskExecution.calendarTaskDetected ? 25 : 0) + (calendarTest.responseAnalysis.hasCalendarConfirmation ? 15 : 0) + (coherenceTest.conversationFlow.contextMaintained ? 20 : 0);\n    return {\n        overallScore: `${overallScore}/100`,\n        status: overallScore >= 85 ? 'EXCELLENT' : overallScore >= 70 ? 'GOOD' : overallScore >= 50 ? 'ACCEPTABLE' : 'NEEDS_IMPROVEMENT',\n        componentTests: {\n            memorySystem: memoryTest.memoryPersistence.memoryWorking,\n            taskManagement: memoryTest.taskManagement.hasCalendarTask,\n            calendarExecution: calendarTest.taskExecution.calendarTaskDetected,\n            calendarConfirmation: calendarTest.responseAnalysis.hasCalendarConfirmation,\n            conversationCoherence: coherenceTest.conversationFlow.contextMaintained\n        },\n        recommendations: overallScore < 85 ? [\n            overallScore < 50 ? 'Critical: Review persistent storage implementation' : null,\n            !calendarTest.taskExecution.calendarTaskDetected ? 'Fix calendar task detection' : null,\n            !coherenceTest.conversationFlow.contextMaintained ? 'Improve context management' : null,\n            !memoryTest.memoryPersistence.memoryWorking ? 'Debug conversation storage' : null\n        ].filter(Boolean) : [\n            'System working optimally'\n        ]\n    };\n}\n/**\n * Test 5: Memory State Inspection\n */ async function inspectMemoryState(userId, sessionId) {\n    console.log('🔍 Inspecting memory state...');\n    const { getConversationSession, getUserActiveSessions, tempConversations, getPendingTasks } = __webpack_require__(/*! @/lib/temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n    const session = getConversationSession(userId, sessionId);\n    const activeSessions = getUserActiveSessions(userId);\n    const pendingTasks = getPendingTasks(userId, sessionId);\n    return {\n        sessionInspection: {\n            sessionExists: !!session,\n            turnsCount: session?.turns?.length || 0,\n            currentTopic: session?.currentTopic,\n            currentSubject: session?.currentSubject,\n            lastUpdate: session?.lastUpdate,\n            pendingTasksCount: session?.pendingTasks?.length || 0\n        },\n        userSessions: {\n            activeSessionsCount: activeSessions.length,\n            sessionIds: activeSessions.map((s)=>s.sessionId),\n            totalTurnsAcrossSessions: activeSessions.reduce((sum, s)=>sum + s.turns.length, 0)\n        },\n        globalState: {\n            totalConversations: tempConversations.length,\n            uniqueUsers: [\n                ...new Set(tempConversations.map((c)=>c.userId))\n            ].length\n        },\n        pendingTasks: {\n            count: pendingTasks.length,\n            types: [\n                ...new Set(pendingTasks.map((t)=>t.type))\n            ],\n            details: pendingTasks.map((t)=>({\n                    id: t.id,\n                    type: t.type,\n                    description: t.description,\n                    completed: t.completed\n                }))\n        }\n    };\n}\nasync function GET(req) {\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        success: true,\n        message: 'Sara Memory Debug Endpoint',\n        availableActions: [\n            'test_persistent_memory',\n            'test_calendar_execution',\n            'test_conversation_coherence',\n            'full_integration_test',\n            'memory_inspection'\n        ],\n        instructions: 'Send a POST request with action, userId (optional), sessionId (optional), and message (for calendar tests)'\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/debug-sara-memory/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/advanced-learning-profiles.ts":
/*!***********************************************!*\
  !*** ./src/lib/advanced-learning-profiles.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdvancedLearningProfileManager: () => (/* binding */ AdvancedLearningProfileManager),\n/* harmony export */   LearningStyle: () => (/* binding */ LearningStyle)\n/* harmony export */ });\n// Advanced Learning Profiles System for Sara AI\n// Implements VARK model (Visual, Auditory, Reading/Writing, Kinesthetic) with automatic detection\nvar LearningStyle = /*#__PURE__*/ function(LearningStyle) {\n    LearningStyle[\"VISUAL\"] = \"visual\";\n    LearningStyle[\"AUDITORY\"] = \"auditory\";\n    LearningStyle[\"READING_WRITING\"] = \"reading_writing\";\n    LearningStyle[\"KINESTHETIC\"] = \"kinesthetic\";\n    LearningStyle[\"MULTIMODAL\"] = \"multimodal\";\n    return LearningStyle;\n}({});\nclass AdvancedLearningProfileManager {\n    static{\n        // Storage for learning profiles\n        this.profiles = new Map();\n    }\n    static{\n        this.behaviors = [];\n    }\n    /**\n   * Analyzes user message for learning style indicators\n   */ static analyzeMessageForLearningStyle(message, userId) {\n        const msgLower = message.toLowerCase();\n        const indicators = [];\n        // VISUAL indicators\n        const visualKeywords = [\n            'ver',\n            'mirar',\n            'mostrar',\n            'imagen',\n            'gráfico',\n            'diagrama',\n            'visual',\n            'color',\n            'mapa',\n            'esquema',\n            'dibujo',\n            'ilustración',\n            'tabla',\n            'gráfica',\n            'visualizar',\n            'observar',\n            'demostrar',\n            'ejemplo visual',\n            'claramente'\n        ];\n        const visualPhrases = [\n            'me gusta ver',\n            'muéstrame',\n            'qué aspecto tiene',\n            'cómo se ve',\n            'necesito ver',\n            'puedes mostrar',\n            'ejemplo visual',\n            'de forma gráfica'\n        ];\n        let visualScore = this.calculateKeywordScore(msgLower, visualKeywords, visualPhrases);\n        if (visualScore > 0) {\n            indicators.push({\n                style: \"visual\",\n                weight: visualScore,\n                evidence: this.extractEvidence(msgLower, [\n                    ...visualKeywords,\n                    ...visualPhrases\n                ]),\n                confidence: Math.min(visualScore * 1.2, 1.0)\n            });\n        }\n        // AUDITORY indicators\n        const auditoryKeywords = [\n            'escuchar',\n            'oír',\n            'sonido',\n            'explicar',\n            'decir',\n            'contar',\n            'discutir',\n            'hablar',\n            'verbal',\n            'audio',\n            'pronunciar',\n            'repetir',\n            'preguntar'\n        ];\n        const auditoryPhrases = [\n            'explícame',\n            'cuéntame',\n            'me puedes decir',\n            'necesito que me expliques',\n            'repítelo',\n            'en palabras',\n            'de forma verbal',\n            'hablemos de'\n        ];\n        let auditoryScore = this.calculateKeywordScore(msgLower, auditoryKeywords, auditoryPhrases);\n        if (auditoryScore > 0) {\n            indicators.push({\n                style: \"auditory\",\n                weight: auditoryScore,\n                evidence: this.extractEvidence(msgLower, [\n                    ...auditoryKeywords,\n                    ...auditoryPhrases\n                ]),\n                confidence: Math.min(auditoryScore * 1.1, 1.0)\n            });\n        }\n        // READING/WRITING indicators\n        const readWriteKeywords = [\n            'leer',\n            'escribir',\n            'texto',\n            'nota',\n            'lista',\n            'definición',\n            'resumen',\n            'apuntes',\n            'documento',\n            'artículo',\n            'párrafo',\n            'descripción',\n            'detalles'\n        ];\n        const readWritePhrases = [\n            'en texto',\n            'por escrito',\n            'dame detalles',\n            'necesito leer',\n            'quiero estudiar',\n            'información detallada',\n            'paso a paso',\n            'lista de'\n        ];\n        let readWriteScore = this.calculateKeywordScore(msgLower, readWriteKeywords, readWritePhrases);\n        if (readWriteScore > 0) {\n            indicators.push({\n                style: \"reading_writing\",\n                weight: readWriteScore,\n                evidence: this.extractEvidence(msgLower, [\n                    ...readWriteKeywords,\n                    ...readWritePhrases\n                ]),\n                confidence: Math.min(readWriteScore, 1.0)\n            });\n        }\n        // KINESTHETIC indicators\n        const kinestheticKeywords = [\n            'hacer',\n            'practicar',\n            'ejercicio',\n            'actividad',\n            'mano',\n            'tocar',\n            'mover',\n            'experimentar',\n            'probar',\n            'manipular',\n            'construir',\n            'crear',\n            'interactivo'\n        ];\n        const kinestheticPhrases = [\n            'quiero hacer',\n            'necesito practicar',\n            'hands on',\n            'de forma práctica',\n            'experimentando',\n            'probando',\n            'haciendo ejercicios',\n            'actividades'\n        ];\n        let kinestheticScore = this.calculateKeywordScore(msgLower, kinestheticKeywords, kinestheticPhrases);\n        if (kinestheticScore > 0) {\n            indicators.push({\n                style: \"kinesthetic\",\n                weight: kinestheticScore,\n                evidence: this.extractEvidence(msgLower, [\n                    ...kinestheticKeywords,\n                    ...kinestheticPhrases\n                ]),\n                confidence: Math.min(kinestheticScore * 1.3, 1.0)\n            });\n        }\n        // Record behavior pattern\n        if (indicators.length > 0) {\n            this.recordBehaviorPattern(userId, 'message_analysis', message, indicators.map((i)=>i.style));\n        }\n        return indicators.sort((a, b)=>b.weight - a.weight);\n    }\n    /**\n   * Calculates score based on keyword and phrase matches\n   */ static calculateKeywordScore(text, keywords, phrases) {\n        let score = 0;\n        // Keyword matches (lower weight)\n        for (const keyword of keywords){\n            if (text.includes(keyword)) {\n                score += 0.1;\n            }\n        }\n        // Phrase matches (higher weight)\n        for (const phrase of phrases){\n            if (text.includes(phrase)) {\n                score += 0.3;\n            }\n        }\n        return Math.min(score, 1.0);\n    }\n    /**\n   * Extracts evidence from text\n   */ static extractEvidence(text, patterns) {\n        const evidence = [];\n        for (const pattern of patterns){\n            if (text.includes(pattern)) {\n                // Extract sentence containing the pattern\n                const sentences = text.split(/[.!?]+/);\n                const matchingSentence = sentences.find((sentence)=>sentence.toLowerCase().includes(pattern));\n                if (matchingSentence) {\n                    evidence.push(matchingSentence.trim());\n                }\n            }\n        }\n        return evidence.slice(0, 3) // Limit to 3 pieces of evidence\n        ;\n    }\n    /**\n   * Records a learning behavior pattern\n   */ static recordBehaviorPattern(userId, action, context, styleIndicators) {\n        this.behaviors.push({\n            userId,\n            timestamp: new Date(),\n            action,\n            context,\n            styleIndicators\n        });\n        // Keep only recent behaviors (last 100 per user)\n        const userBehaviors = this.behaviors.filter((b)=>b.userId === userId);\n        if (userBehaviors.length > 100) {\n            this.behaviors = this.behaviors.filter((b)=>b.userId !== userId).concat(userBehaviors.slice(-100));\n        }\n    }\n    /**\n   * Updates or creates learning profile for user\n   */ static updateLearningProfile(userId, indicators, context) {\n        let profile = this.profiles.get(userId) || this.createInitialProfile(userId);\n        // Update style distribution based on new indicators\n        for (const indicator of indicators){\n            const weight = indicator.weight * indicator.confidence;\n            switch(indicator.style){\n                case \"visual\":\n                    profile.styleDistribution.visual = Math.min(profile.styleDistribution.visual + weight * 0.1, 1.0);\n                    break;\n                case \"auditory\":\n                    profile.styleDistribution.auditory = Math.min(profile.styleDistribution.auditory + weight * 0.1, 1.0);\n                    break;\n                case \"reading_writing\":\n                    profile.styleDistribution.reading_writing = Math.min(profile.styleDistribution.reading_writing + weight * 0.1, 1.0);\n                    break;\n                case \"kinesthetic\":\n                    profile.styleDistribution.kinesthetic = Math.min(profile.styleDistribution.kinesthetic + weight * 0.1, 1.0);\n                    break;\n            }\n        }\n        // Normalize distribution\n        const total = profile.styleDistribution.visual + profile.styleDistribution.auditory + profile.styleDistribution.reading_writing + profile.styleDistribution.kinesthetic;\n        if (total > 0) {\n            profile.styleDistribution.visual /= total;\n            profile.styleDistribution.auditory /= total;\n            profile.styleDistribution.reading_writing /= total;\n            profile.styleDistribution.kinesthetic /= total;\n        }\n        // Determine primary and secondary styles\n        const styles = [\n            {\n                style: \"visual\",\n                score: profile.styleDistribution.visual\n            },\n            {\n                style: \"auditory\",\n                score: profile.styleDistribution.auditory\n            },\n            {\n                style: \"reading_writing\",\n                score: profile.styleDistribution.reading_writing\n            },\n            {\n                style: \"kinesthetic\",\n                score: profile.styleDistribution.kinesthetic\n            }\n        ].sort((a, b)=>b.score - a.score);\n        profile.primaryStyle = styles[0].score > 0.35 ? styles[0].style : \"multimodal\";\n        profile.secondaryStyle = styles[1].score > 0.25 ? styles[1].style : undefined;\n        // Update adaptation preferences\n        profile.adaptationPreferences = {\n            prefersDiagrams: profile.styleDistribution.visual > 0.3,\n            prefersStepByStep: profile.styleDistribution.reading_writing > 0.3,\n            prefersExamples: profile.styleDistribution.visual > 0.25 || profile.styleDistribution.kinesthetic > 0.25,\n            prefersInteraction: profile.styleDistribution.kinesthetic > 0.3,\n            prefersVisualAids: profile.styleDistribution.visual > 0.25,\n            prefersVerbalExplanation: profile.styleDistribution.auditory > 0.3\n        };\n        profile.lastUpdated = new Date();\n        profile.interactions++;\n        this.profiles.set(userId, profile);\n        console.log(`📊 Learning profile updated for ${userId}: Primary=${profile.primaryStyle}, Secondary=${profile.secondaryStyle || 'none'}`);\n        return profile;\n    }\n    /**\n   * Creates initial learning profile\n   */ static createInitialProfile(userId) {\n        return {\n            userId,\n            primaryStyle: \"multimodal\",\n            secondaryStyle: undefined,\n            styleDistribution: {\n                visual: 0.25,\n                auditory: 0.25,\n                reading_writing: 0.25,\n                kinesthetic: 0.25\n            },\n            adaptationPreferences: {\n                prefersDiagrams: false,\n                prefersStepByStep: true,\n                prefersExamples: true,\n                prefersInteraction: false,\n                prefersVisualAids: false,\n                prefersVerbalExplanation: false\n            },\n            detectedFrom: {\n                messageAnalysis: 0,\n                behaviorPatterns: 0,\n                explicitPreferences: 0\n            },\n            lastUpdated: new Date(),\n            interactions: 0\n        };\n    }\n    /**\n   * Gets learning profile for user\n   */ static getLearningProfile(userId) {\n        return this.profiles.get(userId) || this.createInitialProfile(userId);\n    }\n    /**\n   * Adapts response content based on learning profile\n   */ static adaptResponseToLearningStyle(content, profile) {\n        let adaptedContent = content;\n        // Visual learner adaptations\n        if (profile.adaptationPreferences.prefersVisualAids) {\n            adaptedContent = this.addVisualElements(adaptedContent, profile);\n        }\n        // Auditory learner adaptations\n        if (profile.adaptationPreferences.prefersVerbalExplanation) {\n            adaptedContent = this.addAuditoryElements(adaptedContent, profile);\n        }\n        // Reading/Writing learner adaptations\n        if (profile.adaptationPreferences.prefersStepByStep) {\n            adaptedContent = this.addStructuredElements(adaptedContent, profile);\n        }\n        // Kinesthetic learner adaptations\n        if (profile.adaptationPreferences.prefersInteraction) {\n            adaptedContent = this.addInteractiveElements(adaptedContent, profile);\n        }\n        return adaptedContent;\n    }\n    /**\n   * Adds visual elements for visual learners\n   */ static addVisualElements(content, profile) {\n        let enhanced = content;\n        // Add visual cues and formatting\n        enhanced = enhanced.replace(/importante:/gi, '🔍 **IMPORTANTE:**');\n        enhanced = enhanced.replace(/nota:/gi, '📝 **NOTA:**');\n        enhanced = enhanced.replace(/ejemplo:/gi, '💡 **EJEMPLO:**');\n        enhanced = enhanced.replace(/resultado:/gi, '✅ **RESULTADO:**');\n        // Add visual separators\n        if (enhanced.includes('paso') || enhanced.includes('step')) {\n            enhanced = enhanced.replace(/paso (\\d+)/gi, '\\n📍 **PASO $1**\\n');\n        }\n        return enhanced;\n    }\n    /**\n   * Adds auditory elements for auditory learners  \n   */ static addAuditoryElements(content, profile) {\n        let enhanced = content;\n        // Add conversational phrases\n        enhanced = \"🗣️ Te voy a explicar esto paso a paso:\\n\\n\" + enhanced;\n        // Add verbal transition phrases\n        enhanced = enhanced.replace(/\\. ([A-Z])/g, '. Ahora, $1');\n        enhanced = enhanced.replace(/:\\n/g, '. Escucha bien:\\n');\n        return enhanced;\n    }\n    /**\n   * Adds structured elements for reading/writing learners\n   */ static addStructuredElements(content, profile) {\n        let enhanced = content;\n        // Add clear structure and bullet points\n        if (!enhanced.includes('**') && enhanced.length > 200) {\n            const sentences = enhanced.split('.');\n            if (sentences.length > 3) {\n                enhanced = sentences.filter((s)=>s.trim().length > 10).map((sentence, index)=>`${index + 1}. ${sentence.trim()}`).join('\\n');\n            }\n        }\n        return enhanced;\n    }\n    /**\n   * Adds interactive elements for kinesthetic learners\n   */ static addInteractiveElements(content, profile) {\n        let enhanced = content;\n        // Add action-oriented language\n        enhanced += \"\\n\\n🎯 **Prueba esto:**\";\n        enhanced += \"\\n• Aplica este concepto a un problema real\";\n        enhanced += \"\\n• Experimenta cambiando los valores\";\n        enhanced += \"\\n• Practica con ejercicios similares\";\n        return enhanced;\n    }\n    /**\n   * Analyzes behavior patterns to enhance profile\n   */ static analyzeBehaviorPatterns(userId) {\n        const userBehaviors = this.behaviors.filter((b)=>b.userId === userId);\n        const profile = this.getLearningProfile(userId);\n        if (userBehaviors.length < 5) return profile;\n        // Analyze patterns in recent behaviors\n        const recentBehaviors = userBehaviors.slice(-20);\n        const styleFrequency = new Map();\n        for (const behavior of recentBehaviors){\n            for (const style of behavior.styleIndicators){\n                styleFrequency.set(style, (styleFrequency.get(style) || 0) + 1);\n            }\n        }\n        // Update profile based on behavioral patterns\n        const indicators = [];\n        for (const [style, frequency] of styleFrequency.entries()){\n            const weight = frequency / recentBehaviors.length;\n            if (weight > 0.1) {\n                indicators.push({\n                    style,\n                    weight,\n                    evidence: [\n                        `Detectado en ${frequency} de ${recentBehaviors.length} interacciones recientes`\n                    ],\n                    confidence: Math.min(weight * 2, 1.0)\n                });\n            }\n        }\n        return this.updateLearningProfile(userId, indicators, 'behavior_analysis');\n    }\n    /**\n   * Gets profile statistics\n   */ static getProfileStatistics(userId) {\n        if (userId) {\n            const profile = this.profiles.get(userId);\n            const behaviors = this.behaviors.filter((b)=>b.userId === userId);\n            return {\n                profile: profile || null,\n                behaviorCount: behaviors.length,\n                recentInteractions: behaviors.filter((b)=>b.timestamp > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)).length\n            };\n        }\n        return {\n            totalProfiles: this.profiles.size,\n            totalBehaviors: this.behaviors.length,\n            styleDistribution: this.getGlobalStyleDistribution()\n        };\n    }\n    /**\n   * Gets global style distribution\n   */ static getGlobalStyleDistribution() {\n        const distribution = {\n            visual: 0,\n            auditory: 0,\n            reading_writing: 0,\n            kinesthetic: 0,\n            multimodal: 0\n        };\n        for (const profile of this.profiles.values()){\n            switch(profile.primaryStyle){\n                case \"visual\":\n                    distribution.visual++;\n                    break;\n                case \"auditory\":\n                    distribution.auditory++;\n                    break;\n                case \"reading_writing\":\n                    distribution.reading_writing++;\n                    break;\n                case \"kinesthetic\":\n                    distribution.kinesthetic++;\n                    break;\n                case \"multimodal\":\n                    distribution.multimodal++;\n                    break;\n            }\n        }\n        return distribution;\n    }\n    /**\n   * Process user message and update learning profile\n   */ static processUserMessage(userId, message) {\n        // Analyze message for learning style indicators\n        const indicators = this.analyzeMessageForLearningStyle(message, userId);\n        // Update learning profile if indicators found\n        if (indicators.length > 0) {\n            return this.updateLearningProfile(userId, indicators, 'message_processing');\n        }\n        // Analyze behavior patterns periodically\n        const profile = this.getLearningProfile(userId);\n        if (profile.interactions % 10 === 0) {\n            return this.analyzeBehaviorPatterns(userId);\n        }\n        return profile;\n    }\n    /**\n   * Generates learning style recommendations for Sara\n   */ static generateStyleRecommendations(profile) {\n        const recommendations = [];\n        switch(profile.primaryStyle){\n            case \"visual\":\n                recommendations.push(\"Usar diagramas y esquemas cuando explico conceptos\");\n                recommendations.push(\"Incluir ejemplos visuales y gráficos\");\n                recommendations.push(\"Estructurar información con viñetas y colores\");\n                break;\n            case \"auditory\":\n                recommendations.push(\"Explicar conceptos con lenguaje conversacional\");\n                recommendations.push(\"Usar analogías y metáforas verbales\");\n                recommendations.push(\"Incluir discusiones y preguntas abiertas\");\n                break;\n            case \"reading_writing\":\n                recommendations.push(\"Proporcionar información detallada por escrito\");\n                recommendations.push(\"Crear listas y resúmenes estructurados\");\n                recommendations.push(\"Incluir definiciones y descripciones precisas\");\n                break;\n            case \"kinesthetic\":\n                recommendations.push(\"Incluir ejercicios prácticos y actividades\");\n                recommendations.push(\"Sugerir experimentos y aplicaciones reales\");\n                recommendations.push(\"Usar ejemplos concretos y manipulables\");\n                break;\n            case \"multimodal\":\n                recommendations.push(\"Combinar múltiples enfoques de enseñanza\");\n                recommendations.push(\"Adaptar explicaciones según el contexto\");\n                recommendations.push(\"Ofrecer opciones de aprendizaje variadas\");\n                break;\n        }\n        return recommendations;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/advanced-learning-profiles.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/ai-providers.ts":
/*!*********************************!*\
  !*** ./src/lib/ai-providers.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIProvider: () => (/* binding */ AIProvider),\n/* harmony export */   AIProviderFactory: () => (/* binding */ AIProviderFactory),\n/* harmony export */   AIService: () => (/* binding */ AIService),\n/* harmony export */   AI_CONFIG: () => (/* binding */ AI_CONFIG),\n/* harmony export */   BaseAIProvider: () => (/* binding */ BaseAIProvider),\n/* harmony export */   GoogleGeminiProvider: () => (/* binding */ GoogleGeminiProvider),\n/* harmony export */   GroqProvider: () => (/* binding */ GroqProvider),\n/* harmony export */   HuggingFaceProvider: () => (/* binding */ HuggingFaceProvider),\n/* harmony export */   OllamaProvider: () => (/* binding */ OllamaProvider),\n/* harmony export */   TemplateProvider: () => (/* binding */ TemplateProvider),\n/* harmony export */   TransformersJSProvider: () => (/* binding */ TransformersJSProvider),\n/* harmony export */   aiService: () => (/* binding */ aiService)\n/* harmony export */ });\n// AI Providers Configuration\n// Supports multiple AI providers with fallback system\nvar AIProvider = /*#__PURE__*/ function(AIProvider) {\n    AIProvider[\"GOOGLE_GEMINI\"] = \"google_gemini\";\n    AIProvider[\"GROQ\"] = \"groq\";\n    AIProvider[\"HUGGING_FACE\"] = \"huggingface\";\n    AIProvider[\"OLLAMA_LOCAL\"] = \"ollama_local\";\n    AIProvider[\"TRANSFORMERS_JS\"] = \"transformers_js\";\n    AIProvider[\"TEMPLATES_ONLY\"] = \"templates_only\";\n    return AIProvider;\n}({});\n// Default configuration - Groq first for ultra-fast responses\nconst AI_CONFIG = [\n    {\n        provider: \"groq\",\n        apiKey: process.env.GROQ_API_KEY,\n        baseUrl: 'https://api.groq.com/openai/v1',\n        model: 'llama-3.3-70b-versatile',\n        enabled: !!process.env.GROQ_API_KEY\n    },\n    {\n        provider: \"google_gemini\",\n        apiKey: process.env.GOOGLE_AI_API_KEY,\n        model: 'gemini-1.5-flash',\n        enabled: !!process.env.GOOGLE_AI_API_KEY\n    },\n    {\n        provider: \"huggingface\",\n        apiKey: process.env.HUGGING_FACE_API_KEY,\n        baseUrl: 'https://api-inference.huggingface.co/models',\n        model: 'microsoft/DialoGPT-large',\n        enabled: !!process.env.HUGGING_FACE_API_KEY\n    },\n    {\n        provider: \"ollama_local\",\n        baseUrl: process.env.OLLAMA_URL || 'http://localhost:11434',\n        model: process.env.OLLAMA_MODEL || 'llama3.1:8b',\n        enabled: process.env.OLLAMA_ENABLED === 'true'\n    },\n    {\n        provider: \"transformers_js\",\n        enabled: process.env.TRANSFORMERS_JS_ENABLED === 'true'\n    },\n    {\n        provider: \"templates_only\",\n        enabled: true // Always available as final fallback\n    }\n];\n// Abstract AI Provider Interface\nclass BaseAIProvider {\n    constructor(config){\n        this.config = config;\n    }\n}\n// Google Gemini Provider\nclass GoogleGeminiProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        if (!this.config.apiKey) {\n            throw new Error('Google AI API key not configured');\n        }\n        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${this.config.model}:generateContent?key=${this.config.apiKey}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig: {\n                    temperature: 0.7,\n                    topK: 1,\n                    topP: 1,\n                    maxOutputTokens: 500\n                }\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`Google AI API error: ${response.status}`);\n        }\n        const data = await response.json();\n        return data.candidates[0]?.content?.parts[0]?.text || 'Error generating content';\n    }\n    async isAvailable() {\n        return !!this.config.apiKey;\n    }\n}\n// Hugging Face Provider\nclass HuggingFaceProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        if (!this.config.apiKey) {\n            throw new Error('Hugging Face API key not configured');\n        }\n        const response = await fetch(`${this.config.baseUrl}/${this.config.model}`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${this.config.apiKey}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                inputs: prompt,\n                parameters: {\n                    max_new_tokens: 300,\n                    temperature: 0.7,\n                    return_full_text: false\n                }\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`Hugging Face API error: ${response.status}`);\n        }\n        const data = await response.json();\n        return data[0]?.generated_text || 'Error generating content';\n    }\n    async isAvailable() {\n        return !!this.config.apiKey;\n    }\n}\n// Ollama Local Provider\nclass OllamaProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        try {\n            const response = await fetch(`${this.config.baseUrl}/api/generate`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    model: this.config.model,\n                    prompt: prompt,\n                    stream: false,\n                    options: {\n                        temperature: 0.7,\n                        num_predict: 300\n                    }\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Ollama API error: ${response.status}`);\n            }\n            const data = await response.json();\n            return data.response || 'Error generating content';\n        } catch (error) {\n            throw new Error(`Ollama connection failed: ${error}`);\n        }\n    }\n    async isAvailable() {\n        try {\n            const response = await fetch(`${this.config.baseUrl}/api/version`, {\n                method: 'GET',\n                signal: AbortSignal.timeout(3000) // 3 second timeout\n            });\n            return response.ok;\n        } catch  {\n            return false;\n        }\n    }\n}\n// Transformers.js Provider (Browser-based)\nclass TransformersJSProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        if (!this.pipeline) {\n            const { pipeline } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @xenova/transformers */ \"@xenova/transformers\"));\n            this.pipeline = await pipeline('text-generation', 'Xenova/gpt2');\n        }\n        const result = await this.pipeline(prompt, {\n            max_new_tokens: 150,\n            temperature: 0.7\n        });\n        return result[0]?.generated_text?.replace(prompt, '').trim() || 'Error generating content';\n    }\n    async isAvailable() {\n        try {\n            await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @xenova/transformers */ \"@xenova/transformers\"));\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    constructor(...args){\n        super(...args), this.pipeline = null;\n    }\n}\n// Groq Provider\nclass GroqProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        if (!this.config.apiKey) {\n            throw new Error('Groq API key not configured');\n        }\n        const response = await fetch(`${this.config.baseUrl}/chat/completions`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${this.config.apiKey}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                model: this.config.model,\n                messages: [\n                    {\n                        role: 'system',\n                        content: 'Eres Sara, un asistente personal académico especializado en ayudar a estudiantes con organización, planificación y aprendizaje. Responde de manera clara, práctica y motivacional.'\n                    },\n                    {\n                        role: 'user',\n                        content: prompt\n                    }\n                ],\n                temperature: 0.7,\n                max_tokens: 500,\n                top_p: 0.9\n            })\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            throw new Error(`Groq API error (${response.status}): ${errorData}`);\n        }\n        const data = await response.json();\n        return data.choices[0]?.message?.content || 'Error generating content';\n    }\n    async isAvailable() {\n        if (!this.config.apiKey) return false;\n        try {\n            const response = await fetch(`${this.config.baseUrl}/models`, {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${this.config.apiKey}`\n                },\n                signal: AbortSignal.timeout(5000) // 5 second timeout\n            });\n            return response.ok;\n        } catch  {\n            return false;\n        }\n    }\n}\n// Template Provider (Always Available Fallback)\nclass TemplateProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        // This will use the existing template system\n        return 'TEMPLATE_FALLBACK';\n    }\n    async isAvailable() {\n        return true;\n    }\n}\n// Provider Factory\nclass AIProviderFactory {\n    static createProvider(config) {\n        switch(config.provider){\n            case \"google_gemini\":\n                return new GoogleGeminiProvider(config);\n            case \"groq\":\n                return new GroqProvider(config);\n            case \"huggingface\":\n                return new HuggingFaceProvider(config);\n            case \"ollama_local\":\n                return new OllamaProvider(config);\n            case \"transformers_js\":\n                return new TransformersJSProvider(config);\n            case \"templates_only\":\n                return new TemplateProvider(config);\n            default:\n                throw new Error(`Unknown AI provider: ${config.provider}`);\n        }\n    }\n}\n// Main AI Service with Fallback System\nclass AIService {\n    constructor(){\n        this.providers = [];\n        this.currentProviderIndex = 0;\n        this.initializeProviders();\n    }\n    initializeProviders() {\n        this.providers = AI_CONFIG.filter((config)=>config.enabled).map((config)=>AIProviderFactory.createProvider(config));\n    }\n    async generateExercise(prompt) {\n        for(let i = this.currentProviderIndex; i < this.providers.length; i++){\n            const provider = this.providers[i];\n            try {\n                const isAvailable = await provider.isAvailable();\n                if (!isAvailable) {\n                    console.log(`Provider ${i} not available, trying next...`);\n                    continue;\n                }\n                const result = await provider.generateExercise(prompt);\n                if (result === 'TEMPLATE_FALLBACK') {\n                    return result // Special marker for template system\n                    ;\n                }\n                if (result && result.length > 10) {\n                    this.currentProviderIndex = i // Remember working provider\n                    ;\n                    return result;\n                }\n            } catch (error) {\n                console.error(`Provider ${i} failed:`, error);\n                continue;\n            }\n        }\n        // If all providers fail, return template fallback marker\n        return 'TEMPLATE_FALLBACK';\n    }\n    async getAvailableProviders() {\n        const available = [];\n        for(let i = 0; i < this.providers.length; i++){\n            try {\n                const isAvailable = await this.providers[i].isAvailable();\n                if (isAvailable) {\n                    available.push(AI_CONFIG[i].provider);\n                }\n            } catch  {\n            // Provider not available\n            }\n        }\n        return available;\n    }\n}\n// Export singleton instance\nconst aiService = new AIService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/ai-providers.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/auth.ts":
/*!*************************!*\
  !*** ./src/lib/auth.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/providers/credentials */ \"(rsc)/./node_modules/next-auth/providers/credentials.js\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var _hybrid_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hybrid-storage */ \"(rsc)/./src/lib/hybrid-storage.ts\");\n\n\n\nconst authOptions = {\n    providers: [\n        (0,next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            name: \"credentials\",\n            credentials: {\n                email: {\n                    label: \"Email\",\n                    type: \"email\"\n                },\n                password: {\n                    label: \"Password\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials) {\n                if (!credentials?.email || !credentials?.password) {\n                    return null;\n                }\n                // Find user in database\n                const user = await (0,_hybrid_storage__WEBPACK_IMPORTED_MODULE_2__.findUserByEmail)(credentials.email);\n                if (!user || !user.password) {\n                    return null;\n                }\n                const isPasswordValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].compare(credentials.password, user.password);\n                if (!isPasswordValid) {\n                    return null;\n                }\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.name,\n                    role: user.role,\n                    studentId: user.studentId || undefined\n                };\n            }\n        })\n    ],\n    session: {\n        strategy: \"jwt\"\n    },\n    callbacks: {\n        async jwt ({ token, user }) {\n            if (user) {\n                token.role = user.role;\n                token.studentId = user.studentId;\n            }\n            return token;\n        },\n        async session ({ session, token }) {\n            if (token) {\n                session.user.id = token.sub;\n                session.user.role = token.role;\n                session.user.studentId = token.studentId;\n            }\n            return session;\n        },\n        async redirect ({ url, baseUrl }) {\n            // Handle internal redirects\n            if (url.startsWith(\"/\")) return `${baseUrl}${url}`;\n            else if (new URL(url).origin === baseUrl) return url;\n            // Default to home page for external redirects\n            return baseUrl;\n        },\n        async signIn ({ user, account, profile }) {\n            return true;\n        }\n    },\n    pages: {\n        signIn: \"/auth/signin\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2F1dGgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNpRTtBQUNwQztBQUNxQjtBQUUzQyxNQUFNRyxjQUErQjtJQUMxQ0MsV0FBVztRQUNUSiwyRUFBbUJBLENBQUM7WUFDbEJLLE1BQU07WUFDTkMsYUFBYTtnQkFDWEMsT0FBTztvQkFBRUMsT0FBTztvQkFBU0MsTUFBTTtnQkFBUTtnQkFDdkNDLFVBQVU7b0JBQUVGLE9BQU87b0JBQVlDLE1BQU07Z0JBQVc7WUFDbEQ7WUFDQSxNQUFNRSxXQUFVTCxXQUFXO2dCQUN6QixJQUFJLENBQUNBLGFBQWFDLFNBQVMsQ0FBQ0QsYUFBYUksVUFBVTtvQkFDakQsT0FBTztnQkFDVDtnQkFFQSx3QkFBd0I7Z0JBQ3hCLE1BQU1FLE9BQU8sTUFBTVYsZ0VBQWVBLENBQUNJLFlBQVlDLEtBQUs7Z0JBRXBELElBQUksQ0FBQ0ssUUFBUSxDQUFDQSxLQUFLRixRQUFRLEVBQUU7b0JBQzNCLE9BQU87Z0JBQ1Q7Z0JBRUEsTUFBTUcsa0JBQWtCLE1BQU1aLHdEQUFjLENBQzFDSyxZQUFZSSxRQUFRLEVBQ3BCRSxLQUFLRixRQUFRO2dCQUdmLElBQUksQ0FBQ0csaUJBQWlCO29CQUNwQixPQUFPO2dCQUNUO2dCQUVBLE9BQU87b0JBQ0xFLElBQUlILEtBQUtHLEVBQUU7b0JBQ1hSLE9BQU9LLEtBQUtMLEtBQUs7b0JBQ2pCRixNQUFNTyxLQUFLUCxJQUFJO29CQUNmVyxNQUFNSixLQUFLSSxJQUFJO29CQUNmQyxXQUFXTCxLQUFLSyxTQUFTLElBQUlDO2dCQUMvQjtZQUNGO1FBQ0Y7S0FDRDtJQUNEQyxTQUFTO1FBQ1BDLFVBQVU7SUFDWjtJQUNBQyxXQUFXO1FBQ1QsTUFBTUMsS0FBSSxFQUFFQyxLQUFLLEVBQUVYLElBQUksRUFBRTtZQUN2QixJQUFJQSxNQUFNO2dCQUNSVyxNQUFNUCxJQUFJLEdBQUdKLEtBQUtJLElBQUk7Z0JBQ3RCTyxNQUFNTixTQUFTLEdBQUdMLEtBQUtLLFNBQVM7WUFDbEM7WUFDQSxPQUFPTTtRQUNUO1FBQ0EsTUFBTUosU0FBUSxFQUFFQSxPQUFPLEVBQUVJLEtBQUssRUFBRTtZQUM5QixJQUFJQSxPQUFPO2dCQUNUSixRQUFRUCxJQUFJLENBQUNHLEVBQUUsR0FBR1EsTUFBTUMsR0FBRztnQkFDM0JMLFFBQVFQLElBQUksQ0FBQ0ksSUFBSSxHQUFHTyxNQUFNUCxJQUFJO2dCQUM5QkcsUUFBUVAsSUFBSSxDQUFDSyxTQUFTLEdBQUdNLE1BQU1OLFNBQVM7WUFDMUM7WUFDQSxPQUFPRTtRQUNUO1FBQ0EsTUFBTU0sVUFBUyxFQUFFQyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtZQUM3Qiw0QkFBNEI7WUFDNUIsSUFBSUQsSUFBSUUsVUFBVSxDQUFDLE1BQU0sT0FBTyxHQUFHRCxVQUFVRCxLQUFLO2lCQUM3QyxJQUFJLElBQUlHLElBQUlILEtBQUtJLE1BQU0sS0FBS0gsU0FBUyxPQUFPRDtZQUVqRCw4Q0FBOEM7WUFDOUMsT0FBT0M7UUFDVDtRQUNBLE1BQU1JLFFBQU8sRUFBRW5CLElBQUksRUFBRW9CLE9BQU8sRUFBRUMsT0FBTyxFQUFFO1lBQ3JDLE9BQU87UUFDVDtJQUNGO0lBQ0FDLE9BQU87UUFDTEgsUUFBUTtJQUNWO0FBQ0YsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL3JvZHJpZ29kaWJlcm5hcmRvMzNnbWFpbC5jb20vRG9jdW1lbnRzL0FwcCBEZXZlbG9wbWVudCBQcm95ZWN0cy9JbnRlbGxlZ28gUGxhdGZvcm0vc3JjL2xpYi9hdXRoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBdXRoT3B0aW9ucyB9IGZyb20gXCJuZXh0LWF1dGhcIlxuaW1wb3J0IENyZWRlbnRpYWxzUHJvdmlkZXIgZnJvbSBcIm5leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHNcIlxuaW1wb3J0IGJjcnlwdCBmcm9tIFwiYmNyeXB0anNcIlxuaW1wb3J0IHsgZmluZFVzZXJCeUVtYWlsIH0gZnJvbSBcIi4vaHlicmlkLXN0b3JhZ2VcIlxuXG5leHBvcnQgY29uc3QgYXV0aE9wdGlvbnM6IE5leHRBdXRoT3B0aW9ucyA9IHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgQ3JlZGVudGlhbHNQcm92aWRlcih7XG4gICAgICBuYW1lOiBcImNyZWRlbnRpYWxzXCIsXG4gICAgICBjcmVkZW50aWFsczoge1xuICAgICAgICBlbWFpbDogeyBsYWJlbDogXCJFbWFpbFwiLCB0eXBlOiBcImVtYWlsXCIgfSxcbiAgICAgICAgcGFzc3dvcmQ6IHsgbGFiZWw6IFwiUGFzc3dvcmRcIiwgdHlwZTogXCJwYXNzd29yZFwiIH1cbiAgICAgIH0sXG4gICAgICBhc3luYyBhdXRob3JpemUoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscz8uZW1haWwgfHwgIWNyZWRlbnRpYWxzPy5wYXNzd29yZCkge1xuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kIHVzZXIgaW4gZGF0YWJhc2VcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IGZpbmRVc2VyQnlFbWFpbChjcmVkZW50aWFscy5lbWFpbClcblxuICAgICAgICBpZiAoIXVzZXIgfHwgIXVzZXIucGFzc3dvcmQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUoXG4gICAgICAgICAgY3JlZGVudGlhbHMucGFzc3dvcmQsXG4gICAgICAgICAgdXNlci5wYXNzd29yZFxuICAgICAgICApXG5cbiAgICAgICAgaWYgKCFpc1Bhc3N3b3JkVmFsaWQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogdXNlci5pZCxcbiAgICAgICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgICAgICBuYW1lOiB1c2VyLm5hbWUsXG4gICAgICAgICAgcm9sZTogdXNlci5yb2xlLFxuICAgICAgICAgIHN0dWRlbnRJZDogdXNlci5zdHVkZW50SWQgfHwgdW5kZWZpbmVkLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgXSxcbiAgc2Vzc2lvbjoge1xuICAgIHN0cmF0ZWd5OiBcImp3dFwiLFxuICB9LFxuICBjYWxsYmFja3M6IHtcbiAgICBhc3luYyBqd3QoeyB0b2tlbiwgdXNlciB9KSB7XG4gICAgICBpZiAodXNlcikge1xuICAgICAgICB0b2tlbi5yb2xlID0gdXNlci5yb2xlXG4gICAgICAgIHRva2VuLnN0dWRlbnRJZCA9IHVzZXIuc3R1ZGVudElkXG4gICAgICB9XG4gICAgICByZXR1cm4gdG9rZW5cbiAgICB9LFxuICAgIGFzeW5jIHNlc3Npb24oeyBzZXNzaW9uLCB0b2tlbiB9KSB7XG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgc2Vzc2lvbi51c2VyLmlkID0gdG9rZW4uc3ViIVxuICAgICAgICBzZXNzaW9uLnVzZXIucm9sZSA9IHRva2VuLnJvbGUgYXMgc3RyaW5nXG4gICAgICAgIHNlc3Npb24udXNlci5zdHVkZW50SWQgPSB0b2tlbi5zdHVkZW50SWQgYXMgc3RyaW5nXG4gICAgICB9XG4gICAgICByZXR1cm4gc2Vzc2lvblxuICAgIH0sXG4gICAgYXN5bmMgcmVkaXJlY3QoeyB1cmwsIGJhc2VVcmwgfSkge1xuICAgICAgLy8gSGFuZGxlIGludGVybmFsIHJlZGlyZWN0c1xuICAgICAgaWYgKHVybC5zdGFydHNXaXRoKFwiL1wiKSkgcmV0dXJuIGAke2Jhc2VVcmx9JHt1cmx9YFxuICAgICAgZWxzZSBpZiAobmV3IFVSTCh1cmwpLm9yaWdpbiA9PT0gYmFzZVVybCkgcmV0dXJuIHVybFxuICAgICAgXG4gICAgICAvLyBEZWZhdWx0IHRvIGhvbWUgcGFnZSBmb3IgZXh0ZXJuYWwgcmVkaXJlY3RzXG4gICAgICByZXR1cm4gYmFzZVVybFxuICAgIH0sXG4gICAgYXN5bmMgc2lnbkluKHsgdXNlciwgYWNjb3VudCwgcHJvZmlsZSB9KSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfSxcbiAgcGFnZXM6IHtcbiAgICBzaWduSW46IFwiL2F1dGgvc2lnbmluXCIsXG4gIH0sXG59Il0sIm5hbWVzIjpbIkNyZWRlbnRpYWxzUHJvdmlkZXIiLCJiY3J5cHQiLCJmaW5kVXNlckJ5RW1haWwiLCJhdXRoT3B0aW9ucyIsInByb3ZpZGVycyIsIm5hbWUiLCJjcmVkZW50aWFscyIsImVtYWlsIiwibGFiZWwiLCJ0eXBlIiwicGFzc3dvcmQiLCJhdXRob3JpemUiLCJ1c2VyIiwiaXNQYXNzd29yZFZhbGlkIiwiY29tcGFyZSIsImlkIiwicm9sZSIsInN0dWRlbnRJZCIsInVuZGVmaW5lZCIsInNlc3Npb24iLCJzdHJhdGVneSIsImNhbGxiYWNrcyIsImp3dCIsInRva2VuIiwic3ViIiwicmVkaXJlY3QiLCJ1cmwiLCJiYXNlVXJsIiwic3RhcnRzV2l0aCIsIlVSTCIsIm9yaWdpbiIsInNpZ25JbiIsImFjY291bnQiLCJwcm9maWxlIiwicGFnZXMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/auth.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/calendar-ai-integration.ts":
/*!********************************************!*\
  !*** ./src/lib/calendar-ai-integration.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AICalendarIntegration: () => (/* binding */ AICalendarIntegration),\n/* harmony export */   analyzeConversationForEvents: () => (/* binding */ analyzeConversationForEvents),\n/* harmony export */   convertSuggestionToCalendarEvent: () => (/* binding */ convertSuggestionToCalendarEvent),\n/* harmony export */   createEventFromAI: () => (/* binding */ createEventFromAI),\n/* harmony export */   deleteEventFromAI: () => (/* binding */ deleteEventFromAI),\n/* harmony export */   editEventFromAI: () => (/* binding */ editEventFromAI),\n/* harmony export */   findUserEvents: () => (/* binding */ findUserEvents),\n/* harmony export */   generateEventQuestions: () => (/* binding */ generateEventQuestions),\n/* harmony export */   generateEventSuggestionResponse: () => (/* binding */ generateEventSuggestionResponse)\n/* harmony export */ });\n/* harmony import */ var _calendar_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n// Calendar AI Integration Service\n// Integra el sistema de IA tutora con el calendario para crear eventos automáticamente\n\n/**\n * Analiza una conversación con la IA para detectar menciones de eventos\n */ function analyzeConversationForEvents(conversationHistory) {\n    const userMessages = conversationHistory.filter((msg)=>msg.role === 'user').map((msg)=>msg.content).join(' ');\n    const analysis = {\n        hasEventMention: false,\n        eventSuggestions: [],\n        questions: [],\n        missingInfo: []\n    };\n    // Análisis más inteligente del último mensaje del usuario\n    const lastUserMessage = conversationHistory.length > 0 ? conversationHistory[conversationHistory.length - 1]?.content || userMessages : userMessages;\n    const msgLower = lastUserMessage.toLowerCase();\n    // Detectar intención de agendar/crear evento\n    const agendarPatterns = /agendes?|agend[aá]|cre[ae]|programa|anot[ae]|agrega/i;\n    const isRequestingToSchedule = agendarPatterns.test(lastUserMessage);\n    // Detectar intención de editar evento\n    const editarPatterns = /edit[ae]|modific[ae]|cambi[ae]|actualiz[ae]|reprograma/i;\n    const isRequestingToEdit = editarPatterns.test(lastUserMessage);\n    // Detectar intención de eliminar evento\n    const eliminarPatterns = /elimin[ae]|borr[ae]|quit[ae]|cancel[ae]|suprimi/i;\n    const isRequestingToDelete = eliminarPatterns.test(lastUserMessage);\n    // Detectar menciones de exámenes con mejor parsing\n    if (/(examen|evaluaci[oó]n|parcial|final|prueba|test)/i.test(lastUserMessage)) {\n        const eventData = extractEventDataFromMessage(lastUserMessage, 'exam');\n        if (eventData.hasEvent) {\n            // Normalizar subject con acentos correctos\n            const normalizedSubject = normalizeSubjectName(eventData.subject);\n            analysis.eventSuggestions.push({\n                type: 'exam',\n                title: normalizedSubject ? `Examen de ${normalizedSubject}` : 'Examen',\n                subject: normalizedSubject,\n                date: eventData.date,\n                startTime: eventData.startTime,\n                duration: eventData.duration || 120,\n                location: eventData.location,\n                description: eventData.description,\n                priority: 'high',\n                confidence: 0.9\n            });\n            analysis.hasEventMention = true;\n        }\n    } else if (/(estudiar|repasar|preparar|practicar|sesi[oó]n.*estudio)/i.test(lastUserMessage)) {\n        const eventData = extractEventDataFromMessage(lastUserMessage, 'study_session');\n        if (eventData.hasEvent) {\n            // Normalizar subject con acentos correctos\n            const normalizedSubject = normalizeSubjectName(eventData.subject) || 'Revisión General';\n            analysis.eventSuggestions.push({\n                type: 'study_session',\n                title: `Sesión de Estudio - ${normalizedSubject}`,\n                subject: normalizedSubject,\n                date: eventData.date,\n                startTime: eventData.startTime,\n                duration: eventData.duration || 90,\n                location: eventData.location,\n                description: eventData.description,\n                priority: 'medium',\n                confidence: 0.8\n            });\n            analysis.hasEventMention = true;\n        }\n    }\n    // Solo generar preguntas para información realmente faltante\n    if (analysis.eventSuggestions.length > 0) {\n        const suggestion = analysis.eventSuggestions[0];\n        const questions = [];\n        const missingInfo = [];\n        if (!suggestion.date) {\n            questions.push(\"📅 ¿Para qué fecha es?\");\n            missingInfo.push(\"fecha\");\n        }\n        if (!suggestion.startTime) {\n            questions.push(\"🕐 ¿A qué hora?\");\n            missingInfo.push(\"hora\");\n        }\n        if (suggestion.type === 'exam' && !suggestion.subject) {\n            questions.push(\"📚 ¿De qué materia es el examen?\");\n            missingInfo.push(\"materia\");\n        }\n        if (suggestion.type === 'exam' && !suggestion.location) {\n            questions.push(\"📍 ¿En qué aula será?\");\n            missingInfo.push(\"ubicación\");\n        }\n        // Solo agregar preguntas si realmente falta información\n        analysis.questions = questions;\n        analysis.missingInfo = missingInfo;\n    }\n    return analysis;\n}\n/**\n * Extrae datos específicos del evento desde el mensaje\n */ function extractEventDataFromMessage(message, eventType) {\n    const msgLower = message.toLowerCase();\n    // Extraer materia de manera más inteligente\n    let subject = null;\n    const subjectPatterns = [\n        /(?:examen|evaluaci[oó]n|parcial|final|prueba|test).*?(?:de|en)\\s+([a-záéíóúñ]+)/i,\n        /([a-záéíóúñ]+).*?(?:examen|evaluaci[oó]n|parcial|final|prueba|test)/i,\n        /(?:estudiar|repasar|preparar|practicar)\\s+([a-záéíóúñ]+)/i,\n        /(?:sesi[oó]n.*?(?:de|en)\\s+([a-záéíóúñ]+))/i\n    ];\n    for (const pattern of subjectPatterns){\n        const match = message.match(pattern);\n        if (match && match[1]) {\n            // Capitalizar primera letra\n            subject = match[1].charAt(0).toUpperCase() + match[1].slice(1).toLowerCase();\n            break;\n        }\n    }\n    // Extraer fecha de manera más inteligente\n    let date = null;\n    let startTime = null;\n    // Detectar fechas específicas (dd de mes, dd/mm, etc.)\n    const specificDatePatterns = [\n        /(\\d{1,2})\\s+de\\s+(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,\n        /(\\d{1,2})\\/(\\d{1,2})(?:\\/(\\d{2,4}))?/,\n        /(\\d{1,2})-(\\d{1,2})(?:-(\\d{2,4}))?/,\n        /el\\s+(\\d{1,2})/i\n    ];\n    for (const pattern of specificDatePatterns){\n        const match = message.match(pattern);\n        if (match) {\n            if (pattern.source.includes('de')) {\n                // \"10 de julio\"\n                const day = parseInt(match[1]);\n                const monthName = match[2].toLowerCase();\n                const monthMap = {\n                    'enero': 0,\n                    'febrero': 1,\n                    'marzo': 2,\n                    'abril': 3,\n                    'mayo': 4,\n                    'junio': 5,\n                    'julio': 6,\n                    'agosto': 7,\n                    'septiembre': 8,\n                    'octubre': 9,\n                    'noviembre': 10,\n                    'diciembre': 11\n                };\n                if (monthMap[monthName] !== undefined) {\n                    const now = new Date();\n                    const eventDate = new Date(now.getFullYear(), monthMap[monthName], day);\n                    date = eventDate.toISOString().split('T')[0];\n                }\n            } else if (match[1] && !isNaN(parseInt(match[1]))) {\n                // Formato dd/mm o dd-mm o \"el 10\"\n                const day = parseInt(match[1]);\n                const month = match[2] ? parseInt(match[2]) - 1 : new Date().getMonth();\n                const year = match[3] ? parseInt(match[3]) : new Date().getFullYear();\n                const eventDate = new Date(year, month, day);\n                date = eventDate.toISOString().split('T')[0];\n            }\n            break;\n        }\n    }\n    // Si no se encontró fecha específica, buscar días relativos\n    if (!date) {\n        const relativeDatePatterns = [\n            {\n                pattern: /ma[ñn]ana/i,\n                days: 1\n            },\n            {\n                pattern: /hoy/i,\n                days: 0\n            },\n            {\n                pattern: /pasado.*ma[ñn]ana/i,\n                days: 2\n            },\n            {\n                pattern: /lunes/i,\n                targetDay: 1\n            },\n            {\n                pattern: /martes/i,\n                targetDay: 2\n            },\n            {\n                pattern: /mi[eé]rcoles/i,\n                targetDay: 3\n            },\n            {\n                pattern: /jueves/i,\n                targetDay: 4\n            },\n            {\n                pattern: /viernes/i,\n                targetDay: 5\n            },\n            {\n                pattern: /s[aá]bado/i,\n                targetDay: 6\n            },\n            {\n                pattern: /domingo/i,\n                targetDay: 0\n            }\n        ];\n        for (const { pattern, days, targetDay } of relativeDatePatterns){\n            if (pattern.test(message)) {\n                const now = new Date();\n                let eventDate;\n                if (days !== undefined) {\n                    eventDate = new Date(now.getTime() + days * 24 * 60 * 60 * 1000);\n                } else if (targetDay !== undefined) {\n                    const currentDay = now.getDay();\n                    let daysToAdd = targetDay - currentDay;\n                    if (daysToAdd <= 0) daysToAdd += 7 // Próxima semana\n                    ;\n                    eventDate = new Date(now.getTime() + daysToAdd * 24 * 60 * 60 * 1000);\n                } else {\n                    continue;\n                }\n                date = eventDate.toISOString().split('T')[0];\n                break;\n            }\n        }\n    }\n    // Extraer hora de manera más inteligente\n    const timePatterns = [\n        /(?:a\\s+las?\\s+)?(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm|a\\.?m\\.?|p\\.?m\\.?)/i,\n        /(?:a\\s+las?\\s+)?(\\d{1,2})(?::(\\d{2}))?\\s*h(?:oras?)?/i,\n        /(\\d{1,2})(?::(\\d{2}))?\\s*(?:de\\s+la\\s+)?(ma[ñn]ana|tarde|noche)/i\n    ];\n    for (const pattern of timePatterns){\n        const match = message.match(pattern);\n        if (match) {\n            let hour = parseInt(match[1]);\n            const minute = match[2] ? parseInt(match[2]) : 0;\n            const period = match[3]?.toLowerCase();\n            // Convertir a formato 24h\n            if (period) {\n                if ((period.includes('pm') || period.includes('p.m') || period === 'tarde' || period === 'noche') && hour < 12) {\n                    hour += 12;\n                } else if ((period.includes('am') || period.includes('a.m') || period === 'ma[ñn]ana') && hour === 12) {\n                    hour = 0;\n                } else if (period === 'noche' && hour < 6) {\n                    hour += 12 // Para casos como \"3 de la noche\" = 15:00\n                    ;\n                }\n            }\n            startTime = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n            break;\n        }\n    }\n    // Extraer ubicación\n    let location = null;\n    const locationPatterns = [\n        /(?:en\\s+el?\\s+)?(aula|laboratorio|sala|auditorio)\\s+([a-zA-Z0-9]+)/i,\n        /(?:en\\s+)([a-zA-Z\\s]+(?:aula|laboratorio|sala|auditorio)[a-zA-Z0-9\\s]*)/i\n    ];\n    for (const pattern of locationPatterns){\n        const match = message.match(pattern);\n        if (match) {\n            location = match[0].replace(/^en\\s+/i, '').trim();\n            break;\n        }\n    }\n    // Extraer duración\n    let duration = null;\n    const durationMatch = message.match(/(?:durante\\s+)?(\\d+)\\s*(horas?|minutos?|min)/i);\n    if (durationMatch) {\n        const value = parseInt(durationMatch[1]);\n        const unit = durationMatch[2].toLowerCase();\n        duration = unit.includes('hora') ? value * 60 : value;\n    }\n    // Extraer descripción/tema específico si se menciona\n    let description = null;\n    const topicPatterns = [\n        /(?:sobre|tema|temas?)\\s+([a-záéíóúñ\\s]+?)(?:\\s+para|\\s+el|\\s+a|$)/i,\n        /(?:sobre)\\s+el\\s+tema\\s+([a-záéíóúñ\\s]+?)(?:\\s+para|\\s+el|\\s+a|$)/i\n    ];\n    for (const pattern of topicPatterns){\n        const match = message.match(pattern);\n        if (match && match[1] && match[1].trim().length > 3) {\n            description = match[1].trim();\n            break;\n        }\n    }\n    return {\n        hasEvent: true,\n        subject,\n        date,\n        startTime,\n        location,\n        duration,\n        description\n    };\n}\n/**\n * Genera preguntas para completar la información de un evento\n */ function generateEventQuestions(suggestion) {\n    const questions = [];\n    if (!suggestion.date) {\n        questions.push(\"📅 ¿Para qué fecha es?\");\n    }\n    if (!suggestion.startTime) {\n        questions.push(\"🕐 ¿A qué hora?\");\n    }\n    if (suggestion.type === 'exam') {\n        if (!suggestion.subject) {\n            questions.push(\"📚 ¿De qué materia es el examen?\");\n        }\n        if (!suggestion.location) {\n            questions.push(\"📍 ¿En qué aula o laboratorio será?\");\n        }\n        if (!suggestion.duration) {\n            questions.push(\"⏱️ ¿Cuánto tiempo durará?\");\n        }\n    }\n    if (suggestion.type === 'study_session') {\n        if (!suggestion.subject) {\n            questions.push(\"📖 ¿Qué tema vas a estudiar?\");\n        }\n        if (!suggestion.duration) {\n            questions.push(\"⏰ ¿Cuántas horas planeas estudiar?\");\n        }\n    }\n    if (suggestion.type === 'personal' || suggestion.type === 'extracurricular') {\n        if (!suggestion.location) {\n            questions.push(\"📍 ¿Dónde será?\");\n        }\n    }\n    return questions;\n}\n/**\n * Convierte una sugerencia de evento en un evento de calendario\n */ function convertSuggestionToCalendarEvent(suggestion, userId, additionalInfo) {\n    const merged = {\n        ...suggestion,\n        ...additionalInfo\n    };\n    // Procesar fecha\n    let eventDate = new Date();\n    if (merged.date) {\n        eventDate = parseDateFromText(merged.date);\n    }\n    // Procesar hora\n    let startTime = merged.startTime || '15:00';\n    let endTime = merged.startTime || '16:00';\n    if (merged.duration && merged.startTime) {\n        const start = new Date(`2000-01-01T${merged.startTime}:00`);\n        const end = new Date(start.getTime() + merged.duration * 60000);\n        endTime = end.toTimeString().substring(0, 5);\n    }\n    const event = {\n        id: `ai-event-${Date.now()}`,\n        title: merged.title,\n        date: eventDate,\n        startTime: startTime,\n        endTime: endTime,\n        type: merged.type,\n        color: (0,_calendar_data__WEBPACK_IMPORTED_MODULE_0__.getEventTypeColor)(merged.type),\n        subject: merged.subject,\n        location: merged.location,\n        description: merged.description || 'Creado automáticamente por IA Tutora',\n        priority: merged.priority || 'medium',\n        duration: merged.duration || 60\n    };\n    return event;\n}\n/**\n * Crea un evento automáticamente desde la IA usando el API endpoint dedicado\n */ async function createEventFromAI(suggestion, userId, additionalInfo) {\n    try {\n        const merged = {\n            ...suggestion,\n            ...additionalInfo\n        };\n        // Procesar fecha\n        let eventDate = new Date();\n        if (merged.date) {\n            eventDate = parseDateFromText(merged.date);\n        }\n        // Calcular endTime basado en duration y startTime\n        let endTime = merged.startTime || '16:00';\n        if (merged.duration && merged.startTime) {\n            const start = new Date(`2000-01-01T${merged.startTime}:00`);\n            const end = new Date(start.getTime() + merged.duration * 60000);\n            endTime = end.toTimeString().substring(0, 5);\n        }\n        const eventData = {\n            title: merged.title,\n            type: merged.type,\n            subject: merged.subject,\n            date: eventDate.toISOString(),\n            startTime: merged.startTime || '15:00',\n            endTime: endTime,\n            duration: merged.duration || 60,\n            location: merged.location,\n            description: merged.description || `Creado automáticamente por IA Tutora`,\n            priority: merged.priority || 'medium'\n        };\n        // For server-side execution, call the function directly instead of HTTP fetch\n        try {\n            const { createCalendarEvent } = __webpack_require__(/*! ../app/api/ai-calendar/create-event/route */ \"(rsc)/./src/app/api/ai-calendar/create-event/route.ts\");\n            const mockRequest = {\n                json: async ()=>eventData\n            };\n            const response1 = await createCalendarEvent(mockRequest);\n            const result = await response1.json();\n            return {\n                success: result.success,\n                event: result.event,\n                message: result.message\n            };\n        } catch (directCallError) {\n            console.log('Direct API call failed, trying alternative approach:', directCallError);\n            // Alternative: Use calendar-data functions directly\n            const { addCalendarEvent, getUserCalendarData, createUserCalendarData } = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n            // Ensure user has calendar data\n            let userData = getUserCalendarData(userId);\n            if (!userData) {\n                console.log(`🆕 Creating calendar data for user ${userId}`);\n                userData = createUserCalendarData(userId);\n            }\n            const calendarEvent = {\n                id: `ai-event-${Date.now()}`,\n                title: eventData.title,\n                date: new Date(eventData.date),\n                startTime: eventData.startTime,\n                endTime: eventData.endTime,\n                type: eventData.type,\n                color: '#3B82F6',\n                subject: eventData.subject,\n                location: eventData.location,\n                description: eventData.description,\n                priority: eventData.priority,\n                duration: eventData.duration\n            };\n            console.log(`📅 Creating event: ${calendarEvent.title} for ${eventData.date} at ${eventData.startTime}`);\n            const success = addCalendarEvent(userId, calendarEvent);\n            return {\n                success,\n                event: success ? calendarEvent : undefined,\n                message: success ? 'Evento creado exitosamente' : 'Error al crear evento'\n            };\n        }\n        const result = await response.json();\n        if (result.success) {\n            console.log(`🤖 IA confirmó creación: ${result.event.title}`);\n            // Disparar evento del lado del cliente para notificar componentes\n            if (false) {}\n            return {\n                success: true,\n                event: result.event,\n                message: result.message\n            };\n        } else {\n            console.error('❌ IA falló al crear evento:', result.error);\n            return {\n                success: false,\n                message: result.error || 'Error desconocido'\n            };\n        }\n    } catch (error) {\n        console.error('❌ Error in AI event creation:', error);\n        return {\n            success: false,\n            message: 'Error de conexión al crear evento'\n        };\n    }\n}\n/**\n * Parsea fechas desde texto natural\n */ function parseDateFromText(dateText) {\n    const text = dateText.toLowerCase();\n    const today = new Date();\n    if (text.includes('hoy')) {\n        return today;\n    }\n    if (text.includes('mañana') || text.includes('ma[ñn]ana')) {\n        const tomorrow = new Date(today);\n        tomorrow.setDate(today.getDate() + 1);\n        return tomorrow;\n    }\n    if (text.includes('pasado')) {\n        const dayAfterTomorrow = new Date(today);\n        dayAfterTomorrow.setDate(today.getDate() + 2);\n        return dayAfterTomorrow;\n    }\n    // Días de la semana\n    const dayMap = {\n        'lunes': 1,\n        'martes': 2,\n        'miércoles': 3,\n        'miercoles': 3,\n        'jueves': 4,\n        'viernes': 5,\n        'sábado': 6,\n        'sabado': 6,\n        'domingo': 0\n    };\n    for (const [dayName, dayNumber] of Object.entries(dayMap)){\n        if (text.includes(dayName)) {\n            const targetDate = new Date(today);\n            const currentDay = today.getDay();\n            let daysToAdd = dayNumber - currentDay;\n            if (daysToAdd <= 0) {\n                daysToAdd += 7 // Próxima semana\n                ;\n            }\n            targetDate.setDate(today.getDate() + daysToAdd);\n            return targetDate;\n        }\n    }\n    // Si incluye números (ej: \"en 3 días\")\n    const daysMatch = text.match(/en\\s+(\\d+)\\s+d[ií]as?/);\n    if (daysMatch) {\n        const days = parseInt(daysMatch[1]);\n        const futureDate = new Date(today);\n        futureDate.setDate(today.getDate() + days);\n        return futureDate;\n    }\n    // Por defecto, devolver mañana\n    const defaultDate = new Date(today);\n    defaultDate.setDate(today.getDate() + 1);\n    return defaultDate;\n}\n/**\n * Genera respuesta de la IA para sugerir crear eventos\n */ function generateEventSuggestionResponse(analysis) {\n    if (!analysis.hasEventMention || analysis.eventSuggestions.length === 0) {\n        return \"\";\n    }\n    const suggestion = analysis.eventSuggestions[0] // Tomar la primera sugerencia\n    ;\n    let response1 = `📅 Perfecto! Veo que quieres agendar: **${suggestion.title}**\\n\\n`;\n    // Mostrar información detectada\n    const detectedInfo = [];\n    if (suggestion.subject) detectedInfo.push(`📚 Materia: ${suggestion.subject}`);\n    if (suggestion.date) {\n        const dateObj = new Date(suggestion.date);\n        const formattedDate = dateObj.toLocaleDateString('es-ES', {\n            weekday: 'long',\n            day: 'numeric',\n            month: 'long'\n        });\n        detectedInfo.push(`📅 Fecha: ${formattedDate}`);\n    }\n    if (suggestion.startTime) detectedInfo.push(`🕐 Hora: ${suggestion.startTime}`);\n    if (suggestion.location) detectedInfo.push(`📍 Ubicación: ${suggestion.location}`);\n    if (detectedInfo.length > 0) {\n        response1 += `**Información detectada:**\\n${detectedInfo.join('\\n')}\\n\\n`;\n    }\n    if (analysis.questions.length > 0) {\n        response1 += `Para completar el evento necesito:\\n`;\n        analysis.questions.forEach((question, index)=>{\n            response1 += `${index + 1}. ${question}\\n`;\n        });\n        response1 += `\\n¿Podrías darme estos detalles?`;\n    } else {\n        response1 += `¡Tengo toda la información necesaria! ¿Confirmas que lo agregue a tu calendario?`;\n    }\n    return response1;\n}\n/**\n * Interfaz para el workflow completo de creación de eventos por IA\n */ class AICalendarIntegration {\n    constructor(userId){\n        this.pendingSuggestion = null;\n        this.collectedInfo = {};\n        this.userId = userId;\n    }\n    /**\n   * Procesa un mensaje del usuario y detecta si necesita crear eventos\n   */ async processMessage(message, conversationHistory) {\n        const analysis = analyzeConversationForEvents([\n            ...conversationHistory,\n            {\n                role: 'user',\n                content: message\n            }\n        ]);\n        if (analysis.hasEventMention && analysis.eventSuggestions.length > 0) {\n            this.pendingSuggestion = analysis.eventSuggestions[0];\n            if (analysis.questions.length > 0) {\n                return {\n                    needsEventCreation: true,\n                    response: generateEventSuggestionResponse(analysis),\n                    questions: analysis.questions\n                };\n            } else {\n                // Información completa, crear evento directamente\n                const result = await this.createPendingEvent();\n                return {\n                    needsEventCreation: true,\n                    response: result.success ? this.generateSuccessMessage(result.event) : `❌ ${result.message || 'Hubo un error al crear el evento. Por favor intenta nuevamente.'}`,\n                    event: result.event\n                };\n            }\n        }\n        return {\n            needsEventCreation: false\n        };\n    }\n    /**\n   * Recopila información adicional del usuario\n   */ collectAdditionalInfo(infoType, value) {\n        if (!this.pendingSuggestion) return false;\n        switch(infoType.toLowerCase()){\n            case 'fecha':\n                this.collectedInfo.date = value;\n                break;\n            case 'hora':\n                this.collectedInfo.startTime = value;\n                break;\n            case 'materia':\n            case 'tema':\n                this.collectedInfo.subject = value;\n                break;\n            case 'ubicación':\n            case 'ubicacion':\n                this.collectedInfo.location = value;\n                break;\n            case 'duración':\n            case 'duracion':\n                this.collectedInfo.duration = parseInt(value);\n                break;\n        }\n        return true;\n    }\n    /**\n   * Crea el evento pendiente con la información recopilada\n   */ async createPendingEvent() {\n        if (!this.pendingSuggestion) {\n            return {\n                success: false,\n                message: 'No hay evento pendiente'\n            };\n        }\n        const result = await createEventFromAI(this.pendingSuggestion, this.userId, this.collectedInfo);\n        if (result.success) {\n            this.pendingSuggestion = null;\n            this.collectedInfo = {};\n        }\n        return result;\n    }\n    /**\n   * Cancela la creación del evento pendiente\n   */ cancelPendingEvent() {\n        this.pendingSuggestion = null;\n        this.collectedInfo = {};\n    }\n    /**\n   * Obtiene la sugerencia pendiente\n   */ getPendingSuggestion() {\n        return this.pendingSuggestion;\n    }\n    /**\n   * Genera mensaje de éxito con detalles del evento creado\n   */ generateSuccessMessage(event) {\n        let message = `✅ ¡Perfecto! He creado \"${event.title}\" en tu calendario.`;\n        // Agregar detalles específicos\n        const details = [];\n        if (event.date) {\n            const dateStr = event.date.toLocaleDateString('es-ES', {\n                weekday: 'long',\n                day: 'numeric',\n                month: 'long'\n            });\n            details.push(`📅 **Fecha**: ${dateStr}`);\n        }\n        if (event.startTime) {\n            details.push(`🕐 **Hora**: ${event.startTime}`);\n        }\n        if (event.location) {\n            details.push(`📍 **Ubicación**: ${event.location}`);\n        }\n        if (event.subject && event.type === 'exam') {\n            details.push(`📚 **Materia**: ${event.subject}`);\n        }\n        if (event.description && !event.description.includes('Creado automáticamente')) {\n            details.push(`📝 **Tema**: ${event.description}`);\n        }\n        if (details.length > 0) {\n            message += `\\n\\n**Detalles del evento:**\\n${details.join('\\n')}`;\n        }\n        message += `\\n\\n🎯 Puedes ver todos tus eventos en la sección \"Organizador Inteligente\" de tu calendario.`;\n        return message;\n    }\n}\n/**\n * Busca eventos del usuario por texto de búsqueda\n */ function findUserEvents(userId, searchText) {\n    const userData = (0,_calendar_data__WEBPACK_IMPORTED_MODULE_0__.getUserCalendarData)(userId);\n    if (!userData) return [];\n    const search = searchText.toLowerCase();\n    return userData.events.filter((event)=>{\n        return event.title.toLowerCase().includes(search) || event.subject?.toLowerCase().includes(search) || event.description?.toLowerCase().includes(search) || event.location?.toLowerCase().includes(search);\n    });\n}\n/**\n * Edita un evento usando el API endpoint\n */ async function editEventFromAI(eventId, updates) {\n    try {\n        // For server-side execution, call the function directly\n        try {\n            const { updateCalendarEvent } = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n            const success = updateCalendarEvent(eventId, updates);\n            return {\n                success,\n                event: success ? {\n                    id: eventId,\n                    ...updates\n                } : undefined,\n                message: success ? 'Evento actualizado exitosamente' : 'Error al actualizar evento'\n            };\n        } catch (error) {\n            console.error('Error updating event:', error);\n            return {\n                success: false,\n                message: 'Error al actualizar evento'\n            };\n        }\n        const result = await response.json();\n        if (result.success) {\n            console.log(`🤖 IA editó evento: ${result.event.title}`);\n            // Disparar evento del lado del cliente\n            if (false) {}\n            return {\n                success: true,\n                event: result.event,\n                message: result.message\n            };\n        } else {\n            return {\n                success: false,\n                message: result.error || 'Error desconocido al editar'\n            };\n        }\n    } catch (error) {\n        console.error('❌ Error editing event from AI:', error);\n        return {\n            success: false,\n            message: 'Error de conexión al editar evento'\n        };\n    }\n}\n/**\n * Elimina un evento usando el API endpoint\n */ async function deleteEventFromAI(eventId) {\n    try {\n        // For server-side execution, call the function directly\n        try {\n            const { deleteCalendarEvent } = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n            const deletedEvent = deleteCalendarEvent(eventId);\n            return {\n                success: !!deletedEvent,\n                message: deletedEvent ? `Evento \"${deletedEvent.title}\" eliminado exitosamente` : 'Evento no encontrado'\n            };\n        } catch (error) {\n            console.error('Error deleting event:', error);\n            return {\n                success: false,\n                message: 'Error al eliminar evento'\n            };\n        }\n        const result = await response.json();\n        if (result.success) {\n            console.log(`🤖 IA eliminó evento: ${result.deletedEvent.title}`);\n            // Disparar evento del lado del cliente\n            if (false) {}\n            return {\n                success: true,\n                message: result.message\n            };\n        } else {\n            return {\n                success: false,\n                message: result.error || 'Error desconocido al eliminar'\n            };\n        }\n    } catch (error) {\n        console.error('❌ Error deleting event from AI:', error);\n        return {\n            success: false,\n            message: 'Error de conexión al eliminar evento'\n        };\n    }\n}\n/**\n * Normaliza nombres de materias con acentos y mayúsculas correctas\n */ function normalizeSubjectName(subject) {\n    if (!subject) return null;\n    const normalized = subject.toLowerCase().trim();\n    const subjectMap = {\n        'quimica': 'Química',\n        'química': 'Química',\n        'fisica': 'Física',\n        'física': 'Física',\n        'matematica': 'Matemática',\n        'matemáticas': 'Matemáticas',\n        'matematicas': 'Matemáticas',\n        'biologia': 'Biología',\n        'biología': 'Biología',\n        'historia': 'Historia',\n        'geografia': 'Geografía',\n        'geografía': 'Geografía',\n        'ingles': 'Inglés',\n        'inglés': 'Inglés',\n        'lengua': 'Lengua y Literatura',\n        'literatura': 'Lengua y Literatura',\n        'filosofia': 'Filosofía',\n        'filosofía': 'Filosofía',\n        'economia': 'Economía',\n        'economía': 'Economía',\n        'educacion fisica': 'Educación Física',\n        'educación física': 'Educación Física',\n        'ed fisica': 'Educación Física',\n        'arte': 'Arte',\n        'musica': 'Música',\n        'música': 'Música'\n    };\n    // Buscar coincidencia exacta primero\n    if (subjectMap[normalized]) {\n        return subjectMap[normalized];\n    }\n    // Buscar coincidencia parcial\n    for (const [key, value] of Object.entries(subjectMap)){\n        if (key.includes(normalized) || normalized.includes(key)) {\n            return value;\n        }\n    }\n    // Si no se encuentra, capitalizar primera letra\n    return subject.charAt(0).toUpperCase() + subject.slice(1).toLowerCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/calendar-ai-integration.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/calendar-data.ts":
/*!**********************************!*\
  !*** ./src/lib/calendar-data.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCalendarEvent: () => (/* binding */ addCalendarEvent),\n/* harmony export */   createUserCalendarData: () => (/* binding */ createUserCalendarData),\n/* harmony export */   deleteCalendarEvent: () => (/* binding */ deleteCalendarEvent),\n/* harmony export */   findAvailableTimeSlots: () => (/* binding */ findAvailableTimeSlots),\n/* harmony export */   getEventTypeColor: () => (/* binding */ getEventTypeColor),\n/* harmony export */   getEventTypeIcon: () => (/* binding */ getEventTypeIcon),\n/* harmony export */   getEventsForDate: () => (/* binding */ getEventsForDate),\n/* harmony export */   getEventsForDateRange: () => (/* binding */ getEventsForDateRange),\n/* harmony export */   getUserCalendarData: () => (/* binding */ getUserCalendarData),\n/* harmony export */   isTimeSlotAvailable: () => (/* binding */ isTimeSlotAvailable),\n/* harmony export */   tempCalendarData: () => (/* binding */ tempCalendarData),\n/* harmony export */   updateCalendarEvent: () => (/* binding */ updateCalendarEvent),\n/* harmony export */   updateUserCalendarData: () => (/* binding */ updateUserCalendarData)\n/* harmony export */ });\n// Calendar Data Models for Smart Calendar\n// Temporary storage for calendar data\nconst globalForCalendarData = globalThis;\nconst tempCalendarData = globalForCalendarData.tempCalendarData ?? [];\nglobalForCalendarData.tempCalendarData = tempCalendarData;\n// Calendar Data Management Functions\nfunction getUserCalendarData(userId) {\n    return tempCalendarData.find((data)=>data.userId === userId);\n}\nfunction createUserCalendarData(userId) {\n    const newData = {\n        userId,\n        schoolSchedule: {\n            monday: [],\n            tuesday: [],\n            wednesday: [],\n            thursday: [],\n            friday: []\n        },\n        studyPreferences: {\n            preferredStudyTime: 'afternoon',\n            dailyStudyHours: 3,\n            maxSessionDuration: 90,\n            breakBetweenSessions: 15,\n            weekendStudyHours: 4,\n            noStudyDays: [\n                0\n            ] // Sunday\n        },\n        events: [],\n        isSetupComplete: false,\n        lastUpdated: new Date()\n    };\n    tempCalendarData.push(newData);\n    return newData;\n}\nfunction updateUserCalendarData(userId, updates) {\n    const index = tempCalendarData.findIndex((data)=>data.userId === userId);\n    if (index !== -1) {\n        tempCalendarData[index] = {\n            ...tempCalendarData[index],\n            ...updates,\n            lastUpdated: new Date()\n        };\n        return true;\n    }\n    return false;\n}\nfunction addCalendarEvent(userId, event) {\n    const userData = getUserCalendarData(userId);\n    if (userData) {\n        userData.events.push(event);\n        userData.lastUpdated = new Date();\n        // Force update in global storage\n        const index = tempCalendarData.findIndex((data)=>data.userId === userId);\n        if (index !== -1) {\n            tempCalendarData[index] = userData;\n        }\n        console.log(`📅 Evento agregado: ${event.title} - Total eventos: ${userData.events.length}`);\n        return true;\n    }\n    return false;\n}\nfunction updateCalendarEvent(userId, eventId, updates) {\n    const userData = getUserCalendarData(userId);\n    if (userData) {\n        const eventIndex = userData.events.findIndex((e)=>e.id === eventId);\n        if (eventIndex !== -1) {\n            userData.events[eventIndex] = {\n                ...userData.events[eventIndex],\n                ...updates\n            };\n            userData.lastUpdated = new Date();\n            // Force update in global storage\n            const index = tempCalendarData.findIndex((data)=>data.userId === userId);\n            if (index !== -1) {\n                tempCalendarData[index] = userData;\n            }\n            console.log(`📅 Evento actualizado: ${userData.events[eventIndex].title}`);\n            return true;\n        }\n    }\n    return false;\n}\nfunction deleteCalendarEvent(userId, eventId) {\n    const userData = getUserCalendarData(userId);\n    if (userData) {\n        const eventIndex = userData.events.findIndex((e)=>e.id === eventId);\n        if (eventIndex !== -1) {\n            const deletedEvent = userData.events[eventIndex];\n            userData.events.splice(eventIndex, 1);\n            userData.lastUpdated = new Date();\n            // Force update in global storage\n            const index = tempCalendarData.findIndex((data)=>data.userId === userId);\n            if (index !== -1) {\n                tempCalendarData[index] = userData;\n            }\n            console.log(`📅 Evento eliminado: ${deletedEvent.title} - Total eventos: ${userData.events.length}`);\n            return true;\n        }\n    }\n    return false;\n}\nfunction getEventsForDate(userId, date) {\n    const userData = getUserCalendarData(userId);\n    if (!userData) return [];\n    const targetDate = new Date(date);\n    targetDate.setHours(0, 0, 0, 0);\n    return userData.events.filter((event)=>{\n        const eventDate = new Date(event.date);\n        eventDate.setHours(0, 0, 0, 0);\n        return eventDate.getTime() === targetDate.getTime();\n    });\n}\nfunction getEventsForDateRange(userId, startDate, endDate) {\n    const userData = getUserCalendarData(userId);\n    if (!userData) return [];\n    return userData.events.filter((event)=>{\n        const eventDate = new Date(event.date);\n        return eventDate >= startDate && eventDate <= endDate;\n    });\n}\n// Utility functions for calendar operations\nfunction isTimeSlotAvailable(userId, date, startTime, endTime) {\n    const userData = getUserCalendarData(userId);\n    if (!userData) return true;\n    const dayName = getDayName(date.getDay());\n    const schoolSlots = userData.schoolSchedule[dayName] || [];\n    // Check school schedule conflicts\n    for (const slot of schoolSlots){\n        if (timeOverlaps(startTime, endTime, slot.start, slot.end)) {\n            return false;\n        }\n    }\n    // Check existing events\n    const dayEvents = getEventsForDate(userId, date);\n    for (const event of dayEvents){\n        if (event.startTime && event.endTime) {\n            if (timeOverlaps(startTime, endTime, event.startTime, event.endTime)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nfunction findAvailableTimeSlots(userId, date, duration, preferredTime) {\n    const userData = getUserCalendarData(userId);\n    if (!userData) return [];\n    const slots = [];\n    // Define time ranges based on preference\n    const timeRanges = {\n        morning: [\n            '08:00',\n            '12:00'\n        ],\n        afternoon: [\n            '14:00',\n            '18:00'\n        ],\n        evening: [\n            '19:00',\n            '22:00'\n        ]\n    };\n    const searchRange = preferredTime ? timeRanges[preferredTime] : [\n        '08:00',\n        '22:00'\n    ];\n    const [searchStart, searchEnd] = searchRange;\n    // Generate potential slots every 30 minutes\n    const startMinutes = timeToMinutes(searchStart);\n    const endMinutes = timeToMinutes(searchEnd);\n    for(let minutes = startMinutes; minutes <= endMinutes - duration; minutes += 30){\n        const slotStart = minutesToTime(minutes);\n        const slotEnd = minutesToTime(minutes + duration);\n        if (isTimeSlotAvailable(userId, date, slotStart, slotEnd)) {\n            slots.push({\n                start: slotStart,\n                end: slotEnd\n            });\n        }\n    }\n    return slots;\n}\nfunction getEventTypeColor(type) {\n    const colors = {\n        exam: '#EF4444',\n        study_session: '#3B82F6',\n        class: '#10B981',\n        personal: '#8B5CF6',\n        extracurricular: '#F59E0B' // Orange\n    };\n    return colors[type] || '#64748B';\n}\nfunction getEventTypeIcon(type) {\n    const icons = {\n        exam: '📝',\n        study_session: '📚',\n        class: '🎓',\n        personal: '👤',\n        extracurricular: '🏃‍♀️'\n    };\n    return icons[type] || '📅';\n}\n// Helper functions\nfunction getDayName(dayIndex) {\n    const days = [\n        'sunday',\n        'monday',\n        'tuesday',\n        'wednesday',\n        'thursday',\n        'friday',\n        'saturday'\n    ];\n    return days[dayIndex];\n}\nfunction timeToMinutes(time) {\n    const [hours, minutes] = time.split(':').map(Number);\n    return hours * 60 + minutes;\n}\nfunction minutesToTime(minutes) {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\n}\nfunction timeOverlaps(start1, end1, start2, end2) {\n    const start1Minutes = timeToMinutes(start1);\n    const end1Minutes = timeToMinutes(end1);\n    const start2Minutes = timeToMinutes(start2);\n    const end2Minutes = timeToMinutes(end2);\n    return start1Minutes < end2Minutes && end1Minutes > start2Minutes;\n}\n// Initialize demo data\nfunction initDemoCalendarData() {\n    const demoUserId = \"demo-student-fixed\";\n    if (!getUserCalendarData(demoUserId)) {\n        console.log(\"📅 Inicializando datos de calendario demo...\");\n        const demoData = createUserCalendarData(demoUserId);\n        // Demo school schedule\n        demoData.schoolSchedule = {\n            monday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Matemáticas',\n                    location: 'Aula 201',\n                    color: '#3B82F6'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Química',\n                    location: 'Laboratorio A',\n                    color: '#EF4444'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Historia',\n                    location: 'Aula 105',\n                    color: '#8B5CF6'\n                }\n            ],\n            tuesday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Física',\n                    location: 'Laboratorio B',\n                    color: '#10B981'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Literatura',\n                    location: 'Aula 203',\n                    color: '#F59E0B'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Biología',\n                    location: 'Laboratorio C',\n                    color: '#EC4899'\n                }\n            ],\n            wednesday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Matemáticas',\n                    location: 'Aula 201',\n                    color: '#3B82F6'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Educación Física',\n                    location: 'Gimnasio',\n                    color: '#06B6D4'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Arte',\n                    location: 'Taller',\n                    color: '#F97316'\n                }\n            ],\n            thursday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Química',\n                    location: 'Laboratorio A',\n                    color: '#EF4444'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Física',\n                    location: 'Laboratorio B',\n                    color: '#10B981'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Historia',\n                    location: 'Aula 105',\n                    color: '#8B5CF6'\n                }\n            ],\n            friday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Biología',\n                    location: 'Laboratorio C',\n                    color: '#EC4899'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Literatura',\n                    location: 'Aula 203',\n                    color: '#F59E0B'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Matemáticas',\n                    location: 'Aula 201',\n                    color: '#3B82F6'\n                }\n            ]\n        };\n        // Demo events\n        const now = new Date();\n        const demoEvents = [\n            {\n                id: 'exam-1',\n                title: 'Examen Química Orgánica',\n                date: new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000),\n                startTime: '10:00',\n                endTime: '12:00',\n                type: 'exam',\n                color: getEventTypeColor('exam'),\n                description: 'Examen parcial de química orgánica',\n                subject: 'Química',\n                location: 'Laboratorio A'\n            },\n            {\n                id: 'study-1',\n                title: 'Sesión de Estudio - Matemáticas',\n                date: new Date(now.getTime() + 1 * 24 * 60 * 60 * 1000),\n                startTime: '15:00',\n                endTime: '16:30',\n                type: 'study_session',\n                color: getEventTypeColor('study_session'),\n                description: 'Repaso de cálculo integral',\n                subject: 'Matemáticas'\n            },\n            {\n                id: 'personal-1',\n                title: 'Entrenamiento Fútbol',\n                date: new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000),\n                startTime: '17:00',\n                endTime: '18:30',\n                type: 'extracurricular',\n                color: getEventTypeColor('extracurricular'),\n                description: 'Entrenamiento de fútbol',\n                location: 'Campo deportivo'\n            }\n        ];\n        demoEvents.forEach((event)=>{\n            demoData.events.push(event);\n        });\n        demoData.isSetupComplete = true;\n        demoData.lastUpdated = new Date();\n        console.log(\"✅ Datos de calendario demo inicializados\");\n    } else {\n        console.log(\"✅ Datos de calendario demo ya existen\");\n    }\n}\n// Initialize demo data on module load\ninitDemoCalendarData();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/calendar-data.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/contextual-conversation-manager.ts":
/*!****************************************************!*\
  !*** ./src/lib/contextual-conversation-manager.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextualConversationManager: () => (/* binding */ ContextualConversationManager)\n/* harmony export */ });\n/* harmony import */ var _advanced_learning_profiles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./advanced-learning-profiles */ \"(rsc)/./src/lib/advanced-learning-profiles.ts\");\n/* harmony import */ var _visual_learning_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visual-learning-engine */ \"(rsc)/./src/lib/visual-learning-engine.ts\");\n/* harmony import */ var _calendar_ai_integration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calendar-ai-integration */ \"(rsc)/./src/lib/calendar-ai-integration.ts\");\n// Contextual Conversation Manager for Sara AI\n// Provides intelligent context management and conversation coherence\n\n\n\nclass ContextualConversationManager {\n    static{\n        // Configuration for persistent conversation management\n        this.MAX_TURNS_RETAINED = 20;\n    }\n    static{\n        this.MAX_REFERENCES = 10;\n    }\n    static{\n        this.CONTEXT_DECAY_HOURS = 24;\n    }\n    /**\n   * Processes user message with full contextual awareness\n   */ static async processContextualMessage(userId, message, sessionId, userName) {\n        const actualSessionId = sessionId || `session_${userId}_${Date.now()}`;\n        // Import persistent storage functions\n        const { getConversationSession, createConversationSession, addConversationTurn, addPendingTask, getPendingTasks } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        // Get or create persistent conversation session\n        let session = getConversationSession(userId, actualSessionId);\n        if (!session) {\n            session = createConversationSession(userId, actualSessionId);\n        }\n        console.log(`💬 Processing message for session ${actualSessionId}: \"${message.substring(0, 50)}...\"`);\n        console.log(`📊 Session has ${session.turns.length} previous turns, ${session.pendingTasks.filter((t)=>!t.completed).length} pending tasks`);\n        // Analyze message metadata\n        const messageMetadata = this.analyzeMessageMetadata(message);\n        // Add user turn to persistent storage\n        session = addConversationTurn(userId, actualSessionId, 'user', message, messageMetadata);\n        // Check for pending tasks that might relate to this message\n        const pendingTasks = getPendingTasks(userId, actualSessionId);\n        // Build context from persistent data\n        const context = {\n            userId,\n            sessionId: actualSessionId,\n            currentTopic: session.currentTopic,\n            currentSubject: session.currentSubject,\n            conversationFlow: session.turns.map((turn)=>({\n                    id: turn.id,\n                    timestamp: turn.timestamp,\n                    role: turn.role,\n                    content: turn.content,\n                    metadata: turn.metadata\n                })),\n            contextSummary: this.buildContextSummary(session),\n            activeIntentions: this.extractActiveIntentions(session.turns.slice(-5)),\n            pendingQuestions: [],\n            referenceMemory: this.buildReferenceMemory(session.turns),\n            lastUpdate: new Date()\n        };\n        // Generate contextually aware response\n        const response = await this.generateContextualResponse(context, userName, pendingTasks);\n        // Add assistant turn to persistent storage\n        const assistantMetadata = {\n            confidence: response.continuityScore,\n            visualsGenerated: !!response.visualRecommendation,\n            searchPerformed: response.personalizations.includes('academic_search'),\n            taskCompleted: response.personalizations.includes('task_completed')\n        };\n        addConversationTurn(userId, actualSessionId, 'assistant', response.content, assistantMetadata);\n        return response;\n    }\n    /**\n   * Build context summary from persistent conversation data\n   */ static buildContextSummary(session) {\n        const recentTurns = session.turns.slice(-6);\n        const keyTopics = [\n            ...new Set(recentTurns.map((turn)=>turn.metadata.topic).filter(Boolean))\n        ];\n        const keySubjects = [\n            ...new Set(recentTurns.map((turn)=>turn.metadata.subject).filter(Boolean))\n        ];\n        const summaryParts = [];\n        if (keySubjects.length > 0) {\n            summaryParts.push(`Materias: ${keySubjects.join(', ')}`);\n        }\n        if (keyTopics.length > 0) {\n            summaryParts.push(`Temas: ${keyTopics.join(', ')}`);\n        }\n        return summaryParts.join(' | ') || 'Conversación general';\n    }\n    /**\n   * Extract active intentions from recent conversation turns\n   */ static extractActiveIntentions(recentTurns) {\n        const intentions = recentTurns.map((turn)=>turn.metadata.intention).filter(Boolean).slice(-3);\n        return [\n            ...new Set(intentions)\n        ];\n    }\n    /**\n   * Build reference memory from conversation turns\n   */ static buildReferenceMemory(turns) {\n        const references = [];\n        const recentTurns = turns.slice(-10);\n        recentTurns.forEach((turn, index)=>{\n            if (turn.metadata.confidence && turn.metadata.confidence > 0.7) {\n                references.push({\n                    id: `ref_${turn.id}`,\n                    type: this.determineReferenceTypeFromMetadata(turn.metadata),\n                    content: turn.content.substring(0, 100) + '...',\n                    relevanceScore: turn.metadata.confidence,\n                    turnIndex: index,\n                    timestamp: turn.timestamp\n                });\n            }\n        });\n        return references.slice(-5) // Keep only last 5 references\n        ;\n    }\n    /**\n   * Helper to determine reference type from metadata\n   */ static determineReferenceTypeFromMetadata(metadata) {\n        if (metadata.intention === 'continuation') return 'topic_continuation';\n        if (metadata.intention === 'problem_solving') return 'problem_solving';\n        if (metadata.intention === 'explanation') return 'explanation_followup';\n        return 'subject_reference';\n    }\n    /**\n   * Handles calendar task execution with real event creation\n   */ static async handleCalendarTasks(userId, message, conversationHistory, pendingTasks) {\n        console.log(`🔍 Checking for calendar tasks in message: \"${message.substring(0, 50)}...\"`);\n        // Initialize calendar integration\n        const calendarIntegration = new _calendar_ai_integration__WEBPACK_IMPORTED_MODULE_2__.AICalendarIntegration(userId);\n        // Analyze message for calendar events\n        const calendarResult = await calendarIntegration.processMessage(message, conversationHistory);\n        if (calendarResult.needsEventCreation) {\n            console.log(`🎯 Calendar task detected and executed!`);\n            // Mark any related pending task as completed\n            if (pendingTasks.length > 0) {\n                const calendarTask = pendingTasks.find((t)=>t.type === 'calendar_event');\n                if (calendarTask) {\n                    const { markTaskCompleted } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n                    markTaskCompleted(userId, 'current-session', calendarTask.id, calendarResult);\n                }\n            }\n            return {\n                type: 'calendar_event_creation',\n                content: calendarResult.response || 'Evento creado exitosamente',\n                metadata: {\n                    suggestedActions: calendarResult.event ? [\n                        'Ver en calendario',\n                        'Editar evento',\n                        'Eliminar evento'\n                    ] : [\n                        'Reintentar',\n                        'Proporcionar más detalles'\n                    ],\n                    eventCreated: !!calendarResult.event\n                }\n            };\n        }\n        return null;\n    }\n    /**\n   * Builds educational prompt based on conversation context\n   */ static buildEducationalPrompt(context, message, userName) {\n        const recentTurns = context.conversationFlow.slice(-3);\n        const conversationContext = recentTurns.map((turn)=>`${turn.role === 'user' ? 'Estudiante' : 'Tutor'}: ${turn.content}`).join('\\n');\n        let prompt = `Eres Sara, una tutora de IA especializada en educación secundaria. `;\n        if (userName) {\n            prompt += `El estudiante se llama ${userName}. `;\n        }\n        if (context.currentSubject) {\n            prompt += `Actualmente estás ayudando con ${context.currentSubject}. `;\n        }\n        if (context.contextSummary && context.contextSummary !== 'Conversación general') {\n            prompt += `Contexto de la conversación: ${context.contextSummary}. `;\n        }\n        prompt += `\\n\\nConversación reciente:\\n${conversationContext}`;\n        prompt += `\\n\\nNuevo mensaje del estudiante: \"${message}\"`;\n        prompt += `\\n\\nInstrucciones:\\n`;\n        prompt += `- Responde como Sara, la tutora de IA amigable y experta\\n`;\n        prompt += `- Mantén coherencia con la conversación anterior\\n`;\n        prompt += `- Si detectas que el estudiante quiere agendar algo (examen, sesión de estudio), menciona que puedes ayudar con eso\\n`;\n        prompt += `- Usa ejemplos concretos y un lenguaje claro para estudiantes de secundaria\\n`;\n        prompt += `- Si es una pregunta académica, proporciona explicaciones paso a paso\\n`;\n        prompt += `- Mantén un tono motivador y positivo\\n\\n`;\n        prompt += `Respuesta de Sara:`;\n        return prompt;\n    }\n    /**\n   * Generates contextual fallback response when AI services fail\n   */ static generateContextualFallback(context, message, userName) {\n        const msgLower = message.toLowerCase();\n        // Calendar-related fallback\n        if (/agendes?|agend[aá]|cre[ae]|programa|anot[ae]|agrega.*(?:examen|evento|sesión)/i.test(message)) {\n            return `¡Hola${userName ? ' ' + userName : ''}! Veo que quieres agendar algo en tu calendario.\\n\\n` + `Por favor proporciona estos detalles:\\n` + `📅 **Fecha**: ¿Para cuándo es?\\n` + `🕐 **Hora**: ¿A qué hora?\\n` + `📚 **Tema**: ¿De qué se trata?\\n\\n` + `Una vez que me des estos datos, podré agregarlo a tu calendario automáticamente.`;\n        }\n        // Academic question fallback\n        if (/¿|qué.*es|cómo|explica|no.*entiendo/i.test(message)) {\n            let response = `Entiendo tu pregunta${userName ? ', ' + userName : ''}.\\n\\n`;\n            if (context.currentSubject) {\n                response += `Para ayudarte mejor con ${context.currentSubject}, `;\n            }\n            response += `¿podrías ser más específico sobre qué parte necesitas que te explique?\\n\\n`;\n            response += `Mientras tanto, puedo:\\n`;\n            response += `• Explicarte conceptos paso a paso\\n`;\n            response += `• Ayudarte a resolver ejercicios\\n`;\n            response += `• Crear recordatorios de estudio\\n`;\n            response += `• Agendar sesiones de repaso`;\n            return response;\n        }\n        // General fallback with context\n        let response = `¡Hola${userName ? ' ' + userName : ''}! 👋\\n\\n`;\n        if (context.currentSubject) {\n            response += `Veo que hemos estado trabajando con ${context.currentSubject}. `;\n        }\n        response += `¿En qué más puedo ayudarte hoy?\\n\\n`;\n        response += `Puedo ayudarte con:\\n`;\n        response += `📚 **Explicar conceptos** de tus materias\\n`;\n        response += `📝 **Resolver ejercicios** paso a paso\\n`;\n        response += `📅 **Agendar eventos** en tu calendario\\n`;\n        response += `🎯 **Hacer evaluaciones** adaptativas\\n`;\n        response += `🔍 **Buscar información** académica`;\n        return response;\n    }\n    /**\n   * Analyzes message metadata for context\n   */ static analyzeMessageMetadata(message) {\n        const msgLower = message.toLowerCase();\n        // Subject detection\n        let subject;\n        if (/matemáticas?|álgebra|geometría|cálculo/.test(msgLower)) {\n            subject = 'matemáticas';\n        } else if (/física|mecánica|cinemática|energía/.test(msgLower)) {\n            subject = 'física';\n        } else if (/química|reacción|átomo|molécula/.test(msgLower)) {\n            subject = 'química';\n        }\n        // Topic detection\n        let topic;\n        const topicMatches = msgLower.match(/(ecuación|función|derivada|integral|fórmula|problema)/gi);\n        if (topicMatches) {\n            topic = topicMatches[0];\n        }\n        // Intention detection\n        let intention;\n        if (/explica|qué es|cómo funciona/.test(msgLower)) {\n            intention = 'explanation';\n        } else if (/resuelve|calcula|encuentra/.test(msgLower)) {\n            intention = 'problem_solving';\n        } else if (/ayuda|no entiendo|estoy confundido/.test(msgLower)) {\n            intention = 'help_request';\n        } else if (/continúa|sigue|y después/.test(msgLower)) {\n            intention = 'continuation';\n        }\n        // Confidence based on clarity and specificity\n        let confidence = 0.5;\n        if (subject) confidence += 0.2;\n        if (topic) confidence += 0.2;\n        if (intention) confidence += 0.1;\n        return {\n            subject,\n            topic,\n            intention,\n            confidence: Math.min(confidence, 1.0)\n        };\n    }\n    /**\n   * Updates contextual information based on new message\n   */ static async updateContextualInformation(context, message) {\n        const recentTurns = context.conversationFlow.slice(-5);\n        const metadata = recentTurns[recentTurns.length - 1]?.metadata;\n        // Update current topic/subject if detected\n        if (metadata?.subject) {\n            context.currentSubject = metadata.subject;\n        }\n        if (metadata?.topic) {\n            context.currentTopic = metadata.topic;\n        }\n        // Detect conversation continuity patterns\n        if (metadata?.intention === 'continuation') {\n            const lastAssistantTurn = recentTurns.slice().reverse().find((turn)=>turn.role === 'assistant');\n            if (lastAssistantTurn?.metadata?.subject) {\n                context.currentSubject = lastAssistantTurn.metadata.subject;\n            }\n        }\n        // Update active intentions\n        if (metadata?.intention && !context.activeIntentions.includes(metadata.intention)) {\n            context.activeIntentions.push(metadata.intention);\n            // Keep only recent intentions\n            if (context.activeIntentions.length > 3) {\n                context.activeIntentions.shift();\n            }\n        }\n        // Create context references for important information\n        if (metadata?.confidence && metadata.confidence > 0.7) {\n            const reference = {\n                id: `ref_${Date.now()}`,\n                type: this.determineReferenceType(metadata),\n                content: message,\n                relevanceScore: metadata.confidence,\n                turnIndex: context.conversationFlow.length - 1,\n                timestamp: new Date()\n            };\n            context.referenceMemory.push(reference);\n            // Keep only most relevant references\n            if (context.referenceMemory.length > this.MAX_REFERENCES) {\n                context.referenceMemory.sort((a, b)=>b.relevanceScore - a.relevanceScore);\n                context.referenceMemory = context.referenceMemory.slice(0, this.MAX_REFERENCES);\n            }\n        }\n        // Update context summary\n        await this.updateContextSummary(context);\n    }\n    /**\n   * Determines reference type based on metadata\n   */ static determineReferenceType(metadata) {\n        if (metadata.intention === 'continuation') return 'topic_continuation';\n        if (metadata.intention === 'problem_solving') return 'problem_solving';\n        if (metadata.intention === 'explanation') return 'explanation_followup';\n        return 'subject_reference';\n    }\n    /**\n   * Updates context summary with key conversation points\n   */ static async updateContextSummary(context) {\n        const recentTurns = context.conversationFlow.slice(-6);\n        const keyTopics = [\n            ...new Set(recentTurns.map((turn)=>turn.metadata.topic).filter(Boolean))\n        ];\n        const keySubjects = [\n            ...new Set(recentTurns.map((turn)=>turn.metadata.subject).filter(Boolean))\n        ];\n        const summaryParts = [];\n        if (keySubjects.length > 0) {\n            summaryParts.push(`Materias: ${keySubjects.join(', ')}`);\n        }\n        if (keyTopics.length > 0) {\n            summaryParts.push(`Temas: ${keyTopics.join(', ')}`);\n        }\n        if (context.activeIntentions.length > 0) {\n            summaryParts.push(`Intenciones: ${context.activeIntentions.join(', ')}`);\n        }\n        context.contextSummary = summaryParts.join(' | ') || 'Conversación general';\n    }\n    /**\n   * Generates contextually aware response using persistent storage\n   */ static async generateContextualResponse(context, userName, pendingTasks = []) {\n        // Get learning profile for personalization\n        const learningProfile = _advanced_learning_profiles__WEBPACK_IMPORTED_MODULE_0__.AdvancedLearningProfileManager.getLearningProfile(context.userId);\n        // Update learning profile based on current message\n        const latestMessage = context.conversationFlow[context.conversationFlow.length - 1]?.content || '';\n        _advanced_learning_profiles__WEBPACK_IMPORTED_MODULE_0__.AdvancedLearningProfileManager.processUserMessage(context.userId, latestMessage);\n        // Analyze conversation for continuity\n        const continuityAnalysis = this.analyzeContinuity(context);\n        // 🎯 FIRST PRIORITY: Check for calendar task execution\n        const calendarResult = await this.handleCalendarTasks(context.userId, latestMessage, this.formatConversationHistory(context), pendingTasks);\n        if (calendarResult) {\n            console.log(`📅 Calendar task executed: ${calendarResult.type}`);\n            return {\n                content: calendarResult.content,\n                context,\n                continuityScore: 0.9,\n                personalizations: [\n                    'calendar_task_executed'\n                ],\n                suggestedFollowups: calendarResult.metadata?.suggestedActions || []\n            };\n        }\n        // Generate base response using AI providers directly\n        const { aiService } = __webpack_require__(/*! ./ai-providers */ \"(rsc)/./src/lib/ai-providers.ts\");\n        let baseContent = '';\n        try {\n            // Create educational prompt based on context\n            const educationalPrompt = this.buildEducationalPrompt(context, latestMessage, userName);\n            baseContent = await aiService.generateExercise(educationalPrompt);\n            // If AI service returns fallback template, use contextual fallback\n            if (baseContent === 'TEMPLATE_FALLBACK') {\n                baseContent = this.generateContextualFallback(context, latestMessage, userName);\n            }\n        } catch (error) {\n            console.error('AI service error, using contextual fallback:', error);\n            baseContent = this.generateContextualFallback(context, latestMessage, userName);\n        }\n        // Enhance response with contextual information\n        let enhancedContent = baseContent;\n        // Add continuity references if relevant\n        if (continuityAnalysis.shouldReference) {\n            enhancedContent = this.addContinuityReferences(enhancedContent, context);\n        }\n        // Apply learning style adaptations\n        enhancedContent = _advanced_learning_profiles__WEBPACK_IMPORTED_MODULE_0__.AdvancedLearningProfileManager.adaptResponseToLearningStyle(enhancedContent, learningProfile);\n        // Determine personalizations applied\n        const personalizations = [];\n        if (continuityAnalysis.shouldReference) personalizations.push('context_reference');\n        if (learningProfile.primaryStyle !== 'multimodal') personalizations.push('learning_style_adaptation');\n        if (pendingTasks.length > 0) personalizations.push('task_aware');\n        // Generate visual recommendations\n        let visualRecommendation;\n        if (learningProfile.adaptationPreferences.prefersVisualAids && (context.currentSubject || context.currentTopic)) {\n            visualRecommendation = {\n                type: _visual_learning_engine__WEBPACK_IMPORTED_MODULE_1__.VisualLearningEngine.detectOptimalVisualType(enhancedContent, context.currentSubject),\n                reason: `Recomendado para tu perfil de aprendizaje ${learningProfile.primaryStyle}`\n            };\n        }\n        // Generate follow-up suggestions\n        const followups = this.generateContextualFollowups(context, learningProfile);\n        return {\n            content: enhancedContent,\n            context,\n            continuityScore: continuityAnalysis.score,\n            personalizations,\n            suggestedFollowups: followups,\n            visualRecommendation\n        };\n    }\n    /**\n   * Analyzes conversation continuity\n   */ static analyzeContinuity(context) {\n        const recentTurns = context.conversationFlow.slice(-4);\n        let score = 0.5 // Base score\n        ;\n        let shouldReference = false;\n        let referenceType;\n        // Check for topic continuity\n        const topics = recentTurns.map((turn)=>turn.metadata.topic).filter(Boolean);\n        if (topics.length > 1 && topics[topics.length - 1] === topics[topics.length - 2]) {\n            score += 0.2;\n            shouldReference = true;\n            referenceType = 'topic_continuity';\n        }\n        // Check for subject continuity\n        const subjects = recentTurns.map((turn)=>turn.metadata.subject).filter(Boolean);\n        if (subjects.length > 1 && subjects[subjects.length - 1] === subjects[subjects.length - 2]) {\n            score += 0.15;\n            shouldReference = true;\n            referenceType = 'subject_continuity';\n        }\n        // Check for continuation indicators\n        const latestMessage = recentTurns[recentTurns.length - 1]?.content?.toLowerCase() || '';\n        if (/continúa|sigue|y después|también|además/.test(latestMessage)) {\n            score += 0.25;\n            shouldReference = true;\n            referenceType = 'explicit_continuation';\n        }\n        // Check for question follow-up patterns\n        const hasQuestionFollowup = recentTurns.some((turn, index)=>index > 0 && turn.role === 'user' && /por qué|cómo|cuándo|dónde|explica/.test(turn.content.toLowerCase()) && recentTurns[index - 1]?.role === 'assistant');\n        if (hasQuestionFollowup) {\n            score += 0.1;\n            shouldReference = true;\n            referenceType = 'followup_question';\n        }\n        return {\n            score: Math.min(score, 1.0),\n            shouldReference,\n            referenceType\n        };\n    }\n    /**\n   * Adds continuity references to response\n   */ static addContinuityReferences(content, context) {\n        const recentAssistantTurns = context.conversationFlow.filter((turn)=>turn.role === 'assistant').slice(-2);\n        if (recentAssistantTurns.length === 0) return content;\n        const lastTopic = context.currentTopic;\n        const lastSubject = context.currentSubject;\n        let referencePrefix = '';\n        if (lastTopic && lastSubject) {\n            referencePrefix = `Continuando con ${lastTopic} en ${lastSubject}: `;\n        } else if (lastTopic) {\n            referencePrefix = `Siguiendo con el tema de ${lastTopic}: `;\n        } else if (lastSubject) {\n            referencePrefix = `Continuando con ${lastSubject}: `;\n        } else {\n            referencePrefix = `Como mencioné anteriormente: `;\n        }\n        return referencePrefix + content;\n    }\n    /**\n   * Generates contextual follow-up suggestions\n   */ static generateContextualFollowups(context, learningProfile) {\n        const followups = [];\n        // Based on current topic/subject\n        if (context.currentTopic) {\n            followups.push(`¿Tienes más preguntas sobre ${context.currentTopic}?`);\n        }\n        if (context.currentSubject) {\n            followups.push(`¿Te gustaría ver ejercicios de ${context.currentSubject}?`);\n        }\n        // Based on learning style\n        if (learningProfile.adaptationPreferences.prefersVisualAids) {\n            followups.push('¿Te ayudaría ver un diagrama de esto?');\n        }\n        if (learningProfile.adaptationPreferences.prefersInteraction) {\n            followups.push('¿Quieres practicar con un ejercicio?');\n        }\n        // Based on active intentions\n        if (context.activeIntentions.includes('explanation')) {\n            followups.push('¿Necesitas que profundice en algún aspecto específico?');\n        }\n        if (context.activeIntentions.includes('problem_solving')) {\n            followups.push('¿Quieres que resolvamos otro problema similar?');\n        }\n        // Generic contextual followups\n        if (context.conversationFlow.length > 3) {\n            followups.push('¿Hay algo que no quedó claro?');\n        }\n        return followups.slice(0, 3) // Limit to 3 suggestions\n        ;\n    }\n    /**\n   * Formats conversation history for external engines\n   */ static formatConversationHistory(context) {\n        return context.conversationFlow.slice(-10) // Last 10 turns\n        .map((turn)=>({\n                role: turn.role,\n                content: turn.content\n            }));\n    }\n    /**\n   * Maintains context memory by cleaning old data\n   */ static maintainContextMemory(context) {\n        // Keep only recent turns\n        if (context.conversationFlow.length > this.MAX_TURNS_RETAINED) {\n            context.conversationFlow = context.conversationFlow.slice(-this.MAX_TURNS_RETAINED);\n        }\n        // Clean old references\n        const cutoffTime = new Date(Date.now() - 12 * 60 * 60 * 1000) // 12 hours\n        ;\n        context.referenceMemory = context.referenceMemory.filter((ref)=>ref.timestamp > cutoffTime);\n        // Clean old intentions\n        if (context.activeIntentions.length > 3) {\n            context.activeIntentions = context.activeIntentions.slice(-3);\n        }\n    }\n    /**\n   * Gets conversation statistics using persistent storage\n   */ static getConversationStats(userId) {\n        const { getUserActiveSessions } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        if (userId) {\n            const userSessions = getUserActiveSessions(userId);\n            return {\n                activeContexts: userSessions.length,\n                totalTurns: userSessions.reduce((sum, session)=>sum + session.turns.length, 0),\n                currentTopics: [\n                    ...new Set(userSessions.map((session)=>session.currentTopic).filter(Boolean))\n                ],\n                currentSubjects: [\n                    ...new Set(userSessions.map((session)=>session.currentSubject).filter(Boolean))\n                ]\n            };\n        }\n        // For global stats, we need to import the conversations array\n        const { tempConversations } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        const activeConversations = tempConversations.filter((session)=>{\n            const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n            return session.lastUpdate > oneHourAgo;\n        });\n        return {\n            totalActiveContexts: activeConversations.length,\n            totalUsers: new Set(activeConversations.map((session)=>session.userId)).size,\n            averageContextAge: this.calculateAverageContextAgeFromSessions(activeConversations)\n        };\n    }\n    /**\n   * Calculates average context age from persistent sessions\n   */ static calculateAverageContextAgeFromSessions(sessions) {\n        if (sessions.length === 0) return 0;\n        const now = Date.now();\n        const totalAge = sessions.reduce((sum, session)=>sum + (now - new Date(session.lastUpdate).getTime()), 0);\n        return Math.round(totalAge / sessions.length / (60 * 1000)) // Average age in minutes\n        ;\n    }\n    /**\n   * Forces cleanup of all contexts (useful for testing)\n   */ static clearAllContexts() {\n        const { cleanupOldConversations } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        cleanupOldConversations();\n        console.log('🧹 All conversation contexts cleared using persistent storage');\n    }\n    /**\n   * Gets active context for user (useful for debugging)\n   */ static getActiveContext(userId, sessionId) {\n        const { getConversationSession, getUserActiveSessions } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        if (sessionId) {\n            const session = getConversationSession(userId, sessionId);\n            if (session) {\n                return {\n                    userId: session.userId,\n                    sessionId: session.sessionId,\n                    currentTopic: session.currentTopic,\n                    currentSubject: session.currentSubject,\n                    conversationFlow: session.turns,\n                    contextSummary: this.buildContextSummary(session),\n                    activeIntentions: this.extractActiveIntentions(session.turns.slice(-5)),\n                    pendingQuestions: [],\n                    referenceMemory: this.buildReferenceMemory(session.turns),\n                    lastUpdate: session.lastUpdate\n                };\n            }\n        }\n        // Find any active session for user\n        const activeSessions = getUserActiveSessions(userId);\n        if (activeSessions.length > 0) {\n            const session = activeSessions[0];\n            return {\n                userId: session.userId,\n                sessionId: session.sessionId,\n                currentTopic: session.currentTopic,\n                currentSubject: session.currentSubject,\n                conversationFlow: session.turns,\n                contextSummary: this.buildContextSummary(session),\n                activeIntentions: this.extractActiveIntentions(session.turns.slice(-5)),\n                pendingQuestions: [],\n                referenceMemory: this.buildReferenceMemory(session.turns),\n                lastUpdate: session.lastUpdate\n            };\n        }\n        return null;\n    }\n} // Persistent storage cleanup is handled by temp-storage.ts\n // No need for additional cleanup intervals\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/contextual-conversation-manager.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/hybrid-storage.ts":
/*!***********************************!*\
  !*** ./src/lib/hybrid-storage.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canSubmitThisWeek: () => (/* binding */ canSubmitThisWeek),\n/* harmony export */   createProgressReport: () => (/* binding */ createProgressReport),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   findProgressReportByUserAndWeek: () => (/* binding */ findProgressReportByUserAndWeek),\n/* harmony export */   findProgressReportsByUser: () => (/* binding */ findProgressReportsByUser),\n/* harmony export */   findUserByEmail: () => (/* binding */ findUserByEmail),\n/* harmony export */   findUserById: () => (/* binding */ findUserById),\n/* harmony export */   findUsersByRole: () => (/* binding */ findUsersByRole),\n/* harmony export */   generateStudentId: () => (/* binding */ generateStudentId),\n/* harmony export */   getAllProgressReports: () => (/* binding */ getAllProgressReports),\n/* harmony export */   getAllUsers: () => (/* binding */ getAllUsers),\n/* harmony export */   getCurrentWeekEnd: () => (/* binding */ getCurrentWeekEnd),\n/* harmony export */   getCurrentWeekStart: () => (/* binding */ getCurrentWeekStart),\n/* harmony export */   getMonthWeeks: () => (/* binding */ getMonthWeeks),\n/* harmony export */   initializeStorage: () => (/* binding */ initializeStorage),\n/* harmony export */   validateStudentId: () => (/* binding */ validateStudentId)\n/* harmony export */ });\n/* harmony import */ var _temp_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n// Hybrid storage system that can work with database or fallback to temp-storage\n\n// For now, use temp-storage exclusively to ensure stability\nconst useDatabase = false;\nconsole.log('🔄 Using temp-storage system for reliability');\n// Initialize the storage system\nasync function initializeStorage() {\n    console.log('✅ Temp-storage system initialized');\n}\n// User management functions with fallback\nasync function createUser(userData) {\n    const hashedPassword = (__webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/umd/index.js\").hashSync)(userData.password, 12);\n    const user = {\n        id: Date.now().toString(),\n        ...userData,\n        password: hashedPassword,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        status: 'ACTIVE'\n    };\n    _temp_storage__WEBPACK_IMPORTED_MODULE_0__.addUser(user);\n    return user;\n}\nasync function findUserByEmail(email) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findUserByEmail(email);\n}\nasync function getAllUsers() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getAllUsers();\n}\nasync function findUsersByRole(role) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findUsersByRole(role);\n}\nasync function findUserById(id) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findUserById(id);\n}\nasync function generateStudentId() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.generateStudentId();\n}\n// Progress reports functions with fallback\nasync function createProgressReport(data) {\n    const report = {\n        id: Date.now().toString(),\n        userId: data.userId,\n        weekStart: data.weekStart,\n        weekEnd: data.weekEnd,\n        submittedAt: new Date(),\n        responses: data.responses\n    };\n    _temp_storage__WEBPACK_IMPORTED_MODULE_0__.addWeeklyReport(report);\n    return report;\n}\nasync function findProgressReportsByUser(userId) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findWeeklyReportsByUser(userId);\n}\nasync function getAllProgressReports() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getAllWeeklyReports();\n}\nasync function findProgressReportByUserAndWeek(userId, weekStart) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findWeeklyReportByUserAndWeek(userId, weekStart);\n}\nasync function canSubmitThisWeek(userId) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.canSubmitThisWeek(userId);\n}\n// Utility functions (same for both)\nfunction getCurrentWeekStart() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getCurrentWeekStart();\n}\nfunction getCurrentWeekEnd() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getCurrentWeekEnd();\n}\nfunction getMonthWeeks(year, month) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getMonthWeeks(year, month);\n}\nfunction validateStudentId(studentId) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.validateStudentId(studentId);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2h5YnJpZC1zdG9yYWdlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0ZBQWdGO0FBQ25DO0FBRTdDLDREQUE0RDtBQUM1RCxNQUFNQyxjQUFjO0FBRXBCQyxRQUFRQyxHQUFHLENBQUM7QUFFWixnQ0FBZ0M7QUFDekIsZUFBZUM7SUFDcEJGLFFBQVFDLEdBQUcsQ0FBQztBQUNkO0FBRUEsMENBQTBDO0FBQ25DLGVBQWVFLFdBQVdDLFFBQWE7SUFDNUMsTUFBTUMsaUJBQWlCQyw0RkFBNEIsQ0FBQ0YsU0FBU0ksUUFBUSxFQUFFO0lBQ3ZFLE1BQU1DLE9BQU87UUFDWEMsSUFBSUMsS0FBS0MsR0FBRyxHQUFHQyxRQUFRO1FBQ3ZCLEdBQUdULFFBQVE7UUFDWEksVUFBVUg7UUFDVlMsV0FBVyxJQUFJSDtRQUNmSSxXQUFXLElBQUlKO1FBQ2ZLLFFBQVE7SUFDVjtJQUNBbEIsa0RBQW1CLENBQUNXO0lBQ3BCLE9BQU9BO0FBQ1Q7QUFFTyxlQUFlUyxnQkFBZ0JDLEtBQWE7SUFDakQsT0FBT3JCLDBEQUEyQixDQUFDcUI7QUFDckM7QUFFTyxlQUFlQztJQUNwQixPQUFPdEIsc0RBQXVCO0FBQ2hDO0FBRU8sZUFBZXVCLGdCQUFnQkMsSUFBUztJQUM3QyxPQUFPeEIsMERBQTJCLENBQUN3QjtBQUNyQztBQUVPLGVBQWVDLGFBQWFiLEVBQVU7SUFDM0MsT0FBT1osdURBQXdCLENBQUNZO0FBQ2xDO0FBRU8sZUFBZWM7SUFDcEIsT0FBTzFCLDREQUE2QjtBQUN0QztBQUVBLDJDQUEyQztBQUNwQyxlQUFlMkIscUJBQXFCQyxJQUFTO0lBQ2xELE1BQU1DLFNBQVM7UUFDYmpCLElBQUlDLEtBQUtDLEdBQUcsR0FBR0MsUUFBUTtRQUN2QmUsUUFBUUYsS0FBS0UsTUFBTTtRQUNuQkMsV0FBV0gsS0FBS0csU0FBUztRQUN6QkMsU0FBU0osS0FBS0ksT0FBTztRQUNyQkMsYUFBYSxJQUFJcEI7UUFDakJxQixXQUFXTixLQUFLTSxTQUFTO0lBQzNCO0lBQ0FsQywwREFBMkIsQ0FBQzZCO0lBQzVCLE9BQU9BO0FBQ1Q7QUFFTyxlQUFlTywwQkFBMEJOLE1BQWM7SUFDNUQsT0FBTzlCLGtFQUFtQyxDQUFDOEI7QUFDN0M7QUFFTyxlQUFlUTtJQUNwQixPQUFPdEMsOERBQStCO0FBQ3hDO0FBRU8sZUFBZXdDLGdDQUFnQ1YsTUFBYyxFQUFFQyxTQUFlO0lBQ25GLE9BQU8vQix3RUFBeUMsQ0FBQzhCLFFBQVFDO0FBQzNEO0FBRU8sZUFBZVcsa0JBQWtCWixNQUFjO0lBQ3BELE9BQU85Qiw0REFBNkIsQ0FBQzhCO0FBQ3ZDO0FBRUEsb0NBQW9DO0FBQzdCLFNBQVNhO0lBQ2QsT0FBTzNDLDhEQUErQjtBQUN4QztBQUVPLFNBQVM0QztJQUNkLE9BQU81Qyw0REFBNkI7QUFDdEM7QUFFTyxTQUFTNkMsY0FBY0MsSUFBWSxFQUFFQyxLQUFhO0lBQ3ZELE9BQU8vQyx3REFBeUIsQ0FBQzhDLE1BQU1DO0FBQ3pDO0FBRU8sU0FBU0Msa0JBQWtCQyxTQUFpQjtJQUNqRCxPQUFPakQsNERBQTZCLENBQUNpRDtBQUN2QyIsInNvdXJjZXMiOlsiL1VzZXJzL3JvZHJpZ29kaWJlcm5hcmRvMzNnbWFpbC5jb20vRG9jdW1lbnRzL0FwcCBEZXZlbG9wbWVudCBQcm95ZWN0cy9JbnRlbGxlZ28gUGxhdGZvcm0vc3JjL2xpYi9oeWJyaWQtc3RvcmFnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBIeWJyaWQgc3RvcmFnZSBzeXN0ZW0gdGhhdCBjYW4gd29yayB3aXRoIGRhdGFiYXNlIG9yIGZhbGxiYWNrIHRvIHRlbXAtc3RvcmFnZVxuaW1wb3J0ICogYXMgdGVtcFN0b3JhZ2UgZnJvbSAnLi90ZW1wLXN0b3JhZ2UnXG5cbi8vIEZvciBub3csIHVzZSB0ZW1wLXN0b3JhZ2UgZXhjbHVzaXZlbHkgdG8gZW5zdXJlIHN0YWJpbGl0eVxuY29uc3QgdXNlRGF0YWJhc2UgPSBmYWxzZVxuXG5jb25zb2xlLmxvZygn8J+UhCBVc2luZyB0ZW1wLXN0b3JhZ2Ugc3lzdGVtIGZvciByZWxpYWJpbGl0eScpXG5cbi8vIEluaXRpYWxpemUgdGhlIHN0b3JhZ2Ugc3lzdGVtXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZVN0b3JhZ2UoKSB7XG4gIGNvbnNvbGUubG9nKCfinIUgVGVtcC1zdG9yYWdlIHN5c3RlbSBpbml0aWFsaXplZCcpXG59XG5cbi8vIFVzZXIgbWFuYWdlbWVudCBmdW5jdGlvbnMgd2l0aCBmYWxsYmFja1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVVzZXIodXNlckRhdGE6IGFueSkge1xuICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IHJlcXVpcmUoJ2JjcnlwdGpzJykuaGFzaFN5bmModXNlckRhdGEucGFzc3dvcmQsIDEyKVxuICBjb25zdCB1c2VyID0ge1xuICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgLi4udXNlckRhdGEsXG4gICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgc3RhdHVzOiAnQUNUSVZFJyBhcyBjb25zdCxcbiAgfVxuICB0ZW1wU3RvcmFnZS5hZGRVc2VyKHVzZXIpXG4gIHJldHVybiB1c2VyXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kVXNlckJ5RW1haWwoZW1haWw6IHN0cmluZykge1xuICByZXR1cm4gdGVtcFN0b3JhZ2UuZmluZFVzZXJCeUVtYWlsKGVtYWlsKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsVXNlcnMoKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5nZXRBbGxVc2VycygpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kVXNlcnNCeVJvbGUocm9sZTogYW55KSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5maW5kVXNlcnNCeVJvbGUocm9sZSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRVc2VyQnlJZChpZDogc3RyaW5nKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5maW5kVXNlckJ5SWQoaWQpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVN0dWRlbnRJZCgpIHtcbiAgcmV0dXJuIHRlbXBTdG9yYWdlLmdlbmVyYXRlU3R1ZGVudElkKClcbn1cblxuLy8gUHJvZ3Jlc3MgcmVwb3J0cyBmdW5jdGlvbnMgd2l0aCBmYWxsYmFja1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVByb2dyZXNzUmVwb3J0KGRhdGE6IGFueSkge1xuICBjb25zdCByZXBvcnQgPSB7XG4gICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICB1c2VySWQ6IGRhdGEudXNlcklkLFxuICAgIHdlZWtTdGFydDogZGF0YS53ZWVrU3RhcnQsXG4gICAgd2Vla0VuZDogZGF0YS53ZWVrRW5kLFxuICAgIHN1Ym1pdHRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgIHJlc3BvbnNlczogZGF0YS5yZXNwb25zZXNcbiAgfVxuICB0ZW1wU3RvcmFnZS5hZGRXZWVrbHlSZXBvcnQocmVwb3J0KVxuICByZXR1cm4gcmVwb3J0XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kUHJvZ3Jlc3NSZXBvcnRzQnlVc2VyKHVzZXJJZDogc3RyaW5nKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5maW5kV2Vla2x5UmVwb3J0c0J5VXNlcih1c2VySWQpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxQcm9ncmVzc1JlcG9ydHMoKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5nZXRBbGxXZWVrbHlSZXBvcnRzKClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRQcm9ncmVzc1JlcG9ydEJ5VXNlckFuZFdlZWsodXNlcklkOiBzdHJpbmcsIHdlZWtTdGFydDogRGF0ZSkge1xuICByZXR1cm4gdGVtcFN0b3JhZ2UuZmluZFdlZWtseVJlcG9ydEJ5VXNlckFuZFdlZWsodXNlcklkLCB3ZWVrU3RhcnQpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjYW5TdWJtaXRUaGlzV2Vlayh1c2VySWQ6IHN0cmluZykge1xuICByZXR1cm4gdGVtcFN0b3JhZ2UuY2FuU3VibWl0VGhpc1dlZWsodXNlcklkKVxufVxuXG4vLyBVdGlsaXR5IGZ1bmN0aW9ucyAoc2FtZSBmb3IgYm90aClcbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50V2Vla1N0YXJ0KCkge1xuICByZXR1cm4gdGVtcFN0b3JhZ2UuZ2V0Q3VycmVudFdlZWtTdGFydCgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50V2Vla0VuZCgpIHtcbiAgcmV0dXJuIHRlbXBTdG9yYWdlLmdldEN1cnJlbnRXZWVrRW5kKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vbnRoV2Vla3MoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5nZXRNb250aFdlZWtzKHllYXIsIG1vbnRoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTdHVkZW50SWQoc3R1ZGVudElkOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHRlbXBTdG9yYWdlLnZhbGlkYXRlU3R1ZGVudElkKHN0dWRlbnRJZClcbn0iXSwibmFtZXMiOlsidGVtcFN0b3JhZ2UiLCJ1c2VEYXRhYmFzZSIsImNvbnNvbGUiLCJsb2ciLCJpbml0aWFsaXplU3RvcmFnZSIsImNyZWF0ZVVzZXIiLCJ1c2VyRGF0YSIsImhhc2hlZFBhc3N3b3JkIiwicmVxdWlyZSIsImhhc2hTeW5jIiwicGFzc3dvcmQiLCJ1c2VyIiwiaWQiLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJzdGF0dXMiLCJhZGRVc2VyIiwiZmluZFVzZXJCeUVtYWlsIiwiZW1haWwiLCJnZXRBbGxVc2VycyIsImZpbmRVc2Vyc0J5Um9sZSIsInJvbGUiLCJmaW5kVXNlckJ5SWQiLCJnZW5lcmF0ZVN0dWRlbnRJZCIsImNyZWF0ZVByb2dyZXNzUmVwb3J0IiwiZGF0YSIsInJlcG9ydCIsInVzZXJJZCIsIndlZWtTdGFydCIsIndlZWtFbmQiLCJzdWJtaXR0ZWRBdCIsInJlc3BvbnNlcyIsImFkZFdlZWtseVJlcG9ydCIsImZpbmRQcm9ncmVzc1JlcG9ydHNCeVVzZXIiLCJmaW5kV2Vla2x5UmVwb3J0c0J5VXNlciIsImdldEFsbFByb2dyZXNzUmVwb3J0cyIsImdldEFsbFdlZWtseVJlcG9ydHMiLCJmaW5kUHJvZ3Jlc3NSZXBvcnRCeVVzZXJBbmRXZWVrIiwiZmluZFdlZWtseVJlcG9ydEJ5VXNlckFuZFdlZWsiLCJjYW5TdWJtaXRUaGlzV2VlayIsImdldEN1cnJlbnRXZWVrU3RhcnQiLCJnZXRDdXJyZW50V2Vla0VuZCIsImdldE1vbnRoV2Vla3MiLCJ5ZWFyIiwibW9udGgiLCJ2YWxpZGF0ZVN0dWRlbnRJZCIsInN0dWRlbnRJZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/hybrid-storage.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/temp-storage.ts":
/*!*********************************!*\
  !*** ./src/lib/temp-storage.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addConversationTurn: () => (/* binding */ addConversationTurn),\n/* harmony export */   addPendingTask: () => (/* binding */ addPendingTask),\n/* harmony export */   addUser: () => (/* binding */ addUser),\n/* harmony export */   addWeeklyReport: () => (/* binding */ addWeeklyReport),\n/* harmony export */   canSubmitThisWeek: () => (/* binding */ canSubmitThisWeek),\n/* harmony export */   cleanupOldConversations: () => (/* binding */ cleanupOldConversations),\n/* harmony export */   createConversationSession: () => (/* binding */ createConversationSession),\n/* harmony export */   deleteUser: () => (/* binding */ deleteUser),\n/* harmony export */   findEventById: () => (/* binding */ findEventById),\n/* harmony export */   findUserByEmail: () => (/* binding */ findUserByEmail),\n/* harmony export */   findUserById: () => (/* binding */ findUserById),\n/* harmony export */   findUserByStudentId: () => (/* binding */ findUserByStudentId),\n/* harmony export */   findUsersByProgram: () => (/* binding */ findUsersByProgram),\n/* harmony export */   findUsersByRole: () => (/* binding */ findUsersByRole),\n/* harmony export */   findUsersByStatus: () => (/* binding */ findUsersByStatus),\n/* harmony export */   findWeeklyReportByUserAndWeek: () => (/* binding */ findWeeklyReportByUserAndWeek),\n/* harmony export */   findWeeklyReportsByUser: () => (/* binding */ findWeeklyReportsByUser),\n/* harmony export */   generateStudentId: () => (/* binding */ generateStudentId),\n/* harmony export */   getAllCalendarEvents: () => (/* binding */ getAllCalendarEvents),\n/* harmony export */   getAllUsers: () => (/* binding */ getAllUsers),\n/* harmony export */   getAllWeeklyReports: () => (/* binding */ getAllWeeklyReports),\n/* harmony export */   getConversationHistory: () => (/* binding */ getConversationHistory),\n/* harmony export */   getConversationSession: () => (/* binding */ getConversationSession),\n/* harmony export */   getCurrentWeekEnd: () => (/* binding */ getCurrentWeekEnd),\n/* harmony export */   getCurrentWeekStart: () => (/* binding */ getCurrentWeekStart),\n/* harmony export */   getEvents: () => (/* binding */ getEvents),\n/* harmony export */   getEventsForDateRange: () => (/* binding */ getEventsForDateRange),\n/* harmony export */   getMonthWeeks: () => (/* binding */ getMonthWeeks),\n/* harmony export */   getPendingTasks: () => (/* binding */ getPendingTasks),\n/* harmony export */   getUpcomingEvents: () => (/* binding */ getUpcomingEvents),\n/* harmony export */   getUserActiveSessions: () => (/* binding */ getUserActiveSessions),\n/* harmony export */   getWeekDates: () => (/* binding */ getWeekDates),\n/* harmony export */   getWeeklyReportsByDateRange: () => (/* binding */ getWeeklyReportsByDateRange),\n/* harmony export */   markTaskCompleted: () => (/* binding */ markTaskCompleted),\n/* harmony export */   tempConversations: () => (/* binding */ tempConversations),\n/* harmony export */   tempUsers: () => (/* binding */ tempUsers),\n/* harmony export */   tempWeeklyReports: () => (/* binding */ tempWeeklyReports),\n/* harmony export */   updateConversationSession: () => (/* binding */ updateConversationSession),\n/* harmony export */   updateUser: () => (/* binding */ updateUser),\n/* harmony export */   validateStudentId: () => (/* binding */ validateStudentId)\n/* harmony export */ });\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n// Temporary user storage - replace with database later\n// Singleton pattern to persist data across requests\nconst globalForStorage = globalThis;\nconst tempUsers = globalForStorage.tempUsers ?? [];\nconst tempWeeklyReports = globalForStorage.tempWeeklyReports ?? [];\n// Assign to globalThis to persist across requests\nglobalForStorage.tempUsers = tempUsers;\nglobalForStorage.tempWeeklyReports = tempWeeklyReports;\nfunction addUser(user) {\n    tempUsers.push(user);\n}\nfunction findUserByEmail(email) {\n    return tempUsers.find((user)=>user.email === email);\n}\nfunction findUserByStudentId(studentId) {\n    return tempUsers.find((user)=>user.studentId === studentId);\n}\nfunction findUserById(id) {\n    return tempUsers.find((user)=>user.id === id);\n}\nfunction getAllUsers() {\n    return tempUsers;\n}\nfunction findUsersByRole(role) {\n    return tempUsers.filter((user)=>user.role === role);\n}\nfunction findUsersByProgram(program) {\n    return tempUsers.filter((user)=>user.program === program);\n}\nfunction findUsersByStatus(status) {\n    return tempUsers.filter((user)=>user.status === status);\n}\nfunction updateUser(id, updates) {\n    const userIndex = tempUsers.findIndex((user)=>user.id === id);\n    if (userIndex !== -1) {\n        tempUsers[userIndex] = {\n            ...tempUsers[userIndex],\n            ...updates,\n            updatedAt: new Date()\n        };\n        return tempUsers[userIndex];\n    }\n    return null;\n}\nfunction deleteUser(id) {\n    const userIndex = tempUsers.findIndex((user)=>user.id === id);\n    if (userIndex !== -1) {\n        return tempUsers.splice(userIndex, 1)[0];\n    }\n    return null;\n}\nfunction validateStudentId(studentId) {\n    // Formato sugerido: EST-YYYY-XXX (ej: EST-2024-001)\n    const studentIdRegex = /^EST-\\d{4}-\\d{3}$/;\n    return studentIdRegex.test(studentId);\n}\nfunction generateStudentId() {\n    const currentYear = new Date().getFullYear();\n    const existingIds = tempUsers.filter((user)=>user.studentId && user.studentId.startsWith(`EST-${currentYear}`)).map((user)=>user.studentId).sort();\n    let nextNumber = 1;\n    if (existingIds.length > 0) {\n        const lastId = existingIds[existingIds.length - 1];\n        const lastNumber = parseInt(lastId.split('-')[2]);\n        nextNumber = lastNumber + 1;\n    }\n    return `EST-${currentYear}-${nextNumber.toString().padStart(3, '0')}`;\n}\n// Weekly Reports Functions\nfunction addWeeklyReport(report) {\n    tempWeeklyReports.push(report);\n}\nfunction findWeeklyReportsByUser(userId) {\n    return tempWeeklyReports.filter((report)=>report.userId === userId);\n}\nfunction findWeeklyReportByUserAndWeek(userId, weekStart) {\n    return tempWeeklyReports.find((report)=>report.userId === userId && report.weekStart.getTime() === weekStart.getTime());\n}\nfunction getAllWeeklyReports() {\n    return tempWeeklyReports;\n}\nfunction getWeeklyReportsByDateRange(startDate, endDate) {\n    return tempWeeklyReports.filter((report)=>report.weekStart >= startDate && report.weekEnd <= endDate);\n}\n// Date utility functions\nfunction getCurrentWeekStart() {\n    const now = new Date();\n    const monday = new Date(now);\n    const day = now.getDay();\n    const diff = now.getDate() - day + (day === 0 ? -6 : 1 // Adjust for Sunday\n    );\n    monday.setDate(diff);\n    monday.setHours(0, 0, 0, 0);\n    return monday;\n}\nfunction getCurrentWeekEnd() {\n    const weekStart = getCurrentWeekStart();\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekStart.getDate() + 6);\n    weekEnd.setHours(23, 59, 59, 999);\n    return weekEnd;\n}\nfunction canSubmitThisWeek(userId) {\n    const weekStart = getCurrentWeekStart();\n    const weekEnd = getCurrentWeekEnd();\n    const currentDate = new Date();\n    const existingReport = findWeeklyReportByUserAndWeek(userId, weekStart);\n    // Can submit if:\n    // 1. We are currently in this week (currentDate is between weekStart and weekEnd)\n    // 2. No report exists for this week\n    const isCurrentWeek = currentDate >= weekStart && currentDate <= weekEnd;\n    console.log(`🔍 Debug canSubmitThisWeek for user ${userId}:`);\n    console.log(`  Current date: ${currentDate.toISOString()}`);\n    console.log(`  Week start: ${weekStart.toISOString()}`);\n    console.log(`  Week end: ${weekEnd.toISOString()}`);\n    console.log(`  Is current week: ${isCurrentWeek}`);\n    console.log(`  Existing report: ${existingReport ? 'YES' : 'NO'}`);\n    console.log(`  Can submit: ${isCurrentWeek && !existingReport}`);\n    return isCurrentWeek && !existingReport;\n}\nfunction getWeekDates(date) {\n    const start = new Date(date);\n    const day = start.getDay();\n    const diff = start.getDate() - day + (day === 0 ? -6 : 1);\n    start.setDate(diff);\n    start.setHours(0, 0, 0, 0);\n    const end = new Date(start);\n    end.setDate(start.getDate() + 6);\n    end.setHours(23, 59, 59, 999);\n    return {\n        start,\n        end\n    };\n}\nfunction getMonthWeeks(year, month) {\n    const weeks = [];\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    let current = new Date(firstDay);\n    // Adjust to start from Monday of first week\n    const dayOfWeek = current.getDay();\n    const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n    current.setDate(current.getDate() - daysToSubtract);\n    while(current <= lastDay){\n        const weekStart = new Date(current);\n        const weekEnd = new Date(current);\n        weekEnd.setDate(weekStart.getDate() + 6);\n        weeks.push({\n            start: weekStart,\n            end: weekEnd\n        });\n        current.setDate(current.getDate() + 7);\n    }\n    return weeks;\n}\n// ===== CALENDAR FUNCTIONS =====\n// These functions integrate with the calendar system for Sara AI\nfunction getEvents(userId) {\n    // Import calendar data functions\n    try {\n        const { getUserCalendarData } = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n        const userData = getUserCalendarData(userId);\n        return userData?.events || [];\n    } catch (error) {\n        console.error('Error getting calendar events:', error);\n        return [];\n    }\n}\nfunction getAllCalendarEvents(userId) {\n    // Alias for getEvents for compatibility\n    return getEvents(userId);\n}\nfunction getUpcomingEvents(userId, days = 30) {\n    try {\n        const allEvents = getEvents(userId);\n        const now = new Date();\n        const futureDate = new Date();\n        futureDate.setDate(futureDate.getDate() + days);\n        return allEvents.filter((event)=>{\n            const eventDate = new Date(event.date);\n            return eventDate >= now && eventDate <= futureDate;\n        }).sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n    } catch (error) {\n        console.error('Error getting upcoming events:', error);\n        return [];\n    }\n}\nfunction getEventsForDateRange(userId, startDate, endDate) {\n    try {\n        const allEvents = getEvents(userId);\n        return allEvents.filter((event)=>{\n            const eventDate = new Date(event.date);\n            return eventDate >= startDate && eventDate <= endDate;\n        });\n    } catch (error) {\n        console.error('Error getting events for date range:', error);\n        return [];\n    }\n}\nfunction findEventById(userId, eventId) {\n    try {\n        const allEvents = getEvents(userId);\n        return allEvents.find((event)=>event.id === eventId) || null;\n    } catch (error) {\n        console.error('Error finding event by ID:', error);\n        return null;\n    }\n}\n// Global storage for conversations\nconst globalForConversations = globalThis;\nconst tempConversations = globalForConversations.tempConversations ?? [];\nglobalForConversations.tempConversations = tempConversations;\nfunction getConversationSession(userId, sessionId) {\n    return tempConversations.find((session)=>session.userId === userId && session.sessionId === sessionId) || null;\n}\nfunction createConversationSession(userId, sessionId) {\n    // First remove any old session for the same user/sessionId\n    const existingIndex = tempConversations.findIndex((session)=>session.userId === userId && session.sessionId === sessionId);\n    if (existingIndex !== -1) {\n        tempConversations.splice(existingIndex, 1);\n    }\n    const newSession = {\n        userId,\n        sessionId,\n        turns: [],\n        currentTopic: undefined,\n        currentSubject: undefined,\n        pendingTasks: [],\n        lastUpdate: new Date()\n    };\n    tempConversations.push(newSession);\n    console.log(`💬 Created conversation session ${sessionId} for user ${userId}`);\n    return newSession;\n}\nfunction updateConversationSession(session) {\n    const index = tempConversations.findIndex((s)=>s.userId === session.userId && s.sessionId === session.sessionId);\n    if (index !== -1) {\n        tempConversations[index] = {\n            ...session,\n            lastUpdate: new Date()\n        };\n        console.log(`💬 Updated session ${session.sessionId} - ${session.turns.length} turns`);\n    } else {\n        tempConversations.push({\n            ...session,\n            lastUpdate: new Date()\n        });\n        console.log(`💬 Created new session ${session.sessionId} during update`);\n    }\n    return session;\n}\nfunction addConversationTurn(userId, sessionId, role, content, metadata = {}) {\n    let session = getConversationSession(userId, sessionId);\n    if (!session) {\n        session = createConversationSession(userId, sessionId);\n    }\n    const turn = {\n        id: `turn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        timestamp: new Date(),\n        role,\n        content,\n        metadata\n    };\n    session.turns.push(turn);\n    // Keep only last 20 turns per session\n    if (session.turns.length > 20) {\n        session.turns = session.turns.slice(-20);\n    }\n    return updateConversationSession(session);\n}\nfunction addPendingTask(userId, sessionId, type, description, data) {\n    let session = getConversationSession(userId, sessionId);\n    if (!session) {\n        session = createConversationSession(userId, sessionId);\n    }\n    const task = {\n        id: `task_${Date.now()}`,\n        type,\n        description,\n        data,\n        completed: false,\n        createdAt: new Date()\n    };\n    session.pendingTasks.push(task);\n    console.log(`📋 Added pending task: ${description}`);\n    updateConversationSession(session);\n}\nfunction markTaskCompleted(userId, sessionId, taskId, result) {\n    const session = getConversationSession(userId, sessionId);\n    if (!session) return false;\n    const task = session.pendingTasks.find((t)=>t.id === taskId);\n    if (!task) return false;\n    task.completed = true;\n    if (result) {\n        task.data.result = result;\n    }\n    console.log(`✅ Completed task: ${task.description}`);\n    updateConversationSession(session);\n    return true;\n}\nfunction getPendingTasks(userId, sessionId) {\n    const session = getConversationSession(userId, sessionId);\n    if (!session) return [];\n    return session.pendingTasks.filter((task)=>!task.completed);\n}\nfunction getConversationHistory(userId, sessionId, limit = 10) {\n    const session = getConversationSession(userId, sessionId);\n    if (!session) return [];\n    return session.turns.slice(-limit);\n}\nfunction getUserActiveSessions(userId) {\n    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n    return tempConversations.filter((session)=>session.userId === userId && session.lastUpdate > oneHourAgo);\n}\nfunction cleanupOldConversations() {\n    const sixHoursAgo = new Date(Date.now() - 6 * 60 * 60 * 1000);\n    const before = tempConversations.length;\n    // Remove conversations older than 6 hours\n    for(let i = tempConversations.length - 1; i >= 0; i--){\n        if (tempConversations[i].lastUpdate < sixHoursAgo) {\n            tempConversations.splice(i, 1);\n        }\n    }\n    const after = tempConversations.length;\n    if (before !== after) {\n        console.log(`🧹 Cleaned up ${before - after} old conversation sessions`);\n    }\n}\n// Initialize default users automatically\n\nfunction initDefaultUsers() {\n    // Check if demo users already exist to avoid duplicates\n    const studentExists = findUserByEmail(\"estudiante@demo.com\");\n    const instructorExists = findUserByEmail(\"instructor@demo.com\");\n    if (!studentExists || !instructorExists) {\n        console.log(\"🔧 Inicializando usuarios por defecto...\");\n        try {\n            const hashedPassword = bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hashSync(\"Estudiante123!!!\", 12);\n            // Only add student if doesn't exist\n            if (!studentExists) {\n                addUser({\n                    id: \"demo-student-fixed\",\n                    name: \"Estudiante Demo\",\n                    email: \"estudiante@demo.com\",\n                    password: hashedPassword,\n                    role: \"STUDENT\",\n                    studentId: \"EST-2025-001\",\n                    status: \"ACTIVE\",\n                    enrollmentYear: 2025,\n                    academicYear: \"2025-2026\",\n                    program: \"Ingeniería en Sistemas\",\n                    phoneNumber: \"+1234567890\",\n                    dateOfBirth: new Date(\"2000-01-01\"),\n                    address: \"Demo Address 123\",\n                    emergencyContact: {\n                        name: \"Contacto Demo\",\n                        phone: \"+0987654321\",\n                        relationship: \"Padre\"\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                });\n                console.log(\"✅ Usuario estudiante demo creado\");\n            }\n            // Only add instructor if doesn't exist\n            if (!instructorExists) {\n                addUser({\n                    id: \"demo-instructor-fixed\",\n                    name: \"Instructor Demo\",\n                    email: \"instructor@demo.com\",\n                    password: hashedPassword,\n                    role: \"INSTRUCTOR\",\n                    studentId: null,\n                    status: \"ACTIVE\",\n                    enrollmentYear: 2025,\n                    academicYear: \"2025-2026\",\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                });\n                console.log(\"✅ Usuario instructor demo creado\");\n            }\n            console.log(\"✅ Verificación de usuarios por defecto completada\");\n        } catch (error) {\n            console.error(\"❌ Error creando usuarios por defecto:\", error);\n        }\n    } else {\n        console.log(\"✅ Usuarios demo ya existen, no se reinicializan\");\n    }\n    // Always check and initialize sample reports\n    initSampleReports();\n}\nfunction initSampleReports() {\n    // Check if sample reports already exist for demo student\n    const existingSampleReports = tempWeeklyReports.filter((report)=>report.userId === \"demo-student-fixed\");\n    if (existingSampleReports.length === 0) {\n        console.log(\"📝 Inicializando reportes de muestra...\");\n        try {\n            // Get current week dates\n            const now = new Date();\n            const currentWeek = getCurrentWeekStart();\n            const currentWeekEnd = getCurrentWeekEnd();\n            // Previous week\n            const prevWeek = new Date(currentWeek);\n            prevWeek.setDate(prevWeek.getDate() - 7);\n            const prevWeekEnd = new Date(currentWeekEnd);\n            prevWeekEnd.setDate(prevWeekEnd.getDate() - 7);\n            // Sample report from previous week\n            addWeeklyReport({\n                id: \"sample-report-1\",\n                userId: \"demo-student-fixed\",\n                weekStart: prevWeek,\n                weekEnd: prevWeekEnd,\n                submittedAt: new Date(prevWeekEnd.getTime() - 24 * 60 * 60 * 1000),\n                responses: {\n                    temasYDominio: \"Esta semana trabajamos con JavaScript básico - Nivel 3: Domino funciones y arrays, y estoy aprendiendo objetos complejos.\",\n                    evidenciaAprendizaje: \"Completé un proyecto de To-Do List usando JavaScript vanilla. Implementé funciones para agregar, editar y eliminar tareas usando arrays y objetos.\",\n                    dificultadesEstrategias: \"Tuve dificultades con el manejo de eventos en JavaScript. Lo resolví practicando con ejemplos y consultando documentación de MDN.\",\n                    conexionesAplicacion: \"Los conceptos de eventos se conectan con la interactividad en aplicaciones web. Puedo aplicarlo para crear interfaces más dinámicas.\",\n                    comentariosAdicionales: \"Me siento más confiado con JavaScript. Quiero seguir practicando con proyectos más complejos.\"\n                }\n            });\n            // Two weeks ago report  \n            const twoWeeksAgo = new Date(currentWeek);\n            twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);\n            const twoWeeksAgoEnd = new Date(currentWeekEnd);\n            twoWeeksAgoEnd.setDate(twoWeeksAgoEnd.getDate() - 14);\n            addWeeklyReport({\n                id: \"sample-report-2\",\n                userId: \"demo-student-fixed\",\n                weekStart: twoWeeksAgo,\n                weekEnd: twoWeeksAgoEnd,\n                submittedAt: new Date(twoWeeksAgoEnd.getTime() - 12 * 60 * 60 * 1000),\n                responses: {\n                    temasYDominio: \"Esta semana estudiamos CSS Grid y Flexbox - Nivel 2: Entiendo los conceptos básicos pero aún tengo dudas con layouts complejos.\",\n                    evidenciaAprendizaje: \"Recreé el layout de una página web usando CSS Grid. Logré hacer una estructura responsive con header, sidebar y main content.\",\n                    dificultadesEstrategias: \"Me confundí con las propiedades grid-template-areas. Resolví el problema dibujando el layout en papel primero.\",\n                    conexionesAplicacion: \"CSS Grid es perfecto para crear layouts de páginas web modernas. Lo usaré en mi proyecto final de página portfolio.\",\n                    comentariosAdicionales: \"CSS es más divertido de lo que pensaba. Me gusta ver los resultados visuales inmediatos.\"\n                }\n            });\n            console.log(\"✅ Reportes de muestra creados exitosamente\");\n        } catch (error) {\n            console.error(\"❌ Error creando reportes de muestra:\", error);\n        }\n    } else {\n        console.log(\"✅ Reportes de muestra ya existen, no se reinicializan\");\n    }\n}\n// Initialize on module load\ninitDefaultUsers();\n// Start conversation cleanup interval\nsetInterval(cleanupOldConversations, 30 * 60 * 1000) // Every 30 minutes\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/temp-storage.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/visual-learning-engine.ts":
/*!*******************************************!*\
  !*** ./src/lib/visual-learning-engine.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VisualLearningEngine: () => (/* binding */ VisualLearningEngine),\n/* harmony export */   VisualType: () => (/* binding */ VisualType)\n/* harmony export */ });\n// Visual Learning Engine for Sara AI\n// Generates ASCII diagrams, conceptual maps, and visual representations for enhanced learning\nvar VisualType = /*#__PURE__*/ function(VisualType) {\n    VisualType[\"CONCEPT_MAP\"] = \"concept_map\";\n    VisualType[\"FLOWCHART\"] = \"flowchart\";\n    VisualType[\"HIERARCHY\"] = \"hierarchy\";\n    VisualType[\"TIMELINE\"] = \"timeline\";\n    VisualType[\"DIAGRAM\"] = \"diagram\";\n    VisualType[\"FORMULA_VISUALIZATION\"] = \"formula_visualization\";\n    VisualType[\"CHEMICAL_STRUCTURE\"] = \"chemical_structure\";\n    VisualType[\"MATH_GRAPH\"] = \"math_graph\";\n    VisualType[\"PROCESS_FLOW\"] = \"process_flow\";\n    return VisualType;\n}({});\nclass VisualLearningEngine {\n    /**\n   * Generates visual representation based on content and type\n   */ static generateVisual(content, type, subject) {\n        switch(type){\n            case \"concept_map\":\n                return this.generateConceptMap(content, subject);\n            case \"flowchart\":\n                return this.generateFlowchart(content);\n            case \"hierarchy\":\n                return this.generateHierarchy(content);\n            case \"timeline\":\n                return this.generateTimeline(content);\n            case \"formula_visualization\":\n                return this.generateFormulaVisualization(content);\n            case \"chemical_structure\":\n                return this.generateChemicalStructure(content);\n            case \"process_flow\":\n                return this.generateProcessFlow(content);\n            default:\n                return this.generateGenericDiagram(content);\n        }\n    }\n    /**\n   * Auto-detects the best visual type for content\n   */ static detectOptimalVisualType(content, subject) {\n        const contentLower = content.toLowerCase();\n        // Chemical formulas and structures\n        if (subject === 'chemistry' || subject === 'química' || /h2o|co2|nacl|ch4|formula|molecular|átomo|molécula/.test(contentLower)) {\n            return \"chemical_structure\";\n        }\n        // Mathematical formulas\n        if (subject === 'mathematics' || subject === 'matemáticas' || /ecuación|formula|función|derivada|integral|gráfica/.test(contentLower)) {\n            return \"formula_visualization\";\n        }\n        // Process or step-by-step content\n        if (/paso|step|proceso|luego|después|entonces|primero|segundo/.test(contentLower)) {\n            return \"process_flow\";\n        }\n        // Hierarchical content\n        if (/clasificación|categoría|tipo|nivel|jerarquía|superior|inferior/.test(contentLower)) {\n            return \"hierarchy\";\n        }\n        // Timeline content\n        if (/año|fecha|siglo|época|antes|después|historia|cronología/.test(contentLower)) {\n            return \"timeline\";\n        }\n        // Conceptual relationships\n        if (/relación|concepto|idea|conecta|vincula|asocia/.test(contentLower)) {\n            return \"concept_map\";\n        }\n        // Default to flowchart for general content\n        return \"flowchart\";\n    }\n    /**\n   * Generates concept map visualization\n   */ static generateConceptMap(content, subject) {\n        const concepts = this.extractConcepts(content);\n        const mainConcept = concepts[0] || 'Concepto Principal';\n        const relatedConcepts = concepts.slice(1, 5);\n        let ascii = `\n┌─────────────────────┐\n│   ${this.centerText(mainConcept, 17)}   │\n└─────────┬───────────┘\n          │\n    ┌─────┴─────┐\n    │           │`;\n        relatedConcepts.forEach((concept, index)=>{\n            if (index < 2) {\n                ascii += `\n┌──────────────┐    ┌──────────────┐\n│ ${this.centerText(concept, 12)} │    │              │\n└──────────────┘    └──────────────┘`;\n            }\n        });\n        if (relatedConcepts.length > 2) {\n            ascii += `\n    │           │\n┌───┴─────┐ ┌─────┴───┐`;\n            relatedConcepts.slice(2, 4).forEach((concept)=>{\n                ascii += `\n│ ${this.centerText(concept, 7)} │ │         │`;\n            });\n            ascii += `\n└─────────┘ └─────────┘`;\n        }\n        return {\n            type: \"concept_map\",\n            ascii: ascii,\n            description: `Mapa conceptual que muestra las relaciones entre ${mainConcept} y conceptos relacionados`,\n            elements: concepts.map((concept, index)=>({\n                    id: `concept_${index}`,\n                    type: \"concept_map\",\n                    title: concept,\n                    content: `Concepto: ${concept}`,\n                    connections: index === 0 ? relatedConcepts : [\n                        mainConcept\n                    ]\n                })),\n            instructions: [\n                'El concepto central aparece en la parte superior',\n                'Las líneas conectan conceptos relacionados',\n                'Los conceptos secundarios se ramifican del principal'\n            ]\n        };\n    }\n    /**\n   * Generates flowchart visualization\n   */ static generateFlowchart(content) {\n        const steps = this.extractSteps(content);\n        let ascii = `┌─────────────┐\\n│   INICIO    │\\n└──────┬──────┘\\n       │\\n       ▼`;\n        steps.forEach((step, index)=>{\n            const stepText = this.truncateText(step, 15);\n            ascii += `\n┌─────────────────┐\n│ ${this.centerText(stepText, 15)} │\n└─────────┬───────┘\n          │\n          ▼`;\n        });\n        ascii += `\n┌─────────────┐\n│    FIN      │\n└─────────────┘`;\n        return {\n            type: \"flowchart\",\n            ascii: ascii,\n            description: `Diagrama de flujo que muestra ${steps.length} pasos del proceso`,\n            elements: steps.map((step, index)=>({\n                    id: `step_${index}`,\n                    type: \"flowchart\",\n                    title: `Paso ${index + 1}`,\n                    content: step,\n                    connections: index < steps.length - 1 ? [\n                        `step_${index + 1}`\n                    ] : []\n                })),\n            instructions: [\n                'Sigue las flechas de arriba hacia abajo',\n                'Cada caja representa un paso del proceso',\n                'El flujo va desde INICIO hasta FIN'\n            ]\n        };\n    }\n    /**\n   * Generates hierarchy visualization\n   */ static generateHierarchy(content) {\n        const hierarchyItems = this.extractHierarchy(content);\n        const root = hierarchyItems[0] || 'Elemento Principal';\n        const children = hierarchyItems.slice(1, 4);\n        const grandchildren = hierarchyItems.slice(4, 8);\n        let ascii = `\n                    ┌──────────────────┐\n                    │ ${this.centerText(root, 16)} │\n                    └─────────┬────────┘\n                              │\n                 ┌────────────┼────────────┐`;\n        children.forEach((child, index)=>{\n            const spacing = index === 0 ? '     ' : index === 1 ? '           ' : '                 ';\n            ascii += `\n        ┌─────────────┐${spacing}┌─────────────┐\n        │ ${this.centerText(child, 11)} │${spacing}│             │\n        └─────────────┘${spacing}└─────────────┘`;\n        });\n        if (grandchildren.length > 0) {\n            ascii += `\n              │                     │\n        ┌─────┴─────┐         ┌─────┴─────┐`;\n            grandchildren.slice(0, 2).forEach((item)=>{\n                ascii += `\n        │ ${this.centerText(item, 9)} │         │           │`;\n            });\n            ascii += `\n        └───────────┘         └───────────┘`;\n        }\n        return {\n            type: \"hierarchy\",\n            ascii: ascii,\n            description: `Jerarquía que muestra la estructura de ${root} con ${children.length} niveles`,\n            elements: hierarchyItems.map((item, index)=>({\n                    id: `hierarchy_${index}`,\n                    type: \"hierarchy\",\n                    title: item,\n                    content: `Elemento de jerarquía: ${item}`,\n                    connections: index === 0 ? children : []\n                })),\n            instructions: [\n                'El elemento principal está en la parte superior',\n                'Los elementos secundarios se conectan hacia abajo',\n                'Cada nivel representa una subdivisión'\n            ]\n        };\n    }\n    /**\n   * Generates timeline visualization\n   */ static generateTimeline(content) {\n        const timeEvents = this.extractTimelineEvents(content);\n        let ascii = `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n`;\n        timeEvents.forEach((event, index)=>{\n            const eventText = this.truncateText(event.event, 20);\n            const timeText = event.time || `T${index + 1}`;\n            if (index % 2 === 0) {\n                // Event above timeline\n                ascii += `┌─────────────────────┐\\n│ ${this.centerText(eventText, 19)} │\\n└──────────┬──────────┘\\n           │\\n`;\n                ascii += `━━━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n`;\n                ascii += `           ${timeText}\\n\\n`;\n            } else {\n                // Event below timeline\n                ascii += `           │\\n           ┼\\n┌──────────┴──────────┐\\n│ ${this.centerText(eventText, 19)} │\\n└─────────────────────┘\\n`;\n            }\n        });\n        return {\n            type: \"timeline\",\n            ascii: ascii,\n            description: `Línea de tiempo con ${timeEvents.length} eventos cronológicos`,\n            elements: timeEvents.map((event, index)=>({\n                    id: `event_${index}`,\n                    type: \"timeline\",\n                    title: event.time || `Evento ${index + 1}`,\n                    content: event.event,\n                    connections: []\n                })),\n            instructions: [\n                'Los eventos se muestran en orden cronológico',\n                'La línea horizontal representa el tiempo',\n                'Los eventos alternos aparecen arriba y abajo de la línea'\n            ]\n        };\n    }\n    /**\n   * Generates formula visualization\n   */ static generateFormulaVisualization(content) {\n        const formula = this.extractFormula(content);\n        const variables = this.extractVariables(content);\n        let ascii = `\n╔═══════════════════════════════════╗\n║         FÓRMULA MATEMÁTICA        ║\n╠═══════════════════════════════════╣\n║                                   ║\n║         ${this.centerText(formula, 19)}         ║\n║                                   ║\n╠═══════════════════════════════════╣\n║           VARIABLES:              ║`;\n        variables.forEach((variable)=>{\n            ascii += `\n║  ${variable.symbol} = ${this.truncateText(variable.description, 20)}    ║`;\n        });\n        ascii += `\n║                                   ║\n╚═══════════════════════════════════╝\n\n    Representación visual:\n    \n         ${formula}\n         ↙     ↘\n    Variable   Resultado\n      ${variables[0]?.symbol || 'x'}         y`;\n        return {\n            type: \"formula_visualization\",\n            ascii: ascii,\n            description: `Visualización de la fórmula ${formula} con ${variables.length} variables`,\n            elements: [\n                {\n                    id: 'formula_main',\n                    type: \"formula_visualization\",\n                    title: 'Fórmula Principal',\n                    content: formula,\n                    connections: variables.map((_, index)=>`var_${index}`)\n                }\n            ].concat(variables.map((variable, index)=>({\n                    id: `var_${index}`,\n                    type: \"formula_visualization\",\n                    title: variable.symbol,\n                    content: variable.description,\n                    connections: []\n                }))),\n            instructions: [\n                'La fórmula principal se muestra en el centro',\n                'Las variables se definen en la tabla inferior',\n                'Sustituye los valores para resolver'\n            ]\n        };\n    }\n    /**\n   * Generates chemical structure visualization\n   */ static generateChemicalStructure(content) {\n        const molecule = this.extractMolecule(content);\n        const atoms = this.extractAtoms(content);\n        let ascii = '';\n        // Simple molecular representations\n        if (molecule.toLowerCase().includes('h2o') || molecule.toLowerCase().includes('agua')) {\n            ascii = `\n        Estructura del Agua (H₂O)\n        \n            H\n            │\n        H─O─H    o    H─O─H\n            \n        Representación angular:\n        \n            H\n             \\\\\n              O\n             /\n            H\n              \n        Ángulo H-O-H: 104.5°`;\n        } else if (molecule.toLowerCase().includes('co2')) {\n            ascii = `\n        Estructura del CO₂\n        \n        O═C═O\n        \n        Lineal, 180°\n        \n        Enlaces dobles:\n        O ══ C ══ O`;\n        } else if (molecule.toLowerCase().includes('ch4') || molecule.toLowerCase().includes('metano')) {\n            ascii = `\n        Estructura del Metano (CH₄)\n        \n           H\n           │\n        H─C─H\n           │\n           H\n           \n        Tetraédrica\n        Ángulo H-C-H: 109.5°`;\n        } else {\n            ascii = `\n        Estructura Molecular\n        \n        ${molecule}\n        \n        Átomos identificados:\n        ${atoms.map((atom)=>`• ${atom}`).join('\\n        ')}\n        \n        Representación esquemática:\n        \n        [Átomo1]─[Átomo2]─[Átomo3]`;\n        }\n        return {\n            type: \"chemical_structure\",\n            ascii: ascii,\n            description: `Estructura química de ${molecule} mostrando ${atoms.length} tipos de átomos`,\n            elements: [\n                {\n                    id: 'molecule_main',\n                    type: \"chemical_structure\",\n                    title: molecule,\n                    content: `Molécula: ${molecule}`,\n                    connections: atoms.map((_, index)=>`atom_${index}`)\n                }\n            ].concat(atoms.map((atom, index)=>({\n                    id: `atom_${index}`,\n                    type: \"chemical_structure\",\n                    title: atom,\n                    content: `Átomo: ${atom}`,\n                    connections: []\n                }))),\n            instructions: [\n                'Los átomos se representan con sus símbolos',\n                'Las líneas representan enlaces químicos',\n                'Los ángulos muestran la geometría molecular'\n            ]\n        };\n    }\n    /**\n   * Generates process flow visualization\n   */ static generateProcessFlow(content) {\n        const processes = this.extractProcesses(content);\n        let ascii = `\n    FLUJO DEL PROCESO\n    \n    ┌─────────────┐`;\n        processes.forEach((process, index)=>{\n            const processText = this.truncateText(process, 15);\n            if (index === 0) {\n                ascii += `\n    │   ${this.centerText(processText, 9)}   │\n    └─────┬───────┘\n          │\n          ▼`;\n            } else {\n                ascii += `\n    ┌─────────────┐\n    │   ${this.centerText(processText, 9)}   │\n    └─────┬───────┘\n          │\n          ▼`;\n            }\n        });\n        ascii += `\n    ┌─────────────┐\n    │   FINAL     │\n    └─────────────┘`;\n        return {\n            type: \"process_flow\",\n            ascii: ascii,\n            description: `Flujo de proceso con ${processes.length} etapas secuenciales`,\n            elements: processes.map((process, index)=>({\n                    id: `process_${index}`,\n                    type: \"process_flow\",\n                    title: `Proceso ${index + 1}`,\n                    content: process,\n                    connections: index < processes.length - 1 ? [\n                        `process_${index + 1}`\n                    ] : []\n                })),\n            instructions: [\n                'Sigue el flujo de arriba hacia abajo',\n                'Cada caja representa una etapa del proceso',\n                'Las flechas indican la secuencia'\n            ]\n        };\n    }\n    /**\n   * Generates generic diagram\n   */ static generateGenericDiagram(content) {\n        const keyPoints = this.extractKeyPoints(content, 4);\n        let ascii = `\n    ╭─────────────────────────────────╮\n    │        DIAGRAMA GENERAL         │\n    ╰─────────────┬───────────────────╯\n                  │`;\n        keyPoints.forEach((point, index)=>{\n            const pointText = this.truncateText(point, 20);\n            ascii += `\n                  ▼\n    ┌─────────────────────────────┐\n    │ ${index + 1}. ${this.leftAlign(pointText, 23)} │\n    └─────────────────────────────┘`;\n        });\n        return {\n            type: \"diagram\",\n            ascii: ascii,\n            description: `Diagrama general con ${keyPoints.length} elementos principales`,\n            elements: keyPoints.map((point, index)=>({\n                    id: `point_${index}`,\n                    type: \"diagram\",\n                    title: `Punto ${index + 1}`,\n                    content: point,\n                    connections: []\n                })),\n            instructions: [\n                'Cada elemento se presenta de forma secuencial',\n                'Los números indican el orden de importancia',\n                'Revisa cada punto para comprensión completa'\n            ]\n        };\n    }\n    // ===== UTILITY FUNCTIONS =====\n    /**\n   * Extracts main concepts from content\n   */ static extractConcepts(content) {\n        const sentences = content.split(/[.!?]+/);\n        const concepts = [];\n        for (const sentence of sentences){\n            const words = sentence.trim().split(' ');\n            const importantWords = words.filter((word)=>word.length > 4 && ![\n                    'este',\n                    'esta',\n                    'estos',\n                    'estas',\n                    'cuando',\n                    'donde',\n                    'porque'\n                ].includes(word.toLowerCase()));\n            if (importantWords.length > 0) {\n                concepts.push(importantWords[0]);\n            }\n            if (concepts.length >= 5) break;\n        }\n        return concepts.length > 0 ? concepts : [\n            'Concepto Principal'\n        ];\n    }\n    /**\n   * Extracts steps from content\n   */ static extractSteps(content) {\n        // Look for numbered steps or sequential indicators\n        const stepPatterns = [\n            /\\d+[.)]\\s*([^.!?]+)/g,\n            /paso \\d+:?\\s*([^.!?]+)/gi,\n            /(primero|segundo|tercero|luego|después|finalmente)[,:]?\\s*([^.!?]+)/gi\n        ];\n        const steps = [];\n        for (const pattern of stepPatterns){\n            let match;\n            while((match = pattern.exec(content)) !== null && steps.length < 6){\n                const step = match[1] || match[2];\n                if (step && step.trim().length > 5) {\n                    steps.push(step.trim());\n                }\n            }\n        }\n        if (steps.length === 0) {\n            // Fallback: split by sentences\n            const sentences = content.split(/[.!?]+/);\n            steps.push(...sentences.slice(0, 4).filter((s)=>s.trim().length > 10));\n        }\n        return steps.slice(0, 5);\n    }\n    /**\n   * Extracts hierarchy items\n   */ static extractHierarchy(content) {\n        const hierarchyWords = [\n            'principal',\n            'secundario',\n            'tipo',\n            'categoría',\n            'clase',\n            'grupo'\n        ];\n        const items = [];\n        const sentences = content.split(/[.!?]+/);\n        for (const sentence of sentences){\n            for (const word of hierarchyWords){\n                if (sentence.toLowerCase().includes(word)) {\n                    const cleanSentence = sentence.replace(/^\\s*\\d+[.)]\\s*/, '').trim();\n                    if (cleanSentence.length > 5) {\n                        items.push(cleanSentence);\n                        break;\n                    }\n                }\n            }\n            if (items.length >= 6) break;\n        }\n        return items.length > 0 ? items : [\n            'Elemento Principal',\n            'Subelemento 1',\n            'Subelemento 2'\n        ];\n    }\n    /**\n   * Extracts timeline events\n   */ static extractTimelineEvents(content) {\n        const timePattern = /(\\d{4}|\\d{1,2}:\\d{2}|siglo \\w+|era \\w+)/gi;\n        const events = [];\n        const sentences = content.split(/[.!?]+/);\n        for (const sentence of sentences){\n            const timeMatch = sentence.match(timePattern);\n            if (timeMatch) {\n                events.push({\n                    time: timeMatch[0],\n                    event: sentence.replace(timePattern, '').trim()\n                });\n            }\n        }\n        if (events.length === 0) {\n            // Fallback timeline\n            const keyEvents = sentences.slice(0, 3).filter((s)=>s.trim().length > 10);\n            keyEvents.forEach((event, index)=>{\n                events.push({\n                    time: `T${index + 1}`,\n                    event: event.trim()\n                });\n            });\n        }\n        return events.slice(0, 5);\n    }\n    /**\n   * Extracts formula from content\n   */ static extractFormula(content) {\n        // Look for mathematical expressions\n        const formulaPatterns = [\n            /([a-zA-Z]\\s*[=]\\s*[^.!?]+)/,\n            /([a-zA-Z]+\\s*\\(\\s*[a-zA-Z,\\s]+\\s*\\))/,\n            /(f\\([x-z]\\)\\s*=\\s*[^.!?]+)/i,\n            /([xy]\\s*=\\s*[^.!?]+)/\n        ];\n        for (const pattern of formulaPatterns){\n            const match = content.match(pattern);\n            if (match) {\n                return match[1].trim();\n            }\n        }\n        // Fallback\n        if (content.includes('=')) {\n            const parts = content.split('=');\n            if (parts.length >= 2) {\n                return `${parts[0].trim()} = ${parts[1].split(/[.!?]/)[0].trim()}`;\n            }\n        }\n        return 'y = f(x)';\n    }\n    /**\n   * Extracts variables from content\n   */ static extractVariables(content) {\n        const variables = [];\n        // Look for variable definitions like \"donde x es...\"\n        const varPattern = /([a-zA-Z])\\s+es\\s+([^.!?]+)/gi;\n        let match;\n        while((match = varPattern.exec(content)) !== null && variables.length < 4){\n            variables.push({\n                symbol: match[1],\n                description: match[2].trim()\n            });\n        }\n        if (variables.length === 0) {\n            variables.push({\n                symbol: 'x',\n                description: 'variable independiente'\n            }, {\n                symbol: 'y',\n                description: 'variable dependiente'\n            });\n        }\n        return variables;\n    }\n    /**\n   * Extracts molecule information\n   */ static extractMolecule(content) {\n        const moleculePatterns = [\n            /([A-Z][a-z]?\\d*)+/g,\n            /(agua|metano|dióxido|carbono|oxígeno|hidrógeno)/i\n        ];\n        for (const pattern of moleculePatterns){\n            const match = content.match(pattern);\n            if (match) {\n                return match[0];\n            }\n        }\n        return 'Molécula';\n    }\n    /**\n   * Extracts atoms from content\n   */ static extractAtoms(content) {\n        const atomSymbols = content.match(/[A-Z][a-z]?/g) || [];\n        const uniqueAtoms = [\n            ...new Set(atomSymbols)\n        ];\n        if (uniqueAtoms.length === 0) {\n            return [\n                'C',\n                'H',\n                'O'\n            ];\n        }\n        return uniqueAtoms.slice(0, 5);\n    }\n    /**\n   * Extracts processes from content\n   */ static extractProcesses(content) {\n        const processes = this.extractSteps(content);\n        return processes.length > 0 ? processes : [\n            'Proceso 1',\n            'Proceso 2',\n            'Proceso 3'\n        ];\n    }\n    /**\n   * Extracts key points from content\n   */ static extractKeyPoints(content, limit = 4) {\n        const sentences = content.split(/[.!?]+/);\n        return sentences.filter((s)=>s.trim().length > 10).slice(0, limit).map((s)=>s.trim());\n    }\n    // ===== TEXT FORMATTING UTILITIES =====\n    /**\n   * Centers text in a fixed width\n   */ static centerText(text, width) {\n        const truncated = this.truncateText(text, width);\n        const padding = Math.max(0, width - truncated.length);\n        const leftPad = Math.floor(padding / 2);\n        const rightPad = padding - leftPad;\n        return ' '.repeat(leftPad) + truncated + ' '.repeat(rightPad);\n    }\n    /**\n   * Left aligns text in a fixed width\n   */ static leftAlign(text, width) {\n        const truncated = this.truncateText(text, width);\n        const padding = Math.max(0, width - truncated.length);\n        return truncated + ' '.repeat(padding);\n    }\n    /**\n   * Truncates text to fit width\n   */ static truncateText(text, maxWidth) {\n        if (text.length <= maxWidth) {\n            return text;\n        }\n        return text.substring(0, maxWidth - 3) + '...';\n    }\n    /**\n   * Main entry point - analyzes content and generates appropriate visual\n   */ static generateOptimalVisual(content, subject) {\n        const optimalType = this.detectOptimalVisualType(content, subject);\n        return this.generateVisual(content, optimalType, subject);\n    }\n    /**\n   * Generates multiple visual options for user to choose from\n   */ static generateVisualOptions(content, subject) {\n        const primaryType = this.detectOptimalVisualType(content, subject);\n        const options = [\n            this.generateVisual(content, primaryType, subject)\n        ];\n        // Add alternative visualizations\n        const alternativeTypes = [\n            \"concept_map\",\n            \"flowchart\",\n            \"diagram\"\n        ];\n        for (const type of alternativeTypes){\n            if (type !== primaryType && options.length < 3) {\n                options.push(this.generateVisual(content, type, subject));\n            }\n        }\n        return options;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/visual-learning-engine.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@xenova/transformers":
/*!***************************************!*\
  !*** external "@xenova/transformers" ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@xenova/transformers");;

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/jose","vendor-chunks/next-auth","vendor-chunks/openid-client","vendor-chunks/bcryptjs","vendor-chunks/@babel","vendor-chunks/oauth","vendor-chunks/preact","vendor-chunks/uuid","vendor-chunks/yallist","vendor-chunks/preact-render-to-string","vendor-chunks/cookie","vendor-chunks/oidc-token-hash","vendor-chunks/@panva"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdebug-sara-memory%2Froute&page=%2Fapi%2Fdebug-sara-memory%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdebug-sara-memory%2Froute.ts&appDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();