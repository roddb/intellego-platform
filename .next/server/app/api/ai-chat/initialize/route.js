/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/ai-chat/initialize/route";
exports.ids = ["app/api/ai-chat/initialize/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fai-chat%2Finitialize%2Froute&page=%2Fapi%2Fai-chat%2Finitialize%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai-chat%2Finitialize%2Froute.ts&appDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fai-chat%2Finitialize%2Froute&page=%2Fapi%2Fai-chat%2Finitialize%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai-chat%2Finitialize%2Froute.ts&appDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_rodrigodibernardo33gmail_com_Documents_App_Development_Proyects_Intellego_Platform_src_app_api_ai_chat_initialize_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/ai-chat/initialize/route.ts */ \"(rsc)/./src/app/api/ai-chat/initialize/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/ai-chat/initialize/route\",\n        pathname: \"/api/ai-chat/initialize\",\n        filename: \"route\",\n        bundlePath: \"app/api/ai-chat/initialize/route\"\n    },\n    resolvedPagePath: \"/Users/rodrigodibernardo33gmail.com/Documents/App Development Proyects/Intellego Platform/src/app/api/ai-chat/initialize/route.ts\",\n    nextConfigOutput,\n    userland: _Users_rodrigodibernardo33gmail_com_Documents_App_Development_Proyects_Intellego_Platform_src_app_api_ai_chat_initialize_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhaS1jaGF0JTJGaW5pdGlhbGl6ZSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGYWktY2hhdCUyRmluaXRpYWxpemUlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZhaS1jaGF0JTJGaW5pdGlhbGl6ZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnJvZHJpZ29kaWJlcm5hcmRvMzNnbWFpbC5jb20lMkZEb2N1bWVudHMlMkZBcHAlMjBEZXZlbG9wbWVudCUyMFByb3llY3RzJTJGSW50ZWxsZWdvJTIwUGxhdGZvcm0lMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGcm9kcmlnb2RpYmVybmFyZG8zM2dtYWlsLmNvbSUyRkRvY3VtZW50cyUyRkFwcCUyMERldmVsb3BtZW50JTIwUHJveWVjdHMlMkZJbnRlbGxlZ28lMjBQbGF0Zm9ybSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDcUI7QUFDaUY7QUFDOUo7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlHQUFtQjtBQUMzQztBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBc0Q7QUFDOUQ7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDMEY7O0FBRTFGIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9yb2RyaWdvZGliZXJuYXJkbzMzZ21haWwuY29tL0RvY3VtZW50cy9BcHAgRGV2ZWxvcG1lbnQgUHJveWVjdHMvSW50ZWxsZWdvIFBsYXRmb3JtL3NyYy9hcHAvYXBpL2FpLWNoYXQvaW5pdGlhbGl6ZS9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYWktY2hhdC9pbml0aWFsaXplL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYWktY2hhdC9pbml0aWFsaXplXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9haS1jaGF0L2luaXRpYWxpemUvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvcm9kcmlnb2RpYmVybmFyZG8zM2dtYWlsLmNvbS9Eb2N1bWVudHMvQXBwIERldmVsb3BtZW50IFByb3llY3RzL0ludGVsbGVnbyBQbGF0Zm9ybS9zcmMvYXBwL2FwaS9haS1jaGF0L2luaXRpYWxpemUvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fai-chat%2Finitialize%2Froute&page=%2Fapi%2Fai-chat%2Finitialize%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai-chat%2Finitialize%2Froute.ts&appDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/ai-calendar/create-event/route.ts":
/*!*******************************************************!*\
  !*** ./src/app/api/ai-calendar/create-event/route.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/auth */ \"(rsc)/./src/lib/auth.ts\");\n/* harmony import */ var _lib_calendar_data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n\n\n\n\nasync function POST(request) {\n    try {\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_lib_auth__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Authentication required',\n                success: false\n            }, {\n                status: 401\n            });\n        }\n        const body = await request.json();\n        const { title, type, subject, date, startTime, endTime, duration, location, description, priority } = body;\n        // Validaciones básicas\n        if (!title || !type || !date) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Missing required fields: title, type, date',\n                success: false\n            }, {\n                status: 400\n            });\n        }\n        // Validar tipo de evento\n        const validTypes = [\n            'exam',\n            'study_session',\n            'class',\n            'personal',\n            'extracurricular'\n        ];\n        if (!validTypes.includes(type)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `Invalid event type. Must be one of: ${validTypes.join(', ')}`,\n                success: false\n            }, {\n                status: 400\n            });\n        }\n        // Procesar fecha\n        let eventDate;\n        try {\n            eventDate = new Date(date);\n            if (isNaN(eventDate.getTime())) {\n                throw new Error('Invalid date');\n            }\n        } catch (error) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid date format',\n                success: false\n            }, {\n                status: 400\n            });\n        }\n        // Calcular endTime si no se proporciona pero se tiene duration\n        let finalEndTime = endTime;\n        if (!endTime && startTime && duration) {\n            const start = new Date(`2000-01-01T${startTime}:00`);\n            const end = new Date(start.getTime() + duration * 60000);\n            finalEndTime = end.toTimeString().substring(0, 5);\n        }\n        // Crear el evento\n        const event = {\n            id: `ai-event-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            title: title.trim(),\n            date: eventDate,\n            startTime: startTime || '15:00',\n            endTime: finalEndTime || '16:00',\n            type: type,\n            color: (0,_lib_calendar_data__WEBPACK_IMPORTED_MODULE_3__.getEventTypeColor)(type),\n            subject: subject || undefined,\n            location: location || undefined,\n            description: description || 'Creado automáticamente por IA Tutora',\n            priority: priority || 'medium',\n            duration: duration || 60\n        };\n        // Intentar agregar el evento al calendario del usuario\n        const userId = session.user.id;\n        const success = (0,_lib_calendar_data__WEBPACK_IMPORTED_MODULE_3__.addCalendarEvent)(userId, event);\n        if (!success) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to create event in calendar',\n                success: false\n            }, {\n                status: 500\n            });\n        }\n        // Verificar que el evento se guardó correctamente\n        const userData = (0,_lib_calendar_data__WEBPACK_IMPORTED_MODULE_3__.getUserCalendarData)(userId);\n        const savedEvent = userData?.events.find((e)=>e.id === event.id);\n        if (!savedEvent) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Event was not saved correctly',\n                success: false\n            }, {\n                status: 500\n            });\n        }\n        console.log(`🤖 IA creó evento: ${event.title} para ${userId}`);\n        // Disparar evento global para notificar a los componentes frontend\n        if (typeof globalThis !== 'undefined') {\n            // Usar setTimeout para evitar problemas de timing\n            setTimeout(()=>{\n                if (false) {}\n            }, 100);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            event: savedEvent,\n            message: `Evento \"${event.title}\" creado exitosamente`,\n            totalEvents: userData?.events.length || 0\n        });\n    } catch (error) {\n        console.error('❌ Error in AI calendar creation:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error while creating event',\n            success: false\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/ai-calendar/create-event/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/app/api/ai-chat/initialize/route.ts":
/*!*************************************************!*\
  !*** ./src/app/api/ai-chat/initialize/route.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/auth */ \"(rsc)/./src/lib/auth.ts\");\n/* harmony import */ var _lib_conversation_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/conversation-engine */ \"(rsc)/./src/lib/conversation-engine.ts\");\n\n\n\n\nasync function POST(request) {\n    try {\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_lib_auth__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Authentication required'\n            }, {\n                status: 401\n            });\n        }\n        const body = await request.json();\n        const { userName } = body;\n        // Crear mensaje de bienvenida personalizado (stateless)\n        const welcomeMessage = await _lib_conversation_engine__WEBPACK_IMPORTED_MODULE_3__.ConversationEngine.createWelcomeMessage(session.user.id, userName || session.user.name);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            conversationHistory: [\n                welcomeMessage\n            ],\n            currentMode: 'chat'\n        });\n    } catch (error) {\n        console.error('❌ Error initializing AI chat:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error',\n            message: error instanceof Error ? error.message : 'Unknown error'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9haS1jaGF0L2luaXRpYWxpemUvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTBDO0FBQ0U7QUFDSjtBQUNzQjtBQUV2RCxlQUFlSSxLQUFLQyxPQUFnQjtJQUN6QyxJQUFJO1FBQ0YsTUFBTUMsVUFBVSxNQUFNTCwyREFBZ0JBLENBQUNDLGtEQUFXQTtRQUVsRCxJQUFJLENBQUNJLFNBQVM7WUFDWixPQUFPTixxREFBWUEsQ0FBQ08sSUFBSSxDQUN0QjtnQkFBRUMsT0FBTztZQUEwQixHQUNuQztnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsTUFBTUMsT0FBTyxNQUFNTCxRQUFRRSxJQUFJO1FBQy9CLE1BQU0sRUFBRUksUUFBUSxFQUFFLEdBQUdEO1FBRXJCLHdEQUF3RDtRQUN4RCxNQUFNRSxpQkFBaUIsTUFBTVQsd0VBQWtCQSxDQUFDVSxvQkFBb0IsQ0FDbEVQLFFBQVFRLElBQUksQ0FBQ0MsRUFBRSxFQUNmSixZQUFZTCxRQUFRUSxJQUFJLENBQUNFLElBQUk7UUFHL0IsT0FBT2hCLHFEQUFZQSxDQUFDTyxJQUFJLENBQUM7WUFDdkJVLFNBQVM7WUFDVEMscUJBQXFCO2dCQUFDTjthQUFlO1lBQ3JDTyxhQUFhO1FBQ2Y7SUFFRixFQUFFLE9BQU9YLE9BQU87UUFDZFksUUFBUVosS0FBSyxDQUFDLGlDQUFpQ0E7UUFDL0MsT0FBT1IscURBQVlBLENBQUNPLElBQUksQ0FDdEI7WUFDRUMsT0FBTztZQUNQYSxTQUFTYixpQkFBaUJjLFFBQVFkLE1BQU1hLE9BQU8sR0FBRztRQUNwRCxHQUNBO1lBQUVaLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvcm9kcmlnb2RpYmVybmFyZG8zM2dtYWlsLmNvbS9Eb2N1bWVudHMvQXBwIERldmVsb3BtZW50IFByb3llY3RzL0ludGVsbGVnbyBQbGF0Zm9ybS9zcmMvYXBwL2FwaS9haS1jaGF0L2luaXRpYWxpemUvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXG5pbXBvcnQgeyBnZXRTZXJ2ZXJTZXNzaW9uIH0gZnJvbSAnbmV4dC1hdXRoJ1xuaW1wb3J0IHsgYXV0aE9wdGlvbnMgfSBmcm9tICdAL2xpYi9hdXRoJ1xuaW1wb3J0IHsgQ29udmVyc2F0aW9uRW5naW5lIH0gZnJvbSAnQC9saWIvY29udmVyc2F0aW9uLWVuZ2luZSdcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogUmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBnZXRTZXJ2ZXJTZXNzaW9uKGF1dGhPcHRpb25zKVxuICAgIFxuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnQXV0aGVudGljYXRpb24gcmVxdWlyZWQnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDEgfVxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKVxuICAgIGNvbnN0IHsgdXNlck5hbWUgfSA9IGJvZHlcblxuICAgIC8vIENyZWFyIG1lbnNhamUgZGUgYmllbnZlbmlkYSBwZXJzb25hbGl6YWRvIChzdGF0ZWxlc3MpXG4gICAgY29uc3Qgd2VsY29tZU1lc3NhZ2UgPSBhd2FpdCBDb252ZXJzYXRpb25FbmdpbmUuY3JlYXRlV2VsY29tZU1lc3NhZ2UoXG4gICAgICBzZXNzaW9uLnVzZXIuaWQsIFxuICAgICAgdXNlck5hbWUgfHwgc2Vzc2lvbi51c2VyLm5hbWVcbiAgICApXG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGNvbnZlcnNhdGlvbkhpc3Rvcnk6IFt3ZWxjb21lTWVzc2FnZV0sXG4gICAgICBjdXJyZW50TW9kZTogJ2NoYXQnXG4gICAgfSlcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBpbml0aWFsaXppbmcgQUkgY2hhdDonLCBlcnJvcilcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IFxuICAgICAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgICB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKVxuICB9XG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImdldFNlcnZlclNlc3Npb24iLCJhdXRoT3B0aW9ucyIsIkNvbnZlcnNhdGlvbkVuZ2luZSIsIlBPU1QiLCJyZXF1ZXN0Iiwic2Vzc2lvbiIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsImJvZHkiLCJ1c2VyTmFtZSIsIndlbGNvbWVNZXNzYWdlIiwiY3JlYXRlV2VsY29tZU1lc3NhZ2UiLCJ1c2VyIiwiaWQiLCJuYW1lIiwic3VjY2VzcyIsImNvbnZlcnNhdGlvbkhpc3RvcnkiLCJjdXJyZW50TW9kZSIsImNvbnNvbGUiLCJtZXNzYWdlIiwiRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/ai-chat/initialize/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/academic-analyzer.ts":
/*!**************************************!*\
  !*** ./src/lib/academic-analyzer.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AcademicAnalyzer: () => (/* binding */ AcademicAnalyzer),\n/* harmony export */   AcademicSubject: () => (/* binding */ AcademicSubject),\n/* harmony export */   DifficultyLevel: () => (/* binding */ DifficultyLevel),\n/* harmony export */   SUBJECT_TOPICS: () => (/* binding */ SUBJECT_TOPICS)\n/* harmony export */ });\n/* harmony import */ var _temp_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n\n// Definición de materias académicas\nvar AcademicSubject = /*#__PURE__*/ function(AcademicSubject) {\n    AcademicSubject[\"MATHEMATICS\"] = \"mathematics\";\n    AcademicSubject[\"PHYSICS\"] = \"physics\";\n    AcademicSubject[\"CHEMISTRY\"] = \"chemistry\";\n    AcademicSubject[\"BIOLOGY\"] = \"biology\";\n    AcademicSubject[\"SPANISH\"] = \"spanish\";\n    AcademicSubject[\"ENGLISH\"] = \"english\";\n    AcademicSubject[\"HISTORY\"] = \"history\";\n    AcademicSubject[\"GEOGRAPHY\"] = \"geography\";\n    AcademicSubject[\"GENERAL\"] = \"general\";\n    return AcademicSubject;\n}({});\n// Nivel de dificultad detectado\nvar DifficultyLevel = /*#__PURE__*/ function(DifficultyLevel) {\n    DifficultyLevel[\"BASIC\"] = \"basic\";\n    DifficultyLevel[\"INTERMEDIATE\"] = \"intermediate\";\n    DifficultyLevel[\"ADVANCED\"] = \"advanced\";\n    DifficultyLevel[\"REVIEW_NEEDED\"] = \"review_needed\";\n    return DifficultyLevel;\n}({});\n// Temas específicos por materia\nconst SUBJECT_TOPICS = {\n    [\"mathematics\"]: [\n        'algebra',\n        'geometria',\n        'trigonometria',\n        'calculo',\n        'estadistica',\n        'probabilidad',\n        'ecuaciones',\n        'funciones',\n        'logaritmos',\n        'matrices',\n        'derivadas',\n        'integrales'\n    ],\n    [\"physics\"]: [\n        'cinematica',\n        'dinamica',\n        'energia',\n        'ondas',\n        'termodinamica',\n        'electricidad',\n        'magnetismo',\n        'optica',\n        'mecanica',\n        'fluidos',\n        'movimiento',\n        'fuerza',\n        'velocidad'\n    ],\n    [\"chemistry\"]: [\n        'atomos',\n        'moleculas',\n        'enlaces',\n        'reacciones',\n        'estequiometria',\n        'acidos',\n        'bases',\n        'oxidacion',\n        'reduccion',\n        'equilibrio',\n        'cinetica',\n        'termoquimica'\n    ]\n};\n// Palabras clave que indican dificultades\nconst DIFFICULTY_INDICATORS = {\n    high: [\n        'muy difícil',\n        'no entiendo',\n        'confuso',\n        'complicado',\n        'imposible',\n        'no puedo'\n    ],\n    medium: [\n        'difícil',\n        'complicado',\n        'no comprendo',\n        'me cuesta',\n        'problema'\n    ],\n    low: [\n        'un poco difícil',\n        'necesito ayuda',\n        'no está claro',\n        'dudas'\n    ]\n};\n// Palabras clave que indican progreso positivo\nconst PROGRESS_INDICATORS = {\n    excellent: [\n        'excelente',\n        'perfecto',\n        'domino',\n        'fácil',\n        'entiendo todo'\n    ],\n    good: [\n        'bien',\n        'entiendo',\n        'comprendo',\n        'logré',\n        'mejorando'\n    ],\n    fair: [\n        'más o menos',\n        'regular',\n        'algunas veces',\n        'avanzando'\n    ]\n};\nclass AcademicAnalyzer {\n    /**\n   * Analiza los reportes académicos de un estudiante\n   */ static async analyzeStudent(userId) {\n        const reports = _temp_storage__WEBPACK_IMPORTED_MODULE_0__.tempWeeklyReports.filter((report)=>report.userId === userId);\n        if (reports.length === 0) {\n            return this.createDefaultAnalysis(userId);\n        }\n        // Analizar reportes recientes (últimas 8 semanas)\n        const recentReports = reports.sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()).slice(0, 8);\n        // Extraer todo el texto de las respuestas\n        const allResponseText = recentReports.flatMap((report)=>Object.values(report.responses || {})).filter(Boolean).join(' ').toLowerCase();\n        // Analizar por materias\n        const subjectAnalyses = this.analyzeSubjects(allResponseText, recentReports);\n        // Análisis general\n        const overallPerformance = this.calculateOverallPerformance(subjectAnalyses);\n        const strugglingAreas = this.identifyStrugglingAreas(subjectAnalyses, allResponseText);\n        const strengths = this.identifyStrengths(subjectAnalyses, allResponseText);\n        const recommendedTopics = this.generateRecommendations(subjectAnalyses);\n        const learningPattern = this.identifyLearningPattern(allResponseText);\n        return {\n            userId,\n            subjects: subjectAnalyses,\n            overallPerformance,\n            strugglingAreas,\n            strengths,\n            recommendedTopics,\n            learningPattern,\n            lastReportDate: new Date(recentReports[0]?.createdAt || Date.now())\n        };\n    }\n    /**\n   * Analiza materias específicas mencionadas en los reportes\n   */ static analyzeSubjects(text, reports) {\n        const analyses = [];\n        // Palabras clave para identificar materias\n        const subjectKeywords = {\n            [\"mathematics\"]: [\n                'matemática',\n                'matemáticas',\n                'mate',\n                'álgebra',\n                'geometría',\n                'cálculo',\n                'números'\n            ],\n            [\"physics\"]: [\n                'física',\n                'mecánica',\n                'energía',\n                'fuerza',\n                'movimiento',\n                'velocidad'\n            ],\n            [\"chemistry\"]: [\n                'química',\n                'átomos',\n                'moléculas',\n                'reacciones',\n                'elementos',\n                'laboratorio'\n            ],\n            [\"biology\"]: [\n                'biología',\n                'células',\n                'organismos',\n                'evolución',\n                'ecosistema'\n            ],\n            [\"spanish\"]: [\n                'lengua',\n                'español',\n                'literatura',\n                'redacción',\n                'gramática'\n            ],\n            [\"english\"]: [\n                'inglés',\n                'english',\n                'grammar',\n                'vocabulary'\n            ],\n            [\"history\"]: [\n                'historia',\n                'civilización',\n                'época',\n                'guerra',\n                'revolución'\n            ],\n            [\"geography\"]: [\n                'geografía',\n                'países',\n                'continentes',\n                'clima',\n                'población'\n            ]\n        };\n        Object.entries(subjectKeywords).forEach(([subject, keywords])=>{\n            const mentions = keywords.filter((keyword)=>text.includes(keyword)).length;\n            if (mentions > 0) {\n                const analysis = this.analyzeSpecificSubject(subject, text, reports, mentions);\n                analyses.push(analysis);\n            }\n        });\n        // Si no se encontraron materias específicas, agregar análisis general\n        if (analyses.length === 0) {\n            analyses.push(this.createGeneralSubjectAnalysis(text, reports));\n        }\n        return analyses;\n    }\n    /**\n   * Analiza una materia específica\n   */ static analyzeSpecificSubject(subject, text, reports, mentions) {\n        const subjectName = this.getSubjectDisplayName(subject);\n        const topics = SUBJECT_TOPICS[subject] || [];\n        // Detectar temas mencionados\n        const mentionedTopics = topics.filter((topic)=>text.includes(topic));\n        // Analizar dificultades específicas\n        const specificChallenges = this.extractSpecificChallenges(text, subject);\n        // Calcular rendimiento basado en indicadores\n        const performance = this.calculateSubjectPerformance(text, specificChallenges.length);\n        // Determinar nivel de dificultad\n        const difficultyLevel = this.determineDifficultyLevel(performance, specificChallenges.length);\n        // Determinar si necesita atención\n        const needsAttention = performance < 60 || specificChallenges.length > 2;\n        return {\n            subject,\n            subjectName,\n            performance,\n            difficultyLevel,\n            strugglingTopics: mentionedTopics.slice(0, 3),\n            masteredTopics: performance > 75 ? mentionedTopics.slice(0, 2) : [],\n            recentMentions: mentions,\n            needsAttention,\n            specificChallenges\n        };\n    }\n    /**\n   * Extrae desafíos específicos mencionados por el estudiante\n   */ static extractSpecificChallenges(text, subject) {\n        const challenges = [];\n        // Buscar patrones de dificultad\n        const difficultyPatterns = [\n            /no entiendo (.*?)(?:\\.|,|$)/g,\n            /me cuesta (.*?)(?:\\.|,|$)/g,\n            /difícil (.*?)(?:\\.|,|$)/g,\n            /problema con (.*?)(?:\\.|,|$)/g,\n            /confuso (.*?)(?:\\.|,|$)/g\n        ];\n        difficultyPatterns.forEach((pattern)=>{\n            let match;\n            while((match = pattern.exec(text)) !== null){\n                if (match[1] && match[1].length < 50) {\n                    challenges.push(match[1].trim());\n                }\n            }\n        });\n        return challenges.slice(0, 3) // Máximo 3 desafíos específicos\n        ;\n    }\n    /**\n   * Calcula el rendimiento de una materia\n   */ static calculateSubjectPerformance(text, challengesCount) {\n        let score = 70 // Base score\n        ;\n        // Indicadores positivos\n        Object.entries(PROGRESS_INDICATORS).forEach(([level, indicators])=>{\n            const multiplier = level === 'excellent' ? 10 : level === 'good' ? 5 : 2;\n            indicators.forEach((indicator)=>{\n                if (text.includes(indicator)) {\n                    score += multiplier;\n                }\n            });\n        });\n        // Indicadores negativos\n        Object.entries(DIFFICULTY_INDICATORS).forEach(([level, indicators])=>{\n            const penalty = level === 'high' ? 15 : level === 'medium' ? 10 : 5;\n            indicators.forEach((indicator)=>{\n                if (text.includes(indicator)) {\n                    score -= penalty;\n                }\n            });\n        });\n        // Penalizar por número de desafíos específicos\n        score -= challengesCount * 8;\n        return Math.max(0, Math.min(100, score));\n    }\n    /**\n   * Determina el nivel de dificultad basado en el rendimiento\n   */ static determineDifficultyLevel(performance, challengesCount) {\n        if (performance < 40 || challengesCount > 3) return \"review_needed\";\n        if (performance < 60) return \"basic\";\n        if (performance < 80) return \"intermediate\";\n        return \"advanced\";\n    }\n    /**\n   * Crea análisis por defecto para estudiantes sin reportes\n   */ static createDefaultAnalysis(userId) {\n        return {\n            userId,\n            subjects: [\n                this.createGeneralSubjectAnalysis('', [])\n            ],\n            overallPerformance: 50,\n            strugglingAreas: [\n                'Falta de datos históricos'\n            ],\n            strengths: [\n                'Nuevo estudiante con potencial'\n            ],\n            recommendedTopics: [\n                'Evaluación inicial',\n                'Fundamentos'\n            ],\n            learningPattern: 'mixed',\n            lastReportDate: new Date()\n        };\n    }\n    /**\n   * Crea análisis general cuando no se detectan materias específicas\n   */ static createGeneralSubjectAnalysis(text, reports) {\n        const performance = text.length > 0 ? this.calculateSubjectPerformance(text, 0) : 50;\n        return {\n            subject: \"general\",\n            subjectName: 'Análisis General',\n            performance,\n            difficultyLevel: this.determineDifficultyLevel(performance, 0),\n            strugglingTopics: [],\n            masteredTopics: [],\n            recentMentions: reports.length,\n            needsAttention: performance < 60,\n            specificChallenges: this.extractSpecificChallenges(text, \"general\")\n        };\n    }\n    /**\n   * Calcula el rendimiento general\n   */ static calculateOverallPerformance(subjects) {\n        if (subjects.length === 0) return 50;\n        const average = subjects.reduce((sum, subject)=>sum + subject.performance, 0) / subjects.length;\n        return Math.round(average);\n    }\n    /**\n   * Identifica áreas con dificultades\n   */ static identifyStrugglingAreas(subjects, text) {\n        const areas = [];\n        // Agregar materias con bajo rendimiento\n        subjects.filter((subject)=>subject.needsAttention).forEach((subject)=>{\n            areas.push(`${subject.subjectName}: ${subject.specificChallenges.join(', ')}`);\n        });\n        // Si no hay áreas específicas, buscar patrones generales\n        if (areas.length === 0 && text.length > 0) {\n            if (text.includes('tiempo')) areas.push('Gestión del tiempo');\n            if (text.includes('concentr')) areas.push('Concentración');\n            if (text.includes('motiv')) areas.push('Motivación');\n        }\n        return areas.slice(0, 3);\n    }\n    /**\n   * Identifica fortalezas del estudiante\n   */ static identifyStrengths(subjects, text) {\n        const strengths = [];\n        // Agregar materias con buen rendimiento\n        subjects.filter((subject)=>subject.performance > 75).forEach((subject)=>{\n            strengths.push(`Dominio en ${subject.subjectName}`);\n        });\n        // Patrones de fortaleza general\n        if (text.includes('organiz')) strengths.push('Capacidad de organización');\n        if (text.includes('persever') || text.includes('persist')) strengths.push('Perseverancia');\n        if (text.includes('creativ')) strengths.push('Pensamiento creativo');\n        return strengths.length > 0 ? strengths.slice(0, 3) : [\n            'Dedicación al aprendizaje'\n        ];\n    }\n    /**\n   * Genera recomendaciones de temas\n   */ static generateRecommendations(subjects) {\n        const recommendations = [];\n        subjects.forEach((subject)=>{\n            if (subject.needsAttention) {\n                recommendations.push(`Reforzar conceptos básicos de ${subject.subjectName}`);\n                if (subject.strugglingTopics.length > 0) {\n                    recommendations.push(`Practicar: ${subject.strugglingTopics.join(', ')}`);\n                }\n            }\n        });\n        return recommendations.slice(0, 4);\n    }\n    /**\n   * Identifica el patrón de aprendizaje\n   */ static identifyLearningPattern(text) {\n        const visualKeywords = [\n            'gráfico',\n            'diagrama',\n            'imagen',\n            'visual',\n            'dibujo'\n        ];\n        const analyticalKeywords = [\n            'análisis',\n            'lógica',\n            'razonamiento',\n            'teoría'\n        ];\n        const practicalKeywords = [\n            'práctica',\n            'ejercicio',\n            'aplicar',\n            'hacer'\n        ];\n        const visualCount = visualKeywords.reduce((count, word)=>count + (text.includes(word) ? 1 : 0), 0);\n        const analyticalCount = analyticalKeywords.reduce((count, word)=>count + (text.includes(word) ? 1 : 0), 0);\n        const practicalCount = practicalKeywords.reduce((count, word)=>count + (text.includes(word) ? 1 : 0), 0);\n        if (visualCount > analyticalCount && visualCount > practicalCount) return 'visual';\n        if (analyticalCount > practicalCount) return 'analytical';\n        if (practicalCount > 0) return 'practical';\n        return 'mixed';\n    }\n    /**\n   * Obtiene el nombre de visualización de una materia\n   */ static getSubjectDisplayName(subject) {\n        const names = {\n            [\"mathematics\"]: 'Matemáticas',\n            [\"physics\"]: 'Física',\n            [\"chemistry\"]: 'Química',\n            [\"biology\"]: 'Biología',\n            [\"spanish\"]: 'Lengua y Literatura',\n            [\"english\"]: 'Inglés',\n            [\"history\"]: 'Historia',\n            [\"geography\"]: 'Geografía',\n            [\"general\"]: 'General'\n        };\n        return names[subject] || 'Materia';\n    }\n    /**\n   * Obtiene un resumen contextual para generar ejercicios\n   */ static getExerciseContext(analysis, subject) {\n        const targetSubject = subject || analysis.subjects[0]?.subject || \"general\";\n        const subjectAnalysis = analysis.subjects.find((s)=>s.subject === targetSubject);\n        if (!subjectAnalysis) {\n            return `Estudiante: nivel intermedio, necesita evaluación inicial en ${targetSubject}`;\n        }\n        const context = [\n            `Materia: ${subjectAnalysis.subjectName}`,\n            `Nivel: ${subjectAnalysis.difficultyLevel}`,\n            `Rendimiento actual: ${subjectAnalysis.performance}%`,\n            subjectAnalysis.specificChallenges.length > 0 ? `Dificultades específicas: ${subjectAnalysis.specificChallenges.join(', ')}` : null,\n            subjectAnalysis.strugglingTopics.length > 0 ? `Temas a reforzar: ${subjectAnalysis.strugglingTopics.join(', ')}` : null,\n            `Patrón de aprendizaje: ${analysis.learningPattern}`\n        ].filter(Boolean).join('. ');\n        return context;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/academic-analyzer.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/academic-search-engine.ts":
/*!*******************************************!*\
  !*** ./src/lib/academic-search-engine.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AcademicSearchEngine: () => (/* binding */ AcademicSearchEngine)\n/* harmony export */ });\n/* harmony import */ var _web_search_integration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./web-search-integration */ \"(rsc)/./src/lib/web-search-integration.ts\");\n/* harmony import */ var _conversation_memory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conversation-memory */ \"(rsc)/./src/lib/conversation-memory.ts\");\n/* harmony import */ var _emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./emotion-analyzer */ \"(rsc)/./src/lib/emotion-analyzer.ts\");\n// Sistema de Búsqueda Académica Inteligente para Sara\n// Integra búsqueda web con análisis contextual y notificaciones proactivas\n\n\n\nclass AcademicSearchEngine {\n    static{\n        // Plantillas de búsqueda optimizadas para contenido académico\n        this.SEARCH_TEMPLATES = {\n            explanation: {\n                es: \"{topic} explicación {subject} concepto básico tutorial\",\n                en: \"{topic} explanation {subject} basic concept tutorial\"\n            },\n            examples: {\n                es: \"{topic} ejemplos {subject} casos prácticos ejercicios\",\n                en: \"{topic} examples {subject} practical cases exercises\"\n            },\n            exercises: {\n                es: \"{topic} ejercicios {subject} problemas resueltos práctica\",\n                en: \"{topic} exercises {subject} solved problems practice\"\n            },\n            resources: {\n                es: \"{topic} recursos {subject} material estudio herramientas\",\n                en: \"{topic} resources {subject} study materials tools\"\n            },\n            research: {\n                es: \"{topic} investigación {subject} papers académicos estudios\",\n                en: \"{topic} research {subject} academic papers studies\"\n            }\n        };\n    }\n    static{\n        // Palabras clave para mejorar búsquedas académicas\n        this.ACADEMIC_ENHANCERS = {\n            es: [\n                \"tutorial\",\n                \"explicación\",\n                \"concepto\",\n                \"aprender\",\n                \"estudiar\",\n                \"académico\",\n                \"educativo\"\n            ],\n            en: [\n                \"tutorial\",\n                \"explanation\",\n                \"concept\",\n                \"learn\",\n                \"study\",\n                \"academic\",\n                \"educational\"\n            ]\n        };\n    }\n    static{\n        // Filtros de calidad para contenido académico\n        this.QUALITY_INDICATORS = {\n            high: [\n                \"edu\",\n                \"academic\",\n                \"university\",\n                \"research\",\n                \"scholar\",\n                \"journal\"\n            ],\n            medium: [\n                \"tutorial\",\n                \"guide\",\n                \"course\",\n                \"lesson\",\n                \"explanation\"\n            ],\n            low: [\n                \"blog\",\n                \"forum\",\n                \"wiki\",\n                \"opinion\",\n                \"personal\"\n            ]\n        };\n    }\n    /**\n   * Realiza búsqueda académica inteligente\n   */ static async searchAcademicContent(query) {\n        const startTime = Date.now();\n        try {\n            // Optimizar query para búsqueda académica\n            const optimizedQuery = this.optimizeAcademicQuery(query);\n            // Realizar búsqueda web\n            const webSearchResults = await this.performWebSearch(optimizedQuery);\n            // Procesar y analizar resultados\n            const academicResults = await this.processSearchResults(webSearchResults, query);\n            // Generar recomendaciones personalizadas\n            const recommendations = await this.generatePersonalizedRecommendations(query, academicResults);\n            const searchTime = Date.now() - startTime;\n            return {\n                query,\n                results: academicResults,\n                searchSuccess: academicResults.length > 0,\n                totalResults: academicResults.length,\n                searchTime,\n                personalizedRecommendations: recommendations.suggestions,\n                followUpQuestions: recommendations.followUpQuestions,\n                suggestedActions: recommendations.actions\n            };\n        } catch (error) {\n            console.error('Error in academic search:', error);\n            return {\n                query,\n                results: [],\n                searchSuccess: false,\n                totalResults: 0,\n                searchTime: Date.now() - startTime,\n                personalizedRecommendations: this.generateFallbackRecommendations(query),\n                followUpQuestions: [],\n                suggestedActions: [\n                    \"Intentar con términos más específicos\",\n                    \"Verificar la conexión a internet\"\n                ]\n            };\n        }\n    }\n    /**\n   * Optimiza el query para búsqueda académica\n   */ static optimizeAcademicQuery(query) {\n        const { topic, subject, searchType, level, language = 'es' } = query;\n        // Obtener plantilla base\n        const template = this.SEARCH_TEMPLATES[searchType][language];\n        // Reemplazar variables\n        let optimizedQuery = template.replace('{topic}', topic).replace('{subject}', subject || '');\n        // Agregar indicadores de nivel\n        if (level) {\n            const levelTerms = {\n                es: {\n                    basic: 'básico principiante',\n                    intermediate: 'intermedio',\n                    advanced: 'avanzado experto'\n                },\n                en: {\n                    basic: 'basic beginner',\n                    intermediate: 'intermediate',\n                    advanced: 'advanced expert'\n                }\n            };\n            optimizedQuery += ` ${levelTerms[language][level]}`;\n        }\n        // Agregar términos académicos\n        const enhancers = this.ACADEMIC_ENHANCERS[language];\n        const selectedEnhancers = enhancers.slice(0, 2).join(' ');\n        optimizedQuery += ` ${selectedEnhancers}`;\n        return optimizedQuery.trim();\n    }\n    /**\n   * Realiza búsqueda web usando el sistema de integración web\n   */ static async performWebSearch(query) {\n        try {\n            // Usar la integración web real\n            const webResults = await _web_search_integration__WEBPACK_IMPORTED_MODULE_0__.WebSearchIntegration.performWebSearch(query);\n            return webResults;\n        } catch (error) {\n            console.error('Web search failed:', error);\n            // Fallback a resultados simulados\n            return this.generateSimulatedResults(query);\n        }\n    }\n    /**\n   * Genera resultados simulados para desarrollo\n   */ static generateSimulatedResults(query) {\n        const simulatedResults = [\n            {\n                title: `Guía completa: ${query}`,\n                content: `Explicación detallada sobre ${query} con ejemplos prácticos y ejercicios paso a paso.`,\n                url: \"https://ejemplo-academico.edu\",\n                source: \"Universidad Académica\"\n            },\n            {\n                title: `Tutorial interactivo: ${query}`,\n                content: `Aprende ${query} de manera visual e interactiva con herramientas modernas.`,\n                url: \"https://tutorial-educativo.com\",\n                source: \"Portal Educativo\"\n            },\n            {\n                title: `Ejercicios resueltos: ${query}`,\n                content: `Colección de problemas y ejercicios resueltos sobre ${query} con explicaciones.`,\n                url: \"https://ejercicios-academicos.org\",\n                source: \"Recursos Académicos\"\n            }\n        ];\n        return simulatedResults;\n    }\n    /**\n   * Procesa y analiza resultados de búsqueda\n   */ static async processSearchResults(rawResults, query) {\n        const processedResults = [];\n        for (const result of rawResults.slice(0, 5)){\n            try {\n                const academicResult = {\n                    title: result.title || 'Recurso Académico',\n                    content: result.content || result.snippet || '',\n                    source: result.source || this.extractDomain(result.url),\n                    relevanceScore: this.calculateRelevanceScore(result, query),\n                    difficulty: this.inferDifficulty(result.content || result.snippet || '', query.level),\n                    contentType: this.classifyContentType(result),\n                    summary: this.generateSummary(result.content || result.snippet || ''),\n                    keyPoints: this.extractKeyPoints(result.content || result.snippet || ''),\n                    relatedTopics: this.identifyRelatedTopics(result.content || result.snippet || '', query.topic),\n                    estimatedReadTime: this.estimateReadTime(result.content || result.snippet || '')\n                };\n                processedResults.push(academicResult);\n            } catch (error) {\n                console.error('Error processing result:', error);\n            }\n        }\n        // Ordenar por relevancia\n        processedResults.sort((a, b)=>b.relevanceScore - a.relevanceScore);\n        return processedResults;\n    }\n    /**\n   * Calcula puntuación de relevancia\n   */ static calculateRelevanceScore(result, query) {\n        let score = 0.5 // Base score\n        ;\n        const content = (result.content || result.snippet || '').toLowerCase();\n        const title = (result.title || '').toLowerCase();\n        const topic = query.topic.toLowerCase();\n        // Coincidencia en título (mayor peso)\n        if (title.includes(topic)) score += 0.3;\n        // Coincidencia en contenido\n        if (content.includes(topic)) score += 0.2;\n        // Calidad de la fuente\n        const domain = this.extractDomain(result.url || '');\n        if (this.QUALITY_INDICATORS.high.some((indicator)=>domain.includes(indicator))) {\n            score += 0.3;\n        } else if (this.QUALITY_INDICATORS.medium.some((indicator)=>content.includes(indicator))) {\n            score += 0.1;\n        }\n        // Longitud del contenido (más contenido = potencialmente más útil)\n        if (content.length > 200) score += 0.1;\n        return Math.min(1.0, score);\n    }\n    /**\n   * Infiere dificultad del contenido\n   */ static inferDifficulty(content, queryLevel) {\n        if (queryLevel) return queryLevel // Usar nivel especificado si está disponible\n        ;\n        const lowerContent = content.toLowerCase();\n        // Indicadores de nivel básico\n        const basicIndicators = [\n            'básico',\n            'principiante',\n            'introducción',\n            'simple',\n            'fácil'\n        ];\n        const basicCount = basicIndicators.filter((indicator)=>lowerContent.includes(indicator)).length;\n        // Indicadores de nivel avanzado\n        const advancedIndicators = [\n            'avanzado',\n            'complejo',\n            'profundo',\n            'investigación',\n            'análisis'\n        ];\n        const advancedCount = advancedIndicators.filter((indicator)=>lowerContent.includes(indicator)).length;\n        if (advancedCount > basicCount) return 'advanced';\n        if (basicCount > 0) return 'basic';\n        return 'intermediate';\n    }\n    /**\n   * Clasifica tipo de contenido\n   */ static classifyContentType(result) {\n        const content = (result.content || result.snippet || '').toLowerCase();\n        const title = (result.title || '').toLowerCase();\n        const url = (result.url || '').toLowerCase();\n        if (content.includes('video') || content.includes('youtube') || url.includes('youtube')) {\n            return 'video';\n        }\n        if (content.includes('ejercicio') || content.includes('problema') || title.includes('ejercicio')) {\n            return 'exercise';\n        }\n        if (content.includes('paper') || content.includes('investigación') || url.includes('scholar')) {\n            return 'academic_paper';\n        }\n        if (content.includes('tutorial') || content.includes('guía') || title.includes('tutorial')) {\n            return 'tutorial';\n        }\n        return 'article';\n    }\n    /**\n   * Genera resumen del contenido\n   */ static generateSummary(content) {\n        const sentences = content.split(/[.!?]+/).filter((s)=>s.trim().length > 20);\n        const firstTwoSentences = sentences.slice(0, 2).join('. ');\n        if (firstTwoSentences.length > 150) {\n            return firstTwoSentences.substring(0, 147) + '...';\n        }\n        return firstTwoSentences || 'Recurso académico sobre el tema solicitado.';\n    }\n    /**\n   * Extrae puntos clave del contenido\n   */ static extractKeyPoints(content) {\n        const keyPoints = [];\n        // Buscar listas numeradas o con viñetas\n        const listMatches = content.match(/(?:^\\s*[\\d\\-\\*\\•]\\s*.+$)/gm);\n        if (listMatches) {\n            keyPoints.push(...listMatches.slice(0, 3).map((item)=>item.replace(/^\\s*[\\d\\-\\*\\•]\\s*/, '').trim()));\n        }\n        // Si no hay listas, extraer oraciones importantes\n        if (keyPoints.length === 0) {\n            const sentences = content.split(/[.!?]+/);\n            const importantSentences = sentences.filter((s)=>s.length > 30 && s.length < 100).slice(0, 3);\n            keyPoints.push(...importantSentences.map((s)=>s.trim()));\n        }\n        return keyPoints.filter((point)=>point.length > 10);\n    }\n    /**\n   * Identifica temas relacionados\n   */ static identifyRelatedTopics(content, mainTopic) {\n        const relatedTopics = [];\n        // Diccionario de temas relacionados por materia\n        const topicRelations = {\n            'matemáticas': [\n                'álgebra',\n                'geometría',\n                'cálculo',\n                'estadística',\n                'trigonometría'\n            ],\n            'física': [\n                'mecánica',\n                'termodinámica',\n                'electromagnetismo',\n                'óptica',\n                'cuántica'\n            ],\n            'química': [\n                'orgánica',\n                'inorgánica',\n                'analítica',\n                'física química',\n                'bioquímica'\n            ],\n            'programación': [\n                'algoritmos',\n                'estructuras de datos',\n                'bases de datos',\n                'desarrollo web',\n                'inteligencia artificial'\n            ]\n        };\n        const lowerContent = content.toLowerCase();\n        const lowerTopic = mainTopic.toLowerCase();\n        // Buscar relaciones directas\n        for (const [subject, relations] of Object.entries(topicRelations)){\n            if (lowerTopic.includes(subject) || lowerContent.includes(subject)) {\n                const foundRelations = relations.filter((relation)=>lowerContent.includes(relation) && !lowerTopic.includes(relation));\n                relatedTopics.push(...foundRelations);\n            }\n        }\n        return Array.from(new Set(relatedTopics)).slice(0, 3);\n    }\n    /**\n   * Estima tiempo de lectura\n   */ static estimateReadTime(content) {\n        const wordsPerMinute = 200 // Promedio de lectura en español\n        ;\n        const wordCount = content.split(/\\s+/).length;\n        return Math.max(1, Math.ceil(wordCount / wordsPerMinute));\n    }\n    /**\n   * Extrae dominio de URL\n   */ static extractDomain(url) {\n        try {\n            const urlObj = new URL(url);\n            return urlObj.hostname;\n        } catch  {\n            return 'fuente desconocida';\n        }\n    }\n    /**\n   * Genera recomendaciones personalizadas\n   */ static async generatePersonalizedRecommendations(query, results) {\n        const suggestions = [];\n        const followUpQuestions = [];\n        const actions = [];\n        // Analizar resultados para generar sugerencias\n        if (results.length > 0) {\n            const hasBasicContent = results.some((r)=>r.difficulty === 'basic');\n            const hasAdvancedContent = results.some((r)=>r.difficulty === 'advanced');\n            if (hasBasicContent && query.level !== 'basic') {\n                suggestions.push(`Encontré contenido básico sobre ${query.topic} que puede ayudarte a reforzar fundamentos`);\n            }\n            if (hasAdvancedContent && query.level !== 'advanced') {\n                suggestions.push(`Hay material avanzado disponible cuando te sientas listo para profundizar`);\n            }\n            // Generar preguntas de seguimiento\n            followUpQuestions.push(`¿Te gustaría que busque ejercicios prácticos sobre ${query.topic}?`);\n            followUpQuestions.push(`¿Necesitas que encuentre videos explicativos sobre este tema?`);\n            // Generar acciones sugeridas\n            actions.push(\"Revisar los recursos encontrados por orden de relevancia\");\n            actions.push(\"Tomar notas de los puntos clave identificados\");\n            if (results.some((r)=>r.contentType === 'exercise')) {\n                actions.push(\"Practicar con los ejercicios encontrados\");\n            }\n        }\n        // Agregar recomendaciones basadas en memoria si está disponible\n        if (query.userId) {\n            const memoryBasedSuggestions = await this.getMemoryBasedRecommendations(query);\n            suggestions.push(...memoryBasedSuggestions);\n        }\n        return {\n            suggestions,\n            followUpQuestions,\n            actions\n        };\n    }\n    /**\n   * Obtiene recomendaciones basadas en memoria del usuario\n   */ static async getMemoryBasedRecommendations(query) {\n        if (!query.userId) return [];\n        try {\n            const memory = _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.getMemory(query.userId, query.sessionId);\n            const suggestions = [];\n            // Basado en materias difíciles\n            if (memory.preferences.difficultSubjects.includes(query.subject || '')) {\n                suggestions.push(`He notado que ${query.subject} te presenta desafíos. Te busqué recursos especialmente claros`);\n            }\n            // Basado en emociones recientes\n            if (memory.emotionalProfile.recentEmotions.includes(_emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__.EmotionType.CONFUSED)) {\n                suggestions.push(\"Seleccioné explicaciones paso a paso considerando tu confusión reciente\");\n            }\n            if (memory.emotionalProfile.recentEmotions.includes(_emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__.EmotionType.MOTIVATED)) {\n                suggestions.push(\"Vi que estás muy motivado, así que incluí material desafiante para aprovechar tu energía\");\n            }\n            return suggestions;\n        } catch (error) {\n            console.error('Error getting memory-based recommendations:', error);\n            return [];\n        }\n    }\n    /**\n   * Genera recomendaciones de respaldo cuando la búsqueda falla\n   */ static generateFallbackRecommendations(query) {\n        return [\n            `Intenta buscar \"${query.topic}\" en recursos académicos locales`,\n            `Consulta tu libro de texto sobre ${query.subject || 'la materia'}`,\n            `Pregunta a tu profesor sobre ${query.topic} en la próxima clase`,\n            \"Revisa tus apuntes previos sobre temas relacionados\"\n        ];\n    }\n    /**\n   * Realiza búsqueda inteligente basada en contexto conversacional\n   */ static async smartSearch(message, userId, sessionId) {\n        // Extraer información de búsqueda del mensaje\n        const searchQuery = this.extractSearchQuery(message);\n        if (!searchQuery) return null;\n        // Enriquecer query con información del usuario\n        if (userId) {\n            const memory = _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.getMemory(userId, sessionId);\n            // Inferir materia basándose en el contexto\n            if (!searchQuery.subject && memory.preferences.difficultSubjects.length > 0) {\n                searchQuery.subject = memory.preferences.difficultSubjects[0];\n            }\n            // Ajustar nivel basándose en el progreso\n            if (!searchQuery.level) {\n                searchQuery.level = memory.emotionalProfile.motivationLevel > 7 ? 'intermediate' : 'basic';\n            }\n            searchQuery.userId = userId;\n            searchQuery.sessionId = sessionId;\n        }\n        return await this.searchAcademicContent(searchQuery);\n    }\n    /**\n   * Extrae query de búsqueda del mensaje del usuario\n   */ static extractSearchQuery(message) {\n        const lowerMessage = message.toLowerCase();\n        // Patrones para detectar solicitudes de búsqueda\n        const searchPatterns = [\n            /busca(?:me)?\\s+(?:información|sobre|acerca\\s+de)\\s+(.+)/i,\n            /(?:qué\\s+es|explica(?:me)?)\\s+(.+)/i,\n            /(?:cómo|como)\\s+(?:se\\s+)?(.+)/i,\n            /necesito\\s+(?:información|ayuda|saber)\\s+(?:sobre|de|con)\\s+(.+)/i,\n            /(?:ejemplos|ejercicios)\\s+(?:de|sobre)\\s+(.+)/i\n        ];\n        for (const pattern of searchPatterns){\n            const match = message.match(pattern);\n            if (match) {\n                const topic = match[1].trim();\n                return {\n                    topic,\n                    searchType: this.inferSearchType(lowerMessage),\n                    language: 'es'\n                };\n            }\n        }\n        return null;\n    }\n    /**\n   * Infiere tipo de búsqueda basándose en el mensaje\n   */ static inferSearchType(message) {\n        if (/ejercicio|problema|práctica/.test(message)) return 'exercises';\n        if (/ejemplo|caso|muestra/.test(message)) return 'examples';\n        if (/recurso|material|herramienta/.test(message)) return 'resources';\n        if (/investigación|paper|estudio/.test(message)) return 'research';\n        return 'explanation';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/academic-search-engine.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/advanced-learning-profiles.ts":
/*!***********************************************!*\
  !*** ./src/lib/advanced-learning-profiles.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdvancedLearningProfileManager: () => (/* binding */ AdvancedLearningProfileManager),\n/* harmony export */   LearningStyle: () => (/* binding */ LearningStyle)\n/* harmony export */ });\n// Advanced Learning Profiles System for Sara AI\n// Implements VARK model (Visual, Auditory, Reading/Writing, Kinesthetic) with automatic detection\nvar LearningStyle = /*#__PURE__*/ function(LearningStyle) {\n    LearningStyle[\"VISUAL\"] = \"visual\";\n    LearningStyle[\"AUDITORY\"] = \"auditory\";\n    LearningStyle[\"READING_WRITING\"] = \"reading_writing\";\n    LearningStyle[\"KINESTHETIC\"] = \"kinesthetic\";\n    LearningStyle[\"MULTIMODAL\"] = \"multimodal\";\n    return LearningStyle;\n}({});\nclass AdvancedLearningProfileManager {\n    static{\n        // Storage for learning profiles\n        this.profiles = new Map();\n    }\n    static{\n        this.behaviors = [];\n    }\n    /**\n   * Analyzes user message for learning style indicators\n   */ static analyzeMessageForLearningStyle(message, userId) {\n        const msgLower = message.toLowerCase();\n        const indicators = [];\n        // VISUAL indicators\n        const visualKeywords = [\n            'ver',\n            'mirar',\n            'mostrar',\n            'imagen',\n            'gráfico',\n            'diagrama',\n            'visual',\n            'color',\n            'mapa',\n            'esquema',\n            'dibujo',\n            'ilustración',\n            'tabla',\n            'gráfica',\n            'visualizar',\n            'observar',\n            'demostrar',\n            'ejemplo visual',\n            'claramente'\n        ];\n        const visualPhrases = [\n            'me gusta ver',\n            'muéstrame',\n            'qué aspecto tiene',\n            'cómo se ve',\n            'necesito ver',\n            'puedes mostrar',\n            'ejemplo visual',\n            'de forma gráfica'\n        ];\n        let visualScore = this.calculateKeywordScore(msgLower, visualKeywords, visualPhrases);\n        if (visualScore > 0) {\n            indicators.push({\n                style: \"visual\",\n                weight: visualScore,\n                evidence: this.extractEvidence(msgLower, [\n                    ...visualKeywords,\n                    ...visualPhrases\n                ]),\n                confidence: Math.min(visualScore * 1.2, 1.0)\n            });\n        }\n        // AUDITORY indicators\n        const auditoryKeywords = [\n            'escuchar',\n            'oír',\n            'sonido',\n            'explicar',\n            'decir',\n            'contar',\n            'discutir',\n            'hablar',\n            'verbal',\n            'audio',\n            'pronunciar',\n            'repetir',\n            'preguntar'\n        ];\n        const auditoryPhrases = [\n            'explícame',\n            'cuéntame',\n            'me puedes decir',\n            'necesito que me expliques',\n            'repítelo',\n            'en palabras',\n            'de forma verbal',\n            'hablemos de'\n        ];\n        let auditoryScore = this.calculateKeywordScore(msgLower, auditoryKeywords, auditoryPhrases);\n        if (auditoryScore > 0) {\n            indicators.push({\n                style: \"auditory\",\n                weight: auditoryScore,\n                evidence: this.extractEvidence(msgLower, [\n                    ...auditoryKeywords,\n                    ...auditoryPhrases\n                ]),\n                confidence: Math.min(auditoryScore * 1.1, 1.0)\n            });\n        }\n        // READING/WRITING indicators\n        const readWriteKeywords = [\n            'leer',\n            'escribir',\n            'texto',\n            'nota',\n            'lista',\n            'definición',\n            'resumen',\n            'apuntes',\n            'documento',\n            'artículo',\n            'párrafo',\n            'descripción',\n            'detalles'\n        ];\n        const readWritePhrases = [\n            'en texto',\n            'por escrito',\n            'dame detalles',\n            'necesito leer',\n            'quiero estudiar',\n            'información detallada',\n            'paso a paso',\n            'lista de'\n        ];\n        let readWriteScore = this.calculateKeywordScore(msgLower, readWriteKeywords, readWritePhrases);\n        if (readWriteScore > 0) {\n            indicators.push({\n                style: \"reading_writing\",\n                weight: readWriteScore,\n                evidence: this.extractEvidence(msgLower, [\n                    ...readWriteKeywords,\n                    ...readWritePhrases\n                ]),\n                confidence: Math.min(readWriteScore, 1.0)\n            });\n        }\n        // KINESTHETIC indicators\n        const kinestheticKeywords = [\n            'hacer',\n            'practicar',\n            'ejercicio',\n            'actividad',\n            'mano',\n            'tocar',\n            'mover',\n            'experimentar',\n            'probar',\n            'manipular',\n            'construir',\n            'crear',\n            'interactivo'\n        ];\n        const kinestheticPhrases = [\n            'quiero hacer',\n            'necesito practicar',\n            'hands on',\n            'de forma práctica',\n            'experimentando',\n            'probando',\n            'haciendo ejercicios',\n            'actividades'\n        ];\n        let kinestheticScore = this.calculateKeywordScore(msgLower, kinestheticKeywords, kinestheticPhrases);\n        if (kinestheticScore > 0) {\n            indicators.push({\n                style: \"kinesthetic\",\n                weight: kinestheticScore,\n                evidence: this.extractEvidence(msgLower, [\n                    ...kinestheticKeywords,\n                    ...kinestheticPhrases\n                ]),\n                confidence: Math.min(kinestheticScore * 1.3, 1.0)\n            });\n        }\n        // Record behavior pattern\n        if (indicators.length > 0) {\n            this.recordBehaviorPattern(userId, 'message_analysis', message, indicators.map((i)=>i.style));\n        }\n        return indicators.sort((a, b)=>b.weight - a.weight);\n    }\n    /**\n   * Calculates score based on keyword and phrase matches\n   */ static calculateKeywordScore(text, keywords, phrases) {\n        let score = 0;\n        // Keyword matches (lower weight)\n        for (const keyword of keywords){\n            if (text.includes(keyword)) {\n                score += 0.1;\n            }\n        }\n        // Phrase matches (higher weight)\n        for (const phrase of phrases){\n            if (text.includes(phrase)) {\n                score += 0.3;\n            }\n        }\n        return Math.min(score, 1.0);\n    }\n    /**\n   * Extracts evidence from text\n   */ static extractEvidence(text, patterns) {\n        const evidence = [];\n        for (const pattern of patterns){\n            if (text.includes(pattern)) {\n                // Extract sentence containing the pattern\n                const sentences = text.split(/[.!?]+/);\n                const matchingSentence = sentences.find((sentence)=>sentence.toLowerCase().includes(pattern));\n                if (matchingSentence) {\n                    evidence.push(matchingSentence.trim());\n                }\n            }\n        }\n        return evidence.slice(0, 3) // Limit to 3 pieces of evidence\n        ;\n    }\n    /**\n   * Records a learning behavior pattern\n   */ static recordBehaviorPattern(userId, action, context, styleIndicators) {\n        this.behaviors.push({\n            userId,\n            timestamp: new Date(),\n            action,\n            context,\n            styleIndicators\n        });\n        // Keep only recent behaviors (last 100 per user)\n        const userBehaviors = this.behaviors.filter((b)=>b.userId === userId);\n        if (userBehaviors.length > 100) {\n            this.behaviors = this.behaviors.filter((b)=>b.userId !== userId).concat(userBehaviors.slice(-100));\n        }\n    }\n    /**\n   * Updates or creates learning profile for user\n   */ static updateLearningProfile(userId, indicators, context) {\n        let profile = this.profiles.get(userId) || this.createInitialProfile(userId);\n        // Update style distribution based on new indicators\n        for (const indicator of indicators){\n            const weight = indicator.weight * indicator.confidence;\n            switch(indicator.style){\n                case \"visual\":\n                    profile.styleDistribution.visual = Math.min(profile.styleDistribution.visual + weight * 0.1, 1.0);\n                    break;\n                case \"auditory\":\n                    profile.styleDistribution.auditory = Math.min(profile.styleDistribution.auditory + weight * 0.1, 1.0);\n                    break;\n                case \"reading_writing\":\n                    profile.styleDistribution.reading_writing = Math.min(profile.styleDistribution.reading_writing + weight * 0.1, 1.0);\n                    break;\n                case \"kinesthetic\":\n                    profile.styleDistribution.kinesthetic = Math.min(profile.styleDistribution.kinesthetic + weight * 0.1, 1.0);\n                    break;\n            }\n        }\n        // Normalize distribution\n        const total = profile.styleDistribution.visual + profile.styleDistribution.auditory + profile.styleDistribution.reading_writing + profile.styleDistribution.kinesthetic;\n        if (total > 0) {\n            profile.styleDistribution.visual /= total;\n            profile.styleDistribution.auditory /= total;\n            profile.styleDistribution.reading_writing /= total;\n            profile.styleDistribution.kinesthetic /= total;\n        }\n        // Determine primary and secondary styles\n        const styles = [\n            {\n                style: \"visual\",\n                score: profile.styleDistribution.visual\n            },\n            {\n                style: \"auditory\",\n                score: profile.styleDistribution.auditory\n            },\n            {\n                style: \"reading_writing\",\n                score: profile.styleDistribution.reading_writing\n            },\n            {\n                style: \"kinesthetic\",\n                score: profile.styleDistribution.kinesthetic\n            }\n        ].sort((a, b)=>b.score - a.score);\n        profile.primaryStyle = styles[0].score > 0.35 ? styles[0].style : \"multimodal\";\n        profile.secondaryStyle = styles[1].score > 0.25 ? styles[1].style : undefined;\n        // Update adaptation preferences\n        profile.adaptationPreferences = {\n            prefersDiagrams: profile.styleDistribution.visual > 0.3,\n            prefersStepByStep: profile.styleDistribution.reading_writing > 0.3,\n            prefersExamples: profile.styleDistribution.visual > 0.25 || profile.styleDistribution.kinesthetic > 0.25,\n            prefersInteraction: profile.styleDistribution.kinesthetic > 0.3,\n            prefersVisualAids: profile.styleDistribution.visual > 0.25,\n            prefersVerbalExplanation: profile.styleDistribution.auditory > 0.3\n        };\n        profile.lastUpdated = new Date();\n        profile.interactions++;\n        this.profiles.set(userId, profile);\n        console.log(`📊 Learning profile updated for ${userId}: Primary=${profile.primaryStyle}, Secondary=${profile.secondaryStyle || 'none'}`);\n        return profile;\n    }\n    /**\n   * Creates initial learning profile\n   */ static createInitialProfile(userId) {\n        return {\n            userId,\n            primaryStyle: \"multimodal\",\n            secondaryStyle: undefined,\n            styleDistribution: {\n                visual: 0.25,\n                auditory: 0.25,\n                reading_writing: 0.25,\n                kinesthetic: 0.25\n            },\n            adaptationPreferences: {\n                prefersDiagrams: false,\n                prefersStepByStep: true,\n                prefersExamples: true,\n                prefersInteraction: false,\n                prefersVisualAids: false,\n                prefersVerbalExplanation: false\n            },\n            detectedFrom: {\n                messageAnalysis: 0,\n                behaviorPatterns: 0,\n                explicitPreferences: 0\n            },\n            lastUpdated: new Date(),\n            interactions: 0\n        };\n    }\n    /**\n   * Gets learning profile for user\n   */ static getLearningProfile(userId) {\n        return this.profiles.get(userId) || this.createInitialProfile(userId);\n    }\n    /**\n   * Adapts response content based on learning profile\n   */ static adaptResponseToLearningStyle(content, profile) {\n        let adaptedContent = content;\n        // Visual learner adaptations\n        if (profile.adaptationPreferences.prefersVisualAids) {\n            adaptedContent = this.addVisualElements(adaptedContent, profile);\n        }\n        // Auditory learner adaptations\n        if (profile.adaptationPreferences.prefersVerbalExplanation) {\n            adaptedContent = this.addAuditoryElements(adaptedContent, profile);\n        }\n        // Reading/Writing learner adaptations\n        if (profile.adaptationPreferences.prefersStepByStep) {\n            adaptedContent = this.addStructuredElements(adaptedContent, profile);\n        }\n        // Kinesthetic learner adaptations\n        if (profile.adaptationPreferences.prefersInteraction) {\n            adaptedContent = this.addInteractiveElements(adaptedContent, profile);\n        }\n        return adaptedContent;\n    }\n    /**\n   * Adds visual elements for visual learners\n   */ static addVisualElements(content, profile) {\n        let enhanced = content;\n        // Add visual cues and formatting\n        enhanced = enhanced.replace(/importante:/gi, '🔍 **IMPORTANTE:**');\n        enhanced = enhanced.replace(/nota:/gi, '📝 **NOTA:**');\n        enhanced = enhanced.replace(/ejemplo:/gi, '💡 **EJEMPLO:**');\n        enhanced = enhanced.replace(/resultado:/gi, '✅ **RESULTADO:**');\n        // Add visual separators\n        if (enhanced.includes('paso') || enhanced.includes('step')) {\n            enhanced = enhanced.replace(/paso (\\d+)/gi, '\\n📍 **PASO $1**\\n');\n        }\n        return enhanced;\n    }\n    /**\n   * Adds auditory elements for auditory learners  \n   */ static addAuditoryElements(content, profile) {\n        let enhanced = content;\n        // Add conversational phrases\n        enhanced = \"🗣️ Te voy a explicar esto paso a paso:\\n\\n\" + enhanced;\n        // Add verbal transition phrases\n        enhanced = enhanced.replace(/\\. ([A-Z])/g, '. Ahora, $1');\n        enhanced = enhanced.replace(/:\\n/g, '. Escucha bien:\\n');\n        return enhanced;\n    }\n    /**\n   * Adds structured elements for reading/writing learners\n   */ static addStructuredElements(content, profile) {\n        let enhanced = content;\n        // Add clear structure and bullet points\n        if (!enhanced.includes('**') && enhanced.length > 200) {\n            const sentences = enhanced.split('.');\n            if (sentences.length > 3) {\n                enhanced = sentences.filter((s)=>s.trim().length > 10).map((sentence, index)=>`${index + 1}. ${sentence.trim()}`).join('\\n');\n            }\n        }\n        return enhanced;\n    }\n    /**\n   * Adds interactive elements for kinesthetic learners\n   */ static addInteractiveElements(content, profile) {\n        let enhanced = content;\n        // Add action-oriented language\n        enhanced += \"\\n\\n🎯 **Prueba esto:**\";\n        enhanced += \"\\n• Aplica este concepto a un problema real\";\n        enhanced += \"\\n• Experimenta cambiando los valores\";\n        enhanced += \"\\n• Practica con ejercicios similares\";\n        return enhanced;\n    }\n    /**\n   * Analyzes behavior patterns to enhance profile\n   */ static analyzeBehaviorPatterns(userId) {\n        const userBehaviors = this.behaviors.filter((b)=>b.userId === userId);\n        const profile = this.getLearningProfile(userId);\n        if (userBehaviors.length < 5) return profile;\n        // Analyze patterns in recent behaviors\n        const recentBehaviors = userBehaviors.slice(-20);\n        const styleFrequency = new Map();\n        for (const behavior of recentBehaviors){\n            for (const style of behavior.styleIndicators){\n                styleFrequency.set(style, (styleFrequency.get(style) || 0) + 1);\n            }\n        }\n        // Update profile based on behavioral patterns\n        const indicators = [];\n        for (const [style, frequency] of styleFrequency.entries()){\n            const weight = frequency / recentBehaviors.length;\n            if (weight > 0.1) {\n                indicators.push({\n                    style,\n                    weight,\n                    evidence: [\n                        `Detectado en ${frequency} de ${recentBehaviors.length} interacciones recientes`\n                    ],\n                    confidence: Math.min(weight * 2, 1.0)\n                });\n            }\n        }\n        return this.updateLearningProfile(userId, indicators, 'behavior_analysis');\n    }\n    /**\n   * Gets profile statistics\n   */ static getProfileStatistics(userId) {\n        if (userId) {\n            const profile = this.profiles.get(userId);\n            const behaviors = this.behaviors.filter((b)=>b.userId === userId);\n            return {\n                profile: profile || null,\n                behaviorCount: behaviors.length,\n                recentInteractions: behaviors.filter((b)=>b.timestamp > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)).length\n            };\n        }\n        return {\n            totalProfiles: this.profiles.size,\n            totalBehaviors: this.behaviors.length,\n            styleDistribution: this.getGlobalStyleDistribution()\n        };\n    }\n    /**\n   * Gets global style distribution\n   */ static getGlobalStyleDistribution() {\n        const distribution = {\n            visual: 0,\n            auditory: 0,\n            reading_writing: 0,\n            kinesthetic: 0,\n            multimodal: 0\n        };\n        for (const profile of this.profiles.values()){\n            switch(profile.primaryStyle){\n                case \"visual\":\n                    distribution.visual++;\n                    break;\n                case \"auditory\":\n                    distribution.auditory++;\n                    break;\n                case \"reading_writing\":\n                    distribution.reading_writing++;\n                    break;\n                case \"kinesthetic\":\n                    distribution.kinesthetic++;\n                    break;\n                case \"multimodal\":\n                    distribution.multimodal++;\n                    break;\n            }\n        }\n        return distribution;\n    }\n    /**\n   * Process user message and update learning profile\n   */ static processUserMessage(userId, message) {\n        // Analyze message for learning style indicators\n        const indicators = this.analyzeMessageForLearningStyle(message, userId);\n        // Update learning profile if indicators found\n        if (indicators.length > 0) {\n            return this.updateLearningProfile(userId, indicators, 'message_processing');\n        }\n        // Analyze behavior patterns periodically\n        const profile = this.getLearningProfile(userId);\n        if (profile.interactions % 10 === 0) {\n            return this.analyzeBehaviorPatterns(userId);\n        }\n        return profile;\n    }\n    /**\n   * Generates learning style recommendations for Sara\n   */ static generateStyleRecommendations(profile) {\n        const recommendations = [];\n        switch(profile.primaryStyle){\n            case \"visual\":\n                recommendations.push(\"Usar diagramas y esquemas cuando explico conceptos\");\n                recommendations.push(\"Incluir ejemplos visuales y gráficos\");\n                recommendations.push(\"Estructurar información con viñetas y colores\");\n                break;\n            case \"auditory\":\n                recommendations.push(\"Explicar conceptos con lenguaje conversacional\");\n                recommendations.push(\"Usar analogías y metáforas verbales\");\n                recommendations.push(\"Incluir discusiones y preguntas abiertas\");\n                break;\n            case \"reading_writing\":\n                recommendations.push(\"Proporcionar información detallada por escrito\");\n                recommendations.push(\"Crear listas y resúmenes estructurados\");\n                recommendations.push(\"Incluir definiciones y descripciones precisas\");\n                break;\n            case \"kinesthetic\":\n                recommendations.push(\"Incluir ejercicios prácticos y actividades\");\n                recommendations.push(\"Sugerir experimentos y aplicaciones reales\");\n                recommendations.push(\"Usar ejemplos concretos y manipulables\");\n                break;\n            case \"multimodal\":\n                recommendations.push(\"Combinar múltiples enfoques de enseñanza\");\n                recommendations.push(\"Adaptar explicaciones según el contexto\");\n                recommendations.push(\"Ofrecer opciones de aprendizaje variadas\");\n                break;\n        }\n        return recommendations;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/advanced-learning-profiles.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/ai-providers.ts":
/*!*********************************!*\
  !*** ./src/lib/ai-providers.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIProvider: () => (/* binding */ AIProvider),\n/* harmony export */   AIProviderFactory: () => (/* binding */ AIProviderFactory),\n/* harmony export */   AIService: () => (/* binding */ AIService),\n/* harmony export */   AI_CONFIG: () => (/* binding */ AI_CONFIG),\n/* harmony export */   BaseAIProvider: () => (/* binding */ BaseAIProvider),\n/* harmony export */   GoogleGeminiProvider: () => (/* binding */ GoogleGeminiProvider),\n/* harmony export */   GroqProvider: () => (/* binding */ GroqProvider),\n/* harmony export */   HuggingFaceProvider: () => (/* binding */ HuggingFaceProvider),\n/* harmony export */   OllamaProvider: () => (/* binding */ OllamaProvider),\n/* harmony export */   TemplateProvider: () => (/* binding */ TemplateProvider),\n/* harmony export */   TransformersJSProvider: () => (/* binding */ TransformersJSProvider),\n/* harmony export */   aiService: () => (/* binding */ aiService)\n/* harmony export */ });\n// AI Providers Configuration\n// Supports multiple AI providers with fallback system\nvar AIProvider = /*#__PURE__*/ function(AIProvider) {\n    AIProvider[\"GOOGLE_GEMINI\"] = \"google_gemini\";\n    AIProvider[\"GROQ\"] = \"groq\";\n    AIProvider[\"HUGGING_FACE\"] = \"huggingface\";\n    AIProvider[\"OLLAMA_LOCAL\"] = \"ollama_local\";\n    AIProvider[\"TRANSFORMERS_JS\"] = \"transformers_js\";\n    AIProvider[\"TEMPLATES_ONLY\"] = \"templates_only\";\n    return AIProvider;\n}({});\n// Default configuration - Groq first for ultra-fast responses\nconst AI_CONFIG = [\n    {\n        provider: \"groq\",\n        apiKey: process.env.GROQ_API_KEY,\n        baseUrl: 'https://api.groq.com/openai/v1',\n        model: 'llama-3.3-70b-versatile',\n        enabled: !!process.env.GROQ_API_KEY\n    },\n    {\n        provider: \"google_gemini\",\n        apiKey: process.env.GOOGLE_AI_API_KEY,\n        model: 'gemini-1.5-flash',\n        enabled: !!process.env.GOOGLE_AI_API_KEY\n    },\n    {\n        provider: \"huggingface\",\n        apiKey: process.env.HUGGING_FACE_API_KEY,\n        baseUrl: 'https://api-inference.huggingface.co/models',\n        model: 'microsoft/DialoGPT-large',\n        enabled: !!process.env.HUGGING_FACE_API_KEY\n    },\n    {\n        provider: \"ollama_local\",\n        baseUrl: process.env.OLLAMA_URL || 'http://localhost:11434',\n        model: process.env.OLLAMA_MODEL || 'llama3.1:8b',\n        enabled: process.env.OLLAMA_ENABLED === 'true'\n    },\n    {\n        provider: \"transformers_js\",\n        enabled: process.env.TRANSFORMERS_JS_ENABLED === 'true'\n    },\n    {\n        provider: \"templates_only\",\n        enabled: true // Always available as final fallback\n    }\n];\n// Abstract AI Provider Interface\nclass BaseAIProvider {\n    constructor(config){\n        this.config = config;\n    }\n}\n// Google Gemini Provider\nclass GoogleGeminiProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        if (!this.config.apiKey) {\n            throw new Error('Google AI API key not configured');\n        }\n        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${this.config.model}:generateContent?key=${this.config.apiKey}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig: {\n                    temperature: 0.7,\n                    topK: 1,\n                    topP: 1,\n                    maxOutputTokens: 500\n                }\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`Google AI API error: ${response.status}`);\n        }\n        const data = await response.json();\n        return data.candidates[0]?.content?.parts[0]?.text || 'Error generating content';\n    }\n    async isAvailable() {\n        return !!this.config.apiKey;\n    }\n}\n// Hugging Face Provider\nclass HuggingFaceProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        if (!this.config.apiKey) {\n            throw new Error('Hugging Face API key not configured');\n        }\n        const response = await fetch(`${this.config.baseUrl}/${this.config.model}`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${this.config.apiKey}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                inputs: prompt,\n                parameters: {\n                    max_new_tokens: 300,\n                    temperature: 0.7,\n                    return_full_text: false\n                }\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`Hugging Face API error: ${response.status}`);\n        }\n        const data = await response.json();\n        return data[0]?.generated_text || 'Error generating content';\n    }\n    async isAvailable() {\n        return !!this.config.apiKey;\n    }\n}\n// Ollama Local Provider\nclass OllamaProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        try {\n            const response = await fetch(`${this.config.baseUrl}/api/generate`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    model: this.config.model,\n                    prompt: prompt,\n                    stream: false,\n                    options: {\n                        temperature: 0.7,\n                        num_predict: 300\n                    }\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Ollama API error: ${response.status}`);\n            }\n            const data = await response.json();\n            return data.response || 'Error generating content';\n        } catch (error) {\n            throw new Error(`Ollama connection failed: ${error}`);\n        }\n    }\n    async isAvailable() {\n        try {\n            const response = await fetch(`${this.config.baseUrl}/api/version`, {\n                method: 'GET',\n                signal: AbortSignal.timeout(3000) // 3 second timeout\n            });\n            return response.ok;\n        } catch  {\n            return false;\n        }\n    }\n}\n// Transformers.js Provider (Browser-based)\nclass TransformersJSProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        if (!this.pipeline) {\n            const { pipeline } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @xenova/transformers */ \"@xenova/transformers\"));\n            this.pipeline = await pipeline('text-generation', 'Xenova/gpt2');\n        }\n        const result = await this.pipeline(prompt, {\n            max_new_tokens: 150,\n            temperature: 0.7\n        });\n        return result[0]?.generated_text?.replace(prompt, '').trim() || 'Error generating content';\n    }\n    async isAvailable() {\n        try {\n            await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @xenova/transformers */ \"@xenova/transformers\"));\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    constructor(...args){\n        super(...args), this.pipeline = null;\n    }\n}\n// Groq Provider\nclass GroqProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        if (!this.config.apiKey) {\n            throw new Error('Groq API key not configured');\n        }\n        const response = await fetch(`${this.config.baseUrl}/chat/completions`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${this.config.apiKey}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                model: this.config.model,\n                messages: [\n                    {\n                        role: 'system',\n                        content: 'Eres Sara, un asistente personal académico especializado en ayudar a estudiantes con organización, planificación y aprendizaje. Responde de manera clara, práctica y motivacional.'\n                    },\n                    {\n                        role: 'user',\n                        content: prompt\n                    }\n                ],\n                temperature: 0.7,\n                max_tokens: 500,\n                top_p: 0.9\n            })\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            throw new Error(`Groq API error (${response.status}): ${errorData}`);\n        }\n        const data = await response.json();\n        return data.choices[0]?.message?.content || 'Error generating content';\n    }\n    async isAvailable() {\n        if (!this.config.apiKey) return false;\n        try {\n            const response = await fetch(`${this.config.baseUrl}/models`, {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${this.config.apiKey}`\n                },\n                signal: AbortSignal.timeout(5000) // 5 second timeout\n            });\n            return response.ok;\n        } catch  {\n            return false;\n        }\n    }\n}\n// Template Provider (Always Available Fallback)\nclass TemplateProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        // This will use the existing template system\n        return 'TEMPLATE_FALLBACK';\n    }\n    async isAvailable() {\n        return true;\n    }\n}\n// Provider Factory\nclass AIProviderFactory {\n    static createProvider(config) {\n        switch(config.provider){\n            case \"google_gemini\":\n                return new GoogleGeminiProvider(config);\n            case \"groq\":\n                return new GroqProvider(config);\n            case \"huggingface\":\n                return new HuggingFaceProvider(config);\n            case \"ollama_local\":\n                return new OllamaProvider(config);\n            case \"transformers_js\":\n                return new TransformersJSProvider(config);\n            case \"templates_only\":\n                return new TemplateProvider(config);\n            default:\n                throw new Error(`Unknown AI provider: ${config.provider}`);\n        }\n    }\n}\n// Main AI Service with Fallback System\nclass AIService {\n    constructor(){\n        this.providers = [];\n        this.currentProviderIndex = 0;\n        this.initializeProviders();\n    }\n    initializeProviders() {\n        this.providers = AI_CONFIG.filter((config)=>config.enabled).map((config)=>AIProviderFactory.createProvider(config));\n    }\n    async generateExercise(prompt) {\n        for(let i = this.currentProviderIndex; i < this.providers.length; i++){\n            const provider = this.providers[i];\n            try {\n                const isAvailable = await provider.isAvailable();\n                if (!isAvailable) {\n                    console.log(`Provider ${i} not available, trying next...`);\n                    continue;\n                }\n                const result = await provider.generateExercise(prompt);\n                if (result === 'TEMPLATE_FALLBACK') {\n                    return result // Special marker for template system\n                    ;\n                }\n                if (result && result.length > 10) {\n                    this.currentProviderIndex = i // Remember working provider\n                    ;\n                    return result;\n                }\n            } catch (error) {\n                console.error(`Provider ${i} failed:`, error);\n                continue;\n            }\n        }\n        // If all providers fail, return template fallback marker\n        return 'TEMPLATE_FALLBACK';\n    }\n    async getAvailableProviders() {\n        const available = [];\n        for(let i = 0; i < this.providers.length; i++){\n            try {\n                const isAvailable = await this.providers[i].isAvailable();\n                if (isAvailable) {\n                    available.push(AI_CONFIG[i].provider);\n                }\n            } catch  {\n            // Provider not available\n            }\n        }\n        return available;\n    }\n}\n// Export singleton instance\nconst aiService = new AIService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/ai-providers.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/auth.ts":
/*!*************************!*\
  !*** ./src/lib/auth.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/providers/credentials */ \"(rsc)/./node_modules/next-auth/providers/credentials.js\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var _hybrid_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hybrid-storage */ \"(rsc)/./src/lib/hybrid-storage.ts\");\n\n\n\nconst authOptions = {\n    providers: [\n        (0,next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            name: \"credentials\",\n            credentials: {\n                email: {\n                    label: \"Email\",\n                    type: \"email\"\n                },\n                password: {\n                    label: \"Password\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials) {\n                if (!credentials?.email || !credentials?.password) {\n                    return null;\n                }\n                // Find user in database\n                const user = await (0,_hybrid_storage__WEBPACK_IMPORTED_MODULE_2__.findUserByEmail)(credentials.email);\n                if (!user || !user.password) {\n                    return null;\n                }\n                const isPasswordValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].compare(credentials.password, user.password);\n                if (!isPasswordValid) {\n                    return null;\n                }\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.name,\n                    role: user.role,\n                    studentId: user.studentId || undefined\n                };\n            }\n        })\n    ],\n    session: {\n        strategy: \"jwt\"\n    },\n    callbacks: {\n        async jwt ({ token, user }) {\n            if (user) {\n                token.role = user.role;\n                token.studentId = user.studentId;\n            }\n            return token;\n        },\n        async session ({ session, token }) {\n            if (token) {\n                session.user.id = token.sub;\n                session.user.role = token.role;\n                session.user.studentId = token.studentId;\n            }\n            return session;\n        },\n        async redirect ({ url, baseUrl }) {\n            // Handle internal redirects\n            if (url.startsWith(\"/\")) return `${baseUrl}${url}`;\n            else if (new URL(url).origin === baseUrl) return url;\n            // Default to home page for external redirects\n            return baseUrl;\n        },\n        async signIn ({ user, account, profile }) {\n            return true;\n        }\n    },\n    pages: {\n        signIn: \"/auth/signin\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2F1dGgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNpRTtBQUNwQztBQUNxQjtBQUUzQyxNQUFNRyxjQUErQjtJQUMxQ0MsV0FBVztRQUNUSiwyRUFBbUJBLENBQUM7WUFDbEJLLE1BQU07WUFDTkMsYUFBYTtnQkFDWEMsT0FBTztvQkFBRUMsT0FBTztvQkFBU0MsTUFBTTtnQkFBUTtnQkFDdkNDLFVBQVU7b0JBQUVGLE9BQU87b0JBQVlDLE1BQU07Z0JBQVc7WUFDbEQ7WUFDQSxNQUFNRSxXQUFVTCxXQUFXO2dCQUN6QixJQUFJLENBQUNBLGFBQWFDLFNBQVMsQ0FBQ0QsYUFBYUksVUFBVTtvQkFDakQsT0FBTztnQkFDVDtnQkFFQSx3QkFBd0I7Z0JBQ3hCLE1BQU1FLE9BQU8sTUFBTVYsZ0VBQWVBLENBQUNJLFlBQVlDLEtBQUs7Z0JBRXBELElBQUksQ0FBQ0ssUUFBUSxDQUFDQSxLQUFLRixRQUFRLEVBQUU7b0JBQzNCLE9BQU87Z0JBQ1Q7Z0JBRUEsTUFBTUcsa0JBQWtCLE1BQU1aLHdEQUFjLENBQzFDSyxZQUFZSSxRQUFRLEVBQ3BCRSxLQUFLRixRQUFRO2dCQUdmLElBQUksQ0FBQ0csaUJBQWlCO29CQUNwQixPQUFPO2dCQUNUO2dCQUVBLE9BQU87b0JBQ0xFLElBQUlILEtBQUtHLEVBQUU7b0JBQ1hSLE9BQU9LLEtBQUtMLEtBQUs7b0JBQ2pCRixNQUFNTyxLQUFLUCxJQUFJO29CQUNmVyxNQUFNSixLQUFLSSxJQUFJO29CQUNmQyxXQUFXTCxLQUFLSyxTQUFTLElBQUlDO2dCQUMvQjtZQUNGO1FBQ0Y7S0FDRDtJQUNEQyxTQUFTO1FBQ1BDLFVBQVU7SUFDWjtJQUNBQyxXQUFXO1FBQ1QsTUFBTUMsS0FBSSxFQUFFQyxLQUFLLEVBQUVYLElBQUksRUFBRTtZQUN2QixJQUFJQSxNQUFNO2dCQUNSVyxNQUFNUCxJQUFJLEdBQUdKLEtBQUtJLElBQUk7Z0JBQ3RCTyxNQUFNTixTQUFTLEdBQUdMLEtBQUtLLFNBQVM7WUFDbEM7WUFDQSxPQUFPTTtRQUNUO1FBQ0EsTUFBTUosU0FBUSxFQUFFQSxPQUFPLEVBQUVJLEtBQUssRUFBRTtZQUM5QixJQUFJQSxPQUFPO2dCQUNUSixRQUFRUCxJQUFJLENBQUNHLEVBQUUsR0FBR1EsTUFBTUMsR0FBRztnQkFDM0JMLFFBQVFQLElBQUksQ0FBQ0ksSUFBSSxHQUFHTyxNQUFNUCxJQUFJO2dCQUM5QkcsUUFBUVAsSUFBSSxDQUFDSyxTQUFTLEdBQUdNLE1BQU1OLFNBQVM7WUFDMUM7WUFDQSxPQUFPRTtRQUNUO1FBQ0EsTUFBTU0sVUFBUyxFQUFFQyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtZQUM3Qiw0QkFBNEI7WUFDNUIsSUFBSUQsSUFBSUUsVUFBVSxDQUFDLE1BQU0sT0FBTyxHQUFHRCxVQUFVRCxLQUFLO2lCQUM3QyxJQUFJLElBQUlHLElBQUlILEtBQUtJLE1BQU0sS0FBS0gsU0FBUyxPQUFPRDtZQUVqRCw4Q0FBOEM7WUFDOUMsT0FBT0M7UUFDVDtRQUNBLE1BQU1JLFFBQU8sRUFBRW5CLElBQUksRUFBRW9CLE9BQU8sRUFBRUMsT0FBTyxFQUFFO1lBQ3JDLE9BQU87UUFDVDtJQUNGO0lBQ0FDLE9BQU87UUFDTEgsUUFBUTtJQUNWO0FBQ0YsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL3JvZHJpZ29kaWJlcm5hcmRvMzNnbWFpbC5jb20vRG9jdW1lbnRzL0FwcCBEZXZlbG9wbWVudCBQcm95ZWN0cy9JbnRlbGxlZ28gUGxhdGZvcm0vc3JjL2xpYi9hdXRoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBdXRoT3B0aW9ucyB9IGZyb20gXCJuZXh0LWF1dGhcIlxuaW1wb3J0IENyZWRlbnRpYWxzUHJvdmlkZXIgZnJvbSBcIm5leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHNcIlxuaW1wb3J0IGJjcnlwdCBmcm9tIFwiYmNyeXB0anNcIlxuaW1wb3J0IHsgZmluZFVzZXJCeUVtYWlsIH0gZnJvbSBcIi4vaHlicmlkLXN0b3JhZ2VcIlxuXG5leHBvcnQgY29uc3QgYXV0aE9wdGlvbnM6IE5leHRBdXRoT3B0aW9ucyA9IHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgQ3JlZGVudGlhbHNQcm92aWRlcih7XG4gICAgICBuYW1lOiBcImNyZWRlbnRpYWxzXCIsXG4gICAgICBjcmVkZW50aWFsczoge1xuICAgICAgICBlbWFpbDogeyBsYWJlbDogXCJFbWFpbFwiLCB0eXBlOiBcImVtYWlsXCIgfSxcbiAgICAgICAgcGFzc3dvcmQ6IHsgbGFiZWw6IFwiUGFzc3dvcmRcIiwgdHlwZTogXCJwYXNzd29yZFwiIH1cbiAgICAgIH0sXG4gICAgICBhc3luYyBhdXRob3JpemUoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscz8uZW1haWwgfHwgIWNyZWRlbnRpYWxzPy5wYXNzd29yZCkge1xuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kIHVzZXIgaW4gZGF0YWJhc2VcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IGZpbmRVc2VyQnlFbWFpbChjcmVkZW50aWFscy5lbWFpbClcblxuICAgICAgICBpZiAoIXVzZXIgfHwgIXVzZXIucGFzc3dvcmQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUoXG4gICAgICAgICAgY3JlZGVudGlhbHMucGFzc3dvcmQsXG4gICAgICAgICAgdXNlci5wYXNzd29yZFxuICAgICAgICApXG5cbiAgICAgICAgaWYgKCFpc1Bhc3N3b3JkVmFsaWQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogdXNlci5pZCxcbiAgICAgICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgICAgICBuYW1lOiB1c2VyLm5hbWUsXG4gICAgICAgICAgcm9sZTogdXNlci5yb2xlLFxuICAgICAgICAgIHN0dWRlbnRJZDogdXNlci5zdHVkZW50SWQgfHwgdW5kZWZpbmVkLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgXSxcbiAgc2Vzc2lvbjoge1xuICAgIHN0cmF0ZWd5OiBcImp3dFwiLFxuICB9LFxuICBjYWxsYmFja3M6IHtcbiAgICBhc3luYyBqd3QoeyB0b2tlbiwgdXNlciB9KSB7XG4gICAgICBpZiAodXNlcikge1xuICAgICAgICB0b2tlbi5yb2xlID0gdXNlci5yb2xlXG4gICAgICAgIHRva2VuLnN0dWRlbnRJZCA9IHVzZXIuc3R1ZGVudElkXG4gICAgICB9XG4gICAgICByZXR1cm4gdG9rZW5cbiAgICB9LFxuICAgIGFzeW5jIHNlc3Npb24oeyBzZXNzaW9uLCB0b2tlbiB9KSB7XG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgc2Vzc2lvbi51c2VyLmlkID0gdG9rZW4uc3ViIVxuICAgICAgICBzZXNzaW9uLnVzZXIucm9sZSA9IHRva2VuLnJvbGUgYXMgc3RyaW5nXG4gICAgICAgIHNlc3Npb24udXNlci5zdHVkZW50SWQgPSB0b2tlbi5zdHVkZW50SWQgYXMgc3RyaW5nXG4gICAgICB9XG4gICAgICByZXR1cm4gc2Vzc2lvblxuICAgIH0sXG4gICAgYXN5bmMgcmVkaXJlY3QoeyB1cmwsIGJhc2VVcmwgfSkge1xuICAgICAgLy8gSGFuZGxlIGludGVybmFsIHJlZGlyZWN0c1xuICAgICAgaWYgKHVybC5zdGFydHNXaXRoKFwiL1wiKSkgcmV0dXJuIGAke2Jhc2VVcmx9JHt1cmx9YFxuICAgICAgZWxzZSBpZiAobmV3IFVSTCh1cmwpLm9yaWdpbiA9PT0gYmFzZVVybCkgcmV0dXJuIHVybFxuICAgICAgXG4gICAgICAvLyBEZWZhdWx0IHRvIGhvbWUgcGFnZSBmb3IgZXh0ZXJuYWwgcmVkaXJlY3RzXG4gICAgICByZXR1cm4gYmFzZVVybFxuICAgIH0sXG4gICAgYXN5bmMgc2lnbkluKHsgdXNlciwgYWNjb3VudCwgcHJvZmlsZSB9KSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfSxcbiAgcGFnZXM6IHtcbiAgICBzaWduSW46IFwiL2F1dGgvc2lnbmluXCIsXG4gIH0sXG59Il0sIm5hbWVzIjpbIkNyZWRlbnRpYWxzUHJvdmlkZXIiLCJiY3J5cHQiLCJmaW5kVXNlckJ5RW1haWwiLCJhdXRoT3B0aW9ucyIsInByb3ZpZGVycyIsIm5hbWUiLCJjcmVkZW50aWFscyIsImVtYWlsIiwibGFiZWwiLCJ0eXBlIiwicGFzc3dvcmQiLCJhdXRob3JpemUiLCJ1c2VyIiwiaXNQYXNzd29yZFZhbGlkIiwiY29tcGFyZSIsImlkIiwicm9sZSIsInN0dWRlbnRJZCIsInVuZGVmaW5lZCIsInNlc3Npb24iLCJzdHJhdGVneSIsImNhbGxiYWNrcyIsImp3dCIsInRva2VuIiwic3ViIiwicmVkaXJlY3QiLCJ1cmwiLCJiYXNlVXJsIiwic3RhcnRzV2l0aCIsIlVSTCIsIm9yaWdpbiIsInNpZ25JbiIsImFjY291bnQiLCJwcm9maWxlIiwicGFnZXMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/auth.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/calendar-ai-integration.ts":
/*!********************************************!*\
  !*** ./src/lib/calendar-ai-integration.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AICalendarIntegration: () => (/* binding */ AICalendarIntegration),\n/* harmony export */   analyzeConversationForEvents: () => (/* binding */ analyzeConversationForEvents),\n/* harmony export */   convertSuggestionToCalendarEvent: () => (/* binding */ convertSuggestionToCalendarEvent),\n/* harmony export */   createEventFromAI: () => (/* binding */ createEventFromAI),\n/* harmony export */   deleteEventFromAI: () => (/* binding */ deleteEventFromAI),\n/* harmony export */   editEventFromAI: () => (/* binding */ editEventFromAI),\n/* harmony export */   findUserEvents: () => (/* binding */ findUserEvents),\n/* harmony export */   generateEventQuestions: () => (/* binding */ generateEventQuestions),\n/* harmony export */   generateEventSuggestionResponse: () => (/* binding */ generateEventSuggestionResponse)\n/* harmony export */ });\n/* harmony import */ var _calendar_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n// Calendar AI Integration Service\n// Integra el sistema de IA tutora con el calendario para crear eventos automáticamente\n\n/**\n * Analiza una conversación con la IA para detectar menciones de eventos\n */ function analyzeConversationForEvents(conversationHistory) {\n    const userMessages = conversationHistory.filter((msg)=>msg.role === 'user').map((msg)=>msg.content).join(' ');\n    const analysis = {\n        hasEventMention: false,\n        eventSuggestions: [],\n        questions: [],\n        missingInfo: []\n    };\n    // Análisis más inteligente del último mensaje del usuario\n    const lastUserMessage = conversationHistory.length > 0 ? conversationHistory[conversationHistory.length - 1]?.content || userMessages : userMessages;\n    const msgLower = lastUserMessage.toLowerCase();\n    // Detectar intención de agendar/crear evento\n    const agendarPatterns = /agendes?|agend[aá]|cre[ae]|programa|anot[ae]|agrega/i;\n    const isRequestingToSchedule = agendarPatterns.test(lastUserMessage);\n    // Detectar intención de editar evento\n    const editarPatterns = /edit[ae]|modific[ae]|cambi[ae]|actualiz[ae]|reprograma/i;\n    const isRequestingToEdit = editarPatterns.test(lastUserMessage);\n    // Detectar intención de eliminar evento\n    const eliminarPatterns = /elimin[ae]|borr[ae]|quit[ae]|cancel[ae]|suprimi/i;\n    const isRequestingToDelete = eliminarPatterns.test(lastUserMessage);\n    // Detectar menciones de exámenes con mejor parsing\n    if (/(examen|evaluaci[oó]n|parcial|final|prueba|test)/i.test(lastUserMessage)) {\n        const eventData = extractEventDataFromMessage(lastUserMessage, 'exam');\n        if (eventData.hasEvent) {\n            // Normalizar subject con acentos correctos\n            const normalizedSubject = normalizeSubjectName(eventData.subject);\n            analysis.eventSuggestions.push({\n                type: 'exam',\n                title: normalizedSubject ? `Examen de ${normalizedSubject}` : 'Examen',\n                subject: normalizedSubject,\n                date: eventData.date,\n                startTime: eventData.startTime,\n                duration: eventData.duration || 120,\n                location: eventData.location,\n                description: eventData.description,\n                priority: 'high',\n                confidence: 0.9\n            });\n            analysis.hasEventMention = true;\n        }\n    } else if (/(estudiar|repasar|preparar|practicar|sesi[oó]n.*estudio)/i.test(lastUserMessage)) {\n        const eventData = extractEventDataFromMessage(lastUserMessage, 'study_session');\n        if (eventData.hasEvent) {\n            // Normalizar subject con acentos correctos\n            const normalizedSubject = normalizeSubjectName(eventData.subject) || 'Revisión General';\n            analysis.eventSuggestions.push({\n                type: 'study_session',\n                title: `Sesión de Estudio - ${normalizedSubject}`,\n                subject: normalizedSubject,\n                date: eventData.date,\n                startTime: eventData.startTime,\n                duration: eventData.duration || 90,\n                location: eventData.location,\n                description: eventData.description,\n                priority: 'medium',\n                confidence: 0.8\n            });\n            analysis.hasEventMention = true;\n        }\n    }\n    // Solo generar preguntas para información realmente faltante\n    if (analysis.eventSuggestions.length > 0) {\n        const suggestion = analysis.eventSuggestions[0];\n        const questions = [];\n        const missingInfo = [];\n        if (!suggestion.date) {\n            questions.push(\"📅 ¿Para qué fecha es?\");\n            missingInfo.push(\"fecha\");\n        }\n        if (!suggestion.startTime) {\n            questions.push(\"🕐 ¿A qué hora?\");\n            missingInfo.push(\"hora\");\n        }\n        if (suggestion.type === 'exam' && !suggestion.subject) {\n            questions.push(\"📚 ¿De qué materia es el examen?\");\n            missingInfo.push(\"materia\");\n        }\n        if (suggestion.type === 'exam' && !suggestion.location) {\n            questions.push(\"📍 ¿En qué aula será?\");\n            missingInfo.push(\"ubicación\");\n        }\n        // Solo agregar preguntas si realmente falta información\n        analysis.questions = questions;\n        analysis.missingInfo = missingInfo;\n    }\n    return analysis;\n}\n/**\n * Extrae datos específicos del evento desde el mensaje\n */ function extractEventDataFromMessage(message, eventType) {\n    const msgLower = message.toLowerCase();\n    // Extraer materia de manera más inteligente\n    let subject = null;\n    const subjectPatterns = [\n        /(?:examen|evaluaci[oó]n|parcial|final|prueba|test).*?(?:de|en)\\s+([a-záéíóúñ]+)/i,\n        /([a-záéíóúñ]+).*?(?:examen|evaluaci[oó]n|parcial|final|prueba|test)/i,\n        /(?:estudiar|repasar|preparar|practicar)\\s+([a-záéíóúñ]+)/i,\n        /(?:sesi[oó]n.*?(?:de|en)\\s+([a-záéíóúñ]+))/i\n    ];\n    for (const pattern of subjectPatterns){\n        const match = message.match(pattern);\n        if (match && match[1]) {\n            // Capitalizar primera letra\n            subject = match[1].charAt(0).toUpperCase() + match[1].slice(1).toLowerCase();\n            break;\n        }\n    }\n    // Extraer fecha de manera más inteligente\n    let date = null;\n    let startTime = null;\n    // Detectar fechas específicas (dd de mes, dd/mm, etc.)\n    const specificDatePatterns = [\n        /(\\d{1,2})\\s+de\\s+(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,\n        /(\\d{1,2})\\/(\\d{1,2})(?:\\/(\\d{2,4}))?/,\n        /(\\d{1,2})-(\\d{1,2})(?:-(\\d{2,4}))?/,\n        /el\\s+(\\d{1,2})/i\n    ];\n    for (const pattern of specificDatePatterns){\n        const match = message.match(pattern);\n        if (match) {\n            if (pattern.source.includes('de')) {\n                // \"10 de julio\"\n                const day = parseInt(match[1]);\n                const monthName = match[2].toLowerCase();\n                const monthMap = {\n                    'enero': 0,\n                    'febrero': 1,\n                    'marzo': 2,\n                    'abril': 3,\n                    'mayo': 4,\n                    'junio': 5,\n                    'julio': 6,\n                    'agosto': 7,\n                    'septiembre': 8,\n                    'octubre': 9,\n                    'noviembre': 10,\n                    'diciembre': 11\n                };\n                if (monthMap[monthName] !== undefined) {\n                    const now = new Date();\n                    const eventDate = new Date(now.getFullYear(), monthMap[monthName], day);\n                    date = eventDate.toISOString().split('T')[0];\n                }\n            } else if (match[1] && !isNaN(parseInt(match[1]))) {\n                // Formato dd/mm o dd-mm o \"el 10\"\n                const day = parseInt(match[1]);\n                const month = match[2] ? parseInt(match[2]) - 1 : new Date().getMonth();\n                const year = match[3] ? parseInt(match[3]) : new Date().getFullYear();\n                const eventDate = new Date(year, month, day);\n                date = eventDate.toISOString().split('T')[0];\n            }\n            break;\n        }\n    }\n    // Si no se encontró fecha específica, buscar días relativos\n    if (!date) {\n        const relativeDatePatterns = [\n            {\n                pattern: /ma[ñn]ana/i,\n                days: 1\n            },\n            {\n                pattern: /hoy/i,\n                days: 0\n            },\n            {\n                pattern: /pasado.*ma[ñn]ana/i,\n                days: 2\n            },\n            {\n                pattern: /lunes/i,\n                targetDay: 1\n            },\n            {\n                pattern: /martes/i,\n                targetDay: 2\n            },\n            {\n                pattern: /mi[eé]rcoles/i,\n                targetDay: 3\n            },\n            {\n                pattern: /jueves/i,\n                targetDay: 4\n            },\n            {\n                pattern: /viernes/i,\n                targetDay: 5\n            },\n            {\n                pattern: /s[aá]bado/i,\n                targetDay: 6\n            },\n            {\n                pattern: /domingo/i,\n                targetDay: 0\n            }\n        ];\n        for (const { pattern, days, targetDay } of relativeDatePatterns){\n            if (pattern.test(message)) {\n                const now = new Date();\n                let eventDate;\n                if (days !== undefined) {\n                    eventDate = new Date(now.getTime() + days * 24 * 60 * 60 * 1000);\n                } else if (targetDay !== undefined) {\n                    const currentDay = now.getDay();\n                    let daysToAdd = targetDay - currentDay;\n                    if (daysToAdd <= 0) daysToAdd += 7 // Próxima semana\n                    ;\n                    eventDate = new Date(now.getTime() + daysToAdd * 24 * 60 * 60 * 1000);\n                } else {\n                    continue;\n                }\n                date = eventDate.toISOString().split('T')[0];\n                break;\n            }\n        }\n    }\n    // Extraer hora de manera más inteligente\n    const timePatterns = [\n        /(?:a\\s+las?\\s+)?(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm|a\\.?m\\.?|p\\.?m\\.?)/i,\n        /(?:a\\s+las?\\s+)?(\\d{1,2})(?::(\\d{2}))?\\s*h(?:oras?)?/i,\n        /(\\d{1,2})(?::(\\d{2}))?\\s*(?:de\\s+la\\s+)?(ma[ñn]ana|tarde|noche)/i\n    ];\n    for (const pattern of timePatterns){\n        const match = message.match(pattern);\n        if (match) {\n            let hour = parseInt(match[1]);\n            const minute = match[2] ? parseInt(match[2]) : 0;\n            const period = match[3]?.toLowerCase();\n            // Convertir a formato 24h\n            if (period) {\n                if ((period.includes('pm') || period.includes('p.m') || period === 'tarde' || period === 'noche') && hour < 12) {\n                    hour += 12;\n                } else if ((period.includes('am') || period.includes('a.m') || period === 'ma[ñn]ana') && hour === 12) {\n                    hour = 0;\n                } else if (period === 'noche' && hour < 6) {\n                    hour += 12 // Para casos como \"3 de la noche\" = 15:00\n                    ;\n                }\n            }\n            startTime = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n            break;\n        }\n    }\n    // Extraer ubicación\n    let location = null;\n    const locationPatterns = [\n        /(?:en\\s+el?\\s+)?(aula|laboratorio|sala|auditorio)\\s+([a-zA-Z0-9]+)/i,\n        /(?:en\\s+)([a-zA-Z\\s]+(?:aula|laboratorio|sala|auditorio)[a-zA-Z0-9\\s]*)/i\n    ];\n    for (const pattern of locationPatterns){\n        const match = message.match(pattern);\n        if (match) {\n            location = match[0].replace(/^en\\s+/i, '').trim();\n            break;\n        }\n    }\n    // Extraer duración\n    let duration = null;\n    const durationMatch = message.match(/(?:durante\\s+)?(\\d+)\\s*(horas?|minutos?|min)/i);\n    if (durationMatch) {\n        const value = parseInt(durationMatch[1]);\n        const unit = durationMatch[2].toLowerCase();\n        duration = unit.includes('hora') ? value * 60 : value;\n    }\n    // Extraer descripción/tema específico si se menciona\n    let description = null;\n    const topicPatterns = [\n        /(?:sobre|tema|temas?)\\s+([a-záéíóúñ\\s]+?)(?:\\s+para|\\s+el|\\s+a|$)/i,\n        /(?:sobre)\\s+el\\s+tema\\s+([a-záéíóúñ\\s]+?)(?:\\s+para|\\s+el|\\s+a|$)/i\n    ];\n    for (const pattern of topicPatterns){\n        const match = message.match(pattern);\n        if (match && match[1] && match[1].trim().length > 3) {\n            description = match[1].trim();\n            break;\n        }\n    }\n    return {\n        hasEvent: true,\n        subject,\n        date,\n        startTime,\n        location,\n        duration,\n        description\n    };\n}\n/**\n * Genera preguntas para completar la información de un evento\n */ function generateEventQuestions(suggestion) {\n    const questions = [];\n    if (!suggestion.date) {\n        questions.push(\"📅 ¿Para qué fecha es?\");\n    }\n    if (!suggestion.startTime) {\n        questions.push(\"🕐 ¿A qué hora?\");\n    }\n    if (suggestion.type === 'exam') {\n        if (!suggestion.subject) {\n            questions.push(\"📚 ¿De qué materia es el examen?\");\n        }\n        if (!suggestion.location) {\n            questions.push(\"📍 ¿En qué aula o laboratorio será?\");\n        }\n        if (!suggestion.duration) {\n            questions.push(\"⏱️ ¿Cuánto tiempo durará?\");\n        }\n    }\n    if (suggestion.type === 'study_session') {\n        if (!suggestion.subject) {\n            questions.push(\"📖 ¿Qué tema vas a estudiar?\");\n        }\n        if (!suggestion.duration) {\n            questions.push(\"⏰ ¿Cuántas horas planeas estudiar?\");\n        }\n    }\n    if (suggestion.type === 'personal' || suggestion.type === 'extracurricular') {\n        if (!suggestion.location) {\n            questions.push(\"📍 ¿Dónde será?\");\n        }\n    }\n    return questions;\n}\n/**\n * Convierte una sugerencia de evento en un evento de calendario\n */ function convertSuggestionToCalendarEvent(suggestion, userId, additionalInfo) {\n    const merged = {\n        ...suggestion,\n        ...additionalInfo\n    };\n    // Procesar fecha\n    let eventDate = new Date();\n    if (merged.date) {\n        eventDate = parseDateFromText(merged.date);\n    }\n    // Procesar hora\n    let startTime = merged.startTime || '15:00';\n    let endTime = merged.startTime || '16:00';\n    if (merged.duration && merged.startTime) {\n        const start = new Date(`2000-01-01T${merged.startTime}:00`);\n        const end = new Date(start.getTime() + merged.duration * 60000);\n        endTime = end.toTimeString().substring(0, 5);\n    }\n    const event = {\n        id: `ai-event-${Date.now()}`,\n        title: merged.title,\n        date: eventDate,\n        startTime: startTime,\n        endTime: endTime,\n        type: merged.type,\n        color: (0,_calendar_data__WEBPACK_IMPORTED_MODULE_0__.getEventTypeColor)(merged.type),\n        subject: merged.subject,\n        location: merged.location,\n        description: merged.description || 'Creado automáticamente por IA Tutora',\n        priority: merged.priority || 'medium',\n        duration: merged.duration || 60\n    };\n    return event;\n}\n/**\n * Crea un evento automáticamente desde la IA usando el API endpoint dedicado\n */ async function createEventFromAI(suggestion, userId, additionalInfo) {\n    try {\n        const merged = {\n            ...suggestion,\n            ...additionalInfo\n        };\n        // Procesar fecha\n        let eventDate = new Date();\n        if (merged.date) {\n            eventDate = parseDateFromText(merged.date);\n        }\n        // Calcular endTime basado en duration y startTime\n        let endTime = merged.startTime || '16:00';\n        if (merged.duration && merged.startTime) {\n            const start = new Date(`2000-01-01T${merged.startTime}:00`);\n            const end = new Date(start.getTime() + merged.duration * 60000);\n            endTime = end.toTimeString().substring(0, 5);\n        }\n        const eventData = {\n            title: merged.title,\n            type: merged.type,\n            subject: merged.subject,\n            date: eventDate.toISOString(),\n            startTime: merged.startTime || '15:00',\n            endTime: endTime,\n            duration: merged.duration || 60,\n            location: merged.location,\n            description: merged.description || `Creado automáticamente por IA Tutora`,\n            priority: merged.priority || 'medium'\n        };\n        // For server-side execution, call the function directly instead of HTTP fetch\n        try {\n            const { createCalendarEvent } = __webpack_require__(/*! ../app/api/ai-calendar/create-event/route */ \"(rsc)/./src/app/api/ai-calendar/create-event/route.ts\");\n            const mockRequest = {\n                json: async ()=>eventData\n            };\n            const response1 = await createCalendarEvent(mockRequest);\n            const result = await response1.json();\n            return {\n                success: result.success,\n                event: result.event,\n                message: result.message\n            };\n        } catch (directCallError) {\n            console.log('Direct API call failed, trying alternative approach:', directCallError);\n            // Alternative: Use calendar-data functions directly\n            const { addCalendarEvent, getUserCalendarData, createUserCalendarData } = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n            // Ensure user has calendar data\n            let userData = getUserCalendarData(userId);\n            if (!userData) {\n                console.log(`🆕 Creating calendar data for user ${userId}`);\n                userData = createUserCalendarData(userId);\n            }\n            const calendarEvent = {\n                id: `ai-event-${Date.now()}`,\n                title: eventData.title,\n                date: new Date(eventData.date),\n                startTime: eventData.startTime,\n                endTime: eventData.endTime,\n                type: eventData.type,\n                color: '#3B82F6',\n                subject: eventData.subject,\n                location: eventData.location,\n                description: eventData.description,\n                priority: eventData.priority,\n                duration: eventData.duration\n            };\n            console.log(`📅 Creating event: ${calendarEvent.title} for ${eventData.date} at ${eventData.startTime}`);\n            const success = addCalendarEvent(userId, calendarEvent);\n            return {\n                success,\n                event: success ? calendarEvent : undefined,\n                message: success ? 'Evento creado exitosamente' : 'Error al crear evento'\n            };\n        }\n        const result = await response.json();\n        if (result.success) {\n            console.log(`🤖 IA confirmó creación: ${result.event.title}`);\n            // Disparar evento del lado del cliente para notificar componentes\n            if (false) {}\n            return {\n                success: true,\n                event: result.event,\n                message: result.message\n            };\n        } else {\n            console.error('❌ IA falló al crear evento:', result.error);\n            return {\n                success: false,\n                message: result.error || 'Error desconocido'\n            };\n        }\n    } catch (error) {\n        console.error('❌ Error in AI event creation:', error);\n        return {\n            success: false,\n            message: 'Error de conexión al crear evento'\n        };\n    }\n}\n/**\n * Parsea fechas desde texto natural\n */ function parseDateFromText(dateText) {\n    const text = dateText.toLowerCase();\n    const today = new Date();\n    if (text.includes('hoy')) {\n        return today;\n    }\n    if (text.includes('mañana') || text.includes('ma[ñn]ana')) {\n        const tomorrow = new Date(today);\n        tomorrow.setDate(today.getDate() + 1);\n        return tomorrow;\n    }\n    if (text.includes('pasado')) {\n        const dayAfterTomorrow = new Date(today);\n        dayAfterTomorrow.setDate(today.getDate() + 2);\n        return dayAfterTomorrow;\n    }\n    // Días de la semana\n    const dayMap = {\n        'lunes': 1,\n        'martes': 2,\n        'miércoles': 3,\n        'miercoles': 3,\n        'jueves': 4,\n        'viernes': 5,\n        'sábado': 6,\n        'sabado': 6,\n        'domingo': 0\n    };\n    for (const [dayName, dayNumber] of Object.entries(dayMap)){\n        if (text.includes(dayName)) {\n            const targetDate = new Date(today);\n            const currentDay = today.getDay();\n            let daysToAdd = dayNumber - currentDay;\n            if (daysToAdd <= 0) {\n                daysToAdd += 7 // Próxima semana\n                ;\n            }\n            targetDate.setDate(today.getDate() + daysToAdd);\n            return targetDate;\n        }\n    }\n    // Si incluye números (ej: \"en 3 días\")\n    const daysMatch = text.match(/en\\s+(\\d+)\\s+d[ií]as?/);\n    if (daysMatch) {\n        const days = parseInt(daysMatch[1]);\n        const futureDate = new Date(today);\n        futureDate.setDate(today.getDate() + days);\n        return futureDate;\n    }\n    // Por defecto, devolver mañana\n    const defaultDate = new Date(today);\n    defaultDate.setDate(today.getDate() + 1);\n    return defaultDate;\n}\n/**\n * Genera respuesta de la IA para sugerir crear eventos\n */ function generateEventSuggestionResponse(analysis) {\n    if (!analysis.hasEventMention || analysis.eventSuggestions.length === 0) {\n        return \"\";\n    }\n    const suggestion = analysis.eventSuggestions[0] // Tomar la primera sugerencia\n    ;\n    let response1 = `📅 Perfecto! Veo que quieres agendar: **${suggestion.title}**\\n\\n`;\n    // Mostrar información detectada\n    const detectedInfo = [];\n    if (suggestion.subject) detectedInfo.push(`📚 Materia: ${suggestion.subject}`);\n    if (suggestion.date) {\n        const dateObj = new Date(suggestion.date);\n        const formattedDate = dateObj.toLocaleDateString('es-ES', {\n            weekday: 'long',\n            day: 'numeric',\n            month: 'long'\n        });\n        detectedInfo.push(`📅 Fecha: ${formattedDate}`);\n    }\n    if (suggestion.startTime) detectedInfo.push(`🕐 Hora: ${suggestion.startTime}`);\n    if (suggestion.location) detectedInfo.push(`📍 Ubicación: ${suggestion.location}`);\n    if (detectedInfo.length > 0) {\n        response1 += `**Información detectada:**\\n${detectedInfo.join('\\n')}\\n\\n`;\n    }\n    if (analysis.questions.length > 0) {\n        response1 += `Para completar el evento necesito:\\n`;\n        analysis.questions.forEach((question, index)=>{\n            response1 += `${index + 1}. ${question}\\n`;\n        });\n        response1 += `\\n¿Podrías darme estos detalles?`;\n    } else {\n        response1 += `¡Tengo toda la información necesaria! ¿Confirmas que lo agregue a tu calendario?`;\n    }\n    return response1;\n}\n/**\n * Interfaz para el workflow completo de creación de eventos por IA\n */ class AICalendarIntegration {\n    constructor(userId){\n        this.pendingSuggestion = null;\n        this.collectedInfo = {};\n        this.userId = userId;\n    }\n    /**\n   * Procesa un mensaje del usuario y detecta si necesita crear eventos\n   */ async processMessage(message, conversationHistory) {\n        const analysis = analyzeConversationForEvents([\n            ...conversationHistory,\n            {\n                role: 'user',\n                content: message\n            }\n        ]);\n        if (analysis.hasEventMention && analysis.eventSuggestions.length > 0) {\n            this.pendingSuggestion = analysis.eventSuggestions[0];\n            if (analysis.questions.length > 0) {\n                return {\n                    needsEventCreation: true,\n                    response: generateEventSuggestionResponse(analysis),\n                    questions: analysis.questions\n                };\n            } else {\n                // Información completa, crear evento directamente\n                const result = await this.createPendingEvent();\n                return {\n                    needsEventCreation: true,\n                    response: result.success ? this.generateSuccessMessage(result.event) : `❌ ${result.message || 'Hubo un error al crear el evento. Por favor intenta nuevamente.'}`,\n                    event: result.event\n                };\n            }\n        }\n        return {\n            needsEventCreation: false\n        };\n    }\n    /**\n   * Recopila información adicional del usuario\n   */ collectAdditionalInfo(infoType, value) {\n        if (!this.pendingSuggestion) return false;\n        switch(infoType.toLowerCase()){\n            case 'fecha':\n                this.collectedInfo.date = value;\n                break;\n            case 'hora':\n                this.collectedInfo.startTime = value;\n                break;\n            case 'materia':\n            case 'tema':\n                this.collectedInfo.subject = value;\n                break;\n            case 'ubicación':\n            case 'ubicacion':\n                this.collectedInfo.location = value;\n                break;\n            case 'duración':\n            case 'duracion':\n                this.collectedInfo.duration = parseInt(value);\n                break;\n        }\n        return true;\n    }\n    /**\n   * Crea el evento pendiente con la información recopilada\n   */ async createPendingEvent() {\n        if (!this.pendingSuggestion) {\n            return {\n                success: false,\n                message: 'No hay evento pendiente'\n            };\n        }\n        const result = await createEventFromAI(this.pendingSuggestion, this.userId, this.collectedInfo);\n        if (result.success) {\n            this.pendingSuggestion = null;\n            this.collectedInfo = {};\n        }\n        return result;\n    }\n    /**\n   * Cancela la creación del evento pendiente\n   */ cancelPendingEvent() {\n        this.pendingSuggestion = null;\n        this.collectedInfo = {};\n    }\n    /**\n   * Obtiene la sugerencia pendiente\n   */ getPendingSuggestion() {\n        return this.pendingSuggestion;\n    }\n    /**\n   * Genera mensaje de éxito con detalles del evento creado\n   */ generateSuccessMessage(event) {\n        let message = `✅ ¡Perfecto! He creado \"${event.title}\" en tu calendario.`;\n        // Agregar detalles específicos\n        const details = [];\n        if (event.date) {\n            const dateStr = event.date.toLocaleDateString('es-ES', {\n                weekday: 'long',\n                day: 'numeric',\n                month: 'long'\n            });\n            details.push(`📅 **Fecha**: ${dateStr}`);\n        }\n        if (event.startTime) {\n            details.push(`🕐 **Hora**: ${event.startTime}`);\n        }\n        if (event.location) {\n            details.push(`📍 **Ubicación**: ${event.location}`);\n        }\n        if (event.subject && event.type === 'exam') {\n            details.push(`📚 **Materia**: ${event.subject}`);\n        }\n        if (event.description && !event.description.includes('Creado automáticamente')) {\n            details.push(`📝 **Tema**: ${event.description}`);\n        }\n        if (details.length > 0) {\n            message += `\\n\\n**Detalles del evento:**\\n${details.join('\\n')}`;\n        }\n        message += `\\n\\n🎯 Puedes ver todos tus eventos en la sección \"Organizador Inteligente\" de tu calendario.`;\n        return message;\n    }\n}\n/**\n * Busca eventos del usuario por texto de búsqueda\n */ function findUserEvents(userId, searchText) {\n    const userData = (0,_calendar_data__WEBPACK_IMPORTED_MODULE_0__.getUserCalendarData)(userId);\n    if (!userData) return [];\n    const search = searchText.toLowerCase();\n    return userData.events.filter((event)=>{\n        return event.title.toLowerCase().includes(search) || event.subject?.toLowerCase().includes(search) || event.description?.toLowerCase().includes(search) || event.location?.toLowerCase().includes(search);\n    });\n}\n/**\n * Edita un evento usando el API endpoint\n */ async function editEventFromAI(eventId, updates) {\n    try {\n        // For server-side execution, call the function directly\n        try {\n            const { updateCalendarEvent } = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n            const success = updateCalendarEvent(eventId, updates);\n            return {\n                success,\n                event: success ? {\n                    id: eventId,\n                    ...updates\n                } : undefined,\n                message: success ? 'Evento actualizado exitosamente' : 'Error al actualizar evento'\n            };\n        } catch (error) {\n            console.error('Error updating event:', error);\n            return {\n                success: false,\n                message: 'Error al actualizar evento'\n            };\n        }\n        const result = await response.json();\n        if (result.success) {\n            console.log(`🤖 IA editó evento: ${result.event.title}`);\n            // Disparar evento del lado del cliente\n            if (false) {}\n            return {\n                success: true,\n                event: result.event,\n                message: result.message\n            };\n        } else {\n            return {\n                success: false,\n                message: result.error || 'Error desconocido al editar'\n            };\n        }\n    } catch (error) {\n        console.error('❌ Error editing event from AI:', error);\n        return {\n            success: false,\n            message: 'Error de conexión al editar evento'\n        };\n    }\n}\n/**\n * Elimina un evento usando el API endpoint\n */ async function deleteEventFromAI(eventId) {\n    try {\n        // For server-side execution, call the function directly\n        try {\n            const { deleteCalendarEvent } = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n            const deletedEvent = deleteCalendarEvent(eventId);\n            return {\n                success: !!deletedEvent,\n                message: deletedEvent ? `Evento \"${deletedEvent.title}\" eliminado exitosamente` : 'Evento no encontrado'\n            };\n        } catch (error) {\n            console.error('Error deleting event:', error);\n            return {\n                success: false,\n                message: 'Error al eliminar evento'\n            };\n        }\n        const result = await response.json();\n        if (result.success) {\n            console.log(`🤖 IA eliminó evento: ${result.deletedEvent.title}`);\n            // Disparar evento del lado del cliente\n            if (false) {}\n            return {\n                success: true,\n                message: result.message\n            };\n        } else {\n            return {\n                success: false,\n                message: result.error || 'Error desconocido al eliminar'\n            };\n        }\n    } catch (error) {\n        console.error('❌ Error deleting event from AI:', error);\n        return {\n            success: false,\n            message: 'Error de conexión al eliminar evento'\n        };\n    }\n}\n/**\n * Normaliza nombres de materias con acentos y mayúsculas correctas\n */ function normalizeSubjectName(subject) {\n    if (!subject) return null;\n    const normalized = subject.toLowerCase().trim();\n    const subjectMap = {\n        'quimica': 'Química',\n        'química': 'Química',\n        'fisica': 'Física',\n        'física': 'Física',\n        'matematica': 'Matemática',\n        'matemáticas': 'Matemáticas',\n        'matematicas': 'Matemáticas',\n        'biologia': 'Biología',\n        'biología': 'Biología',\n        'historia': 'Historia',\n        'geografia': 'Geografía',\n        'geografía': 'Geografía',\n        'ingles': 'Inglés',\n        'inglés': 'Inglés',\n        'lengua': 'Lengua y Literatura',\n        'literatura': 'Lengua y Literatura',\n        'filosofia': 'Filosofía',\n        'filosofía': 'Filosofía',\n        'economia': 'Economía',\n        'economía': 'Economía',\n        'educacion fisica': 'Educación Física',\n        'educación física': 'Educación Física',\n        'ed fisica': 'Educación Física',\n        'arte': 'Arte',\n        'musica': 'Música',\n        'música': 'Música'\n    };\n    // Buscar coincidencia exacta primero\n    if (subjectMap[normalized]) {\n        return subjectMap[normalized];\n    }\n    // Buscar coincidencia parcial\n    for (const [key, value] of Object.entries(subjectMap)){\n        if (key.includes(normalized) || normalized.includes(key)) {\n            return value;\n        }\n    }\n    // Si no se encuentra, capitalizar primera letra\n    return subject.charAt(0).toUpperCase() + subject.slice(1).toLowerCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/calendar-ai-integration.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/calendar-data.ts":
/*!**********************************!*\
  !*** ./src/lib/calendar-data.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCalendarEvent: () => (/* binding */ addCalendarEvent),\n/* harmony export */   createUserCalendarData: () => (/* binding */ createUserCalendarData),\n/* harmony export */   deleteCalendarEvent: () => (/* binding */ deleteCalendarEvent),\n/* harmony export */   findAvailableTimeSlots: () => (/* binding */ findAvailableTimeSlots),\n/* harmony export */   getEventTypeColor: () => (/* binding */ getEventTypeColor),\n/* harmony export */   getEventTypeIcon: () => (/* binding */ getEventTypeIcon),\n/* harmony export */   getEventsForDate: () => (/* binding */ getEventsForDate),\n/* harmony export */   getEventsForDateRange: () => (/* binding */ getEventsForDateRange),\n/* harmony export */   getUserCalendarData: () => (/* binding */ getUserCalendarData),\n/* harmony export */   isTimeSlotAvailable: () => (/* binding */ isTimeSlotAvailable),\n/* harmony export */   tempCalendarData: () => (/* binding */ tempCalendarData),\n/* harmony export */   updateCalendarEvent: () => (/* binding */ updateCalendarEvent),\n/* harmony export */   updateUserCalendarData: () => (/* binding */ updateUserCalendarData)\n/* harmony export */ });\n// Calendar Data Models for Smart Calendar\n// Temporary storage for calendar data\nconst globalForCalendarData = globalThis;\nconst tempCalendarData = globalForCalendarData.tempCalendarData ?? [];\nglobalForCalendarData.tempCalendarData = tempCalendarData;\n// Calendar Data Management Functions\nfunction getUserCalendarData(userId) {\n    return tempCalendarData.find((data)=>data.userId === userId);\n}\nfunction createUserCalendarData(userId) {\n    const newData = {\n        userId,\n        schoolSchedule: {\n            monday: [],\n            tuesday: [],\n            wednesday: [],\n            thursday: [],\n            friday: []\n        },\n        studyPreferences: {\n            preferredStudyTime: 'afternoon',\n            dailyStudyHours: 3,\n            maxSessionDuration: 90,\n            breakBetweenSessions: 15,\n            weekendStudyHours: 4,\n            noStudyDays: [\n                0\n            ] // Sunday\n        },\n        events: [],\n        isSetupComplete: false,\n        lastUpdated: new Date()\n    };\n    tempCalendarData.push(newData);\n    return newData;\n}\nfunction updateUserCalendarData(userId, updates) {\n    const index = tempCalendarData.findIndex((data)=>data.userId === userId);\n    if (index !== -1) {\n        tempCalendarData[index] = {\n            ...tempCalendarData[index],\n            ...updates,\n            lastUpdated: new Date()\n        };\n        return true;\n    }\n    return false;\n}\nfunction addCalendarEvent(userId, event) {\n    const userData = getUserCalendarData(userId);\n    if (userData) {\n        userData.events.push(event);\n        userData.lastUpdated = new Date();\n        // Force update in global storage\n        const index = tempCalendarData.findIndex((data)=>data.userId === userId);\n        if (index !== -1) {\n            tempCalendarData[index] = userData;\n        }\n        console.log(`📅 Evento agregado: ${event.title} - Total eventos: ${userData.events.length}`);\n        return true;\n    }\n    return false;\n}\nfunction updateCalendarEvent(userId, eventId, updates) {\n    const userData = getUserCalendarData(userId);\n    if (userData) {\n        const eventIndex = userData.events.findIndex((e)=>e.id === eventId);\n        if (eventIndex !== -1) {\n            userData.events[eventIndex] = {\n                ...userData.events[eventIndex],\n                ...updates\n            };\n            userData.lastUpdated = new Date();\n            // Force update in global storage\n            const index = tempCalendarData.findIndex((data)=>data.userId === userId);\n            if (index !== -1) {\n                tempCalendarData[index] = userData;\n            }\n            console.log(`📅 Evento actualizado: ${userData.events[eventIndex].title}`);\n            return true;\n        }\n    }\n    return false;\n}\nfunction deleteCalendarEvent(userId, eventId) {\n    const userData = getUserCalendarData(userId);\n    if (userData) {\n        const eventIndex = userData.events.findIndex((e)=>e.id === eventId);\n        if (eventIndex !== -1) {\n            const deletedEvent = userData.events[eventIndex];\n            userData.events.splice(eventIndex, 1);\n            userData.lastUpdated = new Date();\n            // Force update in global storage\n            const index = tempCalendarData.findIndex((data)=>data.userId === userId);\n            if (index !== -1) {\n                tempCalendarData[index] = userData;\n            }\n            console.log(`📅 Evento eliminado: ${deletedEvent.title} - Total eventos: ${userData.events.length}`);\n            return true;\n        }\n    }\n    return false;\n}\nfunction getEventsForDate(userId, date) {\n    const userData = getUserCalendarData(userId);\n    if (!userData) return [];\n    const targetDate = new Date(date);\n    targetDate.setHours(0, 0, 0, 0);\n    return userData.events.filter((event)=>{\n        const eventDate = new Date(event.date);\n        eventDate.setHours(0, 0, 0, 0);\n        return eventDate.getTime() === targetDate.getTime();\n    });\n}\nfunction getEventsForDateRange(userId, startDate, endDate) {\n    const userData = getUserCalendarData(userId);\n    if (!userData) return [];\n    return userData.events.filter((event)=>{\n        const eventDate = new Date(event.date);\n        return eventDate >= startDate && eventDate <= endDate;\n    });\n}\n// Utility functions for calendar operations\nfunction isTimeSlotAvailable(userId, date, startTime, endTime) {\n    const userData = getUserCalendarData(userId);\n    if (!userData) return true;\n    const dayName = getDayName(date.getDay());\n    const schoolSlots = userData.schoolSchedule[dayName] || [];\n    // Check school schedule conflicts\n    for (const slot of schoolSlots){\n        if (timeOverlaps(startTime, endTime, slot.start, slot.end)) {\n            return false;\n        }\n    }\n    // Check existing events\n    const dayEvents = getEventsForDate(userId, date);\n    for (const event of dayEvents){\n        if (event.startTime && event.endTime) {\n            if (timeOverlaps(startTime, endTime, event.startTime, event.endTime)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nfunction findAvailableTimeSlots(userId, date, duration, preferredTime) {\n    const userData = getUserCalendarData(userId);\n    if (!userData) return [];\n    const slots = [];\n    // Define time ranges based on preference\n    const timeRanges = {\n        morning: [\n            '08:00',\n            '12:00'\n        ],\n        afternoon: [\n            '14:00',\n            '18:00'\n        ],\n        evening: [\n            '19:00',\n            '22:00'\n        ]\n    };\n    const searchRange = preferredTime ? timeRanges[preferredTime] : [\n        '08:00',\n        '22:00'\n    ];\n    const [searchStart, searchEnd] = searchRange;\n    // Generate potential slots every 30 minutes\n    const startMinutes = timeToMinutes(searchStart);\n    const endMinutes = timeToMinutes(searchEnd);\n    for(let minutes = startMinutes; minutes <= endMinutes - duration; minutes += 30){\n        const slotStart = minutesToTime(minutes);\n        const slotEnd = minutesToTime(minutes + duration);\n        if (isTimeSlotAvailable(userId, date, slotStart, slotEnd)) {\n            slots.push({\n                start: slotStart,\n                end: slotEnd\n            });\n        }\n    }\n    return slots;\n}\nfunction getEventTypeColor(type) {\n    const colors = {\n        exam: '#EF4444',\n        study_session: '#3B82F6',\n        class: '#10B981',\n        personal: '#8B5CF6',\n        extracurricular: '#F59E0B' // Orange\n    };\n    return colors[type] || '#64748B';\n}\nfunction getEventTypeIcon(type) {\n    const icons = {\n        exam: '📝',\n        study_session: '📚',\n        class: '🎓',\n        personal: '👤',\n        extracurricular: '🏃‍♀️'\n    };\n    return icons[type] || '📅';\n}\n// Helper functions\nfunction getDayName(dayIndex) {\n    const days = [\n        'sunday',\n        'monday',\n        'tuesday',\n        'wednesday',\n        'thursday',\n        'friday',\n        'saturday'\n    ];\n    return days[dayIndex];\n}\nfunction timeToMinutes(time) {\n    const [hours, minutes] = time.split(':').map(Number);\n    return hours * 60 + minutes;\n}\nfunction minutesToTime(minutes) {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\n}\nfunction timeOverlaps(start1, end1, start2, end2) {\n    const start1Minutes = timeToMinutes(start1);\n    const end1Minutes = timeToMinutes(end1);\n    const start2Minutes = timeToMinutes(start2);\n    const end2Minutes = timeToMinutes(end2);\n    return start1Minutes < end2Minutes && end1Minutes > start2Minutes;\n}\n// Initialize demo data\nfunction initDemoCalendarData() {\n    const demoUserId = \"demo-student-fixed\";\n    if (!getUserCalendarData(demoUserId)) {\n        console.log(\"📅 Inicializando datos de calendario demo...\");\n        const demoData = createUserCalendarData(demoUserId);\n        // Demo school schedule\n        demoData.schoolSchedule = {\n            monday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Matemáticas',\n                    location: 'Aula 201',\n                    color: '#3B82F6'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Química',\n                    location: 'Laboratorio A',\n                    color: '#EF4444'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Historia',\n                    location: 'Aula 105',\n                    color: '#8B5CF6'\n                }\n            ],\n            tuesday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Física',\n                    location: 'Laboratorio B',\n                    color: '#10B981'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Literatura',\n                    location: 'Aula 203',\n                    color: '#F59E0B'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Biología',\n                    location: 'Laboratorio C',\n                    color: '#EC4899'\n                }\n            ],\n            wednesday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Matemáticas',\n                    location: 'Aula 201',\n                    color: '#3B82F6'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Educación Física',\n                    location: 'Gimnasio',\n                    color: '#06B6D4'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Arte',\n                    location: 'Taller',\n                    color: '#F97316'\n                }\n            ],\n            thursday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Química',\n                    location: 'Laboratorio A',\n                    color: '#EF4444'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Física',\n                    location: 'Laboratorio B',\n                    color: '#10B981'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Historia',\n                    location: 'Aula 105',\n                    color: '#8B5CF6'\n                }\n            ],\n            friday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Biología',\n                    location: 'Laboratorio C',\n                    color: '#EC4899'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Literatura',\n                    location: 'Aula 203',\n                    color: '#F59E0B'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Matemáticas',\n                    location: 'Aula 201',\n                    color: '#3B82F6'\n                }\n            ]\n        };\n        // Demo events\n        const now = new Date();\n        const demoEvents = [\n            {\n                id: 'exam-1',\n                title: 'Examen Química Orgánica',\n                date: new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000),\n                startTime: '10:00',\n                endTime: '12:00',\n                type: 'exam',\n                color: getEventTypeColor('exam'),\n                description: 'Examen parcial de química orgánica',\n                subject: 'Química',\n                location: 'Laboratorio A'\n            },\n            {\n                id: 'study-1',\n                title: 'Sesión de Estudio - Matemáticas',\n                date: new Date(now.getTime() + 1 * 24 * 60 * 60 * 1000),\n                startTime: '15:00',\n                endTime: '16:30',\n                type: 'study_session',\n                color: getEventTypeColor('study_session'),\n                description: 'Repaso de cálculo integral',\n                subject: 'Matemáticas'\n            },\n            {\n                id: 'personal-1',\n                title: 'Entrenamiento Fútbol',\n                date: new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000),\n                startTime: '17:00',\n                endTime: '18:30',\n                type: 'extracurricular',\n                color: getEventTypeColor('extracurricular'),\n                description: 'Entrenamiento de fútbol',\n                location: 'Campo deportivo'\n            }\n        ];\n        demoEvents.forEach((event)=>{\n            demoData.events.push(event);\n        });\n        demoData.isSetupComplete = true;\n        demoData.lastUpdated = new Date();\n        console.log(\"✅ Datos de calendario demo inicializados\");\n    } else {\n        console.log(\"✅ Datos de calendario demo ya existen\");\n    }\n}\n// Initialize demo data on module load\ninitDemoCalendarData();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/calendar-data.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/contextual-conversation-manager.ts":
/*!****************************************************!*\
  !*** ./src/lib/contextual-conversation-manager.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextualConversationManager: () => (/* binding */ ContextualConversationManager)\n/* harmony export */ });\n/* harmony import */ var _advanced_learning_profiles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./advanced-learning-profiles */ \"(rsc)/./src/lib/advanced-learning-profiles.ts\");\n/* harmony import */ var _visual_learning_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visual-learning-engine */ \"(rsc)/./src/lib/visual-learning-engine.ts\");\n/* harmony import */ var _calendar_ai_integration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calendar-ai-integration */ \"(rsc)/./src/lib/calendar-ai-integration.ts\");\n// Contextual Conversation Manager for Sara AI\n// Provides intelligent context management and conversation coherence\n\n\n\nclass ContextualConversationManager {\n    static{\n        // Configuration for persistent conversation management\n        this.MAX_TURNS_RETAINED = 20;\n    }\n    static{\n        this.MAX_REFERENCES = 10;\n    }\n    static{\n        this.CONTEXT_DECAY_HOURS = 24;\n    }\n    /**\n   * Processes user message with full contextual awareness\n   */ static async processContextualMessage(userId, message, sessionId, userName) {\n        const actualSessionId = sessionId || `session_${userId}_${Date.now()}`;\n        // Import persistent storage functions\n        const { getConversationSession, createConversationSession, addConversationTurn, addPendingTask, getPendingTasks } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        // Get or create persistent conversation session\n        let session = getConversationSession(userId, actualSessionId);\n        if (!session) {\n            session = createConversationSession(userId, actualSessionId);\n        }\n        console.log(`💬 Processing message for session ${actualSessionId}: \"${message.substring(0, 50)}...\"`);\n        console.log(`📊 Session has ${session.turns.length} previous turns, ${session.pendingTasks.filter((t)=>!t.completed).length} pending tasks`);\n        // Analyze message metadata\n        const messageMetadata = this.analyzeMessageMetadata(message);\n        // Add user turn to persistent storage\n        session = addConversationTurn(userId, actualSessionId, 'user', message, messageMetadata);\n        // Check for pending tasks that might relate to this message\n        const pendingTasks = getPendingTasks(userId, actualSessionId);\n        // Build context from persistent data\n        const context = {\n            userId,\n            sessionId: actualSessionId,\n            currentTopic: session.currentTopic,\n            currentSubject: session.currentSubject,\n            conversationFlow: session.turns.map((turn)=>({\n                    id: turn.id,\n                    timestamp: turn.timestamp,\n                    role: turn.role,\n                    content: turn.content,\n                    metadata: turn.metadata\n                })),\n            contextSummary: this.buildContextSummary(session),\n            activeIntentions: this.extractActiveIntentions(session.turns.slice(-5)),\n            pendingQuestions: [],\n            referenceMemory: this.buildReferenceMemory(session.turns),\n            lastUpdate: new Date()\n        };\n        // Generate contextually aware response\n        const response = await this.generateContextualResponse(context, userName, pendingTasks);\n        // Add assistant turn to persistent storage\n        const assistantMetadata = {\n            confidence: response.continuityScore,\n            visualsGenerated: !!response.visualRecommendation,\n            searchPerformed: response.personalizations.includes('academic_search'),\n            taskCompleted: response.personalizations.includes('task_completed')\n        };\n        addConversationTurn(userId, actualSessionId, 'assistant', response.content, assistantMetadata);\n        return response;\n    }\n    /**\n   * Build context summary from persistent conversation data\n   */ static buildContextSummary(session) {\n        const recentTurns = session.turns.slice(-6);\n        const keyTopics = [\n            ...new Set(recentTurns.map((turn)=>turn.metadata.topic).filter(Boolean))\n        ];\n        const keySubjects = [\n            ...new Set(recentTurns.map((turn)=>turn.metadata.subject).filter(Boolean))\n        ];\n        const summaryParts = [];\n        if (keySubjects.length > 0) {\n            summaryParts.push(`Materias: ${keySubjects.join(', ')}`);\n        }\n        if (keyTopics.length > 0) {\n            summaryParts.push(`Temas: ${keyTopics.join(', ')}`);\n        }\n        return summaryParts.join(' | ') || 'Conversación general';\n    }\n    /**\n   * Extract active intentions from recent conversation turns\n   */ static extractActiveIntentions(recentTurns) {\n        const intentions = recentTurns.map((turn)=>turn.metadata.intention).filter(Boolean).slice(-3);\n        return [\n            ...new Set(intentions)\n        ];\n    }\n    /**\n   * Build reference memory from conversation turns\n   */ static buildReferenceMemory(turns) {\n        const references = [];\n        const recentTurns = turns.slice(-10);\n        recentTurns.forEach((turn, index)=>{\n            if (turn.metadata.confidence && turn.metadata.confidence > 0.7) {\n                references.push({\n                    id: `ref_${turn.id}`,\n                    type: this.determineReferenceTypeFromMetadata(turn.metadata),\n                    content: turn.content.substring(0, 100) + '...',\n                    relevanceScore: turn.metadata.confidence,\n                    turnIndex: index,\n                    timestamp: turn.timestamp\n                });\n            }\n        });\n        return references.slice(-5) // Keep only last 5 references\n        ;\n    }\n    /**\n   * Helper to determine reference type from metadata\n   */ static determineReferenceTypeFromMetadata(metadata) {\n        if (metadata.intention === 'continuation') return 'topic_continuation';\n        if (metadata.intention === 'problem_solving') return 'problem_solving';\n        if (metadata.intention === 'explanation') return 'explanation_followup';\n        return 'subject_reference';\n    }\n    /**\n   * Handles calendar task execution with real event creation\n   */ static async handleCalendarTasks(userId, message, conversationHistory, pendingTasks) {\n        console.log(`🔍 Checking for calendar tasks in message: \"${message.substring(0, 50)}...\"`);\n        // Initialize calendar integration\n        const calendarIntegration = new _calendar_ai_integration__WEBPACK_IMPORTED_MODULE_2__.AICalendarIntegration(userId);\n        // Analyze message for calendar events\n        const calendarResult = await calendarIntegration.processMessage(message, conversationHistory);\n        if (calendarResult.needsEventCreation) {\n            console.log(`🎯 Calendar task detected and executed!`);\n            // Mark any related pending task as completed\n            if (pendingTasks.length > 0) {\n                const calendarTask = pendingTasks.find((t)=>t.type === 'calendar_event');\n                if (calendarTask) {\n                    const { markTaskCompleted } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n                    markTaskCompleted(userId, 'current-session', calendarTask.id, calendarResult);\n                }\n            }\n            return {\n                type: 'calendar_event_creation',\n                content: calendarResult.response || 'Evento creado exitosamente',\n                metadata: {\n                    suggestedActions: calendarResult.event ? [\n                        'Ver en calendario',\n                        'Editar evento',\n                        'Eliminar evento'\n                    ] : [\n                        'Reintentar',\n                        'Proporcionar más detalles'\n                    ],\n                    eventCreated: !!calendarResult.event\n                }\n            };\n        }\n        return null;\n    }\n    /**\n   * Builds educational prompt based on conversation context\n   */ static buildEducationalPrompt(context, message, userName) {\n        const recentTurns = context.conversationFlow.slice(-3);\n        const conversationContext = recentTurns.map((turn)=>`${turn.role === 'user' ? 'Estudiante' : 'Tutor'}: ${turn.content}`).join('\\n');\n        let prompt = `Eres Sara, una tutora de IA especializada en educación secundaria. `;\n        if (userName) {\n            prompt += `El estudiante se llama ${userName}. `;\n        }\n        if (context.currentSubject) {\n            prompt += `Actualmente estás ayudando con ${context.currentSubject}. `;\n        }\n        if (context.contextSummary && context.contextSummary !== 'Conversación general') {\n            prompt += `Contexto de la conversación: ${context.contextSummary}. `;\n        }\n        prompt += `\\n\\nConversación reciente:\\n${conversationContext}`;\n        prompt += `\\n\\nNuevo mensaje del estudiante: \"${message}\"`;\n        prompt += `\\n\\nInstrucciones:\\n`;\n        prompt += `- Responde como Sara, la tutora de IA amigable y experta\\n`;\n        prompt += `- Mantén coherencia con la conversación anterior\\n`;\n        prompt += `- Si detectas que el estudiante quiere agendar algo (examen, sesión de estudio), menciona que puedes ayudar con eso\\n`;\n        prompt += `- Usa ejemplos concretos y un lenguaje claro para estudiantes de secundaria\\n`;\n        prompt += `- Si es una pregunta académica, proporciona explicaciones paso a paso\\n`;\n        prompt += `- Mantén un tono motivador y positivo\\n\\n`;\n        prompt += `Respuesta de Sara:`;\n        return prompt;\n    }\n    /**\n   * Generates contextual fallback response when AI services fail\n   */ static generateContextualFallback(context, message, userName) {\n        const msgLower = message.toLowerCase();\n        // Calendar-related fallback\n        if (/agendes?|agend[aá]|cre[ae]|programa|anot[ae]|agrega.*(?:examen|evento|sesión)/i.test(message)) {\n            return `¡Hola${userName ? ' ' + userName : ''}! Veo que quieres agendar algo en tu calendario.\\n\\n` + `Por favor proporciona estos detalles:\\n` + `📅 **Fecha**: ¿Para cuándo es?\\n` + `🕐 **Hora**: ¿A qué hora?\\n` + `📚 **Tema**: ¿De qué se trata?\\n\\n` + `Una vez que me des estos datos, podré agregarlo a tu calendario automáticamente.`;\n        }\n        // Academic question fallback\n        if (/¿|qué.*es|cómo|explica|no.*entiendo/i.test(message)) {\n            let response = `Entiendo tu pregunta${userName ? ', ' + userName : ''}.\\n\\n`;\n            if (context.currentSubject) {\n                response += `Para ayudarte mejor con ${context.currentSubject}, `;\n            }\n            response += `¿podrías ser más específico sobre qué parte necesitas que te explique?\\n\\n`;\n            response += `Mientras tanto, puedo:\\n`;\n            response += `• Explicarte conceptos paso a paso\\n`;\n            response += `• Ayudarte a resolver ejercicios\\n`;\n            response += `• Crear recordatorios de estudio\\n`;\n            response += `• Agendar sesiones de repaso`;\n            return response;\n        }\n        // General fallback with context\n        let response = `¡Hola${userName ? ' ' + userName : ''}! 👋\\n\\n`;\n        if (context.currentSubject) {\n            response += `Veo que hemos estado trabajando con ${context.currentSubject}. `;\n        }\n        response += `¿En qué más puedo ayudarte hoy?\\n\\n`;\n        response += `Puedo ayudarte con:\\n`;\n        response += `📚 **Explicar conceptos** de tus materias\\n`;\n        response += `📝 **Resolver ejercicios** paso a paso\\n`;\n        response += `📅 **Agendar eventos** en tu calendario\\n`;\n        response += `🎯 **Hacer evaluaciones** adaptativas\\n`;\n        response += `🔍 **Buscar información** académica`;\n        return response;\n    }\n    /**\n   * Analyzes message metadata for context\n   */ static analyzeMessageMetadata(message) {\n        const msgLower = message.toLowerCase();\n        // Subject detection\n        let subject;\n        if (/matemáticas?|álgebra|geometría|cálculo/.test(msgLower)) {\n            subject = 'matemáticas';\n        } else if (/física|mecánica|cinemática|energía/.test(msgLower)) {\n            subject = 'física';\n        } else if (/química|reacción|átomo|molécula/.test(msgLower)) {\n            subject = 'química';\n        }\n        // Topic detection\n        let topic;\n        const topicMatches = msgLower.match(/(ecuación|función|derivada|integral|fórmula|problema)/gi);\n        if (topicMatches) {\n            topic = topicMatches[0];\n        }\n        // Intention detection\n        let intention;\n        if (/explica|qué es|cómo funciona/.test(msgLower)) {\n            intention = 'explanation';\n        } else if (/resuelve|calcula|encuentra/.test(msgLower)) {\n            intention = 'problem_solving';\n        } else if (/ayuda|no entiendo|estoy confundido/.test(msgLower)) {\n            intention = 'help_request';\n        } else if (/continúa|sigue|y después/.test(msgLower)) {\n            intention = 'continuation';\n        }\n        // Confidence based on clarity and specificity\n        let confidence = 0.5;\n        if (subject) confidence += 0.2;\n        if (topic) confidence += 0.2;\n        if (intention) confidence += 0.1;\n        return {\n            subject,\n            topic,\n            intention,\n            confidence: Math.min(confidence, 1.0)\n        };\n    }\n    /**\n   * Updates contextual information based on new message\n   */ static async updateContextualInformation(context, message) {\n        const recentTurns = context.conversationFlow.slice(-5);\n        const metadata = recentTurns[recentTurns.length - 1]?.metadata;\n        // Update current topic/subject if detected\n        if (metadata?.subject) {\n            context.currentSubject = metadata.subject;\n        }\n        if (metadata?.topic) {\n            context.currentTopic = metadata.topic;\n        }\n        // Detect conversation continuity patterns\n        if (metadata?.intention === 'continuation') {\n            const lastAssistantTurn = recentTurns.slice().reverse().find((turn)=>turn.role === 'assistant');\n            if (lastAssistantTurn?.metadata?.subject) {\n                context.currentSubject = lastAssistantTurn.metadata.subject;\n            }\n        }\n        // Update active intentions\n        if (metadata?.intention && !context.activeIntentions.includes(metadata.intention)) {\n            context.activeIntentions.push(metadata.intention);\n            // Keep only recent intentions\n            if (context.activeIntentions.length > 3) {\n                context.activeIntentions.shift();\n            }\n        }\n        // Create context references for important information\n        if (metadata?.confidence && metadata.confidence > 0.7) {\n            const reference = {\n                id: `ref_${Date.now()}`,\n                type: this.determineReferenceType(metadata),\n                content: message,\n                relevanceScore: metadata.confidence,\n                turnIndex: context.conversationFlow.length - 1,\n                timestamp: new Date()\n            };\n            context.referenceMemory.push(reference);\n            // Keep only most relevant references\n            if (context.referenceMemory.length > this.MAX_REFERENCES) {\n                context.referenceMemory.sort((a, b)=>b.relevanceScore - a.relevanceScore);\n                context.referenceMemory = context.referenceMemory.slice(0, this.MAX_REFERENCES);\n            }\n        }\n        // Update context summary\n        await this.updateContextSummary(context);\n    }\n    /**\n   * Determines reference type based on metadata\n   */ static determineReferenceType(metadata) {\n        if (metadata.intention === 'continuation') return 'topic_continuation';\n        if (metadata.intention === 'problem_solving') return 'problem_solving';\n        if (metadata.intention === 'explanation') return 'explanation_followup';\n        return 'subject_reference';\n    }\n    /**\n   * Updates context summary with key conversation points\n   */ static async updateContextSummary(context) {\n        const recentTurns = context.conversationFlow.slice(-6);\n        const keyTopics = [\n            ...new Set(recentTurns.map((turn)=>turn.metadata.topic).filter(Boolean))\n        ];\n        const keySubjects = [\n            ...new Set(recentTurns.map((turn)=>turn.metadata.subject).filter(Boolean))\n        ];\n        const summaryParts = [];\n        if (keySubjects.length > 0) {\n            summaryParts.push(`Materias: ${keySubjects.join(', ')}`);\n        }\n        if (keyTopics.length > 0) {\n            summaryParts.push(`Temas: ${keyTopics.join(', ')}`);\n        }\n        if (context.activeIntentions.length > 0) {\n            summaryParts.push(`Intenciones: ${context.activeIntentions.join(', ')}`);\n        }\n        context.contextSummary = summaryParts.join(' | ') || 'Conversación general';\n    }\n    /**\n   * Generates contextually aware response using persistent storage\n   */ static async generateContextualResponse(context, userName, pendingTasks = []) {\n        // Get learning profile for personalization\n        const learningProfile = _advanced_learning_profiles__WEBPACK_IMPORTED_MODULE_0__.AdvancedLearningProfileManager.getLearningProfile(context.userId);\n        // Update learning profile based on current message\n        const latestMessage = context.conversationFlow[context.conversationFlow.length - 1]?.content || '';\n        _advanced_learning_profiles__WEBPACK_IMPORTED_MODULE_0__.AdvancedLearningProfileManager.processUserMessage(context.userId, latestMessage);\n        // Analyze conversation for continuity\n        const continuityAnalysis = this.analyzeContinuity(context);\n        // 🎯 FIRST PRIORITY: Check for calendar task execution\n        const calendarResult = await this.handleCalendarTasks(context.userId, latestMessage, this.formatConversationHistory(context), pendingTasks);\n        if (calendarResult) {\n            console.log(`📅 Calendar task executed: ${calendarResult.type}`);\n            return {\n                content: calendarResult.content,\n                context,\n                continuityScore: 0.9,\n                personalizations: [\n                    'calendar_task_executed'\n                ],\n                suggestedFollowups: calendarResult.metadata?.suggestedActions || []\n            };\n        }\n        // Generate base response using AI providers directly\n        const { aiService } = __webpack_require__(/*! ./ai-providers */ \"(rsc)/./src/lib/ai-providers.ts\");\n        let baseContent = '';\n        try {\n            // Create educational prompt based on context\n            const educationalPrompt = this.buildEducationalPrompt(context, latestMessage, userName);\n            baseContent = await aiService.generateExercise(educationalPrompt);\n            // If AI service returns fallback template, use contextual fallback\n            if (baseContent === 'TEMPLATE_FALLBACK') {\n                baseContent = this.generateContextualFallback(context, latestMessage, userName);\n            }\n        } catch (error) {\n            console.error('AI service error, using contextual fallback:', error);\n            baseContent = this.generateContextualFallback(context, latestMessage, userName);\n        }\n        // Enhance response with contextual information\n        let enhancedContent = baseContent;\n        // Add continuity references if relevant\n        if (continuityAnalysis.shouldReference) {\n            enhancedContent = this.addContinuityReferences(enhancedContent, context);\n        }\n        // Apply learning style adaptations\n        enhancedContent = _advanced_learning_profiles__WEBPACK_IMPORTED_MODULE_0__.AdvancedLearningProfileManager.adaptResponseToLearningStyle(enhancedContent, learningProfile);\n        // Determine personalizations applied\n        const personalizations = [];\n        if (continuityAnalysis.shouldReference) personalizations.push('context_reference');\n        if (learningProfile.primaryStyle !== 'multimodal') personalizations.push('learning_style_adaptation');\n        if (pendingTasks.length > 0) personalizations.push('task_aware');\n        // Generate visual recommendations\n        let visualRecommendation;\n        if (learningProfile.adaptationPreferences.prefersVisualAids && (context.currentSubject || context.currentTopic)) {\n            visualRecommendation = {\n                type: _visual_learning_engine__WEBPACK_IMPORTED_MODULE_1__.VisualLearningEngine.detectOptimalVisualType(enhancedContent, context.currentSubject),\n                reason: `Recomendado para tu perfil de aprendizaje ${learningProfile.primaryStyle}`\n            };\n        }\n        // Generate follow-up suggestions\n        const followups = this.generateContextualFollowups(context, learningProfile);\n        return {\n            content: enhancedContent,\n            context,\n            continuityScore: continuityAnalysis.score,\n            personalizations,\n            suggestedFollowups: followups,\n            visualRecommendation\n        };\n    }\n    /**\n   * Analyzes conversation continuity\n   */ static analyzeContinuity(context) {\n        const recentTurns = context.conversationFlow.slice(-4);\n        let score = 0.5 // Base score\n        ;\n        let shouldReference = false;\n        let referenceType;\n        // Check for topic continuity\n        const topics = recentTurns.map((turn)=>turn.metadata.topic).filter(Boolean);\n        if (topics.length > 1 && topics[topics.length - 1] === topics[topics.length - 2]) {\n            score += 0.2;\n            shouldReference = true;\n            referenceType = 'topic_continuity';\n        }\n        // Check for subject continuity\n        const subjects = recentTurns.map((turn)=>turn.metadata.subject).filter(Boolean);\n        if (subjects.length > 1 && subjects[subjects.length - 1] === subjects[subjects.length - 2]) {\n            score += 0.15;\n            shouldReference = true;\n            referenceType = 'subject_continuity';\n        }\n        // Check for continuation indicators\n        const latestMessage = recentTurns[recentTurns.length - 1]?.content?.toLowerCase() || '';\n        if (/continúa|sigue|y después|también|además/.test(latestMessage)) {\n            score += 0.25;\n            shouldReference = true;\n            referenceType = 'explicit_continuation';\n        }\n        // Check for question follow-up patterns\n        const hasQuestionFollowup = recentTurns.some((turn, index)=>index > 0 && turn.role === 'user' && /por qué|cómo|cuándo|dónde|explica/.test(turn.content.toLowerCase()) && recentTurns[index - 1]?.role === 'assistant');\n        if (hasQuestionFollowup) {\n            score += 0.1;\n            shouldReference = true;\n            referenceType = 'followup_question';\n        }\n        return {\n            score: Math.min(score, 1.0),\n            shouldReference,\n            referenceType\n        };\n    }\n    /**\n   * Adds continuity references to response\n   */ static addContinuityReferences(content, context) {\n        const recentAssistantTurns = context.conversationFlow.filter((turn)=>turn.role === 'assistant').slice(-2);\n        if (recentAssistantTurns.length === 0) return content;\n        const lastTopic = context.currentTopic;\n        const lastSubject = context.currentSubject;\n        let referencePrefix = '';\n        if (lastTopic && lastSubject) {\n            referencePrefix = `Continuando con ${lastTopic} en ${lastSubject}: `;\n        } else if (lastTopic) {\n            referencePrefix = `Siguiendo con el tema de ${lastTopic}: `;\n        } else if (lastSubject) {\n            referencePrefix = `Continuando con ${lastSubject}: `;\n        } else {\n            referencePrefix = `Como mencioné anteriormente: `;\n        }\n        return referencePrefix + content;\n    }\n    /**\n   * Generates contextual follow-up suggestions\n   */ static generateContextualFollowups(context, learningProfile) {\n        const followups = [];\n        // Based on current topic/subject\n        if (context.currentTopic) {\n            followups.push(`¿Tienes más preguntas sobre ${context.currentTopic}?`);\n        }\n        if (context.currentSubject) {\n            followups.push(`¿Te gustaría ver ejercicios de ${context.currentSubject}?`);\n        }\n        // Based on learning style\n        if (learningProfile.adaptationPreferences.prefersVisualAids) {\n            followups.push('¿Te ayudaría ver un diagrama de esto?');\n        }\n        if (learningProfile.adaptationPreferences.prefersInteraction) {\n            followups.push('¿Quieres practicar con un ejercicio?');\n        }\n        // Based on active intentions\n        if (context.activeIntentions.includes('explanation')) {\n            followups.push('¿Necesitas que profundice en algún aspecto específico?');\n        }\n        if (context.activeIntentions.includes('problem_solving')) {\n            followups.push('¿Quieres que resolvamos otro problema similar?');\n        }\n        // Generic contextual followups\n        if (context.conversationFlow.length > 3) {\n            followups.push('¿Hay algo que no quedó claro?');\n        }\n        return followups.slice(0, 3) // Limit to 3 suggestions\n        ;\n    }\n    /**\n   * Formats conversation history for external engines\n   */ static formatConversationHistory(context) {\n        return context.conversationFlow.slice(-10) // Last 10 turns\n        .map((turn)=>({\n                role: turn.role,\n                content: turn.content\n            }));\n    }\n    /**\n   * Maintains context memory by cleaning old data\n   */ static maintainContextMemory(context) {\n        // Keep only recent turns\n        if (context.conversationFlow.length > this.MAX_TURNS_RETAINED) {\n            context.conversationFlow = context.conversationFlow.slice(-this.MAX_TURNS_RETAINED);\n        }\n        // Clean old references\n        const cutoffTime = new Date(Date.now() - 12 * 60 * 60 * 1000) // 12 hours\n        ;\n        context.referenceMemory = context.referenceMemory.filter((ref)=>ref.timestamp > cutoffTime);\n        // Clean old intentions\n        if (context.activeIntentions.length > 3) {\n            context.activeIntentions = context.activeIntentions.slice(-3);\n        }\n    }\n    /**\n   * Gets conversation statistics using persistent storage\n   */ static getConversationStats(userId) {\n        const { getUserActiveSessions } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        if (userId) {\n            const userSessions = getUserActiveSessions(userId);\n            return {\n                activeContexts: userSessions.length,\n                totalTurns: userSessions.reduce((sum, session)=>sum + session.turns.length, 0),\n                currentTopics: [\n                    ...new Set(userSessions.map((session)=>session.currentTopic).filter(Boolean))\n                ],\n                currentSubjects: [\n                    ...new Set(userSessions.map((session)=>session.currentSubject).filter(Boolean))\n                ]\n            };\n        }\n        // For global stats, we need to import the conversations array\n        const { tempConversations } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        const activeConversations = tempConversations.filter((session)=>{\n            const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n            return session.lastUpdate > oneHourAgo;\n        });\n        return {\n            totalActiveContexts: activeConversations.length,\n            totalUsers: new Set(activeConversations.map((session)=>session.userId)).size,\n            averageContextAge: this.calculateAverageContextAgeFromSessions(activeConversations)\n        };\n    }\n    /**\n   * Calculates average context age from persistent sessions\n   */ static calculateAverageContextAgeFromSessions(sessions) {\n        if (sessions.length === 0) return 0;\n        const now = Date.now();\n        const totalAge = sessions.reduce((sum, session)=>sum + (now - new Date(session.lastUpdate).getTime()), 0);\n        return Math.round(totalAge / sessions.length / (60 * 1000)) // Average age in minutes\n        ;\n    }\n    /**\n   * Forces cleanup of all contexts (useful for testing)\n   */ static clearAllContexts() {\n        const { cleanupOldConversations } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        cleanupOldConversations();\n        console.log('🧹 All conversation contexts cleared using persistent storage');\n    }\n    /**\n   * Gets active context for user (useful for debugging)\n   */ static getActiveContext(userId, sessionId) {\n        const { getConversationSession, getUserActiveSessions } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        if (sessionId) {\n            const session = getConversationSession(userId, sessionId);\n            if (session) {\n                return {\n                    userId: session.userId,\n                    sessionId: session.sessionId,\n                    currentTopic: session.currentTopic,\n                    currentSubject: session.currentSubject,\n                    conversationFlow: session.turns,\n                    contextSummary: this.buildContextSummary(session),\n                    activeIntentions: this.extractActiveIntentions(session.turns.slice(-5)),\n                    pendingQuestions: [],\n                    referenceMemory: this.buildReferenceMemory(session.turns),\n                    lastUpdate: session.lastUpdate\n                };\n            }\n        }\n        // Find any active session for user\n        const activeSessions = getUserActiveSessions(userId);\n        if (activeSessions.length > 0) {\n            const session = activeSessions[0];\n            return {\n                userId: session.userId,\n                sessionId: session.sessionId,\n                currentTopic: session.currentTopic,\n                currentSubject: session.currentSubject,\n                conversationFlow: session.turns,\n                contextSummary: this.buildContextSummary(session),\n                activeIntentions: this.extractActiveIntentions(session.turns.slice(-5)),\n                pendingQuestions: [],\n                referenceMemory: this.buildReferenceMemory(session.turns),\n                lastUpdate: session.lastUpdate\n            };\n        }\n        return null;\n    }\n} // Persistent storage cleanup is handled by temp-storage.ts\n // No need for additional cleanup intervals\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/contextual-conversation-manager.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/conversation-engine.ts":
/*!****************************************!*\
  !*** ./src/lib/conversation-engine.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationEngine: () => (/* binding */ ConversationEngine)\n/* harmony export */ });\n/* harmony import */ var _academic_analyzer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./academic-analyzer */ \"(rsc)/./src/lib/academic-analyzer.ts\");\n/* harmony import */ var _ai_providers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ai-providers */ \"(rsc)/./src/lib/ai-providers.ts\");\n/* harmony import */ var _exercise_solver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./exercise-solver */ \"(rsc)/./src/lib/exercise-solver.ts\");\n/* harmony import */ var _calendar_ai_integration__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./calendar-ai-integration */ \"(rsc)/./src/lib/calendar-ai-integration.ts\");\n/* harmony import */ var _notification_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notification-service */ \"(rsc)/./src/lib/notification-service.ts\");\n/* harmony import */ var _academic_search_engine__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./academic-search-engine */ \"(rsc)/./src/lib/academic-search-engine.ts\");\n\n\n\n\n\n\nclass ConversationEngine {\n    /**\n   * Procesa un mensaje del usuario de forma stateless\n   */ static async processUserMessage(userId, message, userName, conversationHistory) {\n        // Use contextual conversation manager for better coherence\n        try {\n            const { ContextualConversationManager } = __webpack_require__(/*! ./contextual-conversation-manager */ \"(rsc)/./src/lib/contextual-conversation-manager.ts\");\n            const contextualResponse = await ContextualConversationManager.processContextualMessage(userId, message, undefined, userName);\n            return {\n                id: `ai_${Date.now()}`,\n                type: 'ai',\n                content: contextualResponse.content,\n                timestamp: new Date(),\n                metadata: {\n                    subject: contextualResponse.context.currentSubject,\n                    suggestedActions: contextualResponse.suggestedFollowups.concat(contextualResponse.visualRecommendation ? [\n                        `Generar ${contextualResponse.visualRecommendation.type}`\n                    ] : [])\n                }\n            };\n        } catch (error) {\n            console.log('Fallback to basic conversation engine:', error);\n        // Fallback to original stateless processing\n        }\n        // Cargar análisis académico en cada request (stateless)\n        const academicAnalysis = await _academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicAnalyzer.analyzeStudent(userId);\n        // Verificar comandos de calendario (editar, eliminar, listar)\n        const calendarAdminResult = await this.handleCalendarAdminCommands(userId, message);\n        if (calendarAdminResult) {\n            return calendarAdminResult;\n        }\n        // Verificar si hay un calendario de integración en curso\n        const calendarIntegration = new _calendar_ai_integration__WEBPACK_IMPORTED_MODULE_3__.AICalendarIntegration(userId);\n        // Analizar si se mencionan eventos que requieren creación en calendario\n        const conversationForCalendar = conversationHistory || [];\n        const calendarResult = await calendarIntegration.processMessage(message, conversationForCalendar);\n        if (calendarResult.needsEventCreation) {\n            return {\n                id: `ai_${Date.now()}`,\n                type: 'ai',\n                content: calendarResult.response || '',\n                timestamp: new Date(),\n                metadata: {\n                    suggestedActions: calendarResult.event ? [\n                        'Ver en calendario',\n                        'Editar evento',\n                        'Eliminar evento'\n                    ] : [\n                        'Reintentar',\n                        'Proporcionar más detalles'\n                    ]\n                }\n            };\n        }\n        // Analizar intención del usuario (stateless)\n        const intent = this.analyzeUserIntent(message, academicAnalysis);\n        // Generar respuesta basada en la intención\n        let aiResponse;\n        switch(intent.type){\n            case 'solve_exercise':\n                aiResponse = await this.handleExerciseSolution(message, intent.subject, academicAnalysis, userName);\n                break;\n            case 'request_assessment':\n                aiResponse = await this.handleAssessmentRequest(intent.subject, academicAnalysis, userName);\n                break;\n            case 'ask_question':\n                aiResponse = await this.handleEducationalQuestion(message, intent.subject, academicAnalysis, userName);\n                break;\n            case 'academic_search':\n                aiResponse = await this.handleAcademicSearch(message, intent.subject, intent.topic, userId, userName);\n                break;\n            case 'request_help':\n                aiResponse = await this.handleHelpRequest(intent.topic, academicAnalysis, userName);\n                break;\n            case 'casual_chat':\n                aiResponse = await this.handleCasualChat(message, userName);\n                break;\n            default:\n                aiResponse = await this.handleGeneralResponse(message);\n        }\n        // This fallback should never be reached due to the try/catch above\n        console.error('❌ CRITICAL: Reached unreachable fallback code in conversation engine');\n        throw new Error('Fallback code should not be reachable');\n    }\n    /**\n   * Legacy method for backward compatibility - redirects to contextual manager\n   */ static async processUserMessageLegacy(userId, message, userName, conversationHistory) {\n        console.log('⚠️ Using legacy method - redirecting to main processUserMessage');\n        return this.processUserMessage(userId, message, userName, conversationHistory);\n    }\n    /**\n   * Analiza la intención del usuario (stateless)\n   */ static analyzeUserIntent(message, academicAnalysis) {\n        const msgLower = message.toLowerCase();\n        // PRIMERA PRIORIDAD: Detectar si es un ejercicio para resolver\n        const exerciseDetection = _exercise_solver__WEBPACK_IMPORTED_MODULE_2__.ExerciseSolver.detectExercise(message);\n        if (exerciseDetection.hasExercise && exerciseDetection.confidence > 0.6) {\n            // Mapear subjects del ExerciseSolver a AcademicSubject\n            const subjectMap = {\n                'physics': _academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.PHYSICS,\n                'chemistry': _academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.CHEMISTRY,\n                'mathematics': _academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.MATHEMATICS,\n                'general': _academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.GENERAL\n            };\n            return {\n                type: 'solve_exercise',\n                subject: subjectMap[exerciseDetection.subject],\n                confidence: exerciseDetection.confidence\n            };\n        }\n        // Detectar solicitud de evaluación\n        if (msgLower.includes('evaluación') || msgLower.includes('evaluar') || msgLower.includes('examen') || msgLower.includes('prueba') || msgLower.includes('ejercicio') || msgLower.includes('practicar')) {\n            const subject = this.detectSubject(message);\n            return {\n                type: 'request_assessment',\n                subject,\n                confidence: 0.8\n            };\n        }\n        // Detectar pregunta educativa\n        if (msgLower.includes('¿') || msgLower.includes('cómo') || msgLower.includes('qué es') || msgLower.includes('explica') || msgLower.includes('no entiendo')) {\n            const subject = this.detectSubject(message);\n            return {\n                type: 'ask_question',\n                subject,\n                confidence: 0.7\n            };\n        }\n        // Detectar búsqueda académica\n        if (msgLower.includes('busca') || msgLower.includes('buscar') || msgLower.includes('encuentra') || msgLower.includes('encontrar') || msgLower.includes('necesito información') || msgLower.includes('recursos sobre') || msgLower.includes('material de') || msgLower.includes('ejemplos de')) {\n            const subject = this.detectSubject(message);\n            const topic = this.extractTopic(message);\n            return {\n                type: 'academic_search',\n                subject,\n                topic,\n                confidence: 0.8\n            };\n        }\n        // Detectar solicitud de ayuda\n        if (msgLower.includes('ayuda') || msgLower.includes('difícil') || msgLower.includes('no puedo') || msgLower.includes('me cuesta')) {\n            const topic = this.extractTopic(message);\n            return {\n                type: 'request_help',\n                topic,\n                confidence: 0.6\n            };\n        }\n        // Detectar charla casual\n        if (msgLower.includes('hola') || msgLower.includes('gracias') || msgLower.includes('bien') || msgLower.includes('mal')) {\n            return {\n                type: 'casual_chat',\n                confidence: 0.5\n            };\n        }\n        return {\n            type: 'general',\n            confidence: 0.3\n        };\n    }\n    /**\n   * Detecta la materia mencionada en el mensaje\n   */ static detectSubject(message) {\n        const msgLower = message.toLowerCase();\n        if (msgLower.includes('matemática') || msgLower.includes('álgebra') || msgLower.includes('geometría') || msgLower.includes('cálculo')) {\n            return _academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.MATHEMATICS;\n        }\n        if (msgLower.includes('física') || msgLower.includes('mecánica') || msgLower.includes('energía') || msgLower.includes('fuerza')) {\n            return _academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.PHYSICS;\n        }\n        if (msgLower.includes('química') || msgLower.includes('átomo') || msgLower.includes('reacción') || msgLower.includes('elemento')) {\n            return _academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.CHEMISTRY;\n        }\n        return undefined;\n    }\n    /**\n   * Extrae el tema específico del mensaje\n   */ static extractTopic(message) {\n        // Extraer palabras clave que podrían ser temas\n        const words = message.toLowerCase().split(' ');\n        const topics = [\n            'ecuaciones',\n            'funciones',\n            'derivadas',\n            'integrales',\n            'geometría',\n            'cinemática',\n            'dinámica',\n            'termodinámica',\n            'electricidad',\n            'átomos',\n            'moléculas',\n            'enlaces',\n            'reacciones'\n        ];\n        const foundTopic = topics.find((topic)=>words.includes(topic));\n        return foundTopic || 'tema general';\n    }\n    /**\n   * Maneja la resolución de ejercicios paso a paso (stateless)\n   */ static async handleExerciseSolution(message, subject, academicAnalysis, userName) {\n        // Mapear AcademicSubject a los subjects del ExerciseSolver\n        const subjectMap = {\n            [_academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.PHYSICS]: 'physics',\n            [_academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.CHEMISTRY]: 'chemistry',\n            [_academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.MATHEMATICS]: 'mathematics',\n            [_academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.GENERAL]: 'general'\n        };\n        const solverSubject = subjectMap[subject] || 'general';\n        // Obtener contexto del estudiante\n        const studentContext = _academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicAnalyzer.getExerciseContext(academicAnalysis, subject);\n        try {\n            const solution = await _exercise_solver__WEBPACK_IMPORTED_MODULE_2__.ExerciseSolver.solveExercise(message, solverSubject, studentContext);\n            return {\n                id: `ai_${Date.now()}`,\n                type: 'ai',\n                content: solution.solution,\n                timestamp: new Date(),\n                metadata: {\n                    subject: this.getSubjectName(subject),\n                    suggestedActions: [\n                        'Explicar un paso específico',\n                        'Resolver otro ejercicio similar',\n                        'Verificar mi solución',\n                        'Practicar más ejercicios'\n                    ]\n                }\n            };\n        } catch (error) {\n            console.error('Error solving exercise:', error);\n            return {\n                id: `ai_${Date.now()}`,\n                type: 'ai',\n                content: `He detectado que quieres resolver un ejercicio de ${this.getSubjectName(subject)}.\\n\\n` + `Estoy teniendo dificultades técnicas para resolverlo ahora mismo, pero puedo ayudarte de otras maneras:\\n\\n` + `• Te puedo guiar paso a paso en la metodología\\n` + `• Puedo explicarte los conceptos que necesitas\\n` + `• Te ayudo a organizar los datos del problema\\n\\n` + `¿Te gustaría que empecemos con alguno de estos enfoques?`,\n                timestamp: new Date(),\n                metadata: {\n                    subject: this.getSubjectName(subject),\n                    suggestedActions: [\n                        'Guiar metodología',\n                        'Explicar conceptos',\n                        'Organizar datos'\n                    ]\n                }\n            };\n        }\n    }\n    /**\n   * Maneja solicitudes de evaluación (stateless)\n   */ static async handleAssessmentRequest(subject, academicAnalysis, userName) {\n        const subjectAnalysis = academicAnalysis.subjects.find((s)=>s.subject === subject);\n        let content = `¡Perfecto! Vamos a hacer una evaluación adaptativa de ${this.getSubjectName(subject)}.\\n\\n`;\n        if (subjectAnalysis) {\n            content += `Basándome en tu progreso actual (${subjectAnalysis.performance}%), `;\n            if (subjectAnalysis.needsAttention) {\n                content += `veo que has tenido algunas dificultades con: ${subjectAnalysis.specificChallenges.join(', ')}.\\n\\n`;\n                content += `Empezaremos con ejercicios de refuerzo para fortalecer estos conceptos.`;\n            } else {\n                content += `tienes un buen dominio. Te propongo ejercicios que te desafíen un poco más.`;\n            }\n        } else {\n            content += `Como no tengo datos previos sobre tu desempeño en esta materia, empezaremos con una evaluación diagnóstica.`;\n        }\n        content += `\\n\\n¿Estás listo para comenzar? Puedes decirme si prefieres:\\n`;\n        content += `• Ejercicios paso a paso\\n`;\n        content += `• Preguntas de opción múltiple\\n`;\n        content += `• Problemas para resolver`;\n        return {\n            id: `ai_${Date.now()}`,\n            type: 'ai',\n            content,\n            timestamp: new Date(),\n            metadata: {\n                subject,\n                suggestedActions: [\n                    'Comenzar ejercicios paso a paso',\n                    'Preguntas opción múltiple',\n                    'Problemas para resolver'\n                ]\n            }\n        };\n    }\n    /**\n   * Maneja preguntas educativas (stateless)\n   */ static async handleEducationalQuestion(question, subject, academicAnalysis, userName) {\n        // Crear prompt contextualizado para la IA\n        const analysisContext = _academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicAnalyzer.getExerciseContext(academicAnalysis, subject);\n        const prompt = `Eres un tutor educativo experto. Responde esta pregunta de un estudiante de secundaria:\n\nPregunta: \"${question}\"\n\nContexto del estudiante: ${analysisContext}\n\nInstrucciones:\n- Responde de manera clara y didáctica\n- Usa ejemplos concretos y relevantes\n- Adapta el lenguaje al nivel del estudiante\n- Si es un concepto complejo, divídelo en pasos simples\n- Ofrece al final preguntarle si quiere practicar con ejercicios\n\nRespuesta:`;\n        try {\n            const aiResponse = await _ai_providers__WEBPACK_IMPORTED_MODULE_1__.aiService.generateExercise(prompt);\n            return {\n                id: `ai_${Date.now()}`,\n                type: 'ai',\n                content: aiResponse === 'TEMPLATE_FALLBACK' ? this.getFallbackEducationalResponse(question, subject) : aiResponse,\n                timestamp: new Date(),\n                metadata: {\n                    subject,\n                    suggestedActions: [\n                        'Practicar con ejercicios',\n                        'Hacer más preguntas',\n                        'Explicación más detallada'\n                    ]\n                }\n            };\n        } catch (error) {\n            return {\n                id: `ai_${Date.now()}`,\n                type: 'ai',\n                content: this.getFallbackEducationalResponse(question, subject),\n                timestamp: new Date(),\n                metadata: {\n                    subject\n                }\n            };\n        }\n    }\n    /**\n   * Maneja solicitudes de ayuda (stateless)\n   */ static async handleHelpRequest(topic, academicAnalysis, userName) {\n        let content = `Entiendo que necesitas ayuda con ${topic}. `;\n        const strugglingAreas = academicAnalysis.strugglingAreas;\n        if (strugglingAreas.some((area)=>area.toLowerCase().includes(topic.toLowerCase()))) {\n            content += `Veo que has mencionado dificultades similares en tus reportes anteriores.\\n\\n`;\n        }\n        content += `Vamos a abordar esto paso a paso:\\n\\n`;\n        content += `1. **Primero**: ¿Podrías contarme específicamente qué parte de ${topic} te resulta más confusa?\\n`;\n        content += `2. **Segundo**: Te ayudaré con explicaciones simples y ejemplos\\n`;\n        content += `3. **Tercero**: Practicaremos con ejercicios graduales\\n\\n`;\n        content += `¿Por dónde te gustaría empezar?`;\n        return {\n            id: `ai_${Date.now()}`,\n            type: 'ai',\n            content,\n            timestamp: new Date(),\n            metadata: {\n                suggestedActions: [\n                    'Explicar mi dificultad específica',\n                    'Ver ejemplos simples',\n                    'Empezar con lo básico'\n                ]\n            }\n        };\n    }\n    /**\n   * Maneja charla casual (stateless)\n   */ static async handleCasualChat(message, userName) {\n        const msgLower = message.toLowerCase();\n        let content = '';\n        if (msgLower.includes('hola')) {\n            content = `¡Hola${userName ? ' ' + userName : ''}! 😊 `;\n            content += `¿En qué puedo ayudarte hoy? Puedo ayudarte con tus materias, resolver dudas o hacer ejercicios juntos.`;\n        } else if (msgLower.includes('gracias')) {\n            content = `¡De nada! Es un placer ayudarte. 😊 `;\n            content += `¿Hay algo más en lo que pueda apoyarte? Estoy aquí para que aprendas y te diviertas haciéndolo.`;\n        } else if (msgLower.includes('bien') || msgLower.includes('genial')) {\n            content = `¡Qué bueno escuchar eso! 🎉 `;\n            content += `¿Te gustaría aprovechar este buen momento para practicar algún tema o resolver alguna duda?`;\n        } else if (msgLower.includes('mal') || msgLower.includes('difícil')) {\n            content = `Entiendo que te sientes así. Es normal tener días más desafiantes. 💪 `;\n            content += `¿Quieres contarme qué está siendo difícil? Juntos podemos encontrar la manera de hacerlo más fácil.`;\n        } else {\n            content = `Gracias por compartir eso conmigo. ¿Cómo puedo ayudarte mejor hoy?`;\n        }\n        return {\n            id: `ai_${Date.now()}`,\n            type: 'ai',\n            content,\n            timestamp: new Date(),\n            metadata: {\n                suggestedActions: [\n                    'Ver mis materias',\n                    'Hacer una evaluación',\n                    'Resolver una duda'\n                ]\n            }\n        };\n    }\n    /**\n   * Maneja búsquedas académicas (stateless)\n   */ static async handleAcademicSearch(message, subject, topic, userId, userName) {\n        try {\n            // Realizar búsqueda inteligente usando el motor académico\n            const searchResult = await _academic_search_engine__WEBPACK_IMPORTED_MODULE_5__.AcademicSearchEngine.smartSearch(message, userId);\n            if (!searchResult) {\n                // Si no se detectó una búsqueda válida, responder con sugerencias\n                return {\n                    id: `ai_${Date.now()}`,\n                    type: 'ai',\n                    content: `No pude identificar exactamente qué estás buscando. ¿Podrías ser más específico?\\n\\n` + `Por ejemplo:\\n` + `• \"Busca información sobre ecuaciones cuadráticas\"\\n` + `• \"Necesito ejemplos de reacciones químicas\"\\n` + `• \"Encuentra recursos sobre la Segunda Guerra Mundial\"`,\n                    timestamp: new Date(),\n                    metadata: {\n                        suggestedActions: [\n                            'Reformular búsqueda',\n                            'Especificar tema',\n                            'Elegir materia'\n                        ]\n                    }\n                };\n            }\n            // Generar notificación proactiva\n            const notification = await _notification_service__WEBPACK_IMPORTED_MODULE_4__.NotificationService.createAcademicNotification(userId, searchResult.query, _notification_service__WEBPACK_IMPORTED_MODULE_4__.NotificationTrigger.KNOWLEDGE_GAP, '🔍 Búsqueda Académica Completada', `Encontré recursos valiosos sobre ${searchResult.query.topic} que pueden ayudarte.`);\n            // Construir respuesta con resultados\n            let content = `🔍 **Búsqueda Académica Completada**\\n\\n`;\n            content += `He encontrado **${searchResult.totalResults}** recursos sobre **${searchResult.query.topic}**:\\n\\n`;\n            // Mostrar los mejores resultados\n            const topResults = searchResult.results.slice(0, 3);\n            topResults.forEach((result, index)=>{\n                content += `**${index + 1}. ${result.title}**\\n`;\n                content += `📖 ${result.summary}\\n`;\n                content += `⭐ Relevancia: ${(result.relevanceScore * 100).toFixed(0)}% | `;\n                content += `📚 Nivel: ${result.difficulty} | `;\n                content += `⏱️ Lectura: ${result.estimatedReadTime} min\\n\\n`;\n            });\n            // Agregar recomendaciones personalizadas\n            if (searchResult.personalizedRecommendations.length > 0) {\n                content += `💡 **Recomendaciones Personalizadas:**\\n`;\n                searchResult.personalizedRecommendations.forEach((rec)=>{\n                    content += `• ${rec}\\n`;\n                });\n                content += `\\n`;\n            }\n            // Agregar preguntas de seguimiento\n            if (searchResult.followUpQuestions.length > 0) {\n                content += `❓ **¿Te interesa saber más sobre:**\\n`;\n                searchResult.followUpQuestions.slice(0, 2).forEach((question)=>{\n                    content += `• ${question}\\n`;\n                });\n            }\n            return {\n                id: `ai_${Date.now()}`,\n                type: 'ai',\n                content,\n                timestamp: new Date(),\n                metadata: {\n                    subject,\n                    suggestedActions: [\n                        'Ver detalles de resultados',\n                        'Buscar tema relacionado',\n                        'Generar ejercicios',\n                        'Crear recordatorio'\n                    ],\n                    searchResults: searchResult,\n                    notification\n                }\n            };\n        } catch (error) {\n            console.error('Error in academic search:', error);\n            return {\n                id: `ai_${Date.now()}`,\n                type: 'ai',\n                content: `Hubo un problema al buscar información sobre \"${topic || 'tu consulta'}\". ` + `Esto puede deberse a problemas de conectividad.\\n\\n` + `Mientras tanto, puedo ayudarte con:\\n` + `• Explicaciones sobre conceptos específicos\\n` + `• Ejercicios sobre temas que ya domino\\n` + `• Repaso de material previo`,\n                timestamp: new Date(),\n                metadata: {\n                    subject,\n                    suggestedActions: [\n                        'Reintentar búsqueda',\n                        'Explicar conceptos',\n                        'Hacer ejercicios'\n                    ]\n                }\n            };\n        }\n    }\n    /**\n   * Maneja respuestas generales (stateless)\n   */ static async handleGeneralResponse(message) {\n        const content = `Entiendo tu mensaje. ¿Podrías ser más específico sobre cómo puedo ayudarte?\\n\\n` + `Puedo ayudarte con:\\n` + `• Resolver dudas sobre tus materias\\n` + `• Hacer ejercicios y evaluaciones\\n` + `• Explicar conceptos difíciles\\n` + `• Buscar información académica\\n` + `• Revisar tu progreso académico\\n\\n` + `¿Qué te interesa más?`;\n        return {\n            id: `ai_${Date.now()}`,\n            type: 'ai',\n            content,\n            timestamp: new Date(),\n            metadata: {\n                suggestedActions: [\n                    'Resolver dudas',\n                    'Hacer ejercicios',\n                    'Buscar información',\n                    'Ver mi progreso'\n                ]\n            }\n        };\n    }\n    /**\n   * Crea mensaje de bienvenida personalizado (stateless)\n   */ static async createWelcomeMessage(userId, userName) {\n        const analysis = await _academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicAnalyzer.analyzeStudent(userId);\n        let content = `¡Hola${userName ? ' ' + userName : ''}! 👋 Soy tu tutor personal de IA.\\n\\n`;\n        if (analysis.subjects.length > 0) {\n            content += `He revisado tu progreso académico y veo que tienes:\\n`;\n            const strongSubjects = analysis.subjects.filter((s)=>s.performance > 75);\n            const strugglingSubjects = analysis.subjects.filter((s)=>s.needsAttention);\n            if (strongSubjects.length > 0) {\n                content += `✅ **Fortalezas**: ${strongSubjects.map((s)=>s.subjectName).join(', ')}\\n`;\n            }\n            if (strugglingSubjects.length > 0) {\n                content += `🎯 **Áreas de mejora**: ${strugglingSubjects.map((s)=>s.subjectName).join(', ')}\\n`;\n            }\n            content += `\\n`;\n        }\n        content += `¿En qué puedo ayudarte hoy?\\n`;\n        content += `• **Resolver ejercicios**: Paso a paso con explicaciones detalladas\\n`;\n        content += `• **Evaluación**: Hacer ejercicios adaptativos\\n`;\n        content += `• **Dudas**: Resolver preguntas específicas\\n`;\n        content += `• **Repaso**: Revisar conceptos importantes`;\n        // Obtener acciones sugeridas\n        const actions = [];\n        const strugglingSubjects = analysis.subjects.filter((s)=>s.needsAttention);\n        if (strugglingSubjects.length > 0) {\n            actions.push(`Practicar ${strugglingSubjects[0].subjectName}`);\n        }\n        actions.push('Hacer una evaluación');\n        actions.push('Resolver una duda');\n        actions.push('Ver mi progreso');\n        return {\n            id: `welcome_${Date.now()}`,\n            type: 'ai',\n            content,\n            timestamp: new Date(),\n            metadata: {\n                suggestedActions: actions\n            }\n        };\n    }\n    /**\n   * Obtiene el nombre legible de una materia\n   */ static getSubjectName(subject) {\n        const names = {\n            [_academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.MATHEMATICS]: 'Matemáticas',\n            [_academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.PHYSICS]: 'Física',\n            [_academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.CHEMISTRY]: 'Química',\n            [_academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.BIOLOGY]: 'Biología',\n            [_academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.SPANISH]: 'Lengua y Literatura',\n            [_academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.ENGLISH]: 'Inglés',\n            [_academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.HISTORY]: 'Historia',\n            [_academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.GEOGRAPHY]: 'Geografía',\n            [_academic_analyzer__WEBPACK_IMPORTED_MODULE_0__.AcademicSubject.GENERAL]: 'General'\n        };\n        return names[subject];\n    }\n    /**\n   * Respuesta de fallback para preguntas educativas\n   */ static getFallbackEducationalResponse(question, subject) {\n        return `Esa es una excelente pregunta sobre ${subject ? this.getSubjectName(subject) : 'el tema'}.\\n\\n` + `Te ayudo a pensar sobre esto paso a paso:\\n\\n` + `1. **Identifica los conceptos clave** en tu pregunta\\n` + `2. **Piensa en ejemplos concretos** que conozcas\\n` + `3. **Conecta con lo que ya sabes** de temas anteriores\\n\\n` + `¿Te gustaría que te ayude con ejercicios prácticos sobre este tema?`;\n    }\n    /**\n   * Maneja comandos administrativos del calendario (editar, eliminar, listar)\n   */ static async handleCalendarAdminCommands(userId, message) {\n        const msgLower = message.toLowerCase();\n        // Comando: Listar eventos\n        if (/(?:muestra|lista|ver).*(?:eventos?|calendario)/i.test(message) || /(?:eventos?|calendario).*(?:de\\s+)?(?:esta\\s+semana|hoy|mañana)/i.test(message)) {\n            const events = (0,_calendar_ai_integration__WEBPACK_IMPORTED_MODULE_3__.findUserEvents)(userId, '');\n            const today = new Date();\n            const oneWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n            const upcomingEvents = events.filter((event)=>{\n                const eventDate = new Date(event.date);\n                return eventDate >= today && eventDate <= oneWeek;\n            });\n            if (upcomingEvents.length === 0) {\n                return {\n                    id: `ai_${Date.now()}`,\n                    type: 'ai',\n                    content: `📅 No tienes eventos programados para esta semana.\\n\\n¿Te gustaría que te ayude a agendar alguno?`,\n                    timestamp: new Date(),\n                    metadata: {\n                        suggestedActions: [\n                            'Agendar examen',\n                            'Agendar sesión de estudio',\n                            'Ver calendario completo'\n                        ]\n                    }\n                };\n            }\n            const eventList = upcomingEvents.map((event)=>{\n                const dateStr = event.date.toLocaleDateString('es-ES', {\n                    weekday: 'short',\n                    day: 'numeric',\n                    month: 'short'\n                });\n                return `• **${event.title}** - ${dateStr} a las ${event.startTime}${event.location ? ` (${event.location})` : ''}`;\n            }).join('\\n');\n            return {\n                id: `ai_${Date.now()}`,\n                type: 'ai',\n                content: `📅 **Tus próximos eventos:**\\n\\n${eventList}\\n\\n¿Necesitas editar o eliminar alguno?`,\n                timestamp: new Date(),\n                metadata: {\n                    suggestedActions: [\n                        'Editar evento',\n                        'Eliminar evento',\n                        'Agendar nuevo evento'\n                    ]\n                }\n            };\n        }\n        // Comando: Eliminar evento\n        if (/(?:elimin[ae]|borr[ae]|quit[ae]|cancel[ae])/i.test(message)) {\n            const searchTerms = message.match(/(?:examen|evento|sesión).*?(?:de\\s+)?([a-záéíóúñ]+)/i);\n            if (searchTerms) {\n                const searchTerm = searchTerms[1] || searchTerms[0];\n                const foundEvents = (0,_calendar_ai_integration__WEBPACK_IMPORTED_MODULE_3__.findUserEvents)(userId, searchTerm);\n                if (foundEvents.length === 0) {\n                    return {\n                        id: `ai_${Date.now()}`,\n                        type: 'ai',\n                        content: `❌ No encontré eventos relacionados con \"${searchTerm}\".\\n\\n¿Podrías ser más específico sobre qué evento quieres eliminar?`,\n                        timestamp: new Date(),\n                        metadata: {\n                            suggestedActions: [\n                                'Ver todos mis eventos',\n                                'Ser más específico'\n                            ]\n                        }\n                    };\n                }\n                if (foundEvents.length === 1) {\n                    const event = foundEvents[0];\n                    const deleteResult = await (0,_calendar_ai_integration__WEBPACK_IMPORTED_MODULE_3__.deleteEventFromAI)(event.id);\n                    return {\n                        id: `ai_${Date.now()}`,\n                        type: 'ai',\n                        content: deleteResult.success ? `✅ ${deleteResult.message}` : `❌ ${deleteResult.message}`,\n                        timestamp: new Date(),\n                        metadata: {\n                            suggestedActions: deleteResult.success ? [\n                                'Ver calendario',\n                                'Agendar nuevo evento'\n                            ] : [\n                                'Reintentar',\n                                'Ver eventos'\n                            ]\n                        }\n                    };\n                } else {\n                    const eventList = foundEvents.slice(0, 3).map((e)=>`• ${e.title}`).join('\\n');\n                    return {\n                        id: `ai_${Date.now()}`,\n                        type: 'ai',\n                        content: `🔍 Encontré varios eventos relacionados:\\n\\n${eventList}\\n\\n¿Cuál quieres eliminar específicamente?`,\n                        timestamp: new Date(),\n                        metadata: {\n                            suggestedActions: foundEvents.slice(0, 3).map((e)=>`Eliminar: ${e.title}`)\n                        }\n                    };\n                }\n            }\n        }\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/conversation-engine.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/conversation-memory.ts":
/*!****************************************!*\
  !*** ./src/lib/conversation-memory.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationMemoryManager: () => (/* binding */ ConversationMemoryManager)\n/* harmony export */ });\n/* harmony import */ var _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./emotion-analyzer */ \"(rsc)/./src/lib/emotion-analyzer.ts\");\n// Sistema de Memoria Conversacional para Sara\n// Permite recordar conversaciones, preferencias y contexto del estudiante\n\nclass ConversationMemoryManager {\n    static{\n        this.memories = new Map();\n    }\n    /**\n   * Obtiene o crea la memoria conversacional para un usuario\n   */ static getMemory(userId, sessionId) {\n        const memoryKey = `${userId}_${sessionId || 'default'}`;\n        if (!this.memories.has(memoryKey)) {\n            this.memories.set(memoryKey, this.createNewMemory(userId, sessionId));\n        }\n        return this.memories.get(memoryKey);\n    }\n    /**\n   * Guarda un nuevo intercambio conversacional\n   */ static saveConversationTurn(userId, userMessage, saraResponse, mode, intent, sessionId) {\n        const memory = this.getMemory(userId, sessionId);\n        const turn = {\n            id: `turn_${Date.now()}_${Math.random().toString(36).substr(2, 8)}`,\n            timestamp: new Date(),\n            userMessage,\n            saraResponse,\n            mode,\n            intent,\n            topics: this.extractTopics(userMessage),\n            emotions: this.detectEmotions(userMessage, {\n                subject: this.extractSubjectFromMessage(userMessage),\n                previousEmotion: memory.emotionalProfile?.currentMood\n            }),\n            context: this.analyzeContext(userMessage, saraResponse)\n        };\n        // Agregar al historial\n        memory.conversationHistory.push(turn);\n        memory.totalTurns++;\n        memory.lastActivity = new Date();\n        // Mantener solo los últimos 50 intercambios para eficiencia\n        if (memory.conversationHistory.length > 50) {\n            memory.conversationHistory = memory.conversationHistory.slice(-50);\n        }\n        // Actualizar perfiles basándose en la nueva conversación\n        this.updatePreferences(memory, turn);\n        this.updateEmotionalProfile(memory, turn);\n        this.updateRecurringTopics(memory, turn);\n        this.updateProgressTracking(memory, turn);\n        return turn;\n    }\n    /**\n   * Genera un resumen contextual para Sara basado en la memoria\n   */ static generateContextualSummary(userId, sessionId) {\n        const memory = this.getMemory(userId, sessionId);\n        if (memory.conversationHistory.length === 0) {\n            return \"Esta es nuestra primera conversación. Estoy aquí para conocerte y ayudarte con tus objetivos académicos.\";\n        }\n        const recentTurns = memory.conversationHistory.slice(-5);\n        const summary = [];\n        // Información sobre sesión actual\n        const daysSinceLastChat = Math.floor((Date.now() - memory.lastActivity.getTime()) / (1000 * 60 * 60 * 24));\n        if (daysSinceLastChat > 7) {\n            summary.push(`Han pasado ${daysSinceLastChat} días desde nuestra última conversación.`);\n        } else if (daysSinceLastChat > 1) {\n            summary.push(`Nos vimos hace ${daysSinceLastChat} días.`);\n        }\n        // Temas recurrentes importantes\n        const importantTopics = memory.recurringTopics.filter((t)=>t.frequency > 2 && !t.resolved).slice(0, 3);\n        if (importantTopics.length > 0) {\n            summary.push(`Hemos estado trabajando en: ${importantTopics.map((t)=>t.topic).join(', ')}.`);\n        }\n        // Estado emocional\n        if (memory.emotionalProfile.motivationLevel < 5) {\n            summary.push(\"He notado que podrías necesitar un poco más de motivación.\");\n        } else if (memory.emotionalProfile.motivationLevel > 8) {\n            summary.push(\"Me alegra ver tu motivación y energía positiva.\");\n        }\n        // Seguimientos pendientes\n        const pendingFollowUps = memory.progressTracking.pendingFollowUps.filter((f)=>f.dueDate <= new Date());\n        if (pendingFollowUps.length > 0) {\n            summary.push(`Tenemos ${pendingFollowUps.length} seguimiento(s) pendiente(s).`);\n        }\n        // Preferencias del estudiante\n        if (memory.preferences.difficultSubjects.length > 0) {\n            summary.push(`Sé que ${memory.preferences.difficultSubjects[0]} te presenta algunos desafíos.`);\n        }\n        return summary.length > 0 ? summary.join(' ') : \"Continuemos donde lo dejamos la última vez.\";\n    }\n    /**\n   * Obtiene sugerencias personalizadas basadas en la memoria\n   */ static getPersonalizedSuggestions(userId, sessionId) {\n        const memory = this.getMemory(userId, sessionId);\n        const suggestions = [];\n        // Basado en temas recurrentes sin resolver\n        const unresolvedTopics = memory.recurringTopics.filter((t)=>!t.resolved);\n        unresolvedTopics.slice(0, 2).forEach((topic)=>{\n            suggestions.push(`Retomar el trabajo en ${topic.topic}`);\n        });\n        // Basado en seguimientos pendientes\n        memory.progressTracking.pendingFollowUps.slice(0, 2).forEach((followUp)=>{\n            suggestions.push(`Revisar progreso: ${followUp.task}`);\n        });\n        // Basado en materias difíciles\n        if (memory.preferences.difficultSubjects.length > 0) {\n            suggestions.push(`Planificar sesión de estudio para ${memory.preferences.difficultSubjects[0]}`);\n        }\n        // Basado en estado emocional\n        if (memory.emotionalProfile.motivationLevel < 5) {\n            suggestions.push(\"Trabajar en motivación y objetivos pequeños\");\n        }\n        // Basado en preferencias de modo\n        if (memory.preferences.preferredMode) {\n            suggestions.push(`Continuar en modo ${memory.preferences.preferredMode}`);\n        }\n        return suggestions.slice(0, 4) // Máximo 4 sugerencias\n        ;\n    }\n    /**\n   * Detecta si el usuario necesita seguimiento en temas específicos\n   */ static needsFollowUp(userId, sessionId) {\n        const memory = this.getMemory(userId, sessionId);\n        // Verificar seguimientos vencidos\n        const overdueFollowUps = memory.progressTracking.pendingFollowUps.filter((f)=>f.dueDate < new Date());\n        // Verificar temas sin resolver por mucho tiempo\n        const staleTops = memory.recurringTopics.filter((t)=>!t.resolved && Date.now() - t.lastMentioned.getTime() > 7 * 24 * 60 * 60 * 1000);\n        // Verificar bajo nivel de motivación\n        const lowMotivation = memory.emotionalProfile.motivationLevel < 4;\n        return overdueFollowUps.length > 0 || staleTops.length > 0 || lowMotivation;\n    }\n    // Métodos auxiliares privados\n    static createNewMemory(userId, sessionId) {\n        return {\n            userId,\n            sessionId: sessionId || 'default',\n            startedAt: new Date(),\n            lastActivity: new Date(),\n            totalTurns: 0,\n            conversationHistory: [],\n            preferences: {\n                preferredMode: 'chatting',\n                favoriteSubjects: [],\n                difficultSubjects: [],\n                studyTimePreference: 'evening',\n                communicationStyle: 'casual'\n            },\n            emotionalProfile: {\n                currentMood: _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.NEUTRAL,\n                motivationLevel: 7,\n                recentEmotions: [],\n                emotionalTrends: {\n                    dominant: _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.NEUTRAL,\n                    frequency: 0,\n                    lastWeek: []\n                },\n                frustrationAreas: [],\n                achievementAreas: [],\n                lastEncouragement: new Date(),\n                emotionalInsights: []\n            },\n            recurringTopics: [],\n            progressTracking: {\n                goalsDiscussed: [],\n                plansMade: [],\n                completedTasks: [],\n                pendingFollowUps: []\n            }\n        };\n    }\n    static extractTopics(message) {\n        const topics = [];\n        const lowerMessage = message.toLowerCase();\n        // Lista de temas académicos comunes\n        const academicTopics = [\n            'matemáticas',\n            'física',\n            'química',\n            'biología',\n            'historia',\n            'literatura',\n            'inglés',\n            'programación',\n            'cálculo',\n            'álgebra',\n            'geometría',\n            'estadística',\n            'examen',\n            'tarea',\n            'proyecto',\n            'presentación',\n            'ensayo',\n            'estudio',\n            'horario',\n            'planificación',\n            'calendario',\n            'tiempo',\n            'organización'\n        ];\n        academicTopics.forEach((topic)=>{\n            if (lowerMessage.includes(topic)) {\n                topics.push(topic);\n            }\n        });\n        return topics;\n    }\n    static extractSubjectFromMessage(message) {\n        const lowerMessage = message.toLowerCase();\n        const subjects = [\n            'matemáticas',\n            'física',\n            'química',\n            'biología',\n            'historia',\n            'literatura',\n            'inglés',\n            'programación'\n        ];\n        return subjects.find((subject)=>lowerMessage.includes(subject));\n    }\n    static detectEmotions(message, context) {\n        return _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionAnalyzer.analyzeEmotions(message, context);\n    }\n    static analyzeContext(userMessage, saraResponse) {\n        const lowerMessage = userMessage.toLowerCase();\n        const context = {};\n        // Detectar materias\n        const subjects = [\n            'matemáticas',\n            'física',\n            'química',\n            'biología',\n            'historia',\n            'literatura',\n            'inglés'\n        ];\n        const detectedSubject = subjects.find((subject)=>lowerMessage.includes(subject));\n        if (detectedSubject) {\n            context.subject = detectedSubject;\n        }\n        // Detectar dificultad\n        if (lowerMessage.includes('fácil') || lowerMessage.includes('simple')) {\n            context.difficulty = 'easy';\n        } else if (lowerMessage.includes('difícil') || lowerMessage.includes('complejo')) {\n            context.difficulty = 'hard';\n        } else {\n            context.difficulty = 'medium';\n        }\n        // Detectar logros\n        if (lowerMessage.includes('logré') || lowerMessage.includes('terminé') || lowerMessage.includes('completé')) {\n            context.achievement = true;\n        }\n        // Detectar necesidad de seguimiento\n        if (lowerMessage.includes('planificar') || lowerMessage.includes('revisar') || lowerMessage.includes('próxima vez')) {\n            context.needsFollowUp = true;\n        }\n        return context;\n    }\n    static updatePreferences(memory, turn) {\n        // Actualizar modo preferido\n        memory.preferences.preferredMode = turn.mode;\n        // Actualizar materias favoritas/difíciles basándose en emociones\n        if (turn.context?.subject) {\n            if (turn.emotions?.detected === 'positive' || turn.emotions?.detected === 'motivated') {\n                if (!memory.preferences.favoriteSubjects.includes(turn.context.subject)) {\n                    memory.preferences.favoriteSubjects.push(turn.context.subject);\n                }\n            } else if (turn.emotions?.detected === 'frustrated' || turn.emotions?.detected === 'negative') {\n                if (!memory.preferences.difficultSubjects.includes(turn.context.subject)) {\n                    memory.preferences.difficultSubjects.push(turn.context.subject);\n                }\n            }\n        }\n    }\n    static updateEmotionalProfile(memory, turn) {\n        if (turn.emotions) {\n            const emotion = turn.emotions.primary;\n            // Actualizar humor actual\n            memory.emotionalProfile.currentMood = emotion;\n            // Agregar a emociones recientes (mantener últimas 5)\n            memory.emotionalProfile.recentEmotions.unshift(emotion);\n            if (memory.emotionalProfile.recentEmotions.length > 5) {\n                memory.emotionalProfile.recentEmotions = memory.emotionalProfile.recentEmotions.slice(0, 5);\n            }\n            // Actualizar tendencias emocionales semanales\n            memory.emotionalProfile.emotionalTrends.lastWeek.unshift(emotion);\n            if (memory.emotionalProfile.emotionalTrends.lastWeek.length > 20) {\n                memory.emotionalProfile.emotionalTrends.lastWeek = memory.emotionalProfile.emotionalTrends.lastWeek.slice(0, 20);\n            }\n            // Calcular emoción dominante\n            const emotionCounts = memory.emotionalProfile.emotionalTrends.lastWeek.reduce((acc, em)=>{\n                acc[em] = (acc[em] || 0) + 1;\n                return acc;\n            }, {});\n            const dominantEmotion = Object.entries(emotionCounts).sort(([, a], [, b])=>b - a)[0]?.[0];\n            if (dominantEmotion) {\n                memory.emotionalProfile.emotionalTrends.dominant = dominantEmotion;\n                memory.emotionalProfile.emotionalTrends.frequency = emotionCounts[dominantEmotion];\n            }\n            // Ajustar nivel de motivación basado en emociones\n            const motivationAdjustment = this.getMotivationAdjustment(emotion, turn.emotions.intensity);\n            memory.emotionalProfile.motivationLevel = Math.max(1, Math.min(10, memory.emotionalProfile.motivationLevel + motivationAdjustment));\n            // Actualizar áreas de frustración/logro\n            if (turn.context?.subject) {\n                if ([\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.FRUSTRATED,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.OVERWHELMED,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.STRESSED\n                ].includes(emotion)) {\n                    if (!memory.emotionalProfile.frustrationAreas.includes(turn.context.subject)) {\n                        memory.emotionalProfile.frustrationAreas.push(turn.context.subject);\n                    }\n                }\n                if ([\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.PROUD,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CONFIDENT,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.EXCITED\n                ].includes(emotion) || turn.context?.achievement) {\n                    if (!memory.emotionalProfile.achievementAreas.includes(turn.context.subject)) {\n                        memory.emotionalProfile.achievementAreas.push(turn.context.subject);\n                    }\n                }\n            }\n            // Generar insights emocionales\n            const insight = this.generateEmotionalInsight(emotion, turn.emotions, turn.context?.subject);\n            if (insight) {\n                memory.emotionalProfile.emotionalInsights.unshift(insight);\n                if (memory.emotionalProfile.emotionalInsights.length > 10) {\n                    memory.emotionalProfile.emotionalInsights = memory.emotionalProfile.emotionalInsights.slice(0, 10);\n                }\n            }\n        }\n    }\n    /**\n   * Calcula el ajuste de motivación basado en la emoción\n   */ static getMotivationAdjustment(emotion, intensity) {\n        const baseAdjustments = {\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.MOTIVATED]: 2,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.EXCITED]: 2,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.PROUD]: 1.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CONFIDENT]: 1.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.HOPEFUL]: 1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.HAPPY]: 1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.GRATEFUL]: 0.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.RELIEVED]: 0.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CURIOUS]: 0.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.NEUTRAL]: 0,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CONFUSED]: -0.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.BORED]: -1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.DISAPPOINTED]: -1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.SAD]: -1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.FRUSTRATED]: -1.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.OVERWHELMED]: -2,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.STRESSED]: -2,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.ANXIOUS]: -1.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.ANGRY]: -1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.FEAR]: -1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.SURPRISE]: 0\n        };\n        const baseAdjustment = baseAdjustments[emotion] || 0;\n        // Aplicar multiplicador de intensidad\n        const intensityMultiplier = intensity === 'high' ? 1.5 : intensity === 'medium' ? 1.2 : 0.8;\n        return baseAdjustment * intensityMultiplier;\n    }\n    /**\n   * Genera un insight emocional basado en la emoción detectada\n   */ static generateEmotionalInsight(emotion, analysis, subject) {\n        const timestamp = new Date().toLocaleDateString();\n        switch(emotion){\n            case _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.FRUSTRATED:\n                return `${timestamp}: Frustración detectada${subject ? ` en ${subject}` : ''}. Considerar estrategias de apoyo adicional.`;\n            case _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.OVERWHELMED:\n                return `${timestamp}: Estudiante se siente abrumado. Recomendar descansos y división de tareas.`;\n            case _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.MOTIVATED:\n                return `${timestamp}: Alta motivación detectada${subject ? ` hacia ${subject}` : ''}. Momento ideal para objetivos ambiciosos.`;\n            case _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CONFUSED:\n                return `${timestamp}: Confusión identificada${subject ? ` en ${subject}` : ''}. Necesita explicaciones más claras.`;\n            case _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.PROUD:\n                return `${timestamp}: Orgullo por logro${subject ? ` en ${subject}` : ''}. Reforzar autoconfianza.`;\n            case _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.ANXIOUS:\n                return `${timestamp}: Ansiedad detectada. Implementar técnicas de relajación y apoyo.`;\n            default:\n                if (analysis.intensity === 'high') {\n                    return `${timestamp}: Emoción intensa (${emotion}) detectada. Monitorear estado emocional.`;\n                }\n                return null;\n        }\n    }\n    static updateRecurringTopics(memory, turn) {\n        turn.topics.forEach((topic)=>{\n            const existing = memory.recurringTopics.find((rt)=>rt.topic === topic);\n            if (existing) {\n                existing.frequency++;\n                existing.lastMentioned = new Date();\n                // Marcar como resuelto si hay indicadores de logro\n                if (turn.context?.achievement) {\n                    existing.resolved = true;\n                }\n            } else {\n                memory.recurringTopics.push({\n                    topic,\n                    frequency: 1,\n                    lastMentioned: new Date(),\n                    resolved: false\n                });\n            }\n        });\n    }\n    static updateProgressTracking(memory, turn) {\n        // Detectar objetivos/planes mencionados\n        const lowerMessage = turn.userMessage.toLowerCase();\n        if (lowerMessage.includes('objetivo') || lowerMessage.includes('meta')) {\n            memory.progressTracking.goalsDiscussed.push(turn.userMessage);\n        }\n        if (lowerMessage.includes('plan') || lowerMessage.includes('planificar')) {\n            memory.progressTracking.plansMade.push(turn.userMessage);\n        }\n        if (turn.context?.achievement) {\n            memory.progressTracking.completedTasks.push(turn.userMessage);\n        }\n        // Agregar seguimientos si es necesario\n        if (turn.context?.needsFollowUp) {\n            const followUpDate = new Date();\n            followUpDate.setDate(followUpDate.getDate() + 3) // Seguimiento en 3 días\n            ;\n            memory.progressTracking.pendingFollowUps.push({\n                task: turn.userMessage,\n                dueDate: followUpDate,\n                reminder: true\n            });\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/conversation-memory.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/emotion-analyzer.ts":
/*!*************************************!*\
  !*** ./src/lib/emotion-analyzer.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmotionAnalyzer: () => (/* binding */ EmotionAnalyzer),\n/* harmony export */   EmotionType: () => (/* binding */ EmotionType)\n/* harmony export */ });\n// Sistema Avanzado de Análisis Emocional para Sara\n// Detecta emociones complejas en los mensajes de estudiantes para respuestas más empáticas\nvar EmotionType = /*#__PURE__*/ function(EmotionType) {\n    // Emociones Básicas\n    EmotionType[\"HAPPY\"] = \"happy\";\n    EmotionType[\"SAD\"] = \"sad\";\n    EmotionType[\"ANGRY\"] = \"angry\";\n    EmotionType[\"FEAR\"] = \"fear\";\n    EmotionType[\"SURPRISE\"] = \"surprise\";\n    EmotionType[\"NEUTRAL\"] = \"neutral\";\n    // Emociones Académicas Específicas\n    EmotionType[\"FRUSTRATED\"] = \"frustrated\";\n    EmotionType[\"MOTIVATED\"] = \"motivated\";\n    EmotionType[\"CONFUSED\"] = \"confused\";\n    EmotionType[\"CONFIDENT\"] = \"confident\";\n    EmotionType[\"OVERWHELMED\"] = \"overwhelmed\";\n    EmotionType[\"CURIOUS\"] = \"curious\";\n    EmotionType[\"PROUD\"] = \"proud\";\n    EmotionType[\"DISAPPOINTED\"] = \"disappointed\";\n    EmotionType[\"ANXIOUS\"] = \"anxious\";\n    EmotionType[\"EXCITED\"] = \"excited\";\n    EmotionType[\"BORED\"] = \"bored\";\n    EmotionType[\"HOPEFUL\"] = \"hopeful\";\n    EmotionType[\"STRESSED\"] = \"stressed\";\n    EmotionType[\"RELIEVED\"] = \"relieved\";\n    EmotionType[\"GRATEFUL\"] = \"grateful\";\n    return EmotionType;\n}({});\nclass EmotionAnalyzer {\n    static{\n        this.EMOTION_PATTERNS = {\n            [\"frustrated\"]: {\n                keywords: [\n                    'frustrado',\n                    'enojado',\n                    'molesto',\n                    'hartado',\n                    'furioso',\n                    'irritado'\n                ],\n                phrases: [\n                    /no\\s+puedo\\s+(más|hacer|lograr)/i,\n                    /es\\s+(muy\\s+|súper\\s+)?difícil/i,\n                    /me\\s+(frustra|molesta|enoja)/i,\n                    /por\\s+qué\\s+no\\s+(puedo|logro|entiendo)/i,\n                    /esto\\s+(no\\s+sirve|es\\s+imposible)/i,\n                    /ya\\s+(intenté|probé)\\s+todo/i\n                ],\n                context: [\n                    'difícil',\n                    'problema',\n                    'falla',\n                    'error',\n                    'imposible'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.3,\n                    'súper': 1.5,\n                    'demasiado': 1.4,\n                    'completamente': 1.6\n                },\n                confidence_base: 0.85\n            },\n            [\"motivated\"]: {\n                keywords: [\n                    'motivado',\n                    'emocionado',\n                    'entusiasmado',\n                    'inspirado',\n                    'determinado'\n                ],\n                phrases: [\n                    /quiero\\s+(lograr|conseguir|aprender)/i,\n                    /estoy\\s+(listo|preparado|emocionado)/i,\n                    /me\\s+(gusta|encanta|motiva)/i,\n                    /vamos\\s+(a\\s+)?hacerlo/i,\n                    /estoy\\s+decidido/i,\n                    /tengo\\s+ganas\\s+de/i\n                ],\n                context: [\n                    'objetivo',\n                    'meta',\n                    'plan',\n                    'futuro',\n                    'logro'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2,\n                    'súper': 1.4,\n                    'realmente': 1.3\n                },\n                confidence_base: 0.8\n            },\n            [\"confused\"]: {\n                keywords: [\n                    'confundido',\n                    'perdido',\n                    'desorientado',\n                    'enredado'\n                ],\n                phrases: [\n                    /no\\s+(entiendo|comprendo|capto)/i,\n                    /estoy\\s+(confundido|perdido)/i,\n                    /no\\s+sé\\s+(cómo|qué|por\\s+qué)/i,\n                    /me\\s+(confunde|desorienta)/i,\n                    /no\\s+me\\s+queda\\s+claro/i,\n                    /podrías\\s+explicar/i\n                ],\n                context: [\n                    'explicación',\n                    'ayuda',\n                    'clarificar',\n                    'concepto',\n                    'dudas'\n                ],\n                intensity_multipliers: {\n                    'completamente': 1.5,\n                    'totalmente': 1.4,\n                    'muy': 1.2\n                },\n                confidence_base: 0.9\n            },\n            [\"overwhelmed\"]: {\n                keywords: [\n                    'abrumado',\n                    'sobrecargado',\n                    'saturado',\n                    'agobiado'\n                ],\n                phrases: [\n                    /es\\s+demasiado/i,\n                    /no\\s+puedo\\s+con\\s+todo/i,\n                    /me\\s+(abruma|agobia|satura)/i,\n                    /son\\s+muchas\\s+cosas/i,\n                    /no\\s+tengo\\s+tiempo/i,\n                    /me\\s+siento\\s+(perdido|desbordado)/i\n                ],\n                context: [\n                    'tiempo',\n                    'tareas',\n                    'exámenes',\n                    'muchos',\n                    'presión'\n                ],\n                intensity_multipliers: {\n                    'completamente': 1.6,\n                    'totalmente': 1.5,\n                    'muy': 1.3\n                },\n                confidence_base: 0.88\n            },\n            [\"anxious\"]: {\n                keywords: [\n                    'ansioso',\n                    'nervioso',\n                    'preocupado',\n                    'estresado',\n                    'tenso',\n                    'ansiedad'\n                ],\n                phrases: [\n                    /me\\s+(preocupa|da\\s+ansiedad|pone\\s+nervioso)/i,\n                    /tengo\\s+(miedo|temor)\\s+de/i,\n                    /y\\s+si\\s+(no\\s+puedo|fallo|salgo\\s+mal)/i,\n                    /me\\s+da\\s+(estrés|pánico|ansiedad)/i,\n                    /estoy\\s+(nervioso|ansioso)/i,\n                    /no\\s+sé\\s+si\\s+podré/i,\n                    /(mucha|bastante)\\s+ansiedad/i,\n                    /ansiedad\\s+(por|de|al)/i\n                ],\n                context: [\n                    'examen',\n                    'evaluación',\n                    'futuro',\n                    'resultado',\n                    'fallo',\n                    'público',\n                    'hablar'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.3,\n                    'mucha': 1.4,\n                    'súper': 1.5,\n                    'demasiado': 1.4,\n                    'bastante': 1.2\n                },\n                confidence_base: 0.88\n            },\n            [\"proud\"]: {\n                keywords: [\n                    'orgulloso',\n                    'satisfecho',\n                    'contento',\n                    'feliz'\n                ],\n                phrases: [\n                    /lo\\s+(logré|conseguí|hice)/i,\n                    /estoy\\s+(orgulloso|satisfecho|contento)/i,\n                    /me\\s+siento\\s+(bien|genial|increíble)/i,\n                    /pude\\s+hacerlo/i,\n                    /lo\\s+entendí/i,\n                    /funcionó/i,\n                    /logré\\s+(terminar|completar|hacer)/i,\n                    /(terminé|completé)\\s+(el|la|mi)/i,\n                    /pude\\s+(terminar|completar)/i\n                ],\n                context: [\n                    'logro',\n                    'éxito',\n                    'resultado',\n                    'completé',\n                    'terminé',\n                    'examen',\n                    'proyecto',\n                    'tarea'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2,\n                    'súper': 1.4,\n                    'realmente': 1.3,\n                    'finalmente': 1.3\n                },\n                confidence_base: 0.85\n            },\n            [\"disappointed\"]: {\n                keywords: [\n                    'decepcionado',\n                    'triste',\n                    'desilusionado',\n                    'desanimado'\n                ],\n                phrases: [\n                    /no\\s+salió\\s+como\\s+esperaba/i,\n                    /me\\s+(decepciona|entristece|desanima)/i,\n                    /esperaba\\s+(más|mejor)/i,\n                    /no\\s+fue\\s+suficiente/i,\n                    /qué\\s+mal/i,\n                    /no\\s+funcionó/i\n                ],\n                context: [\n                    'resultado',\n                    'calificación',\n                    'expectativa',\n                    'fallo',\n                    'error'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.3,\n                    'realmente': 1.4,\n                    'bastante': 1.2\n                },\n                confidence_base: 0.8\n            },\n            [\"excited\"]: {\n                keywords: [\n                    'emocionado',\n                    'entusiasmado',\n                    'ilusionado',\n                    'alegre'\n                ],\n                phrases: [\n                    /qué\\s+(genial|increíble|fantástico)/i,\n                    /me\\s+(emociona|ilusiona|alegra)/i,\n                    /estoy\\s+(emocionado|entusiasmado)/i,\n                    /no\\s+puedo\\s+esperar/i,\n                    /será\\s+(genial|fantástico)/i,\n                    /me\\s+encanta/i\n                ],\n                context: [\n                    'proyecto',\n                    'nuevo',\n                    'oportunidad',\n                    'futuro',\n                    'experiencia'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2,\n                    'súper': 1.4,\n                    'realmente': 1.3\n                },\n                confidence_base: 0.83\n            },\n            [\"bored\"]: {\n                keywords: [\n                    'aburrido',\n                    'hastiado',\n                    'cansado',\n                    'tedioso'\n                ],\n                phrases: [\n                    /me\\s+(aburre|hastía|cansa)/i,\n                    /es\\s+(aburrido|tedioso|repetitivo)/i,\n                    /no\\s+me\\s+interesa/i,\n                    /qué\\s+(aburrido|tedioso)/i,\n                    /siempre\\s+lo\\s+mismo/i,\n                    /no\\s+es\\s+divertido/i\n                ],\n                context: [\n                    'materia',\n                    'tema',\n                    'repetitivo',\n                    'siempre',\n                    'mismo'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2,\n                    'súper': 1.4,\n                    'demasiado': 1.3\n                },\n                confidence_base: 0.78\n            },\n            [\"hopeful\"]: {\n                keywords: [\n                    'esperanzado',\n                    'optimista',\n                    'confiado',\n                    'positivo'\n                ],\n                phrases: [\n                    /espero\\s+(que|poder)/i,\n                    /tengo\\s+(esperanza|fe|confianza)/i,\n                    /creo\\s+que\\s+(puedo|podré)/i,\n                    /será\\s+posible/i,\n                    /confío\\s+en\\s+que/i,\n                    /estoy\\s+optimista/i\n                ],\n                context: [\n                    'futuro',\n                    'posibilidad',\n                    'mejora',\n                    'cambio',\n                    'oportunidad'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2,\n                    'realmente': 1.3,\n                    'bastante': 1.1\n                },\n                confidence_base: 0.75\n            },\n            [\"stressed\"]: {\n                keywords: [\n                    'estresado',\n                    'presionado',\n                    'agobiado',\n                    'tensionado'\n                ],\n                phrases: [\n                    /me\\s+(estresa|presiona|agobia)/i,\n                    /siento\\s+(presión|tensión|estrés)/i,\n                    /no\\s+doy\\s+abasto/i,\n                    /es\\s+mucha\\s+presión/i,\n                    /me\\s+siento\\s+presionado/i,\n                    /no\\s+puedo\\s+relajarme/i\n                ],\n                context: [\n                    'tiempo',\n                    'presión',\n                    'deadlines',\n                    'exámenes',\n                    'múltiple'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.3,\n                    'demasiado': 1.4,\n                    'extremadamente': 1.6\n                },\n                confidence_base: 0.86\n            },\n            [\"grateful\"]: {\n                keywords: [\n                    'agradecido',\n                    'gracias',\n                    'reconocido',\n                    'apreciado'\n                ],\n                phrases: [\n                    /muchas\\s+gracias/i,\n                    /(te\\s+)?agradezco/i,\n                    /me\\s+(ayudas|ayudaste)\\s+mucho/i,\n                    /eres\\s+(genial|increíble|muy\\s+útil)/i,\n                    /gracias\\s+por/i,\n                    /lo\\s+aprecio/i\n                ],\n                context: [\n                    'ayuda',\n                    'apoyo',\n                    'explicación',\n                    'tiempo',\n                    'paciencia'\n                ],\n                intensity_multipliers: {\n                    'muchísimas': 1.4,\n                    'realmente': 1.3,\n                    'muy': 1.2\n                },\n                confidence_base: 0.9\n            },\n            // Emociones básicas con patrones simples\n            [\"happy\"]: {\n                keywords: [\n                    'feliz',\n                    'alegre',\n                    'contento',\n                    'bien'\n                ],\n                phrases: [\n                    /me\\s+siento\\s+(feliz|alegre|bien)/i,\n                    /estoy\\s+(feliz|contento)/i\n                ],\n                context: [\n                    'logro',\n                    'éxito',\n                    'bueno'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2\n                },\n                confidence_base: 0.7\n            },\n            [\"sad\"]: {\n                keywords: [\n                    'triste',\n                    'melancólico',\n                    'deprimido'\n                ],\n                phrases: [\n                    /me\\s+siento\\s+triste/i,\n                    /estoy\\s+triste/i\n                ],\n                context: [\n                    'mal',\n                    'fallo',\n                    'pérdida'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.3\n                },\n                confidence_base: 0.75\n            },\n            [\"angry\"]: {\n                keywords: [\n                    'enojado',\n                    'furioso',\n                    'molesto'\n                ],\n                phrases: [\n                    /me\\s+enoja/i,\n                    /estoy\\s+furioso/i\n                ],\n                context: [\n                    'problema',\n                    'injusto',\n                    'mal'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.4\n                },\n                confidence_base: 0.8\n            },\n            [\"fear\"]: {\n                keywords: [\n                    'miedo',\n                    'temor',\n                    'asustado'\n                ],\n                phrases: [\n                    /tengo\\s+miedo/i,\n                    /me\\s+asusta/i\n                ],\n                context: [\n                    'peligro',\n                    'amenaza',\n                    'futuro'\n                ],\n                intensity_multipliers: {\n                    'mucho': 1.3\n                },\n                confidence_base: 0.8\n            },\n            [\"surprise\"]: {\n                keywords: [\n                    'sorprendido',\n                    'asombrado',\n                    'impresionado'\n                ],\n                phrases: [\n                    /qué\\s+sorpresa/i,\n                    /me\\s+sorprende/i\n                ],\n                context: [\n                    'inesperado',\n                    'nuevo',\n                    'diferente'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2\n                },\n                confidence_base: 0.7\n            },\n            [\"confident\"]: {\n                keywords: [\n                    'seguro',\n                    'confiado',\n                    'capaz'\n                ],\n                phrases: [\n                    /estoy\\s+seguro/i,\n                    /puedo\\s+hacerlo/i\n                ],\n                context: [\n                    'capacidad',\n                    'habilidad',\n                    'logro'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2\n                },\n                confidence_base: 0.8\n            },\n            [\"curious\"]: {\n                keywords: [\n                    'curioso',\n                    'interesado',\n                    'intrigado'\n                ],\n                phrases: [\n                    /me\\s+da\\s+curiosidad/i,\n                    /quiero\\s+saber/i\n                ],\n                context: [\n                    'pregunta',\n                    'explorar',\n                    'descubrir'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2\n                },\n                confidence_base: 0.75\n            },\n            [\"relieved\"]: {\n                keywords: [\n                    'aliviado',\n                    'tranquilo',\n                    'relajado'\n                ],\n                phrases: [\n                    /qué\\s+alivio/i,\n                    /me\\s+tranquiliza/i\n                ],\n                context: [\n                    'problema resuelto',\n                    'éxito',\n                    'terminado'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2\n                },\n                confidence_base: 0.8\n            },\n            [\"neutral\"]: {\n                keywords: [\n                    'normal',\n                    'regular',\n                    'común'\n                ],\n                phrases: [\n                    /está\\s+bien/i,\n                    /normal/i\n                ],\n                context: [],\n                intensity_multipliers: {},\n                confidence_base: 0.5\n            }\n        };\n    }\n    /**\n   * Analiza las emociones en un mensaje de texto\n   */ static analyzeEmotions(message, context) {\n        const lowerMessage = message.toLowerCase();\n        const emotionScores = [];\n        // Analizar cada patrón emocional\n        for (const [emotion, pattern] of Object.entries(this.EMOTION_PATTERNS)){\n            const score = this.calculateEmotionScore(lowerMessage, pattern, message);\n            if (score > 0.3) {\n                emotionScores.push({\n                    emotion: emotion,\n                    score,\n                    indicators: this.getMatchedIndicators(lowerMessage, pattern, message)\n                });\n            }\n        }\n        // Ordenar por puntuación\n        emotionScores.sort((a, b)=>b.score - a.score);\n        // Determinar emoción principal y secundaria\n        const primary = emotionScores[0]?.emotion || \"neutral\";\n        const secondary = emotionScores.length > 1 && emotionScores[1].score > 0.5 ? emotionScores[1].emotion : undefined;\n        const confidence = emotionScores[0]?.score || 0.5;\n        const indicators = emotionScores[0]?.indicators || [];\n        return {\n            primary,\n            secondary,\n            confidence: Math.min(confidence, 0.95),\n            intensity: this.calculateIntensity(lowerMessage, confidence),\n            indicators,\n            context: this.analyzeEmotionalContext(lowerMessage, context),\n            suggestedResponse: this.getSuggestedResponseType(primary, confidence)\n        };\n    }\n    /**\n   * Calcula la puntuación de una emoción específica\n   */ static calculateEmotionScore(lowerMessage, pattern, originalMessage) {\n        let score = 0;\n        let matches = 0;\n        // Buscar palabras clave\n        for (const keyword of pattern.keywords){\n            if (lowerMessage.includes(keyword)) {\n                score += 0.3;\n                matches++;\n            }\n        }\n        // Buscar frases específicas (mayor peso)\n        for (const phrase of pattern.phrases){\n            if (phrase.test(originalMessage)) {\n                score += 0.5;\n                matches++;\n            }\n        }\n        // Buscar contexto de apoyo\n        for (const contextWord of pattern.context){\n            if (lowerMessage.includes(contextWord)) {\n                score += 0.1;\n            }\n        }\n        // Aplicar multiplicadores de intensidad\n        for (const [intensifier, multiplier] of Object.entries(pattern.intensity_multipliers)){\n            if (lowerMessage.includes(intensifier)) {\n                score *= multiplier;\n                break;\n            }\n        }\n        // Ajustar por confianza base del patrón\n        score *= pattern.confidence_base;\n        // Bonificación por múltiples coincidencias\n        if (matches > 1) {\n            score *= 1.2;\n        }\n        return Math.min(score, 1.0) // Cap en 1.0\n        ;\n    }\n    /**\n   * Obtiene los indicadores que coincidieron\n   */ static getMatchedIndicators(lowerMessage, pattern, originalMessage) {\n        const indicators = [];\n        // Palabras clave encontradas\n        pattern.keywords.forEach((keyword)=>{\n            if (lowerMessage.includes(keyword)) {\n                indicators.push(`keyword: ${keyword}`);\n            }\n        });\n        // Frases encontradas\n        pattern.phrases.forEach((phrase, index)=>{\n            if (phrase.test(originalMessage)) {\n                indicators.push(`phrase_pattern_${index}`);\n            }\n        });\n        return indicators;\n    }\n    /**\n   * Calcula la intensidad emocional\n   */ static calculateIntensity(message, confidence) {\n        const intensifiers = [\n            'muy',\n            'súper',\n            'extremadamente',\n            'completamente',\n            'totalmente',\n            'demasiado'\n        ];\n        const hasIntensifier = intensifiers.some((word)=>message.includes(word));\n        if (confidence > 0.8 || hasIntensifier) return 'high';\n        if (confidence > 0.6) return 'medium';\n        return 'low';\n    }\n    /**\n   * Analiza el contexto emocional\n   */ static analyzeEmotionalContext(message, providedContext) {\n        const context = {};\n        // Detectar si es académico\n        const academicKeywords = [\n            'examen',\n            'tarea',\n            'estudio',\n            'clase',\n            'profesor',\n            'materia',\n            'universidad',\n            'colegio'\n        ];\n        context.academic = academicKeywords.some((word)=>message.includes(word));\n        // Detectar si es personal\n        const personalKeywords = [\n            'familia',\n            'amigos',\n            'casa',\n            'personal',\n            'vida',\n            'sentimientos'\n        ];\n        context.personal = personalKeywords.some((word)=>message.includes(word));\n        // Detectar temporalidad\n        if (/ayer|antes|pasado|era|fue/.test(message)) context.temporal = 'past';\n        else if (/mañana|próximo|futuro|después|seré/.test(message)) context.temporal = 'future';\n        else context.temporal = 'present';\n        // Usar contexto proporcionado\n        if (providedContext?.subject) {\n            context.subject = providedContext.subject;\n        }\n        return context;\n    }\n    /**\n   * Sugiere el tipo de respuesta más apropiado\n   */ static getSuggestedResponseType(emotion, confidence) {\n        const responseMap = {\n            [\"frustrated\"]: 'supportive',\n            [\"overwhelmed\"]: 'supportive',\n            [\"anxious\"]: 'empathetic',\n            [\"stressed\"]: 'solution_focused',\n            [\"confused\"]: 'professional',\n            [\"disappointed\"]: 'empathetic',\n            [\"sad\"]: 'empathetic',\n            [\"angry\"]: 'supportive',\n            [\"fear\"]: 'supportive',\n            [\"motivated\"]: 'encouraging',\n            [\"excited\"]: 'encouraging',\n            [\"proud\"]: 'encouraging',\n            [\"confident\"]: 'motivational',\n            [\"hopeful\"]: 'motivational',\n            [\"curious\"]: 'professional',\n            [\"grateful\"]: 'encouraging',\n            [\"relieved\"]: 'encouraging',\n            [\"bored\"]: 'motivational',\n            [\"happy\"]: 'encouraging',\n            [\"surprise\"]: 'professional',\n            [\"neutral\"]: 'professional'\n        };\n        return responseMap[emotion] || 'professional';\n    }\n    /**\n   * Genera un resumen textual del análisis emocional\n   */ static generateEmotionSummary(analysis) {\n        const emotionNames = {\n            [\"frustrated\"]: 'frustrado',\n            [\"motivated\"]: 'motivado',\n            [\"confused\"]: 'confundido',\n            [\"confident\"]: 'confiado',\n            [\"overwhelmed\"]: 'abrumado',\n            [\"curious\"]: 'curioso',\n            [\"proud\"]: 'orgulloso',\n            [\"disappointed\"]: 'decepcionado',\n            [\"anxious\"]: 'ansioso',\n            [\"excited\"]: 'emocionado',\n            [\"bored\"]: 'aburrido',\n            [\"hopeful\"]: 'esperanzado',\n            [\"stressed\"]: 'estresado',\n            [\"relieved\"]: 'aliviado',\n            [\"grateful\"]: 'agradecido',\n            [\"happy\"]: 'feliz',\n            [\"sad\"]: 'triste',\n            [\"angry\"]: 'enojado',\n            [\"fear\"]: 'temeroso',\n            [\"surprise\"]: 'sorprendido',\n            [\"neutral\"]: 'neutral'\n        };\n        let summary = `El estudiante se siente ${emotionNames[analysis.primary]} (confianza: ${(analysis.confidence * 100).toFixed(0)}%, intensidad: ${analysis.intensity})`;\n        if (analysis.secondary) {\n            summary += ` con matices de ${emotionNames[analysis.secondary]}`;\n        }\n        if (analysis.context.subject) {\n            summary += ` en relación a ${analysis.context.subject}`;\n        }\n        return summary;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/emotion-analyzer.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/exercise-solver.ts":
/*!************************************!*\
  !*** ./src/lib/exercise-solver.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExerciseSolver: () => (/* binding */ ExerciseSolver)\n/* harmony export */ });\n/* harmony import */ var _ai_providers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ai-providers */ \"(rsc)/./src/lib/ai-providers.ts\");\n\nclass ExerciseSolver {\n    /**\n   * Detecta si un mensaje contiene un ejercicio para resolver\n   */ static detectExercise(message) {\n        const msgLower = message.toLowerCase();\n        // Palabras clave que indican ejercicio a resolver\n        const exerciseKeywords = [\n            'resuelve',\n            'resuelva',\n            'resolver',\n            'resolución',\n            'calcula',\n            'calcule',\n            'calcular',\n            'cálculo',\n            'calculen',\n            'encuentra',\n            'encuentre',\n            'encontrar',\n            'hallar',\n            'halle',\n            'determina',\n            'determine',\n            'determinar',\n            'determinación',\n            'ejercicio',\n            'problema',\n            'pregunta'\n        ];\n        const hasExerciseKeyword = exerciseKeywords.some((keyword)=>msgLower.includes(keyword));\n        if (!hasExerciseKeyword) {\n            return {\n                hasExercise: false,\n                subject: 'general',\n                type: 'conceptual',\n                confidence: 0\n            };\n        }\n        // Detectar materia\n        let subject = 'general';\n        let confidence = 0.5;\n        // Palabras clave específicas por materia\n        const physicsKeywords = [\n            'presión',\n            'volumen',\n            'temperatura',\n            'gas',\n            'gases',\n            'velocidad',\n            'aceleración',\n            'fuerza',\n            'masa',\n            'energía',\n            'trabajo',\n            'potencia',\n            'momento',\n            'impulso',\n            'fricción',\n            'ley de',\n            'newton',\n            'boyle',\n            'charles',\n            'gay-lussac',\n            'cinemática',\n            'dinámica',\n            'termodinámica',\n            'mecánica',\n            'atm',\n            'mmhg',\n            'pascal',\n            'joule',\n            'watt',\n            'newton',\n            'm/s',\n            'km/h',\n            'cm³',\n            'dm³',\n            'moles',\n            'mol'\n        ];\n        const chemistryKeywords = [\n            'reacción',\n            'reactivo',\n            'producto',\n            'estequiometría',\n            'molar',\n            'molaridad',\n            'concentración',\n            'dilución',\n            'ácido',\n            'base',\n            'ph',\n            'neutralización',\n            'sal',\n            'oxidación',\n            'reducción',\n            'redox',\n            'electrólisis',\n            'enlace',\n            'iónico',\n            'covalente',\n            'molecular',\n            'átomo',\n            'molécula',\n            'elemento',\n            'compuesto',\n            'masa atómica',\n            'masa molecular',\n            'número de avogadro'\n        ];\n        const mathKeywords = [\n            'ecuación',\n            'función',\n            'derivada',\n            'integral',\n            'límite',\n            'matriz',\n            'determinante',\n            'sistema',\n            'trigonometría',\n            'logaritmo',\n            'exponencial',\n            'probabilidad',\n            'estadística',\n            'geometría',\n            'álgebra',\n            'polinomio',\n            'factorización'\n        ];\n        const physicsCount = physicsKeywords.reduce((count, word)=>count + (msgLower.includes(word) ? 1 : 0), 0);\n        const chemistryCount = chemistryKeywords.reduce((count, word)=>count + (msgLower.includes(word) ? 1 : 0), 0);\n        const mathCount = mathKeywords.reduce((count, word)=>count + (msgLower.includes(word) ? 1 : 0), 0);\n        if (physicsCount > 0) {\n            subject = 'physics';\n            confidence = Math.min(0.9, 0.6 + physicsCount * 0.1);\n        } else if (chemistryCount > 0) {\n            subject = 'chemistry';\n            confidence = Math.min(0.9, 0.6 + chemistryCount * 0.1);\n        } else if (mathCount > 0) {\n            subject = 'mathematics';\n            confidence = Math.min(0.9, 0.6 + mathCount * 0.1);\n        }\n        // Detectar tipo de ejercicio\n        let type = 'conceptual';\n        const calculationIndicators = [\n            'calcula',\n            'calcule',\n            'calcular',\n            'cálculo',\n            'calculen',\n            'encuentra',\n            'encuentre',\n            'hallar',\n            'halle',\n            'determina',\n            'determine',\n            'valor',\n            'resultado'\n        ];\n        const problemSolvingIndicators = [\n            'resuelve',\n            'resuelva',\n            'resolver',\n            'problema',\n            'ejercicio',\n            'situación',\n            'caso',\n            'escenario'\n        ];\n        if (calculationIndicators.some((indicator)=>msgLower.includes(indicator))) {\n            type = 'calculation';\n        } else if (problemSolvingIndicators.some((indicator)=>msgLower.includes(indicator))) {\n            type = 'problem_solving';\n        }\n        return {\n            hasExercise: true,\n            subject,\n            type,\n            confidence\n        };\n    }\n    /**\n   * Resuelve un ejercicio paso a paso\n   */ static async solveExercise(exerciseText, subject, studentContext) {\n        const prompt = this.createSolutionPrompt(exerciseText, subject, studentContext);\n        try {\n            const solution = await _ai_providers__WEBPACK_IMPORTED_MODULE_0__.aiService.generateExercise(prompt);\n            return {\n                subject,\n                type: 'problem_solving',\n                solution: solution === 'TEMPLATE_FALLBACK' ? this.getFallbackSolution(exerciseText, subject) : solution,\n                confidence: solution === 'TEMPLATE_FALLBACK' ? 0.3 : 0.8\n            };\n        } catch (error) {\n            console.error('Error solving exercise:', error);\n            return {\n                subject,\n                type: 'problem_solving',\n                solution: this.getFallbackSolution(exerciseText, subject),\n                confidence: 0.2\n            };\n        }\n    }\n    /**\n   * Crea el prompt especializado para resolución de ejercicios\n   */ static createSolutionPrompt(exerciseText, subject, studentContext) {\n        const subjectInstructions = {\n            physics: `\n**INSTRUCCIONES ESPECÍFICAS PARA FÍSICA:**\n- Identifica TODAS las variables dadas y las que debes encontrar\n- Convierte TODAS las unidades al Sistema Internacional (SI) si es necesario\n- Aplica las leyes y fórmulas de física apropiadas (Boyle, Charles, Gay-Lussac, Newton, etc.)\n- Realiza los cálculos paso a paso con todas las operaciones matemáticas\n- Incluye las unidades en cada paso del cálculo\n- Verifica que el resultado tenga sentido físico`,\n            chemistry: `\n**INSTRUCCIONES ESPECÍFICAS PARA QUÍMICA:**\n- Identifica los reactivos, productos y datos dados\n- Escribe la ecuación química balanceada si es necesario\n- Convierte las unidades (gramos, moles, litros, etc.) según se requiera\n- Aplica los conceptos de estequiometría, concentraciones, o leyes de gases\n- Muestra todos los factores de conversión utilizados\n- Calcula paso a paso con todas las operaciones matemáticas`,\n            mathematics: `\n**INSTRUCCIONES ESPECÍFICAS PARA MATEMÁTICAS:**\n- Identifica el tipo de problema (ecuación, función, geometría, etc.)\n- Organiza los datos dados y lo que se debe encontrar\n- Aplica las fórmulas y teoremas apropiados\n- Realiza cada operación matemática paso por paso\n- Verifica la solución sustituyendo en la ecuación original`,\n            general: `\n**INSTRUCCIONES GENERALES:**\n- Identifica el tipo de problema y la materia\n- Organiza los datos dados y lo que se debe encontrar\n- Aplica el método de resolución apropiado paso a paso`\n        };\n        return `Eres un tutor experto en ciencias exactas para estudiantes de secundaria. DEBES resolver este ejercicio COMPLETAMENTE paso a paso sin omitir ningún cálculo.\n\n${subjectInstructions[subject]}\n\n**INSTRUCCIONES CRÍTICAS:**\n- COMPLETA todos los pasos de la resolución hasta el resultado final\n- NO te detengas en el medio de los cálculos\n- INCLUYE todas las operaciones matemáticas con números\n- PRESENTA el resultado final con unidades correctas\n\n**FORMATO OBLIGATORIO DE RESPUESTA:**\n\n## 📋 **DATOS:**\n[Lista TODOS los datos dados en el ejercicio con sus unidades]\n\n## 🎯 **SE PIDE:**\n[Especifica claramente qué se debe calcular o encontrar]\n\n## 📐 **FÓRMULAS A UTILIZAR:**\n[Lista las fórmulas o leyes que aplicarás]\n\n## 🔄 **CONVERSIÓN DE UNIDADES:**\n[Si es necesario, convierte todas las unidades al sistema apropiado]\n\n## ⚡ **RESOLUCIÓN PASO A PASO:**\n\n**Paso 1:** [Explica y realiza el primer cálculo completo]\n**Paso 2:** [Explica y realiza el segundo cálculo completo]\n**Paso 3:** [Continúa con todos los cálculos necesarios]\n**Paso Final:** [Completa la resolución con el resultado numérico]\n\n## ✅ **RESULTADO FINAL:**\n[Presenta la respuesta final con unidades y explica qué significa físicamente]\n\n## 🔍 **VERIFICACIÓN:**\n[Verifica que el resultado tenga sentido y sea correcto]\n\n---\n\n**EJERCICIO A RESOLVER:**\n${exerciseText}\n\n${studentContext ? `\\n**CONTEXTO DEL ESTUDIANTE:** ${studentContext}` : ''}\n\n**IMPORTANTE: Resuelve COMPLETAMENTE hasta obtener el resultado final numérico con unidades.**`;\n    }\n    /**\n   * Solución de fallback cuando la IA no está disponible\n   */ static getFallbackSolution(exerciseText, subject) {\n        const subjectName = {\n            physics: 'Física',\n            chemistry: 'Química',\n            mathematics: 'Matemáticas',\n            general: 'Ciencias Exactas'\n        }[subject];\n        return `## 📋 **EJERCICIO IDENTIFICADO**\n\nHe detectado que necesitas resolver un ejercicio de **${subjectName}**.\n\n## 🔧 **METODOLOGÍA DE RESOLUCIÓN**\n\nPara resolver este tipo de ejercicios de ${subjectName.toLowerCase()}, sigue estos pasos:\n\n**1. ORGANIZAR DATOS:**\n- Lista todos los valores dados\n- Identifica las unidades\n- Determina qué se debe calcular\n\n**2. IDENTIFICAR FÓRMULAS:**\n- Selecciona las leyes o fórmulas apropiadas\n- Verifica que las unidades sean consistentes\n\n**3. RESOLVER PASO A PASO:**\n- Sustituye los valores en las fórmulas\n- Realiza los cálculos ordenadamente\n- Incluye unidades en cada paso\n\n**4. VERIFICAR RESULTADO:**\n- Comprueba que tenga sentido\n- Revisa las unidades finales\n\n## 💡 **RECOMENDACIÓN**\n\nTe sugiero que intentes resolver el ejercicio siguiendo estos pasos y luego me muestres tu trabajo para que pueda verificarlo y ayudarte con cualquier duda específica.\n\n¿Te gustaría que te ayude con algún paso en particular o tienes alguna duda sobre el procedimiento?`;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/exercise-solver.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/hybrid-storage.ts":
/*!***********************************!*\
  !*** ./src/lib/hybrid-storage.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canSubmitThisWeek: () => (/* binding */ canSubmitThisWeek),\n/* harmony export */   createProgressReport: () => (/* binding */ createProgressReport),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   findProgressReportByUserAndWeek: () => (/* binding */ findProgressReportByUserAndWeek),\n/* harmony export */   findProgressReportsByUser: () => (/* binding */ findProgressReportsByUser),\n/* harmony export */   findUserByEmail: () => (/* binding */ findUserByEmail),\n/* harmony export */   findUserById: () => (/* binding */ findUserById),\n/* harmony export */   findUsersByRole: () => (/* binding */ findUsersByRole),\n/* harmony export */   generateStudentId: () => (/* binding */ generateStudentId),\n/* harmony export */   getAllProgressReports: () => (/* binding */ getAllProgressReports),\n/* harmony export */   getAllUsers: () => (/* binding */ getAllUsers),\n/* harmony export */   getCurrentWeekEnd: () => (/* binding */ getCurrentWeekEnd),\n/* harmony export */   getCurrentWeekStart: () => (/* binding */ getCurrentWeekStart),\n/* harmony export */   getMonthWeeks: () => (/* binding */ getMonthWeeks),\n/* harmony export */   initializeStorage: () => (/* binding */ initializeStorage),\n/* harmony export */   validateStudentId: () => (/* binding */ validateStudentId)\n/* harmony export */ });\n/* harmony import */ var _temp_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n// Hybrid storage system that can work with database or fallback to temp-storage\n\n// For now, use temp-storage exclusively to ensure stability\nconst useDatabase = false;\nconsole.log('🔄 Using temp-storage system for reliability');\n// Initialize the storage system\nasync function initializeStorage() {\n    console.log('✅ Temp-storage system initialized');\n}\n// User management functions with fallback\nasync function createUser(userData) {\n    const hashedPassword = (__webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/umd/index.js\").hashSync)(userData.password, 12);\n    const user = {\n        id: Date.now().toString(),\n        ...userData,\n        password: hashedPassword,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        status: 'ACTIVE'\n    };\n    _temp_storage__WEBPACK_IMPORTED_MODULE_0__.addUser(user);\n    return user;\n}\nasync function findUserByEmail(email) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findUserByEmail(email);\n}\nasync function getAllUsers() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getAllUsers();\n}\nasync function findUsersByRole(role) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findUsersByRole(role);\n}\nasync function findUserById(id) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findUserById(id);\n}\nasync function generateStudentId() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.generateStudentId();\n}\n// Progress reports functions with fallback\nasync function createProgressReport(data) {\n    const report = {\n        id: Date.now().toString(),\n        userId: data.userId,\n        weekStart: data.weekStart,\n        weekEnd: data.weekEnd,\n        submittedAt: new Date(),\n        responses: data.responses\n    };\n    _temp_storage__WEBPACK_IMPORTED_MODULE_0__.addWeeklyReport(report);\n    return report;\n}\nasync function findProgressReportsByUser(userId) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findWeeklyReportsByUser(userId);\n}\nasync function getAllProgressReports() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getAllWeeklyReports();\n}\nasync function findProgressReportByUserAndWeek(userId, weekStart) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findWeeklyReportByUserAndWeek(userId, weekStart);\n}\nasync function canSubmitThisWeek(userId) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.canSubmitThisWeek(userId);\n}\n// Utility functions (same for both)\nfunction getCurrentWeekStart() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getCurrentWeekStart();\n}\nfunction getCurrentWeekEnd() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getCurrentWeekEnd();\n}\nfunction getMonthWeeks(year, month) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getMonthWeeks(year, month);\n}\nfunction validateStudentId(studentId) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.validateStudentId(studentId);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2h5YnJpZC1zdG9yYWdlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0ZBQWdGO0FBQ25DO0FBRTdDLDREQUE0RDtBQUM1RCxNQUFNQyxjQUFjO0FBRXBCQyxRQUFRQyxHQUFHLENBQUM7QUFFWixnQ0FBZ0M7QUFDekIsZUFBZUM7SUFDcEJGLFFBQVFDLEdBQUcsQ0FBQztBQUNkO0FBRUEsMENBQTBDO0FBQ25DLGVBQWVFLFdBQVdDLFFBQWE7SUFDNUMsTUFBTUMsaUJBQWlCQyw0RkFBNEIsQ0FBQ0YsU0FBU0ksUUFBUSxFQUFFO0lBQ3ZFLE1BQU1DLE9BQU87UUFDWEMsSUFBSUMsS0FBS0MsR0FBRyxHQUFHQyxRQUFRO1FBQ3ZCLEdBQUdULFFBQVE7UUFDWEksVUFBVUg7UUFDVlMsV0FBVyxJQUFJSDtRQUNmSSxXQUFXLElBQUlKO1FBQ2ZLLFFBQVE7SUFDVjtJQUNBbEIsa0RBQW1CLENBQUNXO0lBQ3BCLE9BQU9BO0FBQ1Q7QUFFTyxlQUFlUyxnQkFBZ0JDLEtBQWE7SUFDakQsT0FBT3JCLDBEQUEyQixDQUFDcUI7QUFDckM7QUFFTyxlQUFlQztJQUNwQixPQUFPdEIsc0RBQXVCO0FBQ2hDO0FBRU8sZUFBZXVCLGdCQUFnQkMsSUFBUztJQUM3QyxPQUFPeEIsMERBQTJCLENBQUN3QjtBQUNyQztBQUVPLGVBQWVDLGFBQWFiLEVBQVU7SUFDM0MsT0FBT1osdURBQXdCLENBQUNZO0FBQ2xDO0FBRU8sZUFBZWM7SUFDcEIsT0FBTzFCLDREQUE2QjtBQUN0QztBQUVBLDJDQUEyQztBQUNwQyxlQUFlMkIscUJBQXFCQyxJQUFTO0lBQ2xELE1BQU1DLFNBQVM7UUFDYmpCLElBQUlDLEtBQUtDLEdBQUcsR0FBR0MsUUFBUTtRQUN2QmUsUUFBUUYsS0FBS0UsTUFBTTtRQUNuQkMsV0FBV0gsS0FBS0csU0FBUztRQUN6QkMsU0FBU0osS0FBS0ksT0FBTztRQUNyQkMsYUFBYSxJQUFJcEI7UUFDakJxQixXQUFXTixLQUFLTSxTQUFTO0lBQzNCO0lBQ0FsQywwREFBMkIsQ0FBQzZCO0lBQzVCLE9BQU9BO0FBQ1Q7QUFFTyxlQUFlTywwQkFBMEJOLE1BQWM7SUFDNUQsT0FBTzlCLGtFQUFtQyxDQUFDOEI7QUFDN0M7QUFFTyxlQUFlUTtJQUNwQixPQUFPdEMsOERBQStCO0FBQ3hDO0FBRU8sZUFBZXdDLGdDQUFnQ1YsTUFBYyxFQUFFQyxTQUFlO0lBQ25GLE9BQU8vQix3RUFBeUMsQ0FBQzhCLFFBQVFDO0FBQzNEO0FBRU8sZUFBZVcsa0JBQWtCWixNQUFjO0lBQ3BELE9BQU85Qiw0REFBNkIsQ0FBQzhCO0FBQ3ZDO0FBRUEsb0NBQW9DO0FBQzdCLFNBQVNhO0lBQ2QsT0FBTzNDLDhEQUErQjtBQUN4QztBQUVPLFNBQVM0QztJQUNkLE9BQU81Qyw0REFBNkI7QUFDdEM7QUFFTyxTQUFTNkMsY0FBY0MsSUFBWSxFQUFFQyxLQUFhO0lBQ3ZELE9BQU8vQyx3REFBeUIsQ0FBQzhDLE1BQU1DO0FBQ3pDO0FBRU8sU0FBU0Msa0JBQWtCQyxTQUFpQjtJQUNqRCxPQUFPakQsNERBQTZCLENBQUNpRDtBQUN2QyIsInNvdXJjZXMiOlsiL1VzZXJzL3JvZHJpZ29kaWJlcm5hcmRvMzNnbWFpbC5jb20vRG9jdW1lbnRzL0FwcCBEZXZlbG9wbWVudCBQcm95ZWN0cy9JbnRlbGxlZ28gUGxhdGZvcm0vc3JjL2xpYi9oeWJyaWQtc3RvcmFnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBIeWJyaWQgc3RvcmFnZSBzeXN0ZW0gdGhhdCBjYW4gd29yayB3aXRoIGRhdGFiYXNlIG9yIGZhbGxiYWNrIHRvIHRlbXAtc3RvcmFnZVxuaW1wb3J0ICogYXMgdGVtcFN0b3JhZ2UgZnJvbSAnLi90ZW1wLXN0b3JhZ2UnXG5cbi8vIEZvciBub3csIHVzZSB0ZW1wLXN0b3JhZ2UgZXhjbHVzaXZlbHkgdG8gZW5zdXJlIHN0YWJpbGl0eVxuY29uc3QgdXNlRGF0YWJhc2UgPSBmYWxzZVxuXG5jb25zb2xlLmxvZygn8J+UhCBVc2luZyB0ZW1wLXN0b3JhZ2Ugc3lzdGVtIGZvciByZWxpYWJpbGl0eScpXG5cbi8vIEluaXRpYWxpemUgdGhlIHN0b3JhZ2Ugc3lzdGVtXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZVN0b3JhZ2UoKSB7XG4gIGNvbnNvbGUubG9nKCfinIUgVGVtcC1zdG9yYWdlIHN5c3RlbSBpbml0aWFsaXplZCcpXG59XG5cbi8vIFVzZXIgbWFuYWdlbWVudCBmdW5jdGlvbnMgd2l0aCBmYWxsYmFja1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVVzZXIodXNlckRhdGE6IGFueSkge1xuICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IHJlcXVpcmUoJ2JjcnlwdGpzJykuaGFzaFN5bmModXNlckRhdGEucGFzc3dvcmQsIDEyKVxuICBjb25zdCB1c2VyID0ge1xuICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgLi4udXNlckRhdGEsXG4gICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgc3RhdHVzOiAnQUNUSVZFJyBhcyBjb25zdCxcbiAgfVxuICB0ZW1wU3RvcmFnZS5hZGRVc2VyKHVzZXIpXG4gIHJldHVybiB1c2VyXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kVXNlckJ5RW1haWwoZW1haWw6IHN0cmluZykge1xuICByZXR1cm4gdGVtcFN0b3JhZ2UuZmluZFVzZXJCeUVtYWlsKGVtYWlsKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsVXNlcnMoKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5nZXRBbGxVc2VycygpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kVXNlcnNCeVJvbGUocm9sZTogYW55KSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5maW5kVXNlcnNCeVJvbGUocm9sZSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRVc2VyQnlJZChpZDogc3RyaW5nKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5maW5kVXNlckJ5SWQoaWQpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVN0dWRlbnRJZCgpIHtcbiAgcmV0dXJuIHRlbXBTdG9yYWdlLmdlbmVyYXRlU3R1ZGVudElkKClcbn1cblxuLy8gUHJvZ3Jlc3MgcmVwb3J0cyBmdW5jdGlvbnMgd2l0aCBmYWxsYmFja1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVByb2dyZXNzUmVwb3J0KGRhdGE6IGFueSkge1xuICBjb25zdCByZXBvcnQgPSB7XG4gICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICB1c2VySWQ6IGRhdGEudXNlcklkLFxuICAgIHdlZWtTdGFydDogZGF0YS53ZWVrU3RhcnQsXG4gICAgd2Vla0VuZDogZGF0YS53ZWVrRW5kLFxuICAgIHN1Ym1pdHRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgIHJlc3BvbnNlczogZGF0YS5yZXNwb25zZXNcbiAgfVxuICB0ZW1wU3RvcmFnZS5hZGRXZWVrbHlSZXBvcnQocmVwb3J0KVxuICByZXR1cm4gcmVwb3J0XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kUHJvZ3Jlc3NSZXBvcnRzQnlVc2VyKHVzZXJJZDogc3RyaW5nKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5maW5kV2Vla2x5UmVwb3J0c0J5VXNlcih1c2VySWQpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxQcm9ncmVzc1JlcG9ydHMoKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5nZXRBbGxXZWVrbHlSZXBvcnRzKClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRQcm9ncmVzc1JlcG9ydEJ5VXNlckFuZFdlZWsodXNlcklkOiBzdHJpbmcsIHdlZWtTdGFydDogRGF0ZSkge1xuICByZXR1cm4gdGVtcFN0b3JhZ2UuZmluZFdlZWtseVJlcG9ydEJ5VXNlckFuZFdlZWsodXNlcklkLCB3ZWVrU3RhcnQpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjYW5TdWJtaXRUaGlzV2Vlayh1c2VySWQ6IHN0cmluZykge1xuICByZXR1cm4gdGVtcFN0b3JhZ2UuY2FuU3VibWl0VGhpc1dlZWsodXNlcklkKVxufVxuXG4vLyBVdGlsaXR5IGZ1bmN0aW9ucyAoc2FtZSBmb3IgYm90aClcbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50V2Vla1N0YXJ0KCkge1xuICByZXR1cm4gdGVtcFN0b3JhZ2UuZ2V0Q3VycmVudFdlZWtTdGFydCgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50V2Vla0VuZCgpIHtcbiAgcmV0dXJuIHRlbXBTdG9yYWdlLmdldEN1cnJlbnRXZWVrRW5kKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vbnRoV2Vla3MoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5nZXRNb250aFdlZWtzKHllYXIsIG1vbnRoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTdHVkZW50SWQoc3R1ZGVudElkOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHRlbXBTdG9yYWdlLnZhbGlkYXRlU3R1ZGVudElkKHN0dWRlbnRJZClcbn0iXSwibmFtZXMiOlsidGVtcFN0b3JhZ2UiLCJ1c2VEYXRhYmFzZSIsImNvbnNvbGUiLCJsb2ciLCJpbml0aWFsaXplU3RvcmFnZSIsImNyZWF0ZVVzZXIiLCJ1c2VyRGF0YSIsImhhc2hlZFBhc3N3b3JkIiwicmVxdWlyZSIsImhhc2hTeW5jIiwicGFzc3dvcmQiLCJ1c2VyIiwiaWQiLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJzdGF0dXMiLCJhZGRVc2VyIiwiZmluZFVzZXJCeUVtYWlsIiwiZW1haWwiLCJnZXRBbGxVc2VycyIsImZpbmRVc2Vyc0J5Um9sZSIsInJvbGUiLCJmaW5kVXNlckJ5SWQiLCJnZW5lcmF0ZVN0dWRlbnRJZCIsImNyZWF0ZVByb2dyZXNzUmVwb3J0IiwiZGF0YSIsInJlcG9ydCIsInVzZXJJZCIsIndlZWtTdGFydCIsIndlZWtFbmQiLCJzdWJtaXR0ZWRBdCIsInJlc3BvbnNlcyIsImFkZFdlZWtseVJlcG9ydCIsImZpbmRQcm9ncmVzc1JlcG9ydHNCeVVzZXIiLCJmaW5kV2Vla2x5UmVwb3J0c0J5VXNlciIsImdldEFsbFByb2dyZXNzUmVwb3J0cyIsImdldEFsbFdlZWtseVJlcG9ydHMiLCJmaW5kUHJvZ3Jlc3NSZXBvcnRCeVVzZXJBbmRXZWVrIiwiZmluZFdlZWtseVJlcG9ydEJ5VXNlckFuZFdlZWsiLCJjYW5TdWJtaXRUaGlzV2VlayIsImdldEN1cnJlbnRXZWVrU3RhcnQiLCJnZXRDdXJyZW50V2Vla0VuZCIsImdldE1vbnRoV2Vla3MiLCJ5ZWFyIiwibW9udGgiLCJ2YWxpZGF0ZVN0dWRlbnRJZCIsInN0dWRlbnRJZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/hybrid-storage.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/notification-service.ts":
/*!*****************************************!*\
  !*** ./src/lib/notification-service.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NotificationCategory: () => (/* binding */ NotificationCategory),\n/* harmony export */   NotificationPriority: () => (/* binding */ NotificationPriority),\n/* harmony export */   NotificationService: () => (/* binding */ NotificationService),\n/* harmony export */   NotificationTrigger: () => (/* binding */ NotificationTrigger),\n/* harmony export */   NotificationType: () => (/* binding */ NotificationType)\n/* harmony export */ });\n/* harmony import */ var _novu_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @novu/node */ \"(rsc)/./node_modules/@novu/node/build/module/index.js\");\n/* harmony import */ var _novu_node__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_novu_node__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _academic_search_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./academic-search-engine */ \"(rsc)/./src/lib/academic-search-engine.ts\");\n/* harmony import */ var _conversation_memory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./conversation-memory */ \"(rsc)/./src/lib/conversation-memory.ts\");\n/* harmony import */ var _emotion_analyzer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./emotion-analyzer */ \"(rsc)/./src/lib/emotion-analyzer.ts\");\n// Sistema de Notificaciones Proactivas para Sara\n// Integra búsqueda académica con notificaciones inteligentes usando Novu\n\n\n\n\nvar NotificationTrigger = /*#__PURE__*/ function(NotificationTrigger) {\n    NotificationTrigger[\"EMOTIONAL_PATTERN\"] = \"emotional_pattern\";\n    NotificationTrigger[\"ACADEMIC_STRUGGLE\"] = \"academic_struggle\";\n    NotificationTrigger[\"LEARNING_OPPORTUNITY\"] = \"learning_opportunity\";\n    NotificationTrigger[\"DEADLINE_APPROACHING\"] = \"deadline_approaching\";\n    NotificationTrigger[\"PROGRESS_MILESTONE\"] = \"progress_milestone\";\n    NotificationTrigger[\"KNOWLEDGE_GAP\"] = \"knowledge_gap\";\n    NotificationTrigger[\"MOTIVATION_DROP\"] = \"motivation_drop\";\n    NotificationTrigger[\"STUDY_PATTERN\"] = \"study_pattern\";\n    return NotificationTrigger;\n}({});\nvar NotificationType = /*#__PURE__*/ function(NotificationType) {\n    NotificationType[\"ACADEMIC_RESOURCE\"] = \"academic_resource\";\n    NotificationType[\"STUDY_REMINDER\"] = \"study_reminder\";\n    NotificationType[\"MOTIVATIONAL\"] = \"motivational\";\n    NotificationType[\"PROGRESS_UPDATE\"] = \"progress_update\";\n    NotificationType[\"LEARNING_TIP\"] = \"learning_tip\";\n    NotificationType[\"DEADLINE_ALERT\"] = \"deadline_alert\";\n    NotificationType[\"ACHIEVEMENT\"] = \"achievement\";\n    return NotificationType;\n}({});\nvar NotificationPriority = /*#__PURE__*/ function(NotificationPriority) {\n    NotificationPriority[\"LOW\"] = \"low\";\n    NotificationPriority[\"MEDIUM\"] = \"medium\";\n    NotificationPriority[\"HIGH\"] = \"high\";\n    NotificationPriority[\"URGENT\"] = \"urgent\";\n    return NotificationPriority;\n}({});\nvar NotificationCategory = /*#__PURE__*/ function(NotificationCategory) {\n    NotificationCategory[\"ACADEMIC\"] = \"academic\";\n    NotificationCategory[\"EMOTIONAL\"] = \"emotional\";\n    NotificationCategory[\"ORGANIZATIONAL\"] = \"organizational\";\n    NotificationCategory[\"MOTIVATIONAL\"] = \"motivational\";\n    return NotificationCategory;\n}({});\nclass NotificationService {\n    static{\n        this.novu = null;\n    }\n    static{\n        this.initialized = false;\n    }\n    /**\n   * Inicializa el servicio de notificaciones\n   */ static initialize() {\n        try {\n            const apiKey = process.env.NOVU_API_KEY;\n            if (apiKey && apiKey.length > 10 && apiKey !== 'tu-clave-secreta-de-novu') {\n                this.novu = new _novu_node__WEBPACK_IMPORTED_MODULE_0__.Novu(apiKey);\n                this.initialized = true;\n                console.log('✅ Novu notification service initialized successfully');\n                console.log('📱 Push notifications, email, and SMS are now available');\n            } else if (apiKey === 'tu-clave-secreta-de-novu') {\n                console.log('⚠️  Placeholder API key detected. Please configure a real Novu API key.');\n                console.log('📖 Follow the tutorial in CLAUDE.md to get your API key');\n                this.initialized = true;\n            } else {\n                console.log('⚠️  Novu API key not found, using local notification system');\n                console.log('💡 To enable push notifications, configure NOVU_API_KEY in .env');\n                console.log('📖 See CLAUDE.md for setup instructions');\n                this.initialized = true;\n            }\n        } catch (error) {\n            console.error('❌ Failed to initialize Novu:', error);\n            console.log('🔄 Falling back to local notification system');\n            this.initialized = true;\n        }\n    }\n    /**\n   * Analiza el contexto del estudiante y genera notificaciones proactivas relevantes\n   */ static async analyzeAndNotify(context) {\n        if (!this.initialized) this.initialize();\n        const notifications = [];\n        const memory = _conversation_memory__WEBPACK_IMPORTED_MODULE_2__.ConversationMemoryManager.getMemory(context.userId, context.sessionId);\n        // 1. Analizar patrones emocionales para notificaciones\n        const emotionalNotifications = await this.analyzeEmotionalPatterns(context, memory);\n        notifications.push(...emotionalNotifications);\n        // 2. Detectar oportunidades de aprendizaje\n        const learningNotifications = await this.detectLearningOpportunities(context, memory);\n        notifications.push(...learningNotifications);\n        // 3. Verificar deadlines y tareas pendientes\n        const deadlineNotifications = await this.checkDeadlinesAndTasks(context, memory);\n        notifications.push(...deadlineNotifications);\n        // 4. Analizar patrones de estudio\n        const studyPatternNotifications = await this.analyzeStudyPatterns(context, memory);\n        notifications.push(...studyPatternNotifications);\n        // Ordenar por prioridad y enviar\n        const prioritizedNotifications = this.prioritizeNotifications(notifications);\n        // Enviar las notificaciones más importantes\n        for (const notification of prioritizedNotifications.slice(0, 3)){\n            await this.sendNotification(notification, context.userId);\n        }\n        return prioritizedNotifications;\n    }\n    /**\n   * Analiza patrones emocionales y genera notificaciones apropiadas\n   */ static async analyzeEmotionalPatterns(context, memory) {\n        const notifications = [];\n        const recentEmotions = memory.emotionalProfile.recentEmotions || [];\n        const currentMood = memory.emotionalProfile.currentMood;\n        const motivationLevel = memory.emotionalProfile.motivationLevel || 5;\n        // Patrón: Frustración recurrente\n        if (recentEmotions.filter((e)=>e === _emotion_analyzer__WEBPACK_IMPORTED_MODULE_3__.EmotionType.FRUSTRATED).length >= 2) {\n            const searchQuery = {\n                topic: 'técnicas de manejo de la frustración en el estudio',\n                searchType: 'resources',\n                level: 'basic',\n                language: 'es',\n                userId: context.userId,\n                sessionId: context.sessionId\n            };\n            const searchResults = await _academic_search_engine__WEBPACK_IMPORTED_MODULE_1__.AcademicSearchEngine.searchAcademicContent(searchQuery);\n            notifications.push({\n                id: `frustration_${Date.now()}`,\n                type: \"learning_tip\",\n                title: '💡 Gestiona la Frustración Académica',\n                message: 'He notado que has estado experimentando frustración últimamente. Te encontré recursos específicos para convertir esa frustración en motivación.',\n                actionButton: {\n                    text: 'Ver Técnicas',\n                    action: 'show_search_results',\n                    payload: searchResults\n                },\n                searchResults,\n                timestamp: new Date(),\n                priority: \"high\",\n                category: \"emotional\"\n            });\n        }\n        // Patrón: Motivación baja\n        if (motivationLevel < 4) {\n            const motivationalSearch = {\n                topic: 'técnicas de motivación para estudiantes estrategias de estudio',\n                searchType: 'resources',\n                level: 'basic',\n                language: 'es',\n                userId: context.userId,\n                sessionId: context.sessionId\n            };\n            const motivationResults = await _academic_search_engine__WEBPACK_IMPORTED_MODULE_1__.AcademicSearchEngine.searchAcademicContent(motivationalSearch);\n            notifications.push({\n                id: `motivation_${Date.now()}`,\n                type: \"motivational\",\n                title: '🌟 Impulsa tu Motivación',\n                message: 'Tu nivel de motivación ha bajado un poco. He encontrado estrategias probadas para recuperar tu energía académica.',\n                actionButton: {\n                    text: 'Motivarme',\n                    action: 'show_search_results',\n                    payload: motivationResults\n                },\n                searchResults: motivationResults,\n                timestamp: new Date(),\n                priority: \"medium\",\n                category: \"motivational\"\n            });\n        }\n        // Patrón: Confusión persistente\n        if (currentMood === _emotion_analyzer__WEBPACK_IMPORTED_MODULE_3__.EmotionType.CONFUSED && recentEmotions.filter((e)=>e === _emotion_analyzer__WEBPACK_IMPORTED_MODULE_3__.EmotionType.CONFUSED).length >= 2) {\n            const difficultSubjects = memory.preferences?.difficultSubjects || [];\n            const primarySubject = difficultSubjects[0] || 'matemáticas';\n            const clarificationSearch = {\n                topic: `${primarySubject} explicación simple conceptos básicos`,\n                searchType: 'explanation',\n                level: 'basic',\n                subject: primarySubject,\n                language: 'es',\n                userId: context.userId,\n                sessionId: context.sessionId\n            };\n            const clarificationResults = await _academic_search_engine__WEBPACK_IMPORTED_MODULE_1__.AcademicSearchEngine.searchAcademicContent(clarificationSearch);\n            notifications.push({\n                id: `confusion_${Date.now()}`,\n                type: \"academic_resource\",\n                title: '🎯 Aclaremos las Dudas',\n                message: `He detectado confusión recurrente en ${primarySubject}. Te busqué explicaciones especialmente claras para resolver tus dudas.`,\n                actionButton: {\n                    text: 'Aclarar Conceptos',\n                    action: 'show_search_results',\n                    payload: clarificationResults\n                },\n                searchResults: clarificationResults,\n                timestamp: new Date(),\n                priority: \"high\",\n                category: \"academic\"\n            });\n        }\n        return notifications;\n    }\n    /**\n   * Detecta oportunidades de aprendizaje basadas en el progreso\n   */ static async detectLearningOpportunities(context, memory) {\n        const notifications = [];\n        const achievementAreas = memory.emotionalProfile.achievementAreas || [];\n        const difficultSubjects = memory.preferences?.difficultSubjects || [];\n        // Oportunidad: Expandir áreas de fortaleza\n        if (achievementAreas.length > 0) {\n            const strongSubject = achievementAreas[0];\n            const advancedSearch = {\n                topic: `${strongSubject} avanzado proyectos desafíos`,\n                searchType: 'resources',\n                level: 'advanced',\n                subject: strongSubject,\n                language: 'es',\n                userId: context.userId,\n                sessionId: context.sessionId\n            };\n            const advancedResults = await _academic_search_engine__WEBPACK_IMPORTED_MODULE_1__.AcademicSearchEngine.searchAcademicContent(advancedSearch);\n            notifications.push({\n                id: `opportunity_${Date.now()}`,\n                type: \"learning_tip\",\n                title: '🚀 Amplía tus Fortalezas',\n                message: `Dominas bien ${strongSubject}. ¿Te interesa explorar aspectos más avanzados y desafiantes?`,\n                actionButton: {\n                    text: 'Explorar Nivel Avanzado',\n                    action: 'show_search_results',\n                    payload: advancedResults\n                },\n                searchResults: advancedResults,\n                timestamp: new Date(),\n                priority: \"low\",\n                category: \"academic\"\n            });\n        }\n        // Oportunidad: Recursos para materias difíciles\n        if (difficultSubjects.length > 0) {\n            const challengingSubject = difficultSubjects[0];\n            const supportSearch = {\n                topic: `${challengingSubject} tutorial básico paso a paso`,\n                searchType: 'explanation',\n                level: 'basic',\n                subject: challengingSubject,\n                language: 'es',\n                userId: context.userId,\n                sessionId: context.sessionId\n            };\n            const supportResults = await _academic_search_engine__WEBPACK_IMPORTED_MODULE_1__.AcademicSearchEngine.searchAcademicContent(supportSearch);\n            notifications.push({\n                id: `support_${Date.now()}`,\n                type: \"academic_resource\",\n                title: '📚 Recursos para Superar Desafíos',\n                message: `Encontré nuevos recursos para ${challengingSubject} que podrían ayudarte a superar las dificultades.`,\n                actionButton: {\n                    text: 'Ver Recursos',\n                    action: 'show_search_results',\n                    payload: supportResults\n                },\n                searchResults: supportResults,\n                timestamp: new Date(),\n                priority: \"medium\",\n                category: \"academic\"\n            });\n        }\n        return notifications;\n    }\n    /**\n   * Verifica deadlines y tareas pendientes\n   */ static async checkDeadlinesAndTasks(context, memory) {\n        const notifications = [];\n        // Simulación de deadlines próximos (en una implementación real, vendría de calendario)\n        const upcomingDeadlines = context.academicContext?.upcomingDeadlines || [];\n        if (upcomingDeadlines.length > 0) {\n            const deadline = upcomingDeadlines[0];\n            const preparationSearch = {\n                topic: `${deadline} preparación examen guía estudio`,\n                searchType: 'resources',\n                level: 'intermediate',\n                language: 'es',\n                userId: context.userId,\n                sessionId: context.sessionId\n            };\n            const prepResults = await _academic_search_engine__WEBPACK_IMPORTED_MODULE_1__.AcademicSearchEngine.searchAcademicContent(preparationSearch);\n            notifications.push({\n                id: `deadline_${Date.now()}`,\n                type: \"deadline_alert\",\n                title: '⏰ Deadline Próximo',\n                message: `Se acerca tu ${deadline}. Te busqué recursos específicos para una preparación efectiva.`,\n                actionButton: {\n                    text: 'Preparar Examen',\n                    action: 'show_search_results',\n                    payload: prepResults\n                },\n                searchResults: prepResults,\n                timestamp: new Date(),\n                priority: \"urgent\",\n                category: \"organizational\"\n            });\n        }\n        return notifications;\n    }\n    /**\n   * Analiza patrones de estudio para optimizaciones\n   */ static async analyzeStudyPatterns(context, memory) {\n        const notifications = [];\n        const totalTurns = memory.totalTurns || 0;\n        // Patrón: Usuario nuevo - ofrecer orientación\n        if (totalTurns < 5) {\n            const orientationSearch = {\n                topic: 'técnicas de estudio efectivas guía para estudiantes',\n                searchType: 'resources',\n                level: 'basic',\n                language: 'es',\n                userId: context.userId,\n                sessionId: context.sessionId\n            };\n            const orientationResults = await _academic_search_engine__WEBPACK_IMPORTED_MODULE_1__.AcademicSearchEngine.searchAcademicContent(orientationSearch);\n            notifications.push({\n                id: `orientation_${Date.now()}`,\n                type: \"learning_tip\",\n                title: '👋 Optimiza tu Estudio',\n                message: 'Como eres nuevo, te encontré las mejores técnicas de estudio para maximizar tu aprendizaje desde el inicio.',\n                actionButton: {\n                    text: 'Conocer Técnicas',\n                    action: 'show_search_results',\n                    payload: orientationResults\n                },\n                searchResults: orientationResults,\n                timestamp: new Date(),\n                priority: \"medium\",\n                category: \"academic\"\n            });\n        }\n        return notifications;\n    }\n    /**\n   * Prioriza notificaciones según urgencia y relevancia\n   */ static prioritizeNotifications(notifications) {\n        const priorityOrder = {\n            [\"urgent\"]: 4,\n            [\"high\"]: 3,\n            [\"medium\"]: 2,\n            [\"low\"]: 1\n        };\n        return notifications.sort((a, b)=>{\n            const priorityA = priorityOrder[a.priority];\n            const priorityB = priorityOrder[b.priority];\n            if (priorityA !== priorityB) {\n                return priorityB - priorityA;\n            }\n            // Si tienen la misma prioridad, ordenar por timestamp (más reciente primero)\n            return b.timestamp.getTime() - a.timestamp.getTime();\n        });\n    }\n    /**\n   * Envía notificación usando Novu o sistema local\n   */ static async sendNotification(notification, userId) {\n        try {\n            if (this.novu) {\n                // Enviar con Novu\n                await this.novu.trigger('academic-notification', {\n                    to: {\n                        subscriberId: userId\n                    },\n                    payload: {\n                        title: notification.title,\n                        message: notification.message,\n                        actionText: notification.actionButton?.text,\n                        actionPayload: notification.actionButton?.payload,\n                        priority: notification.priority,\n                        category: notification.category,\n                        timestamp: notification.timestamp.toISOString()\n                    }\n                });\n                console.log(`📬 Novu notification sent: ${notification.title}`);\n                return true;\n            } else {\n                // Sistema local de notificaciones\n                console.log(`📱 Local notification: ${notification.title} - ${notification.message}`);\n                this.storeLocalNotification(notification, userId);\n                return true;\n            }\n        } catch (error) {\n            console.error('❌ Failed to send notification:', error);\n            // Fallback: guardar localmente\n            this.storeLocalNotification(notification, userId);\n            return false;\n        }\n    }\n    /**\n   * Almacena notificación localmente cuando Novu no está disponible\n   */ static storeLocalNotification(notification, userId) {\n        // En un sistema real, esto se guardaría en base de datos\n        // Por ahora, usamos almacenamiento en memoria\n        if (!globalThis.localNotifications) {\n            globalThis.localNotifications = new Map();\n        }\n        if (!globalThis.localNotifications.has(userId)) {\n            globalThis.localNotifications.set(userId, []);\n        }\n        const userNotifications = globalThis.localNotifications.get(userId);\n        userNotifications.unshift(notification) // Agregar al inicio\n        ;\n        // Mantener solo las últimas 10 notificaciones\n        if (userNotifications.length > 10) {\n            userNotifications.splice(10);\n        }\n        console.log(`💾 Stored local notification for user ${userId}: ${notification.title}`);\n    }\n    /**\n   * Obtiene notificaciones locales para un usuario\n   */ static getLocalNotifications(userId) {\n        if (!globalThis.localNotifications) {\n            return [];\n        }\n        return globalThis.localNotifications.get(userId) || [];\n    }\n    /**\n   * Limpia notificaciones antiguas\n   */ static clearOldNotifications(userId, olderThanHours = 24) {\n        if (!globalThis.localNotifications) return;\n        const userNotifications = globalThis.localNotifications.get(userId) || [];\n        const cutoffTime = new Date(Date.now() - olderThanHours * 60 * 60 * 1000);\n        const recentNotifications = userNotifications.filter((notification)=>notification.timestamp > cutoffTime);\n        globalThis.localNotifications.set(userId, recentNotifications);\n    }\n    /**\n   * Genera notificación basada en búsqueda académica directa\n   */ static async createAcademicNotification(userId, searchQuery, trigger, customTitle, customMessage) {\n        const searchResults = await _academic_search_engine__WEBPACK_IMPORTED_MODULE_1__.AcademicSearchEngine.searchAcademicContent(searchQuery);\n        const defaultTitles = {\n            [\"knowledge_gap\"]: '🎯 Recursos para tu Consulta',\n            [\"learning_opportunity\"]: '📚 Nueva Oportunidad de Aprendizaje',\n            [\"academic_struggle\"]: '💡 Ayuda Específica Encontrada'\n        };\n        const defaultMessages = {\n            [\"knowledge_gap\"]: `Encontré recursos específicos sobre ${searchQuery.topic} que pueden resolver tus dudas.`,\n            [\"learning_opportunity\"]: `He descubierto material interesante sobre ${searchQuery.topic} que podría expandir tu conocimiento.`,\n            [\"academic_struggle\"]: `Te busqué recursos especializados para superar las dificultades con ${searchQuery.topic}.`\n        };\n        const notification = {\n            id: `academic_${Date.now()}`,\n            type: \"academic_resource\",\n            title: customTitle || defaultTitles[trigger] || '📖 Recursos Académicos',\n            message: customMessage || defaultMessages[trigger] || `Recursos encontrados sobre ${searchQuery.topic}`,\n            actionButton: {\n                text: 'Ver Recursos',\n                action: 'show_search_results',\n                payload: searchResults\n            },\n            searchResults,\n            timestamp: new Date(),\n            priority: \"medium\",\n            category: \"academic\"\n        };\n        // Enviar la notificación\n        await this.sendNotification(notification, userId);\n        return notification;\n    }\n    /**\n   * Obtiene estadísticas del sistema de notificaciones\n   */ static getNotificationStats(userId) {\n        const allNotifications = globalThis.localNotifications || new Map();\n        if (userId) {\n            const userNotifications = allNotifications.get(userId) || [];\n            return {\n                total: userNotifications.length,\n                byType: this.groupByProperty(userNotifications, 'type'),\n                byPriority: this.groupByProperty(userNotifications, 'priority'),\n                byCategory: this.groupByProperty(userNotifications, 'category'),\n                recent: userNotifications.filter((n)=>n.timestamp > new Date(Date.now() - 24 * 60 * 60 * 1000)).length\n            };\n        }\n        // Estadísticas globales\n        let totalNotifications = 0;\n        const globalStats = {\n            byType: {},\n            byPriority: {},\n            byCategory: {}\n        };\n        for (const userNotifications of allNotifications.values()){\n            totalNotifications += userNotifications.length;\n        }\n        return {\n            totalUsers: allNotifications.size,\n            totalNotifications,\n            novuEnabled: this.novu !== null,\n            initialized: this.initialized\n        };\n    }\n    /**\n   * Utilitario para agrupar por propiedad\n   */ static groupByProperty(notifications, property) {\n        return notifications.reduce((acc, notification)=>{\n            const key = notification[property];\n            acc[key] = (acc[key] || 0) + 1;\n            return acc;\n        }, {});\n    }\n}\n// Inicializar el servicio automáticamente\nNotificationService.initialize();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL25vdGlmaWNhdGlvbi1zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxpREFBaUQ7QUFDakQseUVBQXlFO0FBRXhDO0FBQ21FO0FBQ25DO0FBQ2pCO0FBZ0N6QyxpREFBS0k7Ozs7Ozs7OztXQUFBQTtNQVNYO0FBRU0sOENBQUtDOzs7Ozs7OztXQUFBQTtNQVFYO0FBRU0sa0RBQUtDOzs7OztXQUFBQTtNQUtYO0FBRU0sa0RBQUtDOzs7OztXQUFBQTtNQUtYO0FBRU0sTUFBTUM7O2FBQ0lDLE9BQW9COzs7YUFDcEJDLGNBQWM7O0lBRTdCOztHQUVDLEdBQ0QsT0FBT0MsYUFBYTtRQUNsQixJQUFJO1lBQ0YsTUFBTUMsU0FBU0MsUUFBUUMsR0FBRyxDQUFDQyxZQUFZO1lBRXZDLElBQUlILFVBQVVBLE9BQU9JLE1BQU0sR0FBRyxNQUFNSixXQUFXLDRCQUE0QjtnQkFDekUsSUFBSSxDQUFDSCxJQUFJLEdBQUcsSUFBSVQsNENBQUlBLENBQUNZO2dCQUNyQixJQUFJLENBQUNGLFdBQVcsR0FBRztnQkFDbkJPLFFBQVFDLEdBQUcsQ0FBQztnQkFDWkQsUUFBUUMsR0FBRyxDQUFDO1lBQ2QsT0FBTyxJQUFJTixXQUFXLDRCQUE0QjtnQkFDaERLLFFBQVFDLEdBQUcsQ0FBQztnQkFDWkQsUUFBUUMsR0FBRyxDQUFDO2dCQUNaLElBQUksQ0FBQ1IsV0FBVyxHQUFHO1lBQ3JCLE9BQU87Z0JBQ0xPLFFBQVFDLEdBQUcsQ0FBQztnQkFDWkQsUUFBUUMsR0FBRyxDQUFDO2dCQUNaRCxRQUFRQyxHQUFHLENBQUM7Z0JBQ1osSUFBSSxDQUFDUixXQUFXLEdBQUc7WUFDckI7UUFDRixFQUFFLE9BQU9TLE9BQU87WUFDZEYsUUFBUUUsS0FBSyxDQUFDLGdDQUFnQ0E7WUFDOUNGLFFBQVFDLEdBQUcsQ0FBQztZQUNaLElBQUksQ0FBQ1IsV0FBVyxHQUFHO1FBQ3JCO0lBQ0Y7SUFFQTs7R0FFQyxHQUNELGFBQWFVLGlCQUFpQkMsT0FBNEIsRUFBb0M7UUFDNUYsSUFBSSxDQUFDLElBQUksQ0FBQ1gsV0FBVyxFQUFFLElBQUksQ0FBQ0MsVUFBVTtRQUV0QyxNQUFNVyxnQkFBeUMsRUFBRTtRQUNqRCxNQUFNQyxTQUFTckIsMkVBQXlCQSxDQUFDc0IsU0FBUyxDQUFDSCxRQUFRSSxNQUFNLEVBQUVKLFFBQVFLLFNBQVM7UUFFcEYsdURBQXVEO1FBQ3ZELE1BQU1DLHlCQUF5QixNQUFNLElBQUksQ0FBQ0Msd0JBQXdCLENBQUNQLFNBQVNFO1FBQzVFRCxjQUFjTyxJQUFJLElBQUlGO1FBRXRCLDJDQUEyQztRQUMzQyxNQUFNRyx3QkFBd0IsTUFBTSxJQUFJLENBQUNDLDJCQUEyQixDQUFDVixTQUFTRTtRQUM5RUQsY0FBY08sSUFBSSxJQUFJQztRQUV0Qiw2Q0FBNkM7UUFDN0MsTUFBTUUsd0JBQXdCLE1BQU0sSUFBSSxDQUFDQyxzQkFBc0IsQ0FBQ1osU0FBU0U7UUFDekVELGNBQWNPLElBQUksSUFBSUc7UUFFdEIsa0NBQWtDO1FBQ2xDLE1BQU1FLDRCQUE0QixNQUFNLElBQUksQ0FBQ0Msb0JBQW9CLENBQUNkLFNBQVNFO1FBQzNFRCxjQUFjTyxJQUFJLElBQUlLO1FBRXRCLGlDQUFpQztRQUNqQyxNQUFNRSwyQkFBMkIsSUFBSSxDQUFDQyx1QkFBdUIsQ0FBQ2Y7UUFFOUQsNENBQTRDO1FBQzVDLEtBQUssTUFBTWdCLGdCQUFnQkYseUJBQXlCRyxLQUFLLENBQUMsR0FBRyxHQUFJO1lBQy9ELE1BQU0sSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ0YsY0FBY2pCLFFBQVFJLE1BQU07UUFDMUQ7UUFFQSxPQUFPVztJQUNUO0lBRUE7O0dBRUMsR0FDRCxhQUFxQlIseUJBQ25CUCxPQUE0QixFQUM1QkUsTUFBVyxFQUN1QjtRQUNsQyxNQUFNRCxnQkFBeUMsRUFBRTtRQUNqRCxNQUFNbUIsaUJBQWlCbEIsT0FBT21CLGdCQUFnQixDQUFDRCxjQUFjLElBQUksRUFBRTtRQUNuRSxNQUFNRSxjQUFjcEIsT0FBT21CLGdCQUFnQixDQUFDQyxXQUFXO1FBQ3ZELE1BQU1DLGtCQUFrQnJCLE9BQU9tQixnQkFBZ0IsQ0FBQ0UsZUFBZSxJQUFJO1FBRW5FLGlDQUFpQztRQUNqQyxJQUFJSCxlQUFlSSxNQUFNLENBQUNDLENBQUFBLElBQUtBLE1BQU0zQywwREFBV0EsQ0FBQzRDLFVBQVUsRUFBRS9CLE1BQU0sSUFBSSxHQUFHO1lBQ3hFLE1BQU1nQyxjQUFtQztnQkFDdkNDLE9BQU87Z0JBQ1BDLFlBQVk7Z0JBQ1pDLE9BQU87Z0JBQ1BDLFVBQVU7Z0JBQ1YzQixRQUFRSixRQUFRSSxNQUFNO2dCQUN0QkMsV0FBV0wsUUFBUUssU0FBUztZQUM5QjtZQUVBLE1BQU0yQixnQkFBZ0IsTUFBTXBELHlFQUFvQkEsQ0FBQ3FELHFCQUFxQixDQUFDTjtZQUV2RTFCLGNBQWNPLElBQUksQ0FBQztnQkFDakIwQixJQUFJLENBQUMsWUFBWSxFQUFFQyxLQUFLQyxHQUFHLElBQUk7Z0JBQy9CQyxJQUFJO2dCQUNKQyxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxjQUFjO29CQUNaQyxNQUFNO29CQUNOQyxRQUFRO29CQUNSQyxTQUFTWDtnQkFDWDtnQkFDQUE7Z0JBQ0FZLFdBQVcsSUFBSVQ7Z0JBQ2ZVLFFBQVE7Z0JBQ1JDLFFBQVE7WUFDVjtRQUNGO1FBRUEsMEJBQTBCO1FBQzFCLElBQUl2QixrQkFBa0IsR0FBRztZQUN2QixNQUFNd0IscUJBQTBDO2dCQUM5Q25CLE9BQU87Z0JBQ1BDLFlBQVk7Z0JBQ1pDLE9BQU87Z0JBQ1BDLFVBQVU7Z0JBQ1YzQixRQUFRSixRQUFRSSxNQUFNO2dCQUN0QkMsV0FBV0wsUUFBUUssU0FBUztZQUM5QjtZQUVBLE1BQU0yQyxvQkFBb0IsTUFBTXBFLHlFQUFvQkEsQ0FBQ3FELHFCQUFxQixDQUFDYztZQUUzRTlDLGNBQWNPLElBQUksQ0FBQztnQkFDakIwQixJQUFJLENBQUMsV0FBVyxFQUFFQyxLQUFLQyxHQUFHLElBQUk7Z0JBQzlCQyxJQUFJO2dCQUNKQyxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxjQUFjO29CQUNaQyxNQUFNO29CQUNOQyxRQUFRO29CQUNSQyxTQUFTSztnQkFDWDtnQkFDQWhCLGVBQWVnQjtnQkFDZkosV0FBVyxJQUFJVDtnQkFDZlUsUUFBUTtnQkFDUkMsUUFBUTtZQUNWO1FBQ0Y7UUFFQSxnQ0FBZ0M7UUFDaEMsSUFBSXhCLGdCQUFnQnhDLDBEQUFXQSxDQUFDbUUsUUFBUSxJQUNwQzdCLGVBQWVJLE1BQU0sQ0FBQ0MsQ0FBQUEsSUFBS0EsTUFBTTNDLDBEQUFXQSxDQUFDbUUsUUFBUSxFQUFFdEQsTUFBTSxJQUFJLEdBQUc7WUFFdEUsTUFBTXVELG9CQUFvQmhELE9BQU9pRCxXQUFXLEVBQUVELHFCQUFxQixFQUFFO1lBQ3JFLE1BQU1FLGlCQUFpQkYsaUJBQWlCLENBQUMsRUFBRSxJQUFJO1lBRS9DLE1BQU1HLHNCQUEyQztnQkFDL0N6QixPQUFPLEdBQUd3QixlQUFlLHFDQUFxQyxDQUFDO2dCQUMvRHZCLFlBQVk7Z0JBQ1pDLE9BQU87Z0JBQ1B3QixTQUFTRjtnQkFDVHJCLFVBQVU7Z0JBQ1YzQixRQUFRSixRQUFRSSxNQUFNO2dCQUN0QkMsV0FBV0wsUUFBUUssU0FBUztZQUM5QjtZQUVBLE1BQU1rRCx1QkFBdUIsTUFBTTNFLHlFQUFvQkEsQ0FBQ3FELHFCQUFxQixDQUFDb0I7WUFFOUVwRCxjQUFjTyxJQUFJLENBQUM7Z0JBQ2pCMEIsSUFBSSxDQUFDLFVBQVUsRUFBRUMsS0FBS0MsR0FBRyxJQUFJO2dCQUM3QkMsSUFBSTtnQkFDSkMsT0FBTztnQkFDUEMsU0FBUyxDQUFDLHFDQUFxQyxFQUFFYSxlQUFlLHVFQUF1RSxDQUFDO2dCQUN4SVosY0FBYztvQkFDWkMsTUFBTTtvQkFDTkMsUUFBUTtvQkFDUkMsU0FBU1k7Z0JBQ1g7Z0JBQ0F2QixlQUFldUI7Z0JBQ2ZYLFdBQVcsSUFBSVQ7Z0JBQ2ZVLFFBQVE7Z0JBQ1JDLFFBQVE7WUFDVjtRQUNGO1FBRUEsT0FBTzdDO0lBQ1Q7SUFFQTs7R0FFQyxHQUNELGFBQXFCUyw0QkFDbkJWLE9BQTRCLEVBQzVCRSxNQUFXLEVBQ3VCO1FBQ2xDLE1BQU1ELGdCQUF5QyxFQUFFO1FBQ2pELE1BQU11RCxtQkFBbUJ0RCxPQUFPbUIsZ0JBQWdCLENBQUNtQyxnQkFBZ0IsSUFBSSxFQUFFO1FBQ3ZFLE1BQU1OLG9CQUFvQmhELE9BQU9pRCxXQUFXLEVBQUVELHFCQUFxQixFQUFFO1FBRXJFLDJDQUEyQztRQUMzQyxJQUFJTSxpQkFBaUI3RCxNQUFNLEdBQUcsR0FBRztZQUMvQixNQUFNOEQsZ0JBQWdCRCxnQkFBZ0IsQ0FBQyxFQUFFO1lBQ3pDLE1BQU1FLGlCQUFzQztnQkFDMUM5QixPQUFPLEdBQUc2QixjQUFjLDRCQUE0QixDQUFDO2dCQUNyRDVCLFlBQVk7Z0JBQ1pDLE9BQU87Z0JBQ1B3QixTQUFTRztnQkFDVDFCLFVBQVU7Z0JBQ1YzQixRQUFRSixRQUFRSSxNQUFNO2dCQUN0QkMsV0FBV0wsUUFBUUssU0FBUztZQUM5QjtZQUVBLE1BQU1zRCxrQkFBa0IsTUFBTS9FLHlFQUFvQkEsQ0FBQ3FELHFCQUFxQixDQUFDeUI7WUFFekV6RCxjQUFjTyxJQUFJLENBQUM7Z0JBQ2pCMEIsSUFBSSxDQUFDLFlBQVksRUFBRUMsS0FBS0MsR0FBRyxJQUFJO2dCQUMvQkMsSUFBSTtnQkFDSkMsT0FBTztnQkFDUEMsU0FBUyxDQUFDLGFBQWEsRUFBRWtCLGNBQWMsNkRBQTZELENBQUM7Z0JBQ3JHakIsY0FBYztvQkFDWkMsTUFBTTtvQkFDTkMsUUFBUTtvQkFDUkMsU0FBU2dCO2dCQUNYO2dCQUNBM0IsZUFBZTJCO2dCQUNmZixXQUFXLElBQUlUO2dCQUNmVSxRQUFRO2dCQUNSQyxRQUFRO1lBQ1Y7UUFDRjtRQUVBLGdEQUFnRDtRQUNoRCxJQUFJSSxrQkFBa0J2RCxNQUFNLEdBQUcsR0FBRztZQUNoQyxNQUFNaUUscUJBQXFCVixpQkFBaUIsQ0FBQyxFQUFFO1lBQy9DLE1BQU1XLGdCQUFxQztnQkFDekNqQyxPQUFPLEdBQUdnQyxtQkFBbUIsNEJBQTRCLENBQUM7Z0JBQzFEL0IsWUFBWTtnQkFDWkMsT0FBTztnQkFDUHdCLFNBQVNNO2dCQUNUN0IsVUFBVTtnQkFDVjNCLFFBQVFKLFFBQVFJLE1BQU07Z0JBQ3RCQyxXQUFXTCxRQUFRSyxTQUFTO1lBQzlCO1lBRUEsTUFBTXlELGlCQUFpQixNQUFNbEYseUVBQW9CQSxDQUFDcUQscUJBQXFCLENBQUM0QjtZQUV4RTVELGNBQWNPLElBQUksQ0FBQztnQkFDakIwQixJQUFJLENBQUMsUUFBUSxFQUFFQyxLQUFLQyxHQUFHLElBQUk7Z0JBQzNCQyxJQUFJO2dCQUNKQyxPQUFPO2dCQUNQQyxTQUFTLENBQUMsOEJBQThCLEVBQUVxQixtQkFBbUIsaURBQWlELENBQUM7Z0JBQy9HcEIsY0FBYztvQkFDWkMsTUFBTTtvQkFDTkMsUUFBUTtvQkFDUkMsU0FBU21CO2dCQUNYO2dCQUNBOUIsZUFBZThCO2dCQUNmbEIsV0FBVyxJQUFJVDtnQkFDZlUsUUFBUTtnQkFDUkMsUUFBUTtZQUNWO1FBQ0Y7UUFFQSxPQUFPN0M7SUFDVDtJQUVBOztHQUVDLEdBQ0QsYUFBcUJXLHVCQUNuQlosT0FBNEIsRUFDNUJFLE1BQVcsRUFDdUI7UUFDbEMsTUFBTUQsZ0JBQXlDLEVBQUU7UUFFakQsdUZBQXVGO1FBQ3ZGLE1BQU04RCxvQkFBb0IvRCxRQUFRZ0UsZUFBZSxFQUFFRCxxQkFBcUIsRUFBRTtRQUUxRSxJQUFJQSxrQkFBa0JwRSxNQUFNLEdBQUcsR0FBRztZQUNoQyxNQUFNc0UsV0FBV0YsaUJBQWlCLENBQUMsRUFBRTtZQUNyQyxNQUFNRyxvQkFBeUM7Z0JBQzdDdEMsT0FBTyxHQUFHcUMsU0FBUyxnQ0FBZ0MsQ0FBQztnQkFDcERwQyxZQUFZO2dCQUNaQyxPQUFPO2dCQUNQQyxVQUFVO2dCQUNWM0IsUUFBUUosUUFBUUksTUFBTTtnQkFDdEJDLFdBQVdMLFFBQVFLLFNBQVM7WUFDOUI7WUFFQSxNQUFNOEQsY0FBYyxNQUFNdkYseUVBQW9CQSxDQUFDcUQscUJBQXFCLENBQUNpQztZQUVyRWpFLGNBQWNPLElBQUksQ0FBQztnQkFDakIwQixJQUFJLENBQUMsU0FBUyxFQUFFQyxLQUFLQyxHQUFHLElBQUk7Z0JBQzVCQyxJQUFJO2dCQUNKQyxPQUFPO2dCQUNQQyxTQUFTLENBQUMsYUFBYSxFQUFFMEIsU0FBUywrREFBK0QsQ0FBQztnQkFDbEd6QixjQUFjO29CQUNaQyxNQUFNO29CQUNOQyxRQUFRO29CQUNSQyxTQUFTd0I7Z0JBQ1g7Z0JBQ0FuQyxlQUFlbUM7Z0JBQ2Z2QixXQUFXLElBQUlUO2dCQUNmVSxRQUFRO2dCQUNSQyxRQUFRO1lBQ1Y7UUFDRjtRQUVBLE9BQU83QztJQUNUO0lBRUE7O0dBRUMsR0FDRCxhQUFxQmEscUJBQ25CZCxPQUE0QixFQUM1QkUsTUFBVyxFQUN1QjtRQUNsQyxNQUFNRCxnQkFBeUMsRUFBRTtRQUNqRCxNQUFNbUUsYUFBYWxFLE9BQU9rRSxVQUFVLElBQUk7UUFFeEMsOENBQThDO1FBQzlDLElBQUlBLGFBQWEsR0FBRztZQUNsQixNQUFNQyxvQkFBeUM7Z0JBQzdDekMsT0FBTztnQkFDUEMsWUFBWTtnQkFDWkMsT0FBTztnQkFDUEMsVUFBVTtnQkFDVjNCLFFBQVFKLFFBQVFJLE1BQU07Z0JBQ3RCQyxXQUFXTCxRQUFRSyxTQUFTO1lBQzlCO1lBRUEsTUFBTWlFLHFCQUFxQixNQUFNMUYseUVBQW9CQSxDQUFDcUQscUJBQXFCLENBQUNvQztZQUU1RXBFLGNBQWNPLElBQUksQ0FBQztnQkFDakIwQixJQUFJLENBQUMsWUFBWSxFQUFFQyxLQUFLQyxHQUFHLElBQUk7Z0JBQy9CQyxJQUFJO2dCQUNKQyxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxjQUFjO29CQUNaQyxNQUFNO29CQUNOQyxRQUFRO29CQUNSQyxTQUFTMkI7Z0JBQ1g7Z0JBQ0F0QyxlQUFlc0M7Z0JBQ2YxQixXQUFXLElBQUlUO2dCQUNmVSxRQUFRO2dCQUNSQyxRQUFRO1lBQ1Y7UUFDRjtRQUVBLE9BQU83QztJQUNUO0lBRUE7O0dBRUMsR0FDRCxPQUFlZSx3QkFBd0JmLGFBQXNDLEVBQTJCO1FBQ3RHLE1BQU1zRSxnQkFBZ0I7WUFDcEIsVUFBNkIsRUFBRTtZQUMvQixRQUEyQixFQUFFO1lBQzdCLFVBQTZCLEVBQUU7WUFDL0IsT0FBMEIsRUFBRTtRQUM5QjtRQUVBLE9BQU90RSxjQUFjdUUsSUFBSSxDQUFDLENBQUNDLEdBQUdDO1lBQzVCLE1BQU1DLFlBQVlKLGFBQWEsQ0FBQ0UsRUFBRTVCLFFBQVEsQ0FBQztZQUMzQyxNQUFNK0IsWUFBWUwsYUFBYSxDQUFDRyxFQUFFN0IsUUFBUSxDQUFDO1lBRTNDLElBQUk4QixjQUFjQyxXQUFXO2dCQUMzQixPQUFPQSxZQUFZRDtZQUNyQjtZQUVBLDZFQUE2RTtZQUM3RSxPQUFPRCxFQUFFOUIsU0FBUyxDQUFDaUMsT0FBTyxLQUFLSixFQUFFN0IsU0FBUyxDQUFDaUMsT0FBTztRQUNwRDtJQUNGO0lBRUE7O0dBRUMsR0FDRCxhQUFxQjFELGlCQUFpQkYsWUFBbUMsRUFBRWIsTUFBYyxFQUFvQjtRQUMzRyxJQUFJO1lBQ0YsSUFBSSxJQUFJLENBQUNoQixJQUFJLEVBQUU7Z0JBQ2Isa0JBQWtCO2dCQUNsQixNQUFNLElBQUksQ0FBQ0EsSUFBSSxDQUFDMEYsT0FBTyxDQUFDLHlCQUF5QjtvQkFDL0NDLElBQUk7d0JBQ0ZDLGNBQWM1RTtvQkFDaEI7b0JBQ0F1QyxTQUFTO3dCQUNQTCxPQUFPckIsYUFBYXFCLEtBQUs7d0JBQ3pCQyxTQUFTdEIsYUFBYXNCLE9BQU87d0JBQzdCMEMsWUFBWWhFLGFBQWF1QixZQUFZLEVBQUVDO3dCQUN2Q3lDLGVBQWVqRSxhQUFhdUIsWUFBWSxFQUFFRzt3QkFDMUNFLFVBQVU1QixhQUFhNEIsUUFBUTt3QkFDL0JDLFVBQVU3QixhQUFhNkIsUUFBUTt3QkFDL0JGLFdBQVczQixhQUFhMkIsU0FBUyxDQUFDdUMsV0FBVztvQkFDL0M7Z0JBQ0Y7Z0JBRUF2RixRQUFRQyxHQUFHLENBQUMsQ0FBQywyQkFBMkIsRUFBRW9CLGFBQWFxQixLQUFLLEVBQUU7Z0JBQzlELE9BQU87WUFDVCxPQUFPO2dCQUNMLGtDQUFrQztnQkFDbEMxQyxRQUFRQyxHQUFHLENBQUMsQ0FBQyx1QkFBdUIsRUFBRW9CLGFBQWFxQixLQUFLLENBQUMsR0FBRyxFQUFFckIsYUFBYXNCLE9BQU8sRUFBRTtnQkFDcEYsSUFBSSxDQUFDNkMsc0JBQXNCLENBQUNuRSxjQUFjYjtnQkFDMUMsT0FBTztZQUNUO1FBQ0YsRUFBRSxPQUFPTixPQUFPO1lBQ2RGLFFBQVFFLEtBQUssQ0FBQyxrQ0FBa0NBO1lBQ2hELCtCQUErQjtZQUMvQixJQUFJLENBQUNzRixzQkFBc0IsQ0FBQ25FLGNBQWNiO1lBQzFDLE9BQU87UUFDVDtJQUNGO0lBRUE7O0dBRUMsR0FDRCxPQUFlZ0YsdUJBQXVCbkUsWUFBbUMsRUFBRWIsTUFBYyxFQUFFO1FBQ3pGLHlEQUF5RDtRQUN6RCw4Q0FBOEM7UUFDOUMsSUFBSSxDQUFDaUYsV0FBV0Msa0JBQWtCLEVBQUU7WUFDbENELFdBQVdDLGtCQUFrQixHQUFHLElBQUlDO1FBQ3RDO1FBRUEsSUFBSSxDQUFDRixXQUFXQyxrQkFBa0IsQ0FBQ0UsR0FBRyxDQUFDcEYsU0FBUztZQUM5Q2lGLFdBQVdDLGtCQUFrQixDQUFDRyxHQUFHLENBQUNyRixRQUFRLEVBQUU7UUFDOUM7UUFFQSxNQUFNc0Ysb0JBQW9CTCxXQUFXQyxrQkFBa0IsQ0FBQ0ssR0FBRyxDQUFDdkY7UUFDNURzRixrQkFBa0JFLE9BQU8sQ0FBQzNFLGNBQWMsb0JBQW9COztRQUU1RCw4Q0FBOEM7UUFDOUMsSUFBSXlFLGtCQUFrQi9GLE1BQU0sR0FBRyxJQUFJO1lBQ2pDK0Ysa0JBQWtCRyxNQUFNLENBQUM7UUFDM0I7UUFFQWpHLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLHNDQUFzQyxFQUFFTyxPQUFPLEVBQUUsRUFBRWEsYUFBYXFCLEtBQUssRUFBRTtJQUN0RjtJQUVBOztHQUVDLEdBQ0QsT0FBT3dELHNCQUFzQjFGLE1BQWMsRUFBMkI7UUFDcEUsSUFBSSxDQUFDaUYsV0FBV0Msa0JBQWtCLEVBQUU7WUFDbEMsT0FBTyxFQUFFO1FBQ1g7UUFFQSxPQUFPRCxXQUFXQyxrQkFBa0IsQ0FBQ0ssR0FBRyxDQUFDdkYsV0FBVyxFQUFFO0lBQ3hEO0lBRUE7O0dBRUMsR0FDRCxPQUFPMkYsc0JBQXNCM0YsTUFBYyxFQUFFNEYsaUJBQXlCLEVBQUUsRUFBRTtRQUN4RSxJQUFJLENBQUNYLFdBQVdDLGtCQUFrQixFQUFFO1FBRXBDLE1BQU1JLG9CQUFvQkwsV0FBV0Msa0JBQWtCLENBQUNLLEdBQUcsQ0FBQ3ZGLFdBQVcsRUFBRTtRQUN6RSxNQUFNNkYsYUFBYSxJQUFJOUQsS0FBS0EsS0FBS0MsR0FBRyxLQUFNNEQsaUJBQWlCLEtBQUssS0FBSztRQUVyRSxNQUFNRSxzQkFBc0JSLGtCQUFrQmxFLE1BQU0sQ0FDbERQLENBQUFBLGVBQWdCQSxhQUFhMkIsU0FBUyxHQUFHcUQ7UUFHM0NaLFdBQVdDLGtCQUFrQixDQUFDRyxHQUFHLENBQUNyRixRQUFROEY7SUFDNUM7SUFFQTs7R0FFQyxHQUNELGFBQWFDLDJCQUNYL0YsTUFBYyxFQUNkdUIsV0FBZ0MsRUFDaENtRCxPQUE0QixFQUM1QnNCLFdBQW9CLEVBQ3BCQyxhQUFzQixFQUNVO1FBQ2hDLE1BQU1yRSxnQkFBZ0IsTUFBTXBELHlFQUFvQkEsQ0FBQ3FELHFCQUFxQixDQUFDTjtRQUV2RSxNQUFNMkUsZ0JBQWdCO1lBQ3BCLGlCQUFtQyxFQUFFO1lBQ3JDLHdCQUEwQyxFQUFFO1lBQzVDLHFCQUF1QyxFQUFFO1FBQzNDO1FBRUEsTUFBTUMsa0JBQWtCO1lBQ3RCLGlCQUFtQyxFQUFFLENBQUMsb0NBQW9DLEVBQUU1RSxZQUFZQyxLQUFLLENBQUMsK0JBQStCLENBQUM7WUFDOUgsd0JBQTBDLEVBQUUsQ0FBQywwQ0FBMEMsRUFBRUQsWUFBWUMsS0FBSyxDQUFDLHFDQUFxQyxDQUFDO1lBQ2pKLHFCQUF1QyxFQUFFLENBQUMsb0VBQW9FLEVBQUVELFlBQVlDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDdEk7UUFFQSxNQUFNWCxlQUFzQztZQUMxQ2lCLElBQUksQ0FBQyxTQUFTLEVBQUVDLEtBQUtDLEdBQUcsSUFBSTtZQUM1QkMsSUFBSTtZQUNKQyxPQUFPOEQsZUFBZUUsYUFBYSxDQUFDeEIsUUFBUSxJQUFJO1lBQ2hEdkMsU0FBUzhELGlCQUFpQkUsZUFBZSxDQUFDekIsUUFBUSxJQUFJLENBQUMsMkJBQTJCLEVBQUVuRCxZQUFZQyxLQUFLLEVBQUU7WUFDdkdZLGNBQWM7Z0JBQ1pDLE1BQU07Z0JBQ05DLFFBQVE7Z0JBQ1JDLFNBQVNYO1lBQ1g7WUFDQUE7WUFDQVksV0FBVyxJQUFJVDtZQUNmVSxRQUFRO1lBQ1JDLFFBQVE7UUFDVjtRQUVBLHlCQUF5QjtRQUN6QixNQUFNLElBQUksQ0FBQzNCLGdCQUFnQixDQUFDRixjQUFjYjtRQUUxQyxPQUFPYTtJQUNUO0lBRUE7O0dBRUMsR0FDRCxPQUFPdUYscUJBQXFCcEcsTUFBZSxFQUFFO1FBQzNDLE1BQU1xRyxtQkFBbUJwQixXQUFXQyxrQkFBa0IsSUFBSSxJQUFJQztRQUU5RCxJQUFJbkYsUUFBUTtZQUNWLE1BQU1zRixvQkFBb0JlLGlCQUFpQmQsR0FBRyxDQUFDdkYsV0FBVyxFQUFFO1lBQzVELE9BQU87Z0JBQ0xzRyxPQUFPaEIsa0JBQWtCL0YsTUFBTTtnQkFDL0JnSCxRQUFRLElBQUksQ0FBQ0MsZUFBZSxDQUFDbEIsbUJBQW1CO2dCQUNoRG1CLFlBQVksSUFBSSxDQUFDRCxlQUFlLENBQUNsQixtQkFBbUI7Z0JBQ3BEb0IsWUFBWSxJQUFJLENBQUNGLGVBQWUsQ0FBQ2xCLG1CQUFtQjtnQkFDcERxQixRQUFRckIsa0JBQWtCbEUsTUFBTSxDQUFDd0YsQ0FBQUEsSUFDL0JBLEVBQUVwRSxTQUFTLEdBQUcsSUFBSVQsS0FBS0EsS0FBS0MsR0FBRyxLQUFLLEtBQUssS0FBSyxLQUFLLE9BQ25EekMsTUFBTTtZQUNWO1FBQ0Y7UUFFQSx3QkFBd0I7UUFDeEIsSUFBSXNILHFCQUFxQjtRQUN6QixNQUFNQyxjQUFjO1lBQUVQLFFBQVEsQ0FBQztZQUFHRSxZQUFZLENBQUM7WUFBR0MsWUFBWSxDQUFDO1FBQUU7UUFFakUsS0FBSyxNQUFNcEIscUJBQXFCZSxpQkFBaUJVLE1BQU0sR0FBSTtZQUN6REYsc0JBQXNCdkIsa0JBQWtCL0YsTUFBTTtRQUNoRDtRQUVBLE9BQU87WUFDTHlILFlBQVlYLGlCQUFpQlksSUFBSTtZQUNqQ0o7WUFDQUssYUFBYSxJQUFJLENBQUNsSSxJQUFJLEtBQUs7WUFDM0JDLGFBQWEsSUFBSSxDQUFDQSxXQUFXO1FBQy9CO0lBQ0Y7SUFFQTs7R0FFQyxHQUNELE9BQWV1SCxnQkFBZ0IzRyxhQUFzQyxFQUFFc0gsUUFBcUMsRUFBRTtRQUM1RyxPQUFPdEgsY0FBY3VILE1BQU0sQ0FBQyxDQUFDQyxLQUFLeEc7WUFDaEMsTUFBTXlHLE1BQU16RyxZQUFZLENBQUNzRyxTQUFTO1lBQ2xDRSxHQUFHLENBQUNDLElBQUksR0FBRyxDQUFDRCxHQUFHLENBQUNDLElBQUksSUFBSSxLQUFLO1lBQzdCLE9BQU9EO1FBQ1QsR0FBRyxDQUFDO0lBQ047QUFDRjtBQUVBLDBDQUEwQztBQUMxQ3RJLG9CQUFvQkcsVUFBVSIsInNvdXJjZXMiOlsiL1VzZXJzL3JvZHJpZ29kaWJlcm5hcmRvMzNnbWFpbC5jb20vRG9jdW1lbnRzL0FwcCBEZXZlbG9wbWVudCBQcm95ZWN0cy9JbnRlbGxlZ28gUGxhdGZvcm0vc3JjL2xpYi9ub3RpZmljYXRpb24tc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTaXN0ZW1hIGRlIE5vdGlmaWNhY2lvbmVzIFByb2FjdGl2YXMgcGFyYSBTYXJhXG4vLyBJbnRlZ3JhIGLDunNxdWVkYSBhY2Fkw6ltaWNhIGNvbiBub3RpZmljYWNpb25lcyBpbnRlbGlnZW50ZXMgdXNhbmRvIE5vdnVcblxuaW1wb3J0IHsgTm92dSB9IGZyb20gJ0Bub3Z1L25vZGUnXG5pbXBvcnQgeyBBY2FkZW1pY1NlYXJjaEVuZ2luZSwgQWNhZGVtaWNTZWFyY2hRdWVyeSwgU2VhcmNoQW5hbHlzaXMgfSBmcm9tICcuL2FjYWRlbWljLXNlYXJjaC1lbmdpbmUnXG5pbXBvcnQgeyBDb252ZXJzYXRpb25NZW1vcnlNYW5hZ2VyIH0gZnJvbSAnLi9jb252ZXJzYXRpb24tbWVtb3J5J1xuaW1wb3J0IHsgRW1vdGlvblR5cGUgfSBmcm9tICcuL2Vtb3Rpb24tYW5hbHl6ZXInXG5pbXBvcnQgeyBDb252ZXJzYXRpb25Nb2RlIH0gZnJvbSAnLi9hZHZhbmNlZC1pbnRlbnQtZW5naW5lJ1xuXG5leHBvcnQgaW50ZXJmYWNlIE5vdGlmaWNhdGlvbkNvbnRleHQge1xuICB1c2VySWQ6IHN0cmluZ1xuICBzZXNzaW9uSWQ/OiBzdHJpbmdcbiAgdHJpZ2dlcjogTm90aWZpY2F0aW9uVHJpZ2dlclxuICBwcmlvcml0eTogTm90aWZpY2F0aW9uUHJpb3JpdHlcbiAgYWNhZGVtaWNDb250ZXh0Pzoge1xuICAgIHN1YmplY3Q/OiBzdHJpbmdcbiAgICBkaWZmaWN1bHR5PzogJ3N0cnVnZ2xpbmcnIHwgJ3Byb2dyZXNzaW5nJyB8ICdleGNlbGxpbmcnXG4gICAgdXBjb21pbmdEZWFkbGluZXM/OiBzdHJpbmdbXVxuICAgIHJlY2VudEFjdGl2aXR5Pzogc3RyaW5nW11cbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb2FjdGl2ZU5vdGlmaWNhdGlvbiB7XG4gIGlkOiBzdHJpbmdcbiAgdHlwZTogTm90aWZpY2F0aW9uVHlwZVxuICB0aXRsZTogc3RyaW5nXG4gIG1lc3NhZ2U6IHN0cmluZ1xuICBhY3Rpb25CdXR0b24/OiB7XG4gICAgdGV4dDogc3RyaW5nXG4gICAgYWN0aW9uOiBzdHJpbmdcbiAgICBwYXlsb2FkPzogYW55XG4gIH1cbiAgc2VhcmNoUmVzdWx0cz86IFNlYXJjaEFuYWx5c2lzXG4gIHRpbWVzdGFtcDogRGF0ZVxuICBwcmlvcml0eTogTm90aWZpY2F0aW9uUHJpb3JpdHlcbiAgY2F0ZWdvcnk6IE5vdGlmaWNhdGlvbkNhdGVnb3J5XG59XG5cbmV4cG9ydCBlbnVtIE5vdGlmaWNhdGlvblRyaWdnZXIge1xuICBFTU9USU9OQUxfUEFUVEVSTiA9ICdlbW90aW9uYWxfcGF0dGVybicsXG4gIEFDQURFTUlDX1NUUlVHR0xFID0gJ2FjYWRlbWljX3N0cnVnZ2xlJyxcbiAgTEVBUk5JTkdfT1BQT1JUVU5JVFkgPSAnbGVhcm5pbmdfb3Bwb3J0dW5pdHknLFxuICBERUFETElORV9BUFBST0FDSElORyA9ICdkZWFkbGluZV9hcHByb2FjaGluZycsXG4gIFBST0dSRVNTX01JTEVTVE9ORSA9ICdwcm9ncmVzc19taWxlc3RvbmUnLFxuICBLTk9XTEVER0VfR0FQID0gJ2tub3dsZWRnZV9nYXAnLFxuICBNT1RJVkFUSU9OX0RST1AgPSAnbW90aXZhdGlvbl9kcm9wJyxcbiAgU1RVRFlfUEFUVEVSTiA9ICdzdHVkeV9wYXR0ZXJuJ1xufVxuXG5leHBvcnQgZW51bSBOb3RpZmljYXRpb25UeXBlIHtcbiAgQUNBREVNSUNfUkVTT1VSQ0UgPSAnYWNhZGVtaWNfcmVzb3VyY2UnLFxuICBTVFVEWV9SRU1JTkRFUiA9ICdzdHVkeV9yZW1pbmRlcicsXG4gIE1PVElWQVRJT05BTCA9ICdtb3RpdmF0aW9uYWwnLFxuICBQUk9HUkVTU19VUERBVEUgPSAncHJvZ3Jlc3NfdXBkYXRlJyxcbiAgTEVBUk5JTkdfVElQID0gJ2xlYXJuaW5nX3RpcCcsXG4gIERFQURMSU5FX0FMRVJUID0gJ2RlYWRsaW5lX2FsZXJ0JyxcbiAgQUNISUVWRU1FTlQgPSAnYWNoaWV2ZW1lbnQnXG59XG5cbmV4cG9ydCBlbnVtIE5vdGlmaWNhdGlvblByaW9yaXR5IHtcbiAgTE9XID0gJ2xvdycsXG4gIE1FRElVTSA9ICdtZWRpdW0nLFxuICBISUdIID0gJ2hpZ2gnLFxuICBVUkdFTlQgPSAndXJnZW50J1xufVxuXG5leHBvcnQgZW51bSBOb3RpZmljYXRpb25DYXRlZ29yeSB7XG4gIEFDQURFTUlDID0gJ2FjYWRlbWljJyxcbiAgRU1PVElPTkFMID0gJ2Vtb3Rpb25hbCcsXG4gIE9SR0FOSVpBVElPTkFMID0gJ29yZ2FuaXphdGlvbmFsJyxcbiAgTU9USVZBVElPTkFMID0gJ21vdGl2YXRpb25hbCdcbn1cblxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvblNlcnZpY2Uge1xuICBwcml2YXRlIHN0YXRpYyBub3Z1OiBOb3Z1IHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSBzdGF0aWMgaW5pdGlhbGl6ZWQgPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBJbmljaWFsaXphIGVsIHNlcnZpY2lvIGRlIG5vdGlmaWNhY2lvbmVzXG4gICAqL1xuICBzdGF0aWMgaW5pdGlhbGl6ZSgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuTk9WVV9BUElfS0VZXG4gICAgICBcbiAgICAgIGlmIChhcGlLZXkgJiYgYXBpS2V5Lmxlbmd0aCA+IDEwICYmIGFwaUtleSAhPT0gJ3R1LWNsYXZlLXNlY3JldGEtZGUtbm92dScpIHtcbiAgICAgICAgdGhpcy5ub3Z1ID0gbmV3IE5vdnUoYXBpS2V5KVxuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZVxuICAgICAgICBjb25zb2xlLmxvZygn4pyFIE5vdnUgbm90aWZpY2F0aW9uIHNlcnZpY2UgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5JylcbiAgICAgICAgY29uc29sZS5sb2coJ/Cfk7EgUHVzaCBub3RpZmljYXRpb25zLCBlbWFpbCwgYW5kIFNNUyBhcmUgbm93IGF2YWlsYWJsZScpXG4gICAgICB9IGVsc2UgaWYgKGFwaUtleSA9PT0gJ3R1LWNsYXZlLXNlY3JldGEtZGUtbm92dScpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KaoO+4jyAgUGxhY2Vob2xkZXIgQVBJIGtleSBkZXRlY3RlZC4gUGxlYXNlIGNvbmZpZ3VyZSBhIHJlYWwgTm92dSBBUEkga2V5LicpXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5OWIEZvbGxvdyB0aGUgdHV0b3JpYWwgaW4gQ0xBVURFLm1kIHRvIGdldCB5b3VyIEFQSSBrZXknKVxuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KaoO+4jyAgTm92dSBBUEkga2V5IG5vdCBmb3VuZCwgdXNpbmcgbG9jYWwgbm90aWZpY2F0aW9uIHN5c3RlbScpXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5KhIFRvIGVuYWJsZSBwdXNoIG5vdGlmaWNhdGlvbnMsIGNvbmZpZ3VyZSBOT1ZVX0FQSV9LRVkgaW4gLmVudicpXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5OWIFNlZSBDTEFVREUubWQgZm9yIHNldHVwIGluc3RydWN0aW9ucycpXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBOb3Z1OicsIGVycm9yKVxuICAgICAgY29uc29sZS5sb2coJ/CflIQgRmFsbGluZyBiYWNrIHRvIGxvY2FsIG5vdGlmaWNhdGlvbiBzeXN0ZW0nKVxuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQW5hbGl6YSBlbCBjb250ZXh0byBkZWwgZXN0dWRpYW50ZSB5IGdlbmVyYSBub3RpZmljYWNpb25lcyBwcm9hY3RpdmFzIHJlbGV2YW50ZXNcbiAgICovXG4gIHN0YXRpYyBhc3luYyBhbmFseXplQW5kTm90aWZ5KGNvbnRleHQ6IE5vdGlmaWNhdGlvbkNvbnRleHQpOiBQcm9taXNlPFByb2FjdGl2ZU5vdGlmaWNhdGlvbltdPiB7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB0aGlzLmluaXRpYWxpemUoKVxuXG4gICAgY29uc3Qgbm90aWZpY2F0aW9uczogUHJvYWN0aXZlTm90aWZpY2F0aW9uW10gPSBbXVxuICAgIGNvbnN0IG1lbW9yeSA9IENvbnZlcnNhdGlvbk1lbW9yeU1hbmFnZXIuZ2V0TWVtb3J5KGNvbnRleHQudXNlcklkLCBjb250ZXh0LnNlc3Npb25JZClcblxuICAgIC8vIDEuIEFuYWxpemFyIHBhdHJvbmVzIGVtb2Npb25hbGVzIHBhcmEgbm90aWZpY2FjaW9uZXNcbiAgICBjb25zdCBlbW90aW9uYWxOb3RpZmljYXRpb25zID0gYXdhaXQgdGhpcy5hbmFseXplRW1vdGlvbmFsUGF0dGVybnMoY29udGV4dCwgbWVtb3J5KVxuICAgIG5vdGlmaWNhdGlvbnMucHVzaCguLi5lbW90aW9uYWxOb3RpZmljYXRpb25zKVxuXG4gICAgLy8gMi4gRGV0ZWN0YXIgb3BvcnR1bmlkYWRlcyBkZSBhcHJlbmRpemFqZVxuICAgIGNvbnN0IGxlYXJuaW5nTm90aWZpY2F0aW9ucyA9IGF3YWl0IHRoaXMuZGV0ZWN0TGVhcm5pbmdPcHBvcnR1bml0aWVzKGNvbnRleHQsIG1lbW9yeSlcbiAgICBub3RpZmljYXRpb25zLnB1c2goLi4ubGVhcm5pbmdOb3RpZmljYXRpb25zKVxuXG4gICAgLy8gMy4gVmVyaWZpY2FyIGRlYWRsaW5lcyB5IHRhcmVhcyBwZW5kaWVudGVzXG4gICAgY29uc3QgZGVhZGxpbmVOb3RpZmljYXRpb25zID0gYXdhaXQgdGhpcy5jaGVja0RlYWRsaW5lc0FuZFRhc2tzKGNvbnRleHQsIG1lbW9yeSlcbiAgICBub3RpZmljYXRpb25zLnB1c2goLi4uZGVhZGxpbmVOb3RpZmljYXRpb25zKVxuXG4gICAgLy8gNC4gQW5hbGl6YXIgcGF0cm9uZXMgZGUgZXN0dWRpb1xuICAgIGNvbnN0IHN0dWR5UGF0dGVybk5vdGlmaWNhdGlvbnMgPSBhd2FpdCB0aGlzLmFuYWx5emVTdHVkeVBhdHRlcm5zKGNvbnRleHQsIG1lbW9yeSlcbiAgICBub3RpZmljYXRpb25zLnB1c2goLi4uc3R1ZHlQYXR0ZXJuTm90aWZpY2F0aW9ucylcblxuICAgIC8vIE9yZGVuYXIgcG9yIHByaW9yaWRhZCB5IGVudmlhclxuICAgIGNvbnN0IHByaW9yaXRpemVkTm90aWZpY2F0aW9ucyA9IHRoaXMucHJpb3JpdGl6ZU5vdGlmaWNhdGlvbnMobm90aWZpY2F0aW9ucylcbiAgICBcbiAgICAvLyBFbnZpYXIgbGFzIG5vdGlmaWNhY2lvbmVzIG3DoXMgaW1wb3J0YW50ZXNcbiAgICBmb3IgKGNvbnN0IG5vdGlmaWNhdGlvbiBvZiBwcmlvcml0aXplZE5vdGlmaWNhdGlvbnMuc2xpY2UoMCwgMykpIHtcbiAgICAgIGF3YWl0IHRoaXMuc2VuZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIGNvbnRleHQudXNlcklkKVxuICAgIH1cblxuICAgIHJldHVybiBwcmlvcml0aXplZE5vdGlmaWNhdGlvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmFsaXphIHBhdHJvbmVzIGVtb2Npb25hbGVzIHkgZ2VuZXJhIG5vdGlmaWNhY2lvbmVzIGFwcm9waWFkYXNcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIGFuYWx5emVFbW90aW9uYWxQYXR0ZXJucyhcbiAgICBjb250ZXh0OiBOb3RpZmljYXRpb25Db250ZXh0LCBcbiAgICBtZW1vcnk6IGFueVxuICApOiBQcm9taXNlPFByb2FjdGl2ZU5vdGlmaWNhdGlvbltdPiB7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uczogUHJvYWN0aXZlTm90aWZpY2F0aW9uW10gPSBbXVxuICAgIGNvbnN0IHJlY2VudEVtb3Rpb25zID0gbWVtb3J5LmVtb3Rpb25hbFByb2ZpbGUucmVjZW50RW1vdGlvbnMgfHwgW11cbiAgICBjb25zdCBjdXJyZW50TW9vZCA9IG1lbW9yeS5lbW90aW9uYWxQcm9maWxlLmN1cnJlbnRNb29kXG4gICAgY29uc3QgbW90aXZhdGlvbkxldmVsID0gbWVtb3J5LmVtb3Rpb25hbFByb2ZpbGUubW90aXZhdGlvbkxldmVsIHx8IDVcblxuICAgIC8vIFBhdHLDs246IEZydXN0cmFjacOzbiByZWN1cnJlbnRlXG4gICAgaWYgKHJlY2VudEVtb3Rpb25zLmZpbHRlcihlID0+IGUgPT09IEVtb3Rpb25UeXBlLkZSVVNUUkFURUQpLmxlbmd0aCA+PSAyKSB7XG4gICAgICBjb25zdCBzZWFyY2hRdWVyeTogQWNhZGVtaWNTZWFyY2hRdWVyeSA9IHtcbiAgICAgICAgdG9waWM6ICd0w6ljbmljYXMgZGUgbWFuZWpvIGRlIGxhIGZydXN0cmFjacOzbiBlbiBlbCBlc3R1ZGlvJyxcbiAgICAgICAgc2VhcmNoVHlwZTogJ3Jlc291cmNlcycsXG4gICAgICAgIGxldmVsOiAnYmFzaWMnLFxuICAgICAgICBsYW5ndWFnZTogJ2VzJyxcbiAgICAgICAgdXNlcklkOiBjb250ZXh0LnVzZXJJZCxcbiAgICAgICAgc2Vzc2lvbklkOiBjb250ZXh0LnNlc3Npb25JZFxuICAgICAgfVxuXG4gICAgICBjb25zdCBzZWFyY2hSZXN1bHRzID0gYXdhaXQgQWNhZGVtaWNTZWFyY2hFbmdpbmUuc2VhcmNoQWNhZGVtaWNDb250ZW50KHNlYXJjaFF1ZXJ5KVxuXG4gICAgICBub3RpZmljYXRpb25zLnB1c2goe1xuICAgICAgICBpZDogYGZydXN0cmF0aW9uXyR7RGF0ZS5ub3coKX1gLFxuICAgICAgICB0eXBlOiBOb3RpZmljYXRpb25UeXBlLkxFQVJOSU5HX1RJUCxcbiAgICAgICAgdGl0bGU6ICfwn5KhIEdlc3Rpb25hIGxhIEZydXN0cmFjacOzbiBBY2Fkw6ltaWNhJyxcbiAgICAgICAgbWVzc2FnZTogJ0hlIG5vdGFkbyBxdWUgaGFzIGVzdGFkbyBleHBlcmltZW50YW5kbyBmcnVzdHJhY2nDs24gw7psdGltYW1lbnRlLiBUZSBlbmNvbnRyw6kgcmVjdXJzb3MgZXNwZWPDrWZpY29zIHBhcmEgY29udmVydGlyIGVzYSBmcnVzdHJhY2nDs24gZW4gbW90aXZhY2nDs24uJyxcbiAgICAgICAgYWN0aW9uQnV0dG9uOiB7XG4gICAgICAgICAgdGV4dDogJ1ZlciBUw6ljbmljYXMnLFxuICAgICAgICAgIGFjdGlvbjogJ3Nob3dfc2VhcmNoX3Jlc3VsdHMnLFxuICAgICAgICAgIHBheWxvYWQ6IHNlYXJjaFJlc3VsdHNcbiAgICAgICAgfSxcbiAgICAgICAgc2VhcmNoUmVzdWx0cyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICBwcmlvcml0eTogTm90aWZpY2F0aW9uUHJpb3JpdHkuSElHSCxcbiAgICAgICAgY2F0ZWdvcnk6IE5vdGlmaWNhdGlvbkNhdGVnb3J5LkVNT1RJT05BTFxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBQYXRyw7NuOiBNb3RpdmFjacOzbiBiYWphXG4gICAgaWYgKG1vdGl2YXRpb25MZXZlbCA8IDQpIHtcbiAgICAgIGNvbnN0IG1vdGl2YXRpb25hbFNlYXJjaDogQWNhZGVtaWNTZWFyY2hRdWVyeSA9IHtcbiAgICAgICAgdG9waWM6ICd0w6ljbmljYXMgZGUgbW90aXZhY2nDs24gcGFyYSBlc3R1ZGlhbnRlcyBlc3RyYXRlZ2lhcyBkZSBlc3R1ZGlvJyxcbiAgICAgICAgc2VhcmNoVHlwZTogJ3Jlc291cmNlcycsXG4gICAgICAgIGxldmVsOiAnYmFzaWMnLFxuICAgICAgICBsYW5ndWFnZTogJ2VzJyxcbiAgICAgICAgdXNlcklkOiBjb250ZXh0LnVzZXJJZCxcbiAgICAgICAgc2Vzc2lvbklkOiBjb250ZXh0LnNlc3Npb25JZFxuICAgICAgfVxuXG4gICAgICBjb25zdCBtb3RpdmF0aW9uUmVzdWx0cyA9IGF3YWl0IEFjYWRlbWljU2VhcmNoRW5naW5lLnNlYXJjaEFjYWRlbWljQ29udGVudChtb3RpdmF0aW9uYWxTZWFyY2gpXG5cbiAgICAgIG5vdGlmaWNhdGlvbnMucHVzaCh7XG4gICAgICAgIGlkOiBgbW90aXZhdGlvbl8ke0RhdGUubm93KCl9YCxcbiAgICAgICAgdHlwZTogTm90aWZpY2F0aW9uVHlwZS5NT1RJVkFUSU9OQUwsXG4gICAgICAgIHRpdGxlOiAn8J+MnyBJbXB1bHNhIHR1IE1vdGl2YWNpw7NuJyxcbiAgICAgICAgbWVzc2FnZTogJ1R1IG5pdmVsIGRlIG1vdGl2YWNpw7NuIGhhIGJhamFkbyB1biBwb2NvLiBIZSBlbmNvbnRyYWRvIGVzdHJhdGVnaWFzIHByb2JhZGFzIHBhcmEgcmVjdXBlcmFyIHR1IGVuZXJnw61hIGFjYWTDqW1pY2EuJyxcbiAgICAgICAgYWN0aW9uQnV0dG9uOiB7XG4gICAgICAgICAgdGV4dDogJ01vdGl2YXJtZScsXG4gICAgICAgICAgYWN0aW9uOiAnc2hvd19zZWFyY2hfcmVzdWx0cycsXG4gICAgICAgICAgcGF5bG9hZDogbW90aXZhdGlvblJlc3VsdHNcbiAgICAgICAgfSxcbiAgICAgICAgc2VhcmNoUmVzdWx0czogbW90aXZhdGlvblJlc3VsdHMsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgcHJpb3JpdHk6IE5vdGlmaWNhdGlvblByaW9yaXR5Lk1FRElVTSxcbiAgICAgICAgY2F0ZWdvcnk6IE5vdGlmaWNhdGlvbkNhdGVnb3J5Lk1PVElWQVRJT05BTFxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBQYXRyw7NuOiBDb25mdXNpw7NuIHBlcnNpc3RlbnRlXG4gICAgaWYgKGN1cnJlbnRNb29kID09PSBFbW90aW9uVHlwZS5DT05GVVNFRCAmJiBcbiAgICAgICAgcmVjZW50RW1vdGlvbnMuZmlsdGVyKGUgPT4gZSA9PT0gRW1vdGlvblR5cGUuQ09ORlVTRUQpLmxlbmd0aCA+PSAyKSB7XG4gICAgICBcbiAgICAgIGNvbnN0IGRpZmZpY3VsdFN1YmplY3RzID0gbWVtb3J5LnByZWZlcmVuY2VzPy5kaWZmaWN1bHRTdWJqZWN0cyB8fCBbXVxuICAgICAgY29uc3QgcHJpbWFyeVN1YmplY3QgPSBkaWZmaWN1bHRTdWJqZWN0c1swXSB8fCAnbWF0ZW3DoXRpY2FzJ1xuXG4gICAgICBjb25zdCBjbGFyaWZpY2F0aW9uU2VhcmNoOiBBY2FkZW1pY1NlYXJjaFF1ZXJ5ID0ge1xuICAgICAgICB0b3BpYzogYCR7cHJpbWFyeVN1YmplY3R9IGV4cGxpY2FjacOzbiBzaW1wbGUgY29uY2VwdG9zIGLDoXNpY29zYCxcbiAgICAgICAgc2VhcmNoVHlwZTogJ2V4cGxhbmF0aW9uJyxcbiAgICAgICAgbGV2ZWw6ICdiYXNpYycsXG4gICAgICAgIHN1YmplY3Q6IHByaW1hcnlTdWJqZWN0LFxuICAgICAgICBsYW5ndWFnZTogJ2VzJyxcbiAgICAgICAgdXNlcklkOiBjb250ZXh0LnVzZXJJZCxcbiAgICAgICAgc2Vzc2lvbklkOiBjb250ZXh0LnNlc3Npb25JZFxuICAgICAgfVxuXG4gICAgICBjb25zdCBjbGFyaWZpY2F0aW9uUmVzdWx0cyA9IGF3YWl0IEFjYWRlbWljU2VhcmNoRW5naW5lLnNlYXJjaEFjYWRlbWljQ29udGVudChjbGFyaWZpY2F0aW9uU2VhcmNoKVxuXG4gICAgICBub3RpZmljYXRpb25zLnB1c2goe1xuICAgICAgICBpZDogYGNvbmZ1c2lvbl8ke0RhdGUubm93KCl9YCxcbiAgICAgICAgdHlwZTogTm90aWZpY2F0aW9uVHlwZS5BQ0FERU1JQ19SRVNPVVJDRSxcbiAgICAgICAgdGl0bGU6ICfwn46vIEFjbGFyZW1vcyBsYXMgRHVkYXMnLFxuICAgICAgICBtZXNzYWdlOiBgSGUgZGV0ZWN0YWRvIGNvbmZ1c2nDs24gcmVjdXJyZW50ZSBlbiAke3ByaW1hcnlTdWJqZWN0fS4gVGUgYnVzcXXDqSBleHBsaWNhY2lvbmVzIGVzcGVjaWFsbWVudGUgY2xhcmFzIHBhcmEgcmVzb2x2ZXIgdHVzIGR1ZGFzLmAsXG4gICAgICAgIGFjdGlvbkJ1dHRvbjoge1xuICAgICAgICAgIHRleHQ6ICdBY2xhcmFyIENvbmNlcHRvcycsXG4gICAgICAgICAgYWN0aW9uOiAnc2hvd19zZWFyY2hfcmVzdWx0cycsXG4gICAgICAgICAgcGF5bG9hZDogY2xhcmlmaWNhdGlvblJlc3VsdHNcbiAgICAgICAgfSxcbiAgICAgICAgc2VhcmNoUmVzdWx0czogY2xhcmlmaWNhdGlvblJlc3VsdHMsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgcHJpb3JpdHk6IE5vdGlmaWNhdGlvblByaW9yaXR5LkhJR0gsXG4gICAgICAgIGNhdGVnb3J5OiBOb3RpZmljYXRpb25DYXRlZ29yeS5BQ0FERU1JQ1xuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm90aWZpY2F0aW9uc1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVjdGEgb3BvcnR1bmlkYWRlcyBkZSBhcHJlbmRpemFqZSBiYXNhZGFzIGVuIGVsIHByb2dyZXNvXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBhc3luYyBkZXRlY3RMZWFybmluZ09wcG9ydHVuaXRpZXMoXG4gICAgY29udGV4dDogTm90aWZpY2F0aW9uQ29udGV4dCxcbiAgICBtZW1vcnk6IGFueVxuICApOiBQcm9taXNlPFByb2FjdGl2ZU5vdGlmaWNhdGlvbltdPiB7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uczogUHJvYWN0aXZlTm90aWZpY2F0aW9uW10gPSBbXVxuICAgIGNvbnN0IGFjaGlldmVtZW50QXJlYXMgPSBtZW1vcnkuZW1vdGlvbmFsUHJvZmlsZS5hY2hpZXZlbWVudEFyZWFzIHx8IFtdXG4gICAgY29uc3QgZGlmZmljdWx0U3ViamVjdHMgPSBtZW1vcnkucHJlZmVyZW5jZXM/LmRpZmZpY3VsdFN1YmplY3RzIHx8IFtdXG5cbiAgICAvLyBPcG9ydHVuaWRhZDogRXhwYW5kaXIgw6FyZWFzIGRlIGZvcnRhbGV6YVxuICAgIGlmIChhY2hpZXZlbWVudEFyZWFzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHN0cm9uZ1N1YmplY3QgPSBhY2hpZXZlbWVudEFyZWFzWzBdXG4gICAgICBjb25zdCBhZHZhbmNlZFNlYXJjaDogQWNhZGVtaWNTZWFyY2hRdWVyeSA9IHtcbiAgICAgICAgdG9waWM6IGAke3N0cm9uZ1N1YmplY3R9IGF2YW56YWRvIHByb3llY3RvcyBkZXNhZsOtb3NgLFxuICAgICAgICBzZWFyY2hUeXBlOiAncmVzb3VyY2VzJyxcbiAgICAgICAgbGV2ZWw6ICdhZHZhbmNlZCcsXG4gICAgICAgIHN1YmplY3Q6IHN0cm9uZ1N1YmplY3QsXG4gICAgICAgIGxhbmd1YWdlOiAnZXMnLFxuICAgICAgICB1c2VySWQ6IGNvbnRleHQudXNlcklkLFxuICAgICAgICBzZXNzaW9uSWQ6IGNvbnRleHQuc2Vzc2lvbklkXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFkdmFuY2VkUmVzdWx0cyA9IGF3YWl0IEFjYWRlbWljU2VhcmNoRW5naW5lLnNlYXJjaEFjYWRlbWljQ29udGVudChhZHZhbmNlZFNlYXJjaClcblxuICAgICAgbm90aWZpY2F0aW9ucy5wdXNoKHtcbiAgICAgICAgaWQ6IGBvcHBvcnR1bml0eV8ke0RhdGUubm93KCl9YCxcbiAgICAgICAgdHlwZTogTm90aWZpY2F0aW9uVHlwZS5MRUFSTklOR19USVAsXG4gICAgICAgIHRpdGxlOiAn8J+agCBBbXBsw61hIHR1cyBGb3J0YWxlemFzJyxcbiAgICAgICAgbWVzc2FnZTogYERvbWluYXMgYmllbiAke3N0cm9uZ1N1YmplY3R9LiDCv1RlIGludGVyZXNhIGV4cGxvcmFyIGFzcGVjdG9zIG3DoXMgYXZhbnphZG9zIHkgZGVzYWZpYW50ZXM/YCxcbiAgICAgICAgYWN0aW9uQnV0dG9uOiB7XG4gICAgICAgICAgdGV4dDogJ0V4cGxvcmFyIE5pdmVsIEF2YW56YWRvJyxcbiAgICAgICAgICBhY3Rpb246ICdzaG93X3NlYXJjaF9yZXN1bHRzJyxcbiAgICAgICAgICBwYXlsb2FkOiBhZHZhbmNlZFJlc3VsdHNcbiAgICAgICAgfSxcbiAgICAgICAgc2VhcmNoUmVzdWx0czogYWR2YW5jZWRSZXN1bHRzLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHByaW9yaXR5OiBOb3RpZmljYXRpb25Qcmlvcml0eS5MT1csXG4gICAgICAgIGNhdGVnb3J5OiBOb3RpZmljYXRpb25DYXRlZ29yeS5BQ0FERU1JQ1xuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBPcG9ydHVuaWRhZDogUmVjdXJzb3MgcGFyYSBtYXRlcmlhcyBkaWbDrWNpbGVzXG4gICAgaWYgKGRpZmZpY3VsdFN1YmplY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGNoYWxsZW5naW5nU3ViamVjdCA9IGRpZmZpY3VsdFN1YmplY3RzWzBdXG4gICAgICBjb25zdCBzdXBwb3J0U2VhcmNoOiBBY2FkZW1pY1NlYXJjaFF1ZXJ5ID0ge1xuICAgICAgICB0b3BpYzogYCR7Y2hhbGxlbmdpbmdTdWJqZWN0fSB0dXRvcmlhbCBiw6FzaWNvIHBhc28gYSBwYXNvYCxcbiAgICAgICAgc2VhcmNoVHlwZTogJ2V4cGxhbmF0aW9uJyxcbiAgICAgICAgbGV2ZWw6ICdiYXNpYycsXG4gICAgICAgIHN1YmplY3Q6IGNoYWxsZW5naW5nU3ViamVjdCxcbiAgICAgICAgbGFuZ3VhZ2U6ICdlcycsXG4gICAgICAgIHVzZXJJZDogY29udGV4dC51c2VySWQsXG4gICAgICAgIHNlc3Npb25JZDogY29udGV4dC5zZXNzaW9uSWRcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3VwcG9ydFJlc3VsdHMgPSBhd2FpdCBBY2FkZW1pY1NlYXJjaEVuZ2luZS5zZWFyY2hBY2FkZW1pY0NvbnRlbnQoc3VwcG9ydFNlYXJjaClcblxuICAgICAgbm90aWZpY2F0aW9ucy5wdXNoKHtcbiAgICAgICAgaWQ6IGBzdXBwb3J0XyR7RGF0ZS5ub3coKX1gLFxuICAgICAgICB0eXBlOiBOb3RpZmljYXRpb25UeXBlLkFDQURFTUlDX1JFU09VUkNFLFxuICAgICAgICB0aXRsZTogJ/Cfk5ogUmVjdXJzb3MgcGFyYSBTdXBlcmFyIERlc2Fmw61vcycsXG4gICAgICAgIG1lc3NhZ2U6IGBFbmNvbnRyw6kgbnVldm9zIHJlY3Vyc29zIHBhcmEgJHtjaGFsbGVuZ2luZ1N1YmplY3R9IHF1ZSBwb2Ryw61hbiBheXVkYXJ0ZSBhIHN1cGVyYXIgbGFzIGRpZmljdWx0YWRlcy5gLFxuICAgICAgICBhY3Rpb25CdXR0b246IHtcbiAgICAgICAgICB0ZXh0OiAnVmVyIFJlY3Vyc29zJyxcbiAgICAgICAgICBhY3Rpb246ICdzaG93X3NlYXJjaF9yZXN1bHRzJyxcbiAgICAgICAgICBwYXlsb2FkOiBzdXBwb3J0UmVzdWx0c1xuICAgICAgICB9LFxuICAgICAgICBzZWFyY2hSZXN1bHRzOiBzdXBwb3J0UmVzdWx0cyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICBwcmlvcml0eTogTm90aWZpY2F0aW9uUHJpb3JpdHkuTUVESVVNLFxuICAgICAgICBjYXRlZ29yeTogTm90aWZpY2F0aW9uQ2F0ZWdvcnkuQUNBREVNSUNcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vdGlmaWNhdGlvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZmljYSBkZWFkbGluZXMgeSB0YXJlYXMgcGVuZGllbnRlc1xuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgY2hlY2tEZWFkbGluZXNBbmRUYXNrcyhcbiAgICBjb250ZXh0OiBOb3RpZmljYXRpb25Db250ZXh0LFxuICAgIG1lbW9yeTogYW55XG4gICk6IFByb21pc2U8UHJvYWN0aXZlTm90aWZpY2F0aW9uW10+IHtcbiAgICBjb25zdCBub3RpZmljYXRpb25zOiBQcm9hY3RpdmVOb3RpZmljYXRpb25bXSA9IFtdXG5cbiAgICAvLyBTaW11bGFjacOzbiBkZSBkZWFkbGluZXMgcHLDs3hpbW9zIChlbiB1bmEgaW1wbGVtZW50YWNpw7NuIHJlYWwsIHZlbmRyw61hIGRlIGNhbGVuZGFyaW8pXG4gICAgY29uc3QgdXBjb21pbmdEZWFkbGluZXMgPSBjb250ZXh0LmFjYWRlbWljQ29udGV4dD8udXBjb21pbmdEZWFkbGluZXMgfHwgW11cblxuICAgIGlmICh1cGNvbWluZ0RlYWRsaW5lcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBkZWFkbGluZSA9IHVwY29taW5nRGVhZGxpbmVzWzBdXG4gICAgICBjb25zdCBwcmVwYXJhdGlvblNlYXJjaDogQWNhZGVtaWNTZWFyY2hRdWVyeSA9IHtcbiAgICAgICAgdG9waWM6IGAke2RlYWRsaW5lfSBwcmVwYXJhY2nDs24gZXhhbWVuIGd1w61hIGVzdHVkaW9gLFxuICAgICAgICBzZWFyY2hUeXBlOiAncmVzb3VyY2VzJyxcbiAgICAgICAgbGV2ZWw6ICdpbnRlcm1lZGlhdGUnLFxuICAgICAgICBsYW5ndWFnZTogJ2VzJyxcbiAgICAgICAgdXNlcklkOiBjb250ZXh0LnVzZXJJZCxcbiAgICAgICAgc2Vzc2lvbklkOiBjb250ZXh0LnNlc3Npb25JZFxuICAgICAgfVxuXG4gICAgICBjb25zdCBwcmVwUmVzdWx0cyA9IGF3YWl0IEFjYWRlbWljU2VhcmNoRW5naW5lLnNlYXJjaEFjYWRlbWljQ29udGVudChwcmVwYXJhdGlvblNlYXJjaClcblxuICAgICAgbm90aWZpY2F0aW9ucy5wdXNoKHtcbiAgICAgICAgaWQ6IGBkZWFkbGluZV8ke0RhdGUubm93KCl9YCxcbiAgICAgICAgdHlwZTogTm90aWZpY2F0aW9uVHlwZS5ERUFETElORV9BTEVSVCxcbiAgICAgICAgdGl0bGU6ICfij7AgRGVhZGxpbmUgUHLDs3hpbW8nLFxuICAgICAgICBtZXNzYWdlOiBgU2UgYWNlcmNhIHR1ICR7ZGVhZGxpbmV9LiBUZSBidXNxdcOpIHJlY3Vyc29zIGVzcGVjw61maWNvcyBwYXJhIHVuYSBwcmVwYXJhY2nDs24gZWZlY3RpdmEuYCxcbiAgICAgICAgYWN0aW9uQnV0dG9uOiB7XG4gICAgICAgICAgdGV4dDogJ1ByZXBhcmFyIEV4YW1lbicsXG4gICAgICAgICAgYWN0aW9uOiAnc2hvd19zZWFyY2hfcmVzdWx0cycsXG4gICAgICAgICAgcGF5bG9hZDogcHJlcFJlc3VsdHNcbiAgICAgICAgfSxcbiAgICAgICAgc2VhcmNoUmVzdWx0czogcHJlcFJlc3VsdHMsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgcHJpb3JpdHk6IE5vdGlmaWNhdGlvblByaW9yaXR5LlVSR0VOVCxcbiAgICAgICAgY2F0ZWdvcnk6IE5vdGlmaWNhdGlvbkNhdGVnb3J5Lk9SR0FOSVpBVElPTkFMXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiBub3RpZmljYXRpb25zXG4gIH1cblxuICAvKipcbiAgICogQW5hbGl6YSBwYXRyb25lcyBkZSBlc3R1ZGlvIHBhcmEgb3B0aW1pemFjaW9uZXNcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIGFuYWx5emVTdHVkeVBhdHRlcm5zKFxuICAgIGNvbnRleHQ6IE5vdGlmaWNhdGlvbkNvbnRleHQsXG4gICAgbWVtb3J5OiBhbnlcbiAgKTogUHJvbWlzZTxQcm9hY3RpdmVOb3RpZmljYXRpb25bXT4ge1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbnM6IFByb2FjdGl2ZU5vdGlmaWNhdGlvbltdID0gW11cbiAgICBjb25zdCB0b3RhbFR1cm5zID0gbWVtb3J5LnRvdGFsVHVybnMgfHwgMFxuXG4gICAgLy8gUGF0csOzbjogVXN1YXJpbyBudWV2byAtIG9mcmVjZXIgb3JpZW50YWNpw7NuXG4gICAgaWYgKHRvdGFsVHVybnMgPCA1KSB7XG4gICAgICBjb25zdCBvcmllbnRhdGlvblNlYXJjaDogQWNhZGVtaWNTZWFyY2hRdWVyeSA9IHtcbiAgICAgICAgdG9waWM6ICd0w6ljbmljYXMgZGUgZXN0dWRpbyBlZmVjdGl2YXMgZ3XDrWEgcGFyYSBlc3R1ZGlhbnRlcycsXG4gICAgICAgIHNlYXJjaFR5cGU6ICdyZXNvdXJjZXMnLFxuICAgICAgICBsZXZlbDogJ2Jhc2ljJyxcbiAgICAgICAgbGFuZ3VhZ2U6ICdlcycsXG4gICAgICAgIHVzZXJJZDogY29udGV4dC51c2VySWQsXG4gICAgICAgIHNlc3Npb25JZDogY29udGV4dC5zZXNzaW9uSWRcbiAgICAgIH1cblxuICAgICAgY29uc3Qgb3JpZW50YXRpb25SZXN1bHRzID0gYXdhaXQgQWNhZGVtaWNTZWFyY2hFbmdpbmUuc2VhcmNoQWNhZGVtaWNDb250ZW50KG9yaWVudGF0aW9uU2VhcmNoKVxuXG4gICAgICBub3RpZmljYXRpb25zLnB1c2goe1xuICAgICAgICBpZDogYG9yaWVudGF0aW9uXyR7RGF0ZS5ub3coKX1gLFxuICAgICAgICB0eXBlOiBOb3RpZmljYXRpb25UeXBlLkxFQVJOSU5HX1RJUCxcbiAgICAgICAgdGl0bGU6ICfwn5GLIE9wdGltaXphIHR1IEVzdHVkaW8nLFxuICAgICAgICBtZXNzYWdlOiAnQ29tbyBlcmVzIG51ZXZvLCB0ZSBlbmNvbnRyw6kgbGFzIG1lam9yZXMgdMOpY25pY2FzIGRlIGVzdHVkaW8gcGFyYSBtYXhpbWl6YXIgdHUgYXByZW5kaXphamUgZGVzZGUgZWwgaW5pY2lvLicsXG4gICAgICAgIGFjdGlvbkJ1dHRvbjoge1xuICAgICAgICAgIHRleHQ6ICdDb25vY2VyIFTDqWNuaWNhcycsXG4gICAgICAgICAgYWN0aW9uOiAnc2hvd19zZWFyY2hfcmVzdWx0cycsXG4gICAgICAgICAgcGF5bG9hZDogb3JpZW50YXRpb25SZXN1bHRzXG4gICAgICAgIH0sXG4gICAgICAgIHNlYXJjaFJlc3VsdHM6IG9yaWVudGF0aW9uUmVzdWx0cyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICBwcmlvcml0eTogTm90aWZpY2F0aW9uUHJpb3JpdHkuTUVESVVNLFxuICAgICAgICBjYXRlZ29yeTogTm90aWZpY2F0aW9uQ2F0ZWdvcnkuQUNBREVNSUNcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vdGlmaWNhdGlvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmlvcml6YSBub3RpZmljYWNpb25lcyBzZWfDum4gdXJnZW5jaWEgeSByZWxldmFuY2lhXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBwcmlvcml0aXplTm90aWZpY2F0aW9ucyhub3RpZmljYXRpb25zOiBQcm9hY3RpdmVOb3RpZmljYXRpb25bXSk6IFByb2FjdGl2ZU5vdGlmaWNhdGlvbltdIHtcbiAgICBjb25zdCBwcmlvcml0eU9yZGVyID0ge1xuICAgICAgW05vdGlmaWNhdGlvblByaW9yaXR5LlVSR0VOVF06IDQsXG4gICAgICBbTm90aWZpY2F0aW9uUHJpb3JpdHkuSElHSF06IDMsXG4gICAgICBbTm90aWZpY2F0aW9uUHJpb3JpdHkuTUVESVVNXTogMixcbiAgICAgIFtOb3RpZmljYXRpb25Qcmlvcml0eS5MT1ddOiAxXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vdGlmaWNhdGlvbnMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgcHJpb3JpdHlBID0gcHJpb3JpdHlPcmRlclthLnByaW9yaXR5XVxuICAgICAgY29uc3QgcHJpb3JpdHlCID0gcHJpb3JpdHlPcmRlcltiLnByaW9yaXR5XVxuICAgICAgXG4gICAgICBpZiAocHJpb3JpdHlBICE9PSBwcmlvcml0eUIpIHtcbiAgICAgICAgcmV0dXJuIHByaW9yaXR5QiAtIHByaW9yaXR5QVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBTaSB0aWVuZW4gbGEgbWlzbWEgcHJpb3JpZGFkLCBvcmRlbmFyIHBvciB0aW1lc3RhbXAgKG3DoXMgcmVjaWVudGUgcHJpbWVybylcbiAgICAgIHJldHVybiBiLnRpbWVzdGFtcC5nZXRUaW1lKCkgLSBhLnRpbWVzdGFtcC5nZXRUaW1lKClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEVudsOtYSBub3RpZmljYWNpw7NuIHVzYW5kbyBOb3Z1IG8gc2lzdGVtYSBsb2NhbFxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgc2VuZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb246IFByb2FjdGl2ZU5vdGlmaWNhdGlvbiwgdXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMubm92dSkge1xuICAgICAgICAvLyBFbnZpYXIgY29uIE5vdnVcbiAgICAgICAgYXdhaXQgdGhpcy5ub3Z1LnRyaWdnZXIoJ2FjYWRlbWljLW5vdGlmaWNhdGlvbicsIHtcbiAgICAgICAgICB0bzoge1xuICAgICAgICAgICAgc3Vic2NyaWJlcklkOiB1c2VySWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICB0aXRsZTogbm90aWZpY2F0aW9uLnRpdGxlLFxuICAgICAgICAgICAgbWVzc2FnZTogbm90aWZpY2F0aW9uLm1lc3NhZ2UsXG4gICAgICAgICAgICBhY3Rpb25UZXh0OiBub3RpZmljYXRpb24uYWN0aW9uQnV0dG9uPy50ZXh0LFxuICAgICAgICAgICAgYWN0aW9uUGF5bG9hZDogbm90aWZpY2F0aW9uLmFjdGlvbkJ1dHRvbj8ucGF5bG9hZCxcbiAgICAgICAgICAgIHByaW9yaXR5OiBub3RpZmljYXRpb24ucHJpb3JpdHksXG4gICAgICAgICAgICBjYXRlZ29yeTogbm90aWZpY2F0aW9uLmNhdGVnb3J5LFxuICAgICAgICAgICAgdGltZXN0YW1wOiBub3RpZmljYXRpb24udGltZXN0YW1wLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYPCfk6wgTm92dSBub3RpZmljYXRpb24gc2VudDogJHtub3RpZmljYXRpb24udGl0bGV9YClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNpc3RlbWEgbG9jYWwgZGUgbm90aWZpY2FjaW9uZXNcbiAgICAgICAgY29uc29sZS5sb2coYPCfk7EgTG9jYWwgbm90aWZpY2F0aW9uOiAke25vdGlmaWNhdGlvbi50aXRsZX0gLSAke25vdGlmaWNhdGlvbi5tZXNzYWdlfWApXG4gICAgICAgIHRoaXMuc3RvcmVMb2NhbE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHVzZXJJZClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBzZW5kIG5vdGlmaWNhdGlvbjonLCBlcnJvcilcbiAgICAgIC8vIEZhbGxiYWNrOiBndWFyZGFyIGxvY2FsbWVudGVcbiAgICAgIHRoaXMuc3RvcmVMb2NhbE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHVzZXJJZClcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBbG1hY2VuYSBub3RpZmljYWNpw7NuIGxvY2FsbWVudGUgY3VhbmRvIE5vdnUgbm8gZXN0w6EgZGlzcG9uaWJsZVxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgc3RvcmVMb2NhbE5vdGlmaWNhdGlvbihub3RpZmljYXRpb246IFByb2FjdGl2ZU5vdGlmaWNhdGlvbiwgdXNlcklkOiBzdHJpbmcpIHtcbiAgICAvLyBFbiB1biBzaXN0ZW1hIHJlYWwsIGVzdG8gc2UgZ3VhcmRhcsOtYSBlbiBiYXNlIGRlIGRhdG9zXG4gICAgLy8gUG9yIGFob3JhLCB1c2Ftb3MgYWxtYWNlbmFtaWVudG8gZW4gbWVtb3JpYVxuICAgIGlmICghZ2xvYmFsVGhpcy5sb2NhbE5vdGlmaWNhdGlvbnMpIHtcbiAgICAgIGdsb2JhbFRoaXMubG9jYWxOb3RpZmljYXRpb25zID0gbmV3IE1hcCgpXG4gICAgfVxuICAgIFxuICAgIGlmICghZ2xvYmFsVGhpcy5sb2NhbE5vdGlmaWNhdGlvbnMuaGFzKHVzZXJJZCkpIHtcbiAgICAgIGdsb2JhbFRoaXMubG9jYWxOb3RpZmljYXRpb25zLnNldCh1c2VySWQsIFtdKVxuICAgIH1cbiAgICBcbiAgICBjb25zdCB1c2VyTm90aWZpY2F0aW9ucyA9IGdsb2JhbFRoaXMubG9jYWxOb3RpZmljYXRpb25zLmdldCh1c2VySWQpXG4gICAgdXNlck5vdGlmaWNhdGlvbnMudW5zaGlmdChub3RpZmljYXRpb24pIC8vIEFncmVnYXIgYWwgaW5pY2lvXG4gICAgXG4gICAgLy8gTWFudGVuZXIgc29sbyBsYXMgw7psdGltYXMgMTAgbm90aWZpY2FjaW9uZXNcbiAgICBpZiAodXNlck5vdGlmaWNhdGlvbnMubGVuZ3RoID4gMTApIHtcbiAgICAgIHVzZXJOb3RpZmljYXRpb25zLnNwbGljZSgxMClcbiAgICB9XG4gICAgXG4gICAgY29uc29sZS5sb2coYPCfkr4gU3RvcmVkIGxvY2FsIG5vdGlmaWNhdGlvbiBmb3IgdXNlciAke3VzZXJJZH06ICR7bm90aWZpY2F0aW9uLnRpdGxlfWApXG4gIH1cblxuICAvKipcbiAgICogT2J0aWVuZSBub3RpZmljYWNpb25lcyBsb2NhbGVzIHBhcmEgdW4gdXN1YXJpb1xuICAgKi9cbiAgc3RhdGljIGdldExvY2FsTm90aWZpY2F0aW9ucyh1c2VySWQ6IHN0cmluZyk6IFByb2FjdGl2ZU5vdGlmaWNhdGlvbltdIHtcbiAgICBpZiAoIWdsb2JhbFRoaXMubG9jYWxOb3RpZmljYXRpb25zKSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGdsb2JhbFRoaXMubG9jYWxOb3RpZmljYXRpb25zLmdldCh1c2VySWQpIHx8IFtdXG4gIH1cblxuICAvKipcbiAgICogTGltcGlhIG5vdGlmaWNhY2lvbmVzIGFudGlndWFzXG4gICAqL1xuICBzdGF0aWMgY2xlYXJPbGROb3RpZmljYXRpb25zKHVzZXJJZDogc3RyaW5nLCBvbGRlclRoYW5Ib3VyczogbnVtYmVyID0gMjQpIHtcbiAgICBpZiAoIWdsb2JhbFRoaXMubG9jYWxOb3RpZmljYXRpb25zKSByZXR1cm5cbiAgICBcbiAgICBjb25zdCB1c2VyTm90aWZpY2F0aW9ucyA9IGdsb2JhbFRoaXMubG9jYWxOb3RpZmljYXRpb25zLmdldCh1c2VySWQpIHx8IFtdXG4gICAgY29uc3QgY3V0b2ZmVGltZSA9IG5ldyBEYXRlKERhdGUubm93KCkgLSAob2xkZXJUaGFuSG91cnMgKiA2MCAqIDYwICogMTAwMCkpXG4gICAgXG4gICAgY29uc3QgcmVjZW50Tm90aWZpY2F0aW9ucyA9IHVzZXJOb3RpZmljYXRpb25zLmZpbHRlcihcbiAgICAgIG5vdGlmaWNhdGlvbiA9PiBub3RpZmljYXRpb24udGltZXN0YW1wID4gY3V0b2ZmVGltZVxuICAgIClcbiAgICBcbiAgICBnbG9iYWxUaGlzLmxvY2FsTm90aWZpY2F0aW9ucy5zZXQodXNlcklkLCByZWNlbnROb3RpZmljYXRpb25zKVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYSBub3RpZmljYWNpw7NuIGJhc2FkYSBlbiBiw7pzcXVlZGEgYWNhZMOpbWljYSBkaXJlY3RhXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgY3JlYXRlQWNhZGVtaWNOb3RpZmljYXRpb24oXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgc2VhcmNoUXVlcnk6IEFjYWRlbWljU2VhcmNoUXVlcnksXG4gICAgdHJpZ2dlcjogTm90aWZpY2F0aW9uVHJpZ2dlcixcbiAgICBjdXN0b21UaXRsZT86IHN0cmluZyxcbiAgICBjdXN0b21NZXNzYWdlPzogc3RyaW5nXG4gICk6IFByb21pc2U8UHJvYWN0aXZlTm90aWZpY2F0aW9uPiB7XG4gICAgY29uc3Qgc2VhcmNoUmVzdWx0cyA9IGF3YWl0IEFjYWRlbWljU2VhcmNoRW5naW5lLnNlYXJjaEFjYWRlbWljQ29udGVudChzZWFyY2hRdWVyeSlcbiAgICBcbiAgICBjb25zdCBkZWZhdWx0VGl0bGVzID0ge1xuICAgICAgW05vdGlmaWNhdGlvblRyaWdnZXIuS05PV0xFREdFX0dBUF06ICfwn46vIFJlY3Vyc29zIHBhcmEgdHUgQ29uc3VsdGEnLFxuICAgICAgW05vdGlmaWNhdGlvblRyaWdnZXIuTEVBUk5JTkdfT1BQT1JUVU5JVFldOiAn8J+TmiBOdWV2YSBPcG9ydHVuaWRhZCBkZSBBcHJlbmRpemFqZScsXG4gICAgICBbTm90aWZpY2F0aW9uVHJpZ2dlci5BQ0FERU1JQ19TVFJVR0dMRV06ICfwn5KhIEF5dWRhIEVzcGVjw61maWNhIEVuY29udHJhZGEnLFxuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRNZXNzYWdlcyA9IHtcbiAgICAgIFtOb3RpZmljYXRpb25UcmlnZ2VyLktOT1dMRURHRV9HQVBdOiBgRW5jb250csOpIHJlY3Vyc29zIGVzcGVjw61maWNvcyBzb2JyZSAke3NlYXJjaFF1ZXJ5LnRvcGljfSBxdWUgcHVlZGVuIHJlc29sdmVyIHR1cyBkdWRhcy5gLFxuICAgICAgW05vdGlmaWNhdGlvblRyaWdnZXIuTEVBUk5JTkdfT1BQT1JUVU5JVFldOiBgSGUgZGVzY3ViaWVydG8gbWF0ZXJpYWwgaW50ZXJlc2FudGUgc29icmUgJHtzZWFyY2hRdWVyeS50b3BpY30gcXVlIHBvZHLDrWEgZXhwYW5kaXIgdHUgY29ub2NpbWllbnRvLmAsXG4gICAgICBbTm90aWZpY2F0aW9uVHJpZ2dlci5BQ0FERU1JQ19TVFJVR0dMRV06IGBUZSBidXNxdcOpIHJlY3Vyc29zIGVzcGVjaWFsaXphZG9zIHBhcmEgc3VwZXJhciBsYXMgZGlmaWN1bHRhZGVzIGNvbiAke3NlYXJjaFF1ZXJ5LnRvcGljfS5gLFxuICAgIH1cblxuICAgIGNvbnN0IG5vdGlmaWNhdGlvbjogUHJvYWN0aXZlTm90aWZpY2F0aW9uID0ge1xuICAgICAgaWQ6IGBhY2FkZW1pY18ke0RhdGUubm93KCl9YCxcbiAgICAgIHR5cGU6IE5vdGlmaWNhdGlvblR5cGUuQUNBREVNSUNfUkVTT1VSQ0UsXG4gICAgICB0aXRsZTogY3VzdG9tVGl0bGUgfHwgZGVmYXVsdFRpdGxlc1t0cmlnZ2VyXSB8fCAn8J+TliBSZWN1cnNvcyBBY2Fkw6ltaWNvcycsXG4gICAgICBtZXNzYWdlOiBjdXN0b21NZXNzYWdlIHx8IGRlZmF1bHRNZXNzYWdlc1t0cmlnZ2VyXSB8fCBgUmVjdXJzb3MgZW5jb250cmFkb3Mgc29icmUgJHtzZWFyY2hRdWVyeS50b3BpY31gLFxuICAgICAgYWN0aW9uQnV0dG9uOiB7XG4gICAgICAgIHRleHQ6ICdWZXIgUmVjdXJzb3MnLFxuICAgICAgICBhY3Rpb246ICdzaG93X3NlYXJjaF9yZXN1bHRzJyxcbiAgICAgICAgcGF5bG9hZDogc2VhcmNoUmVzdWx0c1xuICAgICAgfSxcbiAgICAgIHNlYXJjaFJlc3VsdHMsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICBwcmlvcml0eTogTm90aWZpY2F0aW9uUHJpb3JpdHkuTUVESVVNLFxuICAgICAgY2F0ZWdvcnk6IE5vdGlmaWNhdGlvbkNhdGVnb3J5LkFDQURFTUlDXG4gICAgfVxuXG4gICAgLy8gRW52aWFyIGxhIG5vdGlmaWNhY2nDs25cbiAgICBhd2FpdCB0aGlzLnNlbmROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCB1c2VySWQpXG4gICAgXG4gICAgcmV0dXJuIG5vdGlmaWNhdGlvblxuICB9XG5cbiAgLyoqXG4gICAqIE9idGllbmUgZXN0YWTDrXN0aWNhcyBkZWwgc2lzdGVtYSBkZSBub3RpZmljYWNpb25lc1xuICAgKi9cbiAgc3RhdGljIGdldE5vdGlmaWNhdGlvblN0YXRzKHVzZXJJZD86IHN0cmluZykge1xuICAgIGNvbnN0IGFsbE5vdGlmaWNhdGlvbnMgPSBnbG9iYWxUaGlzLmxvY2FsTm90aWZpY2F0aW9ucyB8fCBuZXcgTWFwKClcbiAgICBcbiAgICBpZiAodXNlcklkKSB7XG4gICAgICBjb25zdCB1c2VyTm90aWZpY2F0aW9ucyA9IGFsbE5vdGlmaWNhdGlvbnMuZ2V0KHVzZXJJZCkgfHwgW11cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvdGFsOiB1c2VyTm90aWZpY2F0aW9ucy5sZW5ndGgsXG4gICAgICAgIGJ5VHlwZTogdGhpcy5ncm91cEJ5UHJvcGVydHkodXNlck5vdGlmaWNhdGlvbnMsICd0eXBlJyksXG4gICAgICAgIGJ5UHJpb3JpdHk6IHRoaXMuZ3JvdXBCeVByb3BlcnR5KHVzZXJOb3RpZmljYXRpb25zLCAncHJpb3JpdHknKSxcbiAgICAgICAgYnlDYXRlZ29yeTogdGhpcy5ncm91cEJ5UHJvcGVydHkodXNlck5vdGlmaWNhdGlvbnMsICdjYXRlZ29yeScpLFxuICAgICAgICByZWNlbnQ6IHVzZXJOb3RpZmljYXRpb25zLmZpbHRlcihuID0+IFxuICAgICAgICAgIG4udGltZXN0YW1wID4gbmV3IERhdGUoRGF0ZS5ub3coKSAtIDI0ICogNjAgKiA2MCAqIDEwMDApXG4gICAgICAgICkubGVuZ3RoXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRXN0YWTDrXN0aWNhcyBnbG9iYWxlc1xuICAgIGxldCB0b3RhbE5vdGlmaWNhdGlvbnMgPSAwXG4gICAgY29uc3QgZ2xvYmFsU3RhdHMgPSB7IGJ5VHlwZToge30sIGJ5UHJpb3JpdHk6IHt9LCBieUNhdGVnb3J5OiB7fSB9XG4gICAgXG4gICAgZm9yIChjb25zdCB1c2VyTm90aWZpY2F0aW9ucyBvZiBhbGxOb3RpZmljYXRpb25zLnZhbHVlcygpKSB7XG4gICAgICB0b3RhbE5vdGlmaWNhdGlvbnMgKz0gdXNlck5vdGlmaWNhdGlvbnMubGVuZ3RoXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsVXNlcnM6IGFsbE5vdGlmaWNhdGlvbnMuc2l6ZSxcbiAgICAgIHRvdGFsTm90aWZpY2F0aW9ucyxcbiAgICAgIG5vdnVFbmFibGVkOiB0aGlzLm5vdnUgIT09IG51bGwsXG4gICAgICBpbml0aWFsaXplZDogdGhpcy5pbml0aWFsaXplZFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVdGlsaXRhcmlvIHBhcmEgYWdydXBhciBwb3IgcHJvcGllZGFkXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBncm91cEJ5UHJvcGVydHkobm90aWZpY2F0aW9uczogUHJvYWN0aXZlTm90aWZpY2F0aW9uW10sIHByb3BlcnR5OiBrZXlvZiBQcm9hY3RpdmVOb3RpZmljYXRpb24pIHtcbiAgICByZXR1cm4gbm90aWZpY2F0aW9ucy5yZWR1Y2UoKGFjYywgbm90aWZpY2F0aW9uKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSBub3RpZmljYXRpb25bcHJvcGVydHldIGFzIHN0cmluZ1xuICAgICAgYWNjW2tleV0gPSAoYWNjW2tleV0gfHwgMCkgKyAxXG4gICAgICByZXR1cm4gYWNjXG4gICAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgbnVtYmVyPilcbiAgfVxufVxuXG4vLyBJbmljaWFsaXphciBlbCBzZXJ2aWNpbyBhdXRvbcOhdGljYW1lbnRlXG5Ob3RpZmljYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoKSJdLCJuYW1lcyI6WyJOb3Z1IiwiQWNhZGVtaWNTZWFyY2hFbmdpbmUiLCJDb252ZXJzYXRpb25NZW1vcnlNYW5hZ2VyIiwiRW1vdGlvblR5cGUiLCJOb3RpZmljYXRpb25UcmlnZ2VyIiwiTm90aWZpY2F0aW9uVHlwZSIsIk5vdGlmaWNhdGlvblByaW9yaXR5IiwiTm90aWZpY2F0aW9uQ2F0ZWdvcnkiLCJOb3RpZmljYXRpb25TZXJ2aWNlIiwibm92dSIsImluaXRpYWxpemVkIiwiaW5pdGlhbGl6ZSIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJOT1ZVX0FQSV9LRVkiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJhbmFseXplQW5kTm90aWZ5IiwiY29udGV4dCIsIm5vdGlmaWNhdGlvbnMiLCJtZW1vcnkiLCJnZXRNZW1vcnkiLCJ1c2VySWQiLCJzZXNzaW9uSWQiLCJlbW90aW9uYWxOb3RpZmljYXRpb25zIiwiYW5hbHl6ZUVtb3Rpb25hbFBhdHRlcm5zIiwicHVzaCIsImxlYXJuaW5nTm90aWZpY2F0aW9ucyIsImRldGVjdExlYXJuaW5nT3Bwb3J0dW5pdGllcyIsImRlYWRsaW5lTm90aWZpY2F0aW9ucyIsImNoZWNrRGVhZGxpbmVzQW5kVGFza3MiLCJzdHVkeVBhdHRlcm5Ob3RpZmljYXRpb25zIiwiYW5hbHl6ZVN0dWR5UGF0dGVybnMiLCJwcmlvcml0aXplZE5vdGlmaWNhdGlvbnMiLCJwcmlvcml0aXplTm90aWZpY2F0aW9ucyIsIm5vdGlmaWNhdGlvbiIsInNsaWNlIiwic2VuZE5vdGlmaWNhdGlvbiIsInJlY2VudEVtb3Rpb25zIiwiZW1vdGlvbmFsUHJvZmlsZSIsImN1cnJlbnRNb29kIiwibW90aXZhdGlvbkxldmVsIiwiZmlsdGVyIiwiZSIsIkZSVVNUUkFURUQiLCJzZWFyY2hRdWVyeSIsInRvcGljIiwic2VhcmNoVHlwZSIsImxldmVsIiwibGFuZ3VhZ2UiLCJzZWFyY2hSZXN1bHRzIiwic2VhcmNoQWNhZGVtaWNDb250ZW50IiwiaWQiLCJEYXRlIiwibm93IiwidHlwZSIsInRpdGxlIiwibWVzc2FnZSIsImFjdGlvbkJ1dHRvbiIsInRleHQiLCJhY3Rpb24iLCJwYXlsb2FkIiwidGltZXN0YW1wIiwicHJpb3JpdHkiLCJjYXRlZ29yeSIsIm1vdGl2YXRpb25hbFNlYXJjaCIsIm1vdGl2YXRpb25SZXN1bHRzIiwiQ09ORlVTRUQiLCJkaWZmaWN1bHRTdWJqZWN0cyIsInByZWZlcmVuY2VzIiwicHJpbWFyeVN1YmplY3QiLCJjbGFyaWZpY2F0aW9uU2VhcmNoIiwic3ViamVjdCIsImNsYXJpZmljYXRpb25SZXN1bHRzIiwiYWNoaWV2ZW1lbnRBcmVhcyIsInN0cm9uZ1N1YmplY3QiLCJhZHZhbmNlZFNlYXJjaCIsImFkdmFuY2VkUmVzdWx0cyIsImNoYWxsZW5naW5nU3ViamVjdCIsInN1cHBvcnRTZWFyY2giLCJzdXBwb3J0UmVzdWx0cyIsInVwY29taW5nRGVhZGxpbmVzIiwiYWNhZGVtaWNDb250ZXh0IiwiZGVhZGxpbmUiLCJwcmVwYXJhdGlvblNlYXJjaCIsInByZXBSZXN1bHRzIiwidG90YWxUdXJucyIsIm9yaWVudGF0aW9uU2VhcmNoIiwib3JpZW50YXRpb25SZXN1bHRzIiwicHJpb3JpdHlPcmRlciIsInNvcnQiLCJhIiwiYiIsInByaW9yaXR5QSIsInByaW9yaXR5QiIsImdldFRpbWUiLCJ0cmlnZ2VyIiwidG8iLCJzdWJzY3JpYmVySWQiLCJhY3Rpb25UZXh0IiwiYWN0aW9uUGF5bG9hZCIsInRvSVNPU3RyaW5nIiwic3RvcmVMb2NhbE5vdGlmaWNhdGlvbiIsImdsb2JhbFRoaXMiLCJsb2NhbE5vdGlmaWNhdGlvbnMiLCJNYXAiLCJoYXMiLCJzZXQiLCJ1c2VyTm90aWZpY2F0aW9ucyIsImdldCIsInVuc2hpZnQiLCJzcGxpY2UiLCJnZXRMb2NhbE5vdGlmaWNhdGlvbnMiLCJjbGVhck9sZE5vdGlmaWNhdGlvbnMiLCJvbGRlclRoYW5Ib3VycyIsImN1dG9mZlRpbWUiLCJyZWNlbnROb3RpZmljYXRpb25zIiwiY3JlYXRlQWNhZGVtaWNOb3RpZmljYXRpb24iLCJjdXN0b21UaXRsZSIsImN1c3RvbU1lc3NhZ2UiLCJkZWZhdWx0VGl0bGVzIiwiZGVmYXVsdE1lc3NhZ2VzIiwiZ2V0Tm90aWZpY2F0aW9uU3RhdHMiLCJhbGxOb3RpZmljYXRpb25zIiwidG90YWwiLCJieVR5cGUiLCJncm91cEJ5UHJvcGVydHkiLCJieVByaW9yaXR5IiwiYnlDYXRlZ29yeSIsInJlY2VudCIsIm4iLCJ0b3RhbE5vdGlmaWNhdGlvbnMiLCJnbG9iYWxTdGF0cyIsInZhbHVlcyIsInRvdGFsVXNlcnMiLCJzaXplIiwibm92dUVuYWJsZWQiLCJwcm9wZXJ0eSIsInJlZHVjZSIsImFjYyIsImtleSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/notification-service.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/temp-storage.ts":
/*!*********************************!*\
  !*** ./src/lib/temp-storage.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addConversationTurn: () => (/* binding */ addConversationTurn),\n/* harmony export */   addPendingTask: () => (/* binding */ addPendingTask),\n/* harmony export */   addUser: () => (/* binding */ addUser),\n/* harmony export */   addWeeklyReport: () => (/* binding */ addWeeklyReport),\n/* harmony export */   canSubmitThisWeek: () => (/* binding */ canSubmitThisWeek),\n/* harmony export */   cleanupOldConversations: () => (/* binding */ cleanupOldConversations),\n/* harmony export */   createConversationSession: () => (/* binding */ createConversationSession),\n/* harmony export */   deleteUser: () => (/* binding */ deleteUser),\n/* harmony export */   findEventById: () => (/* binding */ findEventById),\n/* harmony export */   findUserByEmail: () => (/* binding */ findUserByEmail),\n/* harmony export */   findUserById: () => (/* binding */ findUserById),\n/* harmony export */   findUserByStudentId: () => (/* binding */ findUserByStudentId),\n/* harmony export */   findUsersByProgram: () => (/* binding */ findUsersByProgram),\n/* harmony export */   findUsersByRole: () => (/* binding */ findUsersByRole),\n/* harmony export */   findUsersByStatus: () => (/* binding */ findUsersByStatus),\n/* harmony export */   findWeeklyReportByUserAndWeek: () => (/* binding */ findWeeklyReportByUserAndWeek),\n/* harmony export */   findWeeklyReportsByUser: () => (/* binding */ findWeeklyReportsByUser),\n/* harmony export */   generateStudentId: () => (/* binding */ generateStudentId),\n/* harmony export */   getAllCalendarEvents: () => (/* binding */ getAllCalendarEvents),\n/* harmony export */   getAllUsers: () => (/* binding */ getAllUsers),\n/* harmony export */   getAllWeeklyReports: () => (/* binding */ getAllWeeklyReports),\n/* harmony export */   getConversationHistory: () => (/* binding */ getConversationHistory),\n/* harmony export */   getConversationSession: () => (/* binding */ getConversationSession),\n/* harmony export */   getCurrentWeekEnd: () => (/* binding */ getCurrentWeekEnd),\n/* harmony export */   getCurrentWeekStart: () => (/* binding */ getCurrentWeekStart),\n/* harmony export */   getEvents: () => (/* binding */ getEvents),\n/* harmony export */   getEventsForDateRange: () => (/* binding */ getEventsForDateRange),\n/* harmony export */   getMonthWeeks: () => (/* binding */ getMonthWeeks),\n/* harmony export */   getPendingTasks: () => (/* binding */ getPendingTasks),\n/* harmony export */   getUpcomingEvents: () => (/* binding */ getUpcomingEvents),\n/* harmony export */   getUserActiveSessions: () => (/* binding */ getUserActiveSessions),\n/* harmony export */   getWeekDates: () => (/* binding */ getWeekDates),\n/* harmony export */   getWeeklyReportsByDateRange: () => (/* binding */ getWeeklyReportsByDateRange),\n/* harmony export */   markTaskCompleted: () => (/* binding */ markTaskCompleted),\n/* harmony export */   tempConversations: () => (/* binding */ tempConversations),\n/* harmony export */   tempUsers: () => (/* binding */ tempUsers),\n/* harmony export */   tempWeeklyReports: () => (/* binding */ tempWeeklyReports),\n/* harmony export */   updateConversationSession: () => (/* binding */ updateConversationSession),\n/* harmony export */   updateUser: () => (/* binding */ updateUser),\n/* harmony export */   validateStudentId: () => (/* binding */ validateStudentId)\n/* harmony export */ });\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n// Temporary user storage - replace with database later\n// Singleton pattern to persist data across requests\nconst globalForStorage = globalThis;\nconst tempUsers = globalForStorage.tempUsers ?? [];\nconst tempWeeklyReports = globalForStorage.tempWeeklyReports ?? [];\n// Assign to globalThis to persist across requests\nglobalForStorage.tempUsers = tempUsers;\nglobalForStorage.tempWeeklyReports = tempWeeklyReports;\nfunction addUser(user) {\n    tempUsers.push(user);\n}\nfunction findUserByEmail(email) {\n    return tempUsers.find((user)=>user.email === email);\n}\nfunction findUserByStudentId(studentId) {\n    return tempUsers.find((user)=>user.studentId === studentId);\n}\nfunction findUserById(id) {\n    return tempUsers.find((user)=>user.id === id);\n}\nfunction getAllUsers() {\n    return tempUsers;\n}\nfunction findUsersByRole(role) {\n    return tempUsers.filter((user)=>user.role === role);\n}\nfunction findUsersByProgram(program) {\n    return tempUsers.filter((user)=>user.program === program);\n}\nfunction findUsersByStatus(status) {\n    return tempUsers.filter((user)=>user.status === status);\n}\nfunction updateUser(id, updates) {\n    const userIndex = tempUsers.findIndex((user)=>user.id === id);\n    if (userIndex !== -1) {\n        tempUsers[userIndex] = {\n            ...tempUsers[userIndex],\n            ...updates,\n            updatedAt: new Date()\n        };\n        return tempUsers[userIndex];\n    }\n    return null;\n}\nfunction deleteUser(id) {\n    const userIndex = tempUsers.findIndex((user)=>user.id === id);\n    if (userIndex !== -1) {\n        return tempUsers.splice(userIndex, 1)[0];\n    }\n    return null;\n}\nfunction validateStudentId(studentId) {\n    // Formato sugerido: EST-YYYY-XXX (ej: EST-2024-001)\n    const studentIdRegex = /^EST-\\d{4}-\\d{3}$/;\n    return studentIdRegex.test(studentId);\n}\nfunction generateStudentId() {\n    const currentYear = new Date().getFullYear();\n    const existingIds = tempUsers.filter((user)=>user.studentId && user.studentId.startsWith(`EST-${currentYear}`)).map((user)=>user.studentId).sort();\n    let nextNumber = 1;\n    if (existingIds.length > 0) {\n        const lastId = existingIds[existingIds.length - 1];\n        const lastNumber = parseInt(lastId.split('-')[2]);\n        nextNumber = lastNumber + 1;\n    }\n    return `EST-${currentYear}-${nextNumber.toString().padStart(3, '0')}`;\n}\n// Weekly Reports Functions\nfunction addWeeklyReport(report) {\n    tempWeeklyReports.push(report);\n}\nfunction findWeeklyReportsByUser(userId) {\n    return tempWeeklyReports.filter((report)=>report.userId === userId);\n}\nfunction findWeeklyReportByUserAndWeek(userId, weekStart) {\n    return tempWeeklyReports.find((report)=>report.userId === userId && report.weekStart.getTime() === weekStart.getTime());\n}\nfunction getAllWeeklyReports() {\n    return tempWeeklyReports;\n}\nfunction getWeeklyReportsByDateRange(startDate, endDate) {\n    return tempWeeklyReports.filter((report)=>report.weekStart >= startDate && report.weekEnd <= endDate);\n}\n// Date utility functions\nfunction getCurrentWeekStart() {\n    const now = new Date();\n    const monday = new Date(now);\n    const day = now.getDay();\n    const diff = now.getDate() - day + (day === 0 ? -6 : 1 // Adjust for Sunday\n    );\n    monday.setDate(diff);\n    monday.setHours(0, 0, 0, 0);\n    return monday;\n}\nfunction getCurrentWeekEnd() {\n    const weekStart = getCurrentWeekStart();\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekStart.getDate() + 6);\n    weekEnd.setHours(23, 59, 59, 999);\n    return weekEnd;\n}\nfunction canSubmitThisWeek(userId) {\n    const weekStart = getCurrentWeekStart();\n    const weekEnd = getCurrentWeekEnd();\n    const currentDate = new Date();\n    const existingReport = findWeeklyReportByUserAndWeek(userId, weekStart);\n    // Can submit if:\n    // 1. We are currently in this week (currentDate is between weekStart and weekEnd)\n    // 2. No report exists for this week\n    const isCurrentWeek = currentDate >= weekStart && currentDate <= weekEnd;\n    console.log(`🔍 Debug canSubmitThisWeek for user ${userId}:`);\n    console.log(`  Current date: ${currentDate.toISOString()}`);\n    console.log(`  Week start: ${weekStart.toISOString()}`);\n    console.log(`  Week end: ${weekEnd.toISOString()}`);\n    console.log(`  Is current week: ${isCurrentWeek}`);\n    console.log(`  Existing report: ${existingReport ? 'YES' : 'NO'}`);\n    console.log(`  Can submit: ${isCurrentWeek && !existingReport}`);\n    return isCurrentWeek && !existingReport;\n}\nfunction getWeekDates(date) {\n    const start = new Date(date);\n    const day = start.getDay();\n    const diff = start.getDate() - day + (day === 0 ? -6 : 1);\n    start.setDate(diff);\n    start.setHours(0, 0, 0, 0);\n    const end = new Date(start);\n    end.setDate(start.getDate() + 6);\n    end.setHours(23, 59, 59, 999);\n    return {\n        start,\n        end\n    };\n}\nfunction getMonthWeeks(year, month) {\n    const weeks = [];\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    let current = new Date(firstDay);\n    // Adjust to start from Monday of first week\n    const dayOfWeek = current.getDay();\n    const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n    current.setDate(current.getDate() - daysToSubtract);\n    while(current <= lastDay){\n        const weekStart = new Date(current);\n        const weekEnd = new Date(current);\n        weekEnd.setDate(weekStart.getDate() + 6);\n        weeks.push({\n            start: weekStart,\n            end: weekEnd\n        });\n        current.setDate(current.getDate() + 7);\n    }\n    return weeks;\n}\n// ===== CALENDAR FUNCTIONS =====\n// These functions integrate with the calendar system for Sara AI\nfunction getEvents(userId) {\n    // Import calendar data functions\n    try {\n        const { getUserCalendarData } = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n        const userData = getUserCalendarData(userId);\n        return userData?.events || [];\n    } catch (error) {\n        console.error('Error getting calendar events:', error);\n        return [];\n    }\n}\nfunction getAllCalendarEvents(userId) {\n    // Alias for getEvents for compatibility\n    return getEvents(userId);\n}\nfunction getUpcomingEvents(userId, days = 30) {\n    try {\n        const allEvents = getEvents(userId);\n        const now = new Date();\n        const futureDate = new Date();\n        futureDate.setDate(futureDate.getDate() + days);\n        return allEvents.filter((event)=>{\n            const eventDate = new Date(event.date);\n            return eventDate >= now && eventDate <= futureDate;\n        }).sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n    } catch (error) {\n        console.error('Error getting upcoming events:', error);\n        return [];\n    }\n}\nfunction getEventsForDateRange(userId, startDate, endDate) {\n    try {\n        const allEvents = getEvents(userId);\n        return allEvents.filter((event)=>{\n            const eventDate = new Date(event.date);\n            return eventDate >= startDate && eventDate <= endDate;\n        });\n    } catch (error) {\n        console.error('Error getting events for date range:', error);\n        return [];\n    }\n}\nfunction findEventById(userId, eventId) {\n    try {\n        const allEvents = getEvents(userId);\n        return allEvents.find((event)=>event.id === eventId) || null;\n    } catch (error) {\n        console.error('Error finding event by ID:', error);\n        return null;\n    }\n}\n// Global storage for conversations\nconst globalForConversations = globalThis;\nconst tempConversations = globalForConversations.tempConversations ?? [];\nglobalForConversations.tempConversations = tempConversations;\nfunction getConversationSession(userId, sessionId) {\n    return tempConversations.find((session)=>session.userId === userId && session.sessionId === sessionId) || null;\n}\nfunction createConversationSession(userId, sessionId) {\n    // First remove any old session for the same user/sessionId\n    const existingIndex = tempConversations.findIndex((session)=>session.userId === userId && session.sessionId === sessionId);\n    if (existingIndex !== -1) {\n        tempConversations.splice(existingIndex, 1);\n    }\n    const newSession = {\n        userId,\n        sessionId,\n        turns: [],\n        currentTopic: undefined,\n        currentSubject: undefined,\n        pendingTasks: [],\n        lastUpdate: new Date()\n    };\n    tempConversations.push(newSession);\n    console.log(`💬 Created conversation session ${sessionId} for user ${userId}`);\n    return newSession;\n}\nfunction updateConversationSession(session) {\n    const index = tempConversations.findIndex((s)=>s.userId === session.userId && s.sessionId === session.sessionId);\n    if (index !== -1) {\n        tempConversations[index] = {\n            ...session,\n            lastUpdate: new Date()\n        };\n        console.log(`💬 Updated session ${session.sessionId} - ${session.turns.length} turns`);\n    } else {\n        tempConversations.push({\n            ...session,\n            lastUpdate: new Date()\n        });\n        console.log(`💬 Created new session ${session.sessionId} during update`);\n    }\n    return session;\n}\nfunction addConversationTurn(userId, sessionId, role, content, metadata = {}) {\n    let session = getConversationSession(userId, sessionId);\n    if (!session) {\n        session = createConversationSession(userId, sessionId);\n    }\n    const turn = {\n        id: `turn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        timestamp: new Date(),\n        role,\n        content,\n        metadata\n    };\n    session.turns.push(turn);\n    // Keep only last 20 turns per session\n    if (session.turns.length > 20) {\n        session.turns = session.turns.slice(-20);\n    }\n    return updateConversationSession(session);\n}\nfunction addPendingTask(userId, sessionId, type, description, data) {\n    let session = getConversationSession(userId, sessionId);\n    if (!session) {\n        session = createConversationSession(userId, sessionId);\n    }\n    const task = {\n        id: `task_${Date.now()}`,\n        type,\n        description,\n        data,\n        completed: false,\n        createdAt: new Date()\n    };\n    session.pendingTasks.push(task);\n    console.log(`📋 Added pending task: ${description}`);\n    updateConversationSession(session);\n}\nfunction markTaskCompleted(userId, sessionId, taskId, result) {\n    const session = getConversationSession(userId, sessionId);\n    if (!session) return false;\n    const task = session.pendingTasks.find((t)=>t.id === taskId);\n    if (!task) return false;\n    task.completed = true;\n    if (result) {\n        task.data.result = result;\n    }\n    console.log(`✅ Completed task: ${task.description}`);\n    updateConversationSession(session);\n    return true;\n}\nfunction getPendingTasks(userId, sessionId) {\n    const session = getConversationSession(userId, sessionId);\n    if (!session) return [];\n    return session.pendingTasks.filter((task)=>!task.completed);\n}\nfunction getConversationHistory(userId, sessionId, limit = 10) {\n    const session = getConversationSession(userId, sessionId);\n    if (!session) return [];\n    return session.turns.slice(-limit);\n}\nfunction getUserActiveSessions(userId) {\n    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n    return tempConversations.filter((session)=>session.userId === userId && session.lastUpdate > oneHourAgo);\n}\nfunction cleanupOldConversations() {\n    const sixHoursAgo = new Date(Date.now() - 6 * 60 * 60 * 1000);\n    const before = tempConversations.length;\n    // Remove conversations older than 6 hours\n    for(let i = tempConversations.length - 1; i >= 0; i--){\n        if (tempConversations[i].lastUpdate < sixHoursAgo) {\n            tempConversations.splice(i, 1);\n        }\n    }\n    const after = tempConversations.length;\n    if (before !== after) {\n        console.log(`🧹 Cleaned up ${before - after} old conversation sessions`);\n    }\n}\n// Initialize default users automatically\n\nfunction initDefaultUsers() {\n    // Check if demo users already exist to avoid duplicates\n    const studentExists = findUserByEmail(\"estudiante@demo.com\");\n    const instructorExists = findUserByEmail(\"instructor@demo.com\");\n    if (!studentExists || !instructorExists) {\n        console.log(\"🔧 Inicializando usuarios por defecto...\");\n        try {\n            const hashedPassword = bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hashSync(\"Estudiante123!!!\", 12);\n            // Only add student if doesn't exist\n            if (!studentExists) {\n                addUser({\n                    id: \"demo-student-fixed\",\n                    name: \"Estudiante Demo\",\n                    email: \"estudiante@demo.com\",\n                    password: hashedPassword,\n                    role: \"STUDENT\",\n                    studentId: \"EST-2025-001\",\n                    status: \"ACTIVE\",\n                    enrollmentYear: 2025,\n                    academicYear: \"2025-2026\",\n                    program: \"Ingeniería en Sistemas\",\n                    phoneNumber: \"+1234567890\",\n                    dateOfBirth: new Date(\"2000-01-01\"),\n                    address: \"Demo Address 123\",\n                    emergencyContact: {\n                        name: \"Contacto Demo\",\n                        phone: \"+0987654321\",\n                        relationship: \"Padre\"\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                });\n                console.log(\"✅ Usuario estudiante demo creado\");\n            }\n            // Only add instructor if doesn't exist\n            if (!instructorExists) {\n                addUser({\n                    id: \"demo-instructor-fixed\",\n                    name: \"Instructor Demo\",\n                    email: \"instructor@demo.com\",\n                    password: hashedPassword,\n                    role: \"INSTRUCTOR\",\n                    studentId: null,\n                    status: \"ACTIVE\",\n                    enrollmentYear: 2025,\n                    academicYear: \"2025-2026\",\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                });\n                console.log(\"✅ Usuario instructor demo creado\");\n            }\n            console.log(\"✅ Verificación de usuarios por defecto completada\");\n        } catch (error) {\n            console.error(\"❌ Error creando usuarios por defecto:\", error);\n        }\n    } else {\n        console.log(\"✅ Usuarios demo ya existen, no se reinicializan\");\n    }\n    // Always check and initialize sample reports\n    initSampleReports();\n}\nfunction initSampleReports() {\n    // Check if sample reports already exist for demo student\n    const existingSampleReports = tempWeeklyReports.filter((report)=>report.userId === \"demo-student-fixed\");\n    if (existingSampleReports.length === 0) {\n        console.log(\"📝 Inicializando reportes de muestra...\");\n        try {\n            // Get current week dates\n            const now = new Date();\n            const currentWeek = getCurrentWeekStart();\n            const currentWeekEnd = getCurrentWeekEnd();\n            // Previous week\n            const prevWeek = new Date(currentWeek);\n            prevWeek.setDate(prevWeek.getDate() - 7);\n            const prevWeekEnd = new Date(currentWeekEnd);\n            prevWeekEnd.setDate(prevWeekEnd.getDate() - 7);\n            // Sample report from previous week\n            addWeeklyReport({\n                id: \"sample-report-1\",\n                userId: \"demo-student-fixed\",\n                weekStart: prevWeek,\n                weekEnd: prevWeekEnd,\n                submittedAt: new Date(prevWeekEnd.getTime() - 24 * 60 * 60 * 1000),\n                responses: {\n                    temasYDominio: \"Esta semana trabajamos con JavaScript básico - Nivel 3: Domino funciones y arrays, y estoy aprendiendo objetos complejos.\",\n                    evidenciaAprendizaje: \"Completé un proyecto de To-Do List usando JavaScript vanilla. Implementé funciones para agregar, editar y eliminar tareas usando arrays y objetos.\",\n                    dificultadesEstrategias: \"Tuve dificultades con el manejo de eventos en JavaScript. Lo resolví practicando con ejemplos y consultando documentación de MDN.\",\n                    conexionesAplicacion: \"Los conceptos de eventos se conectan con la interactividad en aplicaciones web. Puedo aplicarlo para crear interfaces más dinámicas.\",\n                    comentariosAdicionales: \"Me siento más confiado con JavaScript. Quiero seguir practicando con proyectos más complejos.\"\n                }\n            });\n            // Two weeks ago report  \n            const twoWeeksAgo = new Date(currentWeek);\n            twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);\n            const twoWeeksAgoEnd = new Date(currentWeekEnd);\n            twoWeeksAgoEnd.setDate(twoWeeksAgoEnd.getDate() - 14);\n            addWeeklyReport({\n                id: \"sample-report-2\",\n                userId: \"demo-student-fixed\",\n                weekStart: twoWeeksAgo,\n                weekEnd: twoWeeksAgoEnd,\n                submittedAt: new Date(twoWeeksAgoEnd.getTime() - 12 * 60 * 60 * 1000),\n                responses: {\n                    temasYDominio: \"Esta semana estudiamos CSS Grid y Flexbox - Nivel 2: Entiendo los conceptos básicos pero aún tengo dudas con layouts complejos.\",\n                    evidenciaAprendizaje: \"Recreé el layout de una página web usando CSS Grid. Logré hacer una estructura responsive con header, sidebar y main content.\",\n                    dificultadesEstrategias: \"Me confundí con las propiedades grid-template-areas. Resolví el problema dibujando el layout en papel primero.\",\n                    conexionesAplicacion: \"CSS Grid es perfecto para crear layouts de páginas web modernas. Lo usaré en mi proyecto final de página portfolio.\",\n                    comentariosAdicionales: \"CSS es más divertido de lo que pensaba. Me gusta ver los resultados visuales inmediatos.\"\n                }\n            });\n            console.log(\"✅ Reportes de muestra creados exitosamente\");\n        } catch (error) {\n            console.error(\"❌ Error creando reportes de muestra:\", error);\n        }\n    } else {\n        console.log(\"✅ Reportes de muestra ya existen, no se reinicializan\");\n    }\n}\n// Initialize on module load\ninitDefaultUsers();\n// Start conversation cleanup interval\nsetInterval(cleanupOldConversations, 30 * 60 * 1000) // Every 30 minutes\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/temp-storage.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/visual-learning-engine.ts":
/*!*******************************************!*\
  !*** ./src/lib/visual-learning-engine.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VisualLearningEngine: () => (/* binding */ VisualLearningEngine),\n/* harmony export */   VisualType: () => (/* binding */ VisualType)\n/* harmony export */ });\n// Visual Learning Engine for Sara AI\n// Generates ASCII diagrams, conceptual maps, and visual representations for enhanced learning\nvar VisualType = /*#__PURE__*/ function(VisualType) {\n    VisualType[\"CONCEPT_MAP\"] = \"concept_map\";\n    VisualType[\"FLOWCHART\"] = \"flowchart\";\n    VisualType[\"HIERARCHY\"] = \"hierarchy\";\n    VisualType[\"TIMELINE\"] = \"timeline\";\n    VisualType[\"DIAGRAM\"] = \"diagram\";\n    VisualType[\"FORMULA_VISUALIZATION\"] = \"formula_visualization\";\n    VisualType[\"CHEMICAL_STRUCTURE\"] = \"chemical_structure\";\n    VisualType[\"MATH_GRAPH\"] = \"math_graph\";\n    VisualType[\"PROCESS_FLOW\"] = \"process_flow\";\n    return VisualType;\n}({});\nclass VisualLearningEngine {\n    /**\n   * Generates visual representation based on content and type\n   */ static generateVisual(content, type, subject) {\n        switch(type){\n            case \"concept_map\":\n                return this.generateConceptMap(content, subject);\n            case \"flowchart\":\n                return this.generateFlowchart(content);\n            case \"hierarchy\":\n                return this.generateHierarchy(content);\n            case \"timeline\":\n                return this.generateTimeline(content);\n            case \"formula_visualization\":\n                return this.generateFormulaVisualization(content);\n            case \"chemical_structure\":\n                return this.generateChemicalStructure(content);\n            case \"process_flow\":\n                return this.generateProcessFlow(content);\n            default:\n                return this.generateGenericDiagram(content);\n        }\n    }\n    /**\n   * Auto-detects the best visual type for content\n   */ static detectOptimalVisualType(content, subject) {\n        const contentLower = content.toLowerCase();\n        // Chemical formulas and structures\n        if (subject === 'chemistry' || subject === 'química' || /h2o|co2|nacl|ch4|formula|molecular|átomo|molécula/.test(contentLower)) {\n            return \"chemical_structure\";\n        }\n        // Mathematical formulas\n        if (subject === 'mathematics' || subject === 'matemáticas' || /ecuación|formula|función|derivada|integral|gráfica/.test(contentLower)) {\n            return \"formula_visualization\";\n        }\n        // Process or step-by-step content\n        if (/paso|step|proceso|luego|después|entonces|primero|segundo/.test(contentLower)) {\n            return \"process_flow\";\n        }\n        // Hierarchical content\n        if (/clasificación|categoría|tipo|nivel|jerarquía|superior|inferior/.test(contentLower)) {\n            return \"hierarchy\";\n        }\n        // Timeline content\n        if (/año|fecha|siglo|época|antes|después|historia|cronología/.test(contentLower)) {\n            return \"timeline\";\n        }\n        // Conceptual relationships\n        if (/relación|concepto|idea|conecta|vincula|asocia/.test(contentLower)) {\n            return \"concept_map\";\n        }\n        // Default to flowchart for general content\n        return \"flowchart\";\n    }\n    /**\n   * Generates concept map visualization\n   */ static generateConceptMap(content, subject) {\n        const concepts = this.extractConcepts(content);\n        const mainConcept = concepts[0] || 'Concepto Principal';\n        const relatedConcepts = concepts.slice(1, 5);\n        let ascii = `\n┌─────────────────────┐\n│   ${this.centerText(mainConcept, 17)}   │\n└─────────┬───────────┘\n          │\n    ┌─────┴─────┐\n    │           │`;\n        relatedConcepts.forEach((concept, index)=>{\n            if (index < 2) {\n                ascii += `\n┌──────────────┐    ┌──────────────┐\n│ ${this.centerText(concept, 12)} │    │              │\n└──────────────┘    └──────────────┘`;\n            }\n        });\n        if (relatedConcepts.length > 2) {\n            ascii += `\n    │           │\n┌───┴─────┐ ┌─────┴───┐`;\n            relatedConcepts.slice(2, 4).forEach((concept)=>{\n                ascii += `\n│ ${this.centerText(concept, 7)} │ │         │`;\n            });\n            ascii += `\n└─────────┘ └─────────┘`;\n        }\n        return {\n            type: \"concept_map\",\n            ascii: ascii,\n            description: `Mapa conceptual que muestra las relaciones entre ${mainConcept} y conceptos relacionados`,\n            elements: concepts.map((concept, index)=>({\n                    id: `concept_${index}`,\n                    type: \"concept_map\",\n                    title: concept,\n                    content: `Concepto: ${concept}`,\n                    connections: index === 0 ? relatedConcepts : [\n                        mainConcept\n                    ]\n                })),\n            instructions: [\n                'El concepto central aparece en la parte superior',\n                'Las líneas conectan conceptos relacionados',\n                'Los conceptos secundarios se ramifican del principal'\n            ]\n        };\n    }\n    /**\n   * Generates flowchart visualization\n   */ static generateFlowchart(content) {\n        const steps = this.extractSteps(content);\n        let ascii = `┌─────────────┐\\n│   INICIO    │\\n└──────┬──────┘\\n       │\\n       ▼`;\n        steps.forEach((step, index)=>{\n            const stepText = this.truncateText(step, 15);\n            ascii += `\n┌─────────────────┐\n│ ${this.centerText(stepText, 15)} │\n└─────────┬───────┘\n          │\n          ▼`;\n        });\n        ascii += `\n┌─────────────┐\n│    FIN      │\n└─────────────┘`;\n        return {\n            type: \"flowchart\",\n            ascii: ascii,\n            description: `Diagrama de flujo que muestra ${steps.length} pasos del proceso`,\n            elements: steps.map((step, index)=>({\n                    id: `step_${index}`,\n                    type: \"flowchart\",\n                    title: `Paso ${index + 1}`,\n                    content: step,\n                    connections: index < steps.length - 1 ? [\n                        `step_${index + 1}`\n                    ] : []\n                })),\n            instructions: [\n                'Sigue las flechas de arriba hacia abajo',\n                'Cada caja representa un paso del proceso',\n                'El flujo va desde INICIO hasta FIN'\n            ]\n        };\n    }\n    /**\n   * Generates hierarchy visualization\n   */ static generateHierarchy(content) {\n        const hierarchyItems = this.extractHierarchy(content);\n        const root = hierarchyItems[0] || 'Elemento Principal';\n        const children = hierarchyItems.slice(1, 4);\n        const grandchildren = hierarchyItems.slice(4, 8);\n        let ascii = `\n                    ┌──────────────────┐\n                    │ ${this.centerText(root, 16)} │\n                    └─────────┬────────┘\n                              │\n                 ┌────────────┼────────────┐`;\n        children.forEach((child, index)=>{\n            const spacing = index === 0 ? '     ' : index === 1 ? '           ' : '                 ';\n            ascii += `\n        ┌─────────────┐${spacing}┌─────────────┐\n        │ ${this.centerText(child, 11)} │${spacing}│             │\n        └─────────────┘${spacing}└─────────────┘`;\n        });\n        if (grandchildren.length > 0) {\n            ascii += `\n              │                     │\n        ┌─────┴─────┐         ┌─────┴─────┐`;\n            grandchildren.slice(0, 2).forEach((item)=>{\n                ascii += `\n        │ ${this.centerText(item, 9)} │         │           │`;\n            });\n            ascii += `\n        └───────────┘         └───────────┘`;\n        }\n        return {\n            type: \"hierarchy\",\n            ascii: ascii,\n            description: `Jerarquía que muestra la estructura de ${root} con ${children.length} niveles`,\n            elements: hierarchyItems.map((item, index)=>({\n                    id: `hierarchy_${index}`,\n                    type: \"hierarchy\",\n                    title: item,\n                    content: `Elemento de jerarquía: ${item}`,\n                    connections: index === 0 ? children : []\n                })),\n            instructions: [\n                'El elemento principal está en la parte superior',\n                'Los elementos secundarios se conectan hacia abajo',\n                'Cada nivel representa una subdivisión'\n            ]\n        };\n    }\n    /**\n   * Generates timeline visualization\n   */ static generateTimeline(content) {\n        const timeEvents = this.extractTimelineEvents(content);\n        let ascii = `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n`;\n        timeEvents.forEach((event, index)=>{\n            const eventText = this.truncateText(event.event, 20);\n            const timeText = event.time || `T${index + 1}`;\n            if (index % 2 === 0) {\n                // Event above timeline\n                ascii += `┌─────────────────────┐\\n│ ${this.centerText(eventText, 19)} │\\n└──────────┬──────────┘\\n           │\\n`;\n                ascii += `━━━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n`;\n                ascii += `           ${timeText}\\n\\n`;\n            } else {\n                // Event below timeline\n                ascii += `           │\\n           ┼\\n┌──────────┴──────────┐\\n│ ${this.centerText(eventText, 19)} │\\n└─────────────────────┘\\n`;\n            }\n        });\n        return {\n            type: \"timeline\",\n            ascii: ascii,\n            description: `Línea de tiempo con ${timeEvents.length} eventos cronológicos`,\n            elements: timeEvents.map((event, index)=>({\n                    id: `event_${index}`,\n                    type: \"timeline\",\n                    title: event.time || `Evento ${index + 1}`,\n                    content: event.event,\n                    connections: []\n                })),\n            instructions: [\n                'Los eventos se muestran en orden cronológico',\n                'La línea horizontal representa el tiempo',\n                'Los eventos alternos aparecen arriba y abajo de la línea'\n            ]\n        };\n    }\n    /**\n   * Generates formula visualization\n   */ static generateFormulaVisualization(content) {\n        const formula = this.extractFormula(content);\n        const variables = this.extractVariables(content);\n        let ascii = `\n╔═══════════════════════════════════╗\n║         FÓRMULA MATEMÁTICA        ║\n╠═══════════════════════════════════╣\n║                                   ║\n║         ${this.centerText(formula, 19)}         ║\n║                                   ║\n╠═══════════════════════════════════╣\n║           VARIABLES:              ║`;\n        variables.forEach((variable)=>{\n            ascii += `\n║  ${variable.symbol} = ${this.truncateText(variable.description, 20)}    ║`;\n        });\n        ascii += `\n║                                   ║\n╚═══════════════════════════════════╝\n\n    Representación visual:\n    \n         ${formula}\n         ↙     ↘\n    Variable   Resultado\n      ${variables[0]?.symbol || 'x'}         y`;\n        return {\n            type: \"formula_visualization\",\n            ascii: ascii,\n            description: `Visualización de la fórmula ${formula} con ${variables.length} variables`,\n            elements: [\n                {\n                    id: 'formula_main',\n                    type: \"formula_visualization\",\n                    title: 'Fórmula Principal',\n                    content: formula,\n                    connections: variables.map((_, index)=>`var_${index}`)\n                }\n            ].concat(variables.map((variable, index)=>({\n                    id: `var_${index}`,\n                    type: \"formula_visualization\",\n                    title: variable.symbol,\n                    content: variable.description,\n                    connections: []\n                }))),\n            instructions: [\n                'La fórmula principal se muestra en el centro',\n                'Las variables se definen en la tabla inferior',\n                'Sustituye los valores para resolver'\n            ]\n        };\n    }\n    /**\n   * Generates chemical structure visualization\n   */ static generateChemicalStructure(content) {\n        const molecule = this.extractMolecule(content);\n        const atoms = this.extractAtoms(content);\n        let ascii = '';\n        // Simple molecular representations\n        if (molecule.toLowerCase().includes('h2o') || molecule.toLowerCase().includes('agua')) {\n            ascii = `\n        Estructura del Agua (H₂O)\n        \n            H\n            │\n        H─O─H    o    H─O─H\n            \n        Representación angular:\n        \n            H\n             \\\\\n              O\n             /\n            H\n              \n        Ángulo H-O-H: 104.5°`;\n        } else if (molecule.toLowerCase().includes('co2')) {\n            ascii = `\n        Estructura del CO₂\n        \n        O═C═O\n        \n        Lineal, 180°\n        \n        Enlaces dobles:\n        O ══ C ══ O`;\n        } else if (molecule.toLowerCase().includes('ch4') || molecule.toLowerCase().includes('metano')) {\n            ascii = `\n        Estructura del Metano (CH₄)\n        \n           H\n           │\n        H─C─H\n           │\n           H\n           \n        Tetraédrica\n        Ángulo H-C-H: 109.5°`;\n        } else {\n            ascii = `\n        Estructura Molecular\n        \n        ${molecule}\n        \n        Átomos identificados:\n        ${atoms.map((atom)=>`• ${atom}`).join('\\n        ')}\n        \n        Representación esquemática:\n        \n        [Átomo1]─[Átomo2]─[Átomo3]`;\n        }\n        return {\n            type: \"chemical_structure\",\n            ascii: ascii,\n            description: `Estructura química de ${molecule} mostrando ${atoms.length} tipos de átomos`,\n            elements: [\n                {\n                    id: 'molecule_main',\n                    type: \"chemical_structure\",\n                    title: molecule,\n                    content: `Molécula: ${molecule}`,\n                    connections: atoms.map((_, index)=>`atom_${index}`)\n                }\n            ].concat(atoms.map((atom, index)=>({\n                    id: `atom_${index}`,\n                    type: \"chemical_structure\",\n                    title: atom,\n                    content: `Átomo: ${atom}`,\n                    connections: []\n                }))),\n            instructions: [\n                'Los átomos se representan con sus símbolos',\n                'Las líneas representan enlaces químicos',\n                'Los ángulos muestran la geometría molecular'\n            ]\n        };\n    }\n    /**\n   * Generates process flow visualization\n   */ static generateProcessFlow(content) {\n        const processes = this.extractProcesses(content);\n        let ascii = `\n    FLUJO DEL PROCESO\n    \n    ┌─────────────┐`;\n        processes.forEach((process, index)=>{\n            const processText = this.truncateText(process, 15);\n            if (index === 0) {\n                ascii += `\n    │   ${this.centerText(processText, 9)}   │\n    └─────┬───────┘\n          │\n          ▼`;\n            } else {\n                ascii += `\n    ┌─────────────┐\n    │   ${this.centerText(processText, 9)}   │\n    └─────┬───────┘\n          │\n          ▼`;\n            }\n        });\n        ascii += `\n    ┌─────────────┐\n    │   FINAL     │\n    └─────────────┘`;\n        return {\n            type: \"process_flow\",\n            ascii: ascii,\n            description: `Flujo de proceso con ${processes.length} etapas secuenciales`,\n            elements: processes.map((process, index)=>({\n                    id: `process_${index}`,\n                    type: \"process_flow\",\n                    title: `Proceso ${index + 1}`,\n                    content: process,\n                    connections: index < processes.length - 1 ? [\n                        `process_${index + 1}`\n                    ] : []\n                })),\n            instructions: [\n                'Sigue el flujo de arriba hacia abajo',\n                'Cada caja representa una etapa del proceso',\n                'Las flechas indican la secuencia'\n            ]\n        };\n    }\n    /**\n   * Generates generic diagram\n   */ static generateGenericDiagram(content) {\n        const keyPoints = this.extractKeyPoints(content, 4);\n        let ascii = `\n    ╭─────────────────────────────────╮\n    │        DIAGRAMA GENERAL         │\n    ╰─────────────┬───────────────────╯\n                  │`;\n        keyPoints.forEach((point, index)=>{\n            const pointText = this.truncateText(point, 20);\n            ascii += `\n                  ▼\n    ┌─────────────────────────────┐\n    │ ${index + 1}. ${this.leftAlign(pointText, 23)} │\n    └─────────────────────────────┘`;\n        });\n        return {\n            type: \"diagram\",\n            ascii: ascii,\n            description: `Diagrama general con ${keyPoints.length} elementos principales`,\n            elements: keyPoints.map((point, index)=>({\n                    id: `point_${index}`,\n                    type: \"diagram\",\n                    title: `Punto ${index + 1}`,\n                    content: point,\n                    connections: []\n                })),\n            instructions: [\n                'Cada elemento se presenta de forma secuencial',\n                'Los números indican el orden de importancia',\n                'Revisa cada punto para comprensión completa'\n            ]\n        };\n    }\n    // ===== UTILITY FUNCTIONS =====\n    /**\n   * Extracts main concepts from content\n   */ static extractConcepts(content) {\n        const sentences = content.split(/[.!?]+/);\n        const concepts = [];\n        for (const sentence of sentences){\n            const words = sentence.trim().split(' ');\n            const importantWords = words.filter((word)=>word.length > 4 && ![\n                    'este',\n                    'esta',\n                    'estos',\n                    'estas',\n                    'cuando',\n                    'donde',\n                    'porque'\n                ].includes(word.toLowerCase()));\n            if (importantWords.length > 0) {\n                concepts.push(importantWords[0]);\n            }\n            if (concepts.length >= 5) break;\n        }\n        return concepts.length > 0 ? concepts : [\n            'Concepto Principal'\n        ];\n    }\n    /**\n   * Extracts steps from content\n   */ static extractSteps(content) {\n        // Look for numbered steps or sequential indicators\n        const stepPatterns = [\n            /\\d+[.)]\\s*([^.!?]+)/g,\n            /paso \\d+:?\\s*([^.!?]+)/gi,\n            /(primero|segundo|tercero|luego|después|finalmente)[,:]?\\s*([^.!?]+)/gi\n        ];\n        const steps = [];\n        for (const pattern of stepPatterns){\n            let match;\n            while((match = pattern.exec(content)) !== null && steps.length < 6){\n                const step = match[1] || match[2];\n                if (step && step.trim().length > 5) {\n                    steps.push(step.trim());\n                }\n            }\n        }\n        if (steps.length === 0) {\n            // Fallback: split by sentences\n            const sentences = content.split(/[.!?]+/);\n            steps.push(...sentences.slice(0, 4).filter((s)=>s.trim().length > 10));\n        }\n        return steps.slice(0, 5);\n    }\n    /**\n   * Extracts hierarchy items\n   */ static extractHierarchy(content) {\n        const hierarchyWords = [\n            'principal',\n            'secundario',\n            'tipo',\n            'categoría',\n            'clase',\n            'grupo'\n        ];\n        const items = [];\n        const sentences = content.split(/[.!?]+/);\n        for (const sentence of sentences){\n            for (const word of hierarchyWords){\n                if (sentence.toLowerCase().includes(word)) {\n                    const cleanSentence = sentence.replace(/^\\s*\\d+[.)]\\s*/, '').trim();\n                    if (cleanSentence.length > 5) {\n                        items.push(cleanSentence);\n                        break;\n                    }\n                }\n            }\n            if (items.length >= 6) break;\n        }\n        return items.length > 0 ? items : [\n            'Elemento Principal',\n            'Subelemento 1',\n            'Subelemento 2'\n        ];\n    }\n    /**\n   * Extracts timeline events\n   */ static extractTimelineEvents(content) {\n        const timePattern = /(\\d{4}|\\d{1,2}:\\d{2}|siglo \\w+|era \\w+)/gi;\n        const events = [];\n        const sentences = content.split(/[.!?]+/);\n        for (const sentence of sentences){\n            const timeMatch = sentence.match(timePattern);\n            if (timeMatch) {\n                events.push({\n                    time: timeMatch[0],\n                    event: sentence.replace(timePattern, '').trim()\n                });\n            }\n        }\n        if (events.length === 0) {\n            // Fallback timeline\n            const keyEvents = sentences.slice(0, 3).filter((s)=>s.trim().length > 10);\n            keyEvents.forEach((event, index)=>{\n                events.push({\n                    time: `T${index + 1}`,\n                    event: event.trim()\n                });\n            });\n        }\n        return events.slice(0, 5);\n    }\n    /**\n   * Extracts formula from content\n   */ static extractFormula(content) {\n        // Look for mathematical expressions\n        const formulaPatterns = [\n            /([a-zA-Z]\\s*[=]\\s*[^.!?]+)/,\n            /([a-zA-Z]+\\s*\\(\\s*[a-zA-Z,\\s]+\\s*\\))/,\n            /(f\\([x-z]\\)\\s*=\\s*[^.!?]+)/i,\n            /([xy]\\s*=\\s*[^.!?]+)/\n        ];\n        for (const pattern of formulaPatterns){\n            const match = content.match(pattern);\n            if (match) {\n                return match[1].trim();\n            }\n        }\n        // Fallback\n        if (content.includes('=')) {\n            const parts = content.split('=');\n            if (parts.length >= 2) {\n                return `${parts[0].trim()} = ${parts[1].split(/[.!?]/)[0].trim()}`;\n            }\n        }\n        return 'y = f(x)';\n    }\n    /**\n   * Extracts variables from content\n   */ static extractVariables(content) {\n        const variables = [];\n        // Look for variable definitions like \"donde x es...\"\n        const varPattern = /([a-zA-Z])\\s+es\\s+([^.!?]+)/gi;\n        let match;\n        while((match = varPattern.exec(content)) !== null && variables.length < 4){\n            variables.push({\n                symbol: match[1],\n                description: match[2].trim()\n            });\n        }\n        if (variables.length === 0) {\n            variables.push({\n                symbol: 'x',\n                description: 'variable independiente'\n            }, {\n                symbol: 'y',\n                description: 'variable dependiente'\n            });\n        }\n        return variables;\n    }\n    /**\n   * Extracts molecule information\n   */ static extractMolecule(content) {\n        const moleculePatterns = [\n            /([A-Z][a-z]?\\d*)+/g,\n            /(agua|metano|dióxido|carbono|oxígeno|hidrógeno)/i\n        ];\n        for (const pattern of moleculePatterns){\n            const match = content.match(pattern);\n            if (match) {\n                return match[0];\n            }\n        }\n        return 'Molécula';\n    }\n    /**\n   * Extracts atoms from content\n   */ static extractAtoms(content) {\n        const atomSymbols = content.match(/[A-Z][a-z]?/g) || [];\n        const uniqueAtoms = [\n            ...new Set(atomSymbols)\n        ];\n        if (uniqueAtoms.length === 0) {\n            return [\n                'C',\n                'H',\n                'O'\n            ];\n        }\n        return uniqueAtoms.slice(0, 5);\n    }\n    /**\n   * Extracts processes from content\n   */ static extractProcesses(content) {\n        const processes = this.extractSteps(content);\n        return processes.length > 0 ? processes : [\n            'Proceso 1',\n            'Proceso 2',\n            'Proceso 3'\n        ];\n    }\n    /**\n   * Extracts key points from content\n   */ static extractKeyPoints(content, limit = 4) {\n        const sentences = content.split(/[.!?]+/);\n        return sentences.filter((s)=>s.trim().length > 10).slice(0, limit).map((s)=>s.trim());\n    }\n    // ===== TEXT FORMATTING UTILITIES =====\n    /**\n   * Centers text in a fixed width\n   */ static centerText(text, width) {\n        const truncated = this.truncateText(text, width);\n        const padding = Math.max(0, width - truncated.length);\n        const leftPad = Math.floor(padding / 2);\n        const rightPad = padding - leftPad;\n        return ' '.repeat(leftPad) + truncated + ' '.repeat(rightPad);\n    }\n    /**\n   * Left aligns text in a fixed width\n   */ static leftAlign(text, width) {\n        const truncated = this.truncateText(text, width);\n        const padding = Math.max(0, width - truncated.length);\n        return truncated + ' '.repeat(padding);\n    }\n    /**\n   * Truncates text to fit width\n   */ static truncateText(text, maxWidth) {\n        if (text.length <= maxWidth) {\n            return text;\n        }\n        return text.substring(0, maxWidth - 3) + '...';\n    }\n    /**\n   * Main entry point - analyzes content and generates appropriate visual\n   */ static generateOptimalVisual(content, subject) {\n        const optimalType = this.detectOptimalVisualType(content, subject);\n        return this.generateVisual(content, optimalType, subject);\n    }\n    /**\n   * Generates multiple visual options for user to choose from\n   */ static generateVisualOptions(content, subject) {\n        const primaryType = this.detectOptimalVisualType(content, subject);\n        const options = [\n            this.generateVisual(content, primaryType, subject)\n        ];\n        // Add alternative visualizations\n        const alternativeTypes = [\n            \"concept_map\",\n            \"flowchart\",\n            \"diagram\"\n        ];\n        for (const type of alternativeTypes){\n            if (type !== primaryType && options.length < 3) {\n                options.push(this.generateVisual(content, type, subject));\n            }\n        }\n        return options;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/visual-learning-engine.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/web-search-integration.ts":
/*!*******************************************!*\
  !*** ./src/lib/web-search-integration.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSearchIntegration: () => (/* binding */ WebSearchIntegration)\n/* harmony export */ });\n// Integración del WebSearch Tool con el Sistema Académico de Sara\n// Proporciona búsquedas web reales usando el WebSearch tool disponible\nclass WebSearchIntegration {\n    /**\n   * Realiza búsqueda web usando el WebSearch tool disponible\n   */ static async performWebSearch(query) {\n        try {\n            // En un entorno real, aquí se usaría el WebSearch tool\n            // Por ahora, simularemos resultados realistas hasta que se integre\n            console.log(`🔍 Web search query: ${query}`);\n            // TODO: Integrar con WebSearch tool real cuando esté disponible\n            // const webSearchResults = await WebSearch.search(query)\n            // Mientras tanto, generar resultados simulados basados en el query\n            return this.generateRealisticResults(query);\n        } catch (error) {\n            console.error('Error in web search:', error);\n            return this.generateFallbackResults(query);\n        }\n    }\n    /**\n   * Convierte query académico en query optimizado para web\n   */ static optimizeQueryForWeb(academicQuery) {\n        const { topic, subject, searchType, level, language } = academicQuery;\n        let webQuery = topic;\n        // Agregar contexto de materia\n        if (subject) {\n            webQuery = `${subject} ${webQuery}`;\n        }\n        // Agregar términos específicos según el tipo de búsqueda\n        const searchTypeTerms = {\n            explanation: language === 'es' ? 'explicación concepto tutorial' : 'explanation concept tutorial',\n            examples: language === 'es' ? 'ejemplos casos prácticos' : 'examples practical cases',\n            exercises: language === 'es' ? 'ejercicios problemas resueltos' : 'exercises solved problems',\n            resources: language === 'es' ? 'recursos materiales estudio' : 'resources study materials',\n            research: language === 'es' ? 'investigación papers académicos' : 'research academic papers'\n        };\n        webQuery += ` ${searchTypeTerms[searchType]}`;\n        // Agregar nivel de dificultad\n        if (level) {\n            const levelTerms = {\n                es: {\n                    basic: 'básico principiante',\n                    intermediate: 'intermedio',\n                    advanced: 'avanzado'\n                },\n                en: {\n                    basic: 'basic beginner',\n                    intermediate: 'intermediate',\n                    advanced: 'advanced'\n                }\n            };\n            webQuery += ` ${levelTerms[language || 'es'][level]}`;\n        }\n        // Agregar términos de calidad académica\n        const qualityTerms = language === 'es' ? 'educativo académico universidad' : 'educational academic university';\n        webQuery += ` ${qualityTerms}`;\n        return webQuery.trim();\n    }\n    /**\n   * Convierte resultados web en formato académico\n   */ static convertToAcademicResults(webResults, originalQuery) {\n        return webResults.map((result)=>({\n                title: result.title,\n                content: result.content || result.snippet || '',\n                source: this.extractDomain(result.url),\n                relevanceScore: this.calculateWebRelevance(result, originalQuery),\n                difficulty: this.inferDifficultyFromContent(result.content || result.snippet || '', originalQuery.level),\n                contentType: this.classifyWebContentType(result),\n                summary: this.generateContentSummary(result.content || result.snippet || ''),\n                keyPoints: this.extractWebKeyPoints(result.content || result.snippet || ''),\n                relatedTopics: this.identifyWebRelatedTopics(result.content || result.snippet || '', originalQuery.topic),\n                estimatedReadTime: this.estimateWebReadTime(result.content || result.snippet || '')\n            }));\n    }\n    /**\n   * Calcula relevancia específica para resultados web\n   */ static calculateWebRelevance(result, query) {\n        let score = 0.5;\n        const content = (result.content || result.snippet || '').toLowerCase();\n        const title = result.title.toLowerCase();\n        const topic = query.topic.toLowerCase();\n        const url = result.url.toLowerCase();\n        // Coincidencia en título (alta puntuación)\n        if (title.includes(topic)) score += 0.3;\n        // Coincidencia en contenido\n        if (content.includes(topic)) score += 0.2;\n        // Dominios educativos obtienen mayor puntuación\n        if (url.includes('edu') || url.includes('academic') || url.includes('university')) {\n            score += 0.3;\n        } else if (url.includes('wikipedia') || url.includes('khan')) {\n            score += 0.2;\n        }\n        // Contenido más largo generalmente es más útil\n        if (content.length > 300) score += 0.1;\n        // Penalizar contenido muy corto\n        if (content.length < 50) score -= 0.2;\n        return Math.max(0, Math.min(1, score));\n    }\n    /**\n   * Clasifica el tipo de contenido web\n   */ static classifyWebContentType(result) {\n        const content = (result.content || result.snippet || '').toLowerCase();\n        const title = result.title.toLowerCase();\n        const url = result.url.toLowerCase();\n        if (url.includes('youtube') || url.includes('vimeo') || content.includes('video')) {\n            return 'video';\n        }\n        if (content.includes('ejercicio') || content.includes('problema') || title.includes('exercise')) {\n            return 'exercise';\n        }\n        if (url.includes('scholar') || content.includes('research') || content.includes('journal')) {\n            return 'academic_paper';\n        }\n        if (content.includes('tutorial') || content.includes('how to') || title.includes('guía')) {\n            return 'tutorial';\n        }\n        return 'article';\n    }\n    /**\n   * Genera resultados realistas para desarrollo y testing\n   */ static generateRealisticResults(query) {\n        const queryLower = query.toLowerCase();\n        // Generar resultados específicos según el tipo de consulta\n        const results = [];\n        if (queryLower.includes('matemáticas') || queryLower.includes('mathematics')) {\n            results.push({\n                title: 'Khan Academy - Matemáticas Gratuitas',\n                content: 'Aprende matemáticas de forma gratuita con ejercicios interactivos, videos y artículos. Desde aritmética básica hasta cálculo avanzado.',\n                url: 'https://es.khanacademy.org/math',\n                snippet: 'Plataforma educativa con cursos completos de matemáticas para todos los niveles.'\n            }, {\n                title: 'Matemáticas Universitarias - MIT OpenCourseWare',\n                content: 'Cursos completos del MIT sobre matemáticas universitarias incluyendo álgebra lineal, cálculo y matemáticas discretas.',\n                url: 'https://ocw.mit.edu/courses/mathematics/',\n                snippet: 'Recursos académicos de alta calidad del MIT para matemáticas avanzadas.'\n            });\n        }\n        if (queryLower.includes('química') || queryLower.includes('chemistry')) {\n            results.push({\n                title: 'LibreTexts Química - Recursos Educativos',\n                content: 'Biblioteca completa de textos de química con explicaciones detalladas, ejemplos y problemas resueltos.',\n                url: 'https://chem.libretexts.org/',\n                snippet: 'Textos académicos gratuitos sobre química general, orgánica e inorgánica.'\n            }, {\n                title: 'ChemSketch - Simulador de Reacciones',\n                content: 'Herramienta para simular reacciones químicas y entender mecanismos moleculares de forma visual.',\n                url: 'https://www.acdlabs.com/resources/free-chemistry-software-apps/',\n                snippet: 'Software gratuito para modelado molecular y simulación química.'\n            });\n        }\n        if (queryLower.includes('física') || queryLower.includes('physics')) {\n            results.push({\n                title: 'Physics Classroom - Conceptos de Física',\n                content: 'Tutoriales interactivos sobre conceptos fundamentales de física con simulaciones y experimentos virtuales.',\n                url: 'https://www.physicsclassroom.com/',\n                snippet: 'Recurso educativo para entender física desde conceptos básicos hasta avanzados.'\n            }, {\n                title: 'PhET Simulaciones Interactivas',\n                content: 'Simulaciones gratuitas de física, química y matemáticas desarrolladas por la Universidad de Colorado.',\n                url: 'https://phet.colorado.edu/es/',\n                snippet: 'Simulaciones interactivas para visualizar conceptos científicos complejos.'\n            });\n        }\n        // Resultados genéricos educativos\n        if (results.length === 0) {\n            results.push({\n                title: `Guía Completa: ${query}`,\n                content: `Explicación exhaustiva sobre ${query} con ejemplos prácticos, ejercicios resueltos y recursos adicionales para profundizar en el tema.`,\n                url: 'https://academia.edu/topics/' + encodeURIComponent(query),\n                snippet: `Recurso académico completo sobre ${query} con contenido verificado por expertos.`\n            }, {\n                title: `Tutorial Paso a Paso: ${query}`,\n                content: `Aprende ${query} de manera estructurada con explicaciones claras, ejemplos visuales y ejercicios progresivos.`,\n                url: 'https://coursera.org/learn/' + encodeURIComponent(query),\n                snippet: `Curso en línea con metodología probada para dominar ${query}.`\n            }, {\n                title: `${query} - Recursos y Herramientas`,\n                content: `Colección curada de los mejores recursos, herramientas y materiales de estudio para ${query}.`,\n                url: 'https://edx.org/course/' + encodeURIComponent(query),\n                snippet: `Recursos educativos de universidades prestigiosas sobre ${query}.`\n            });\n        }\n        return results;\n    }\n    /**\n   * Genera resultados de respaldo cuando la búsqueda falla\n   */ static generateFallbackResults(query) {\n        return [\n            {\n                title: 'Recurso Educativo Local',\n                content: `Información básica sobre ${query}. Considera consultar tu biblioteca local o recursos académicos institucionales.`,\n                url: 'local://academic-resources',\n                snippet: `Recurso de respaldo para ${query} cuando la búsqueda web no está disponible.`\n            }\n        ];\n    }\n    /**\n   * Infiere dificultad del contenido web\n   */ static inferDifficultyFromContent(content, suggestedLevel) {\n        if (suggestedLevel) return suggestedLevel;\n        const lowerContent = content.toLowerCase();\n        // Indicadores de nivel básico\n        const basicIndicators = [\n            'básico',\n            'introducción',\n            'principiante',\n            'simple',\n            'elementary'\n        ];\n        const basicCount = basicIndicators.filter((indicator)=>lowerContent.includes(indicator)).length;\n        // Indicadores de nivel avanzado\n        const advancedIndicators = [\n            'avanzado',\n            'complejo',\n            'doctoral',\n            'research',\n            'graduate'\n        ];\n        const advancedCount = advancedIndicators.filter((indicator)=>lowerContent.includes(indicator)).length;\n        if (advancedCount > basicCount) return 'advanced';\n        if (basicCount > 0) return 'basic';\n        return 'intermediate';\n    }\n    /**\n   * Genera resumen del contenido web\n   */ static generateContentSummary(content) {\n        if (!content || content.length < 20) {\n            return 'Recurso educativo disponible para consulta.';\n        }\n        const sentences = content.split(/[.!?]+/).filter((s)=>s.trim().length > 15);\n        const firstSentences = sentences.slice(0, 2).join('. ');\n        if (firstSentences.length > 200) {\n            return firstSentences.substring(0, 197) + '...';\n        }\n        return firstSentences || 'Contenido educativo sobre el tema consultado.';\n    }\n    /**\n   * Extrae puntos clave del contenido web\n   */ static extractWebKeyPoints(content) {\n        if (!content || content.length < 50) {\n            return [\n                'Información disponible en el recurso'\n            ];\n        }\n        const keyPoints = [];\n        // Buscar listas o puntos numerados\n        const listItems = content.match(/(?:^|\\n)\\s*[\\d\\-\\*\\•]\\s*([^\\n]+)/g);\n        if (listItems && listItems.length > 0) {\n            keyPoints.push(...listItems.slice(0, 3).map((item)=>item.replace(/^[\\s\\d\\-\\*\\•]+/, '').trim()));\n        }\n        // Si no hay listas, extraer oraciones importantes\n        if (keyPoints.length === 0) {\n            const sentences = content.split(/[.!?]+/).filter((s)=>s.length > 20 && s.length < 120).slice(0, 3);\n            keyPoints.push(...sentences.map((s)=>s.trim()));\n        }\n        return keyPoints.filter((point)=>point.length > 5);\n    }\n    /**\n   * Identifica temas relacionados del contenido web\n   */ static identifyWebRelatedTopics(content, mainTopic) {\n        const relatedTopics = [];\n        const lowerContent = content.toLowerCase();\n        const lowerTopic = mainTopic.toLowerCase();\n        // Diccionario expandido de relaciones temáticas\n        const topicRelations = {\n            'matemáticas': [\n                'álgebra',\n                'geometría',\n                'cálculo',\n                'estadística',\n                'trigonometría',\n                'aritmética'\n            ],\n            'física': [\n                'mecánica',\n                'termodinámica',\n                'electromagnetismo',\n                'óptica',\n                'ondas',\n                'energía'\n            ],\n            'química': [\n                'orgánica',\n                'inorgánica',\n                'analítica',\n                'bioquímica',\n                'reacciones',\n                'moléculas'\n            ],\n            'programación': [\n                'algoritmos',\n                'estructuras de datos',\n                'desarrollo web',\n                'inteligencia artificial',\n                'bases de datos'\n            ],\n            'biología': [\n                'genética',\n                'evolución',\n                'ecología',\n                'anatomía',\n                'fisiología',\n                'microbiología'\n            ],\n            'historia': [\n                'cronología',\n                'civilizaciones',\n                'guerras',\n                'cultura',\n                'política',\n                'economía'\n            ]\n        };\n        // Buscar relaciones directas\n        for (const [subject, relations] of Object.entries(topicRelations)){\n            if (lowerTopic.includes(subject) || lowerContent.includes(subject)) {\n                const foundRelations = relations.filter((relation)=>lowerContent.includes(relation) && !lowerTopic.includes(relation));\n                relatedTopics.push(...foundRelations);\n            }\n        }\n        return Array.from(new Set(relatedTopics)).slice(0, 4);\n    }\n    /**\n   * Estima tiempo de lectura del contenido web\n   */ static estimateWebReadTime(content) {\n        if (!content) return 1;\n        const wordsPerMinute = 200 // Velocidad promedio de lectura\n        ;\n        const wordCount = content.split(/\\s+/).length;\n        return Math.max(1, Math.ceil(wordCount / wordsPerMinute));\n    }\n    /**\n   * Extrae dominio de URL\n   */ static extractDomain(url) {\n        try {\n            const urlObj = new URL(url);\n            return urlObj.hostname.replace('www.', '');\n        } catch  {\n            return 'fuente web';\n        }\n    }\n    /**\n   * Integra búsqueda web con el sistema académico completo\n   */ static async performAcademicWebSearch(query) {\n        const startTime = Date.now();\n        try {\n            // Optimizar query para búsqueda web\n            const webQuery = this.optimizeQueryForWeb(query);\n            // Realizar búsqueda web\n            const webResults = await this.performWebSearch(webQuery);\n            // Convertir a formato académico\n            const academicResults = this.convertToAcademicResults(webResults, query);\n            // Calcular tiempo de búsqueda\n            const searchTime = Date.now() - startTime;\n            return {\n                query,\n                results: academicResults,\n                searchSuccess: academicResults.length > 0,\n                totalResults: academicResults.length,\n                searchTime,\n                personalizedRecommendations: this.generateWebRecommendations(academicResults, query),\n                followUpQuestions: this.generateWebFollowUps(query, academicResults),\n                suggestedActions: this.generateWebActions(academicResults)\n            };\n        } catch (error) {\n            console.error('Error in academic web search:', error);\n            return {\n                query,\n                results: [],\n                searchSuccess: false,\n                totalResults: 0,\n                searchTime: Date.now() - startTime,\n                personalizedRecommendations: [\n                    `Buscar \"${query.topic}\" en recursos académicos locales`\n                ],\n                followUpQuestions: [\n                    '¿Te gustaría que reformule la búsqueda?'\n                ],\n                suggestedActions: [\n                    'Verificar conexión a internet',\n                    'Intentar con términos más específicos'\n                ]\n            };\n        }\n    }\n    /**\n   * Genera recomendaciones basadas en resultados web\n   */ static generateWebRecommendations(results, query) {\n        const recommendations = [];\n        if (results.length === 0) {\n            recommendations.push(`No encontré resultados específicos para \"${query.topic}\". Te sugiero reformular la búsqueda.`);\n            return recommendations;\n        }\n        const hasVideos = results.some((r)=>r.contentType === 'video');\n        const hasExercises = results.some((r)=>r.contentType === 'exercise');\n        const highQualitySources = results.filter((r)=>r.relevanceScore > 0.7);\n        if (hasVideos) {\n            recommendations.push('Encontré videos explicativos que pueden ayudarte a visualizar los conceptos');\n        }\n        if (hasExercises) {\n            recommendations.push('Hay ejercicios prácticos disponibles para reforzar tu aprendizaje');\n        }\n        if (highQualitySources.length > 0) {\n            recommendations.push(`Identifiqué ${highQualitySources.length} fuentes de alta calidad académica`);\n        }\n        return recommendations;\n    }\n    /**\n   * Genera preguntas de seguimiento basadas en búsqueda web\n   */ static generateWebFollowUps(query, results) {\n        const followUps = [];\n        if (results.length > 0) {\n            followUps.push(`¿Te gustaría que profundice en algún aspecto específico de ${query.topic}?`);\n            const relatedTopics = Array.from(new Set(results.flatMap((r)=>r.relatedTopics))).slice(0, 2);\n            if (relatedTopics.length > 0) {\n                followUps.push(`¿Te interesa explorar ${relatedTopics.join(' o ')}?`);\n            }\n            if (query.searchType === 'explanation') {\n                followUps.push('¿Necesitas ejemplos prácticos para este tema?');\n            }\n        }\n        return followUps;\n    }\n    /**\n   * Genera acciones sugeridas basadas en resultados web\n   */ static generateWebActions(results) {\n        const actions = [];\n        if (results.length > 0) {\n            actions.push('Revisar los recursos encontrados por orden de relevancia');\n            const videos = results.filter((r)=>r.contentType === 'video');\n            if (videos.length > 0) {\n                actions.push('Ver videos explicativos para comprensión visual');\n            }\n            const exercises = results.filter((r)=>r.contentType === 'exercise');\n            if (exercises.length > 0) {\n                actions.push('Practicar con ejercicios encontrados');\n            }\n            actions.push('Tomar notas de los puntos clave identificados');\n        }\n        return actions;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/web-search-integration.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@xenova/transformers":
/*!***************************************!*\
  !*** external "@xenova/transformers" ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@xenova/transformers");;

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/jose","vendor-chunks/next-auth","vendor-chunks/openid-client","vendor-chunks/bcryptjs","vendor-chunks/@babel","vendor-chunks/oauth","vendor-chunks/preact","vendor-chunks/uuid","vendor-chunks/yallist","vendor-chunks/preact-render-to-string","vendor-chunks/cookie","vendor-chunks/oidc-token-hash","vendor-chunks/@panva","vendor-chunks/@novu","vendor-chunks/asynckit","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/form-data","vendor-chunks/call-bind-apply-helpers","vendor-chunks/debug","vendor-chunks/get-proto","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/follow-redirects","vendor-chunks/axios-retry","vendor-chunks/axios","vendor-chunks/supports-color","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/is-retry-allowed","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/has-flag","vendor-chunks/get-intrinsic","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/combined-stream"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fai-chat%2Finitialize%2Froute&page=%2Fapi%2Fai-chat%2Finitialize%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai-chat%2Finitialize%2Froute.ts&appDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();