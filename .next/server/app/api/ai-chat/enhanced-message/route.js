/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/ai-chat/enhanced-message/route";
exports.ids = ["app/api/ai-chat/enhanced-message/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fai-chat%2Fenhanced-message%2Froute&page=%2Fapi%2Fai-chat%2Fenhanced-message%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai-chat%2Fenhanced-message%2Froute.ts&appDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fai-chat%2Fenhanced-message%2Froute&page=%2Fapi%2Fai-chat%2Fenhanced-message%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai-chat%2Fenhanced-message%2Froute.ts&appDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_rodrigodibernardo33gmail_com_Documents_App_Development_Proyects_Intellego_Platform_src_app_api_ai_chat_enhanced_message_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/ai-chat/enhanced-message/route.ts */ \"(rsc)/./src/app/api/ai-chat/enhanced-message/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/ai-chat/enhanced-message/route\",\n        pathname: \"/api/ai-chat/enhanced-message\",\n        filename: \"route\",\n        bundlePath: \"app/api/ai-chat/enhanced-message/route\"\n    },\n    resolvedPagePath: \"/Users/rodrigodibernardo33gmail.com/Documents/App Development Proyects/Intellego Platform/src/app/api/ai-chat/enhanced-message/route.ts\",\n    nextConfigOutput,\n    userland: _Users_rodrigodibernardo33gmail_com_Documents_App_Development_Proyects_Intellego_Platform_src_app_api_ai_chat_enhanced_message_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhaS1jaGF0JTJGZW5oYW5jZWQtbWVzc2FnZSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGYWktY2hhdCUyRmVuaGFuY2VkLW1lc3NhZ2UlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZhaS1jaGF0JTJGZW5oYW5jZWQtbWVzc2FnZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnJvZHJpZ29kaWJlcm5hcmRvMzNnbWFpbC5jb20lMkZEb2N1bWVudHMlMkZBcHAlMjBEZXZlbG9wbWVudCUyMFByb3llY3RzJTJGSW50ZWxsZWdvJTIwUGxhdGZvcm0lMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGcm9kcmlnb2RpYmVybmFyZG8zM2dtYWlsLmNvbSUyRkRvY3VtZW50cyUyRkFwcCUyMERldmVsb3BtZW50JTIwUHJveWVjdHMlMkZJbnRlbGxlZ28lMjBQbGF0Zm9ybSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDcUI7QUFDdUY7QUFDcEs7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlHQUFtQjtBQUMzQztBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBc0Q7QUFDOUQ7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDMEY7O0FBRTFGIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9yb2RyaWdvZGliZXJuYXJkbzMzZ21haWwuY29tL0RvY3VtZW50cy9BcHAgRGV2ZWxvcG1lbnQgUHJveWVjdHMvSW50ZWxsZWdvIFBsYXRmb3JtL3NyYy9hcHAvYXBpL2FpLWNoYXQvZW5oYW5jZWQtbWVzc2FnZS9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYWktY2hhdC9lbmhhbmNlZC1tZXNzYWdlL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYWktY2hhdC9lbmhhbmNlZC1tZXNzYWdlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9haS1jaGF0L2VuaGFuY2VkLW1lc3NhZ2Uvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvcm9kcmlnb2RpYmVybmFyZG8zM2dtYWlsLmNvbS9Eb2N1bWVudHMvQXBwIERldmVsb3BtZW50IFByb3llY3RzL0ludGVsbGVnbyBQbGF0Zm9ybS9zcmMvYXBwL2FwaS9haS1jaGF0L2VuaGFuY2VkLW1lc3NhZ2Uvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fai-chat%2Fenhanced-message%2Froute&page=%2Fapi%2Fai-chat%2Fenhanced-message%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai-chat%2Fenhanced-message%2Froute.ts&appDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/ai-calendar/create-event/route.ts":
/*!*******************************************************!*\
  !*** ./src/app/api/ai-calendar/create-event/route.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/auth */ \"(rsc)/./src/lib/auth.ts\");\n/* harmony import */ var _lib_calendar_data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n\n\n\n\nasync function POST(request) {\n    try {\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_lib_auth__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Authentication required',\n                success: false\n            }, {\n                status: 401\n            });\n        }\n        const body = await request.json();\n        const { title, type, subject, date, startTime, endTime, duration, location, description, priority } = body;\n        // Validaciones básicas\n        if (!title || !type || !date) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Missing required fields: title, type, date',\n                success: false\n            }, {\n                status: 400\n            });\n        }\n        // Validar tipo de evento\n        const validTypes = [\n            'exam',\n            'study_session',\n            'class',\n            'personal',\n            'extracurricular'\n        ];\n        if (!validTypes.includes(type)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `Invalid event type. Must be one of: ${validTypes.join(', ')}`,\n                success: false\n            }, {\n                status: 400\n            });\n        }\n        // Procesar fecha\n        let eventDate;\n        try {\n            eventDate = new Date(date);\n            if (isNaN(eventDate.getTime())) {\n                throw new Error('Invalid date');\n            }\n        } catch (error) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid date format',\n                success: false\n            }, {\n                status: 400\n            });\n        }\n        // Calcular endTime si no se proporciona pero se tiene duration\n        let finalEndTime = endTime;\n        if (!endTime && startTime && duration) {\n            const start = new Date(`2000-01-01T${startTime}:00`);\n            const end = new Date(start.getTime() + duration * 60000);\n            finalEndTime = end.toTimeString().substring(0, 5);\n        }\n        // Crear el evento\n        const event = {\n            id: `ai-event-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            title: title.trim(),\n            date: eventDate,\n            startTime: startTime || '15:00',\n            endTime: finalEndTime || '16:00',\n            type: type,\n            color: (0,_lib_calendar_data__WEBPACK_IMPORTED_MODULE_3__.getEventTypeColor)(type),\n            subject: subject || undefined,\n            location: location || undefined,\n            description: description || 'Creado automáticamente por IA Tutora',\n            priority: priority || 'medium',\n            duration: duration || 60\n        };\n        // Intentar agregar el evento al calendario del usuario\n        const userId = session.user.id;\n        const success = (0,_lib_calendar_data__WEBPACK_IMPORTED_MODULE_3__.addCalendarEvent)(userId, event);\n        if (!success) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to create event in calendar',\n                success: false\n            }, {\n                status: 500\n            });\n        }\n        // Verificar que el evento se guardó correctamente\n        const userData = (0,_lib_calendar_data__WEBPACK_IMPORTED_MODULE_3__.getUserCalendarData)(userId);\n        const savedEvent = userData?.events.find((e)=>e.id === event.id);\n        if (!savedEvent) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Event was not saved correctly',\n                success: false\n            }, {\n                status: 500\n            });\n        }\n        console.log(`🤖 IA creó evento: ${event.title} para ${userId}`);\n        // Disparar evento global para notificar a los componentes frontend\n        if (typeof globalThis !== 'undefined') {\n            // Usar setTimeout para evitar problemas de timing\n            setTimeout(()=>{\n                if (false) {}\n            }, 100);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            event: savedEvent,\n            message: `Evento \"${event.title}\" creado exitosamente`,\n            totalEvents: userData?.events.length || 0\n        });\n    } catch (error) {\n        console.error('❌ Error in AI calendar creation:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error while creating event',\n            success: false\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/ai-calendar/create-event/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/app/api/ai-chat/enhanced-message/route.ts":
/*!*******************************************************!*\
  !*** ./src/app/api/ai-chat/enhanced-message/route.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/auth */ \"(rsc)/./src/lib/auth.ts\");\n/* harmony import */ var _lib_advanced_command_processor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/advanced-command-processor */ \"(rsc)/./src/lib/advanced-command-processor.ts\");\n/* harmony import */ var _lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/advanced-intent-engine */ \"(rsc)/./src/lib/advanced-intent-engine.ts\");\n/* harmony import */ var _lib_sara_personality__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/sara-personality */ \"(rsc)/./src/lib/sara-personality.ts\");\n/* harmony import */ var _lib_ai_providers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/ai-providers */ \"(rsc)/./src/lib/ai-providers.ts\");\n/* harmony import */ var _lib_conversation_memory__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/lib/conversation-memory */ \"(rsc)/./src/lib/conversation-memory.ts\");\n// API Endpoint para Mensajes Avanzados con Sara\n// Integra todos los sistemas avanzados para procesamiento inteligente\n\n\n\n\n\n\n\n\nasync function POST(request) {\n    try {\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_lib_auth__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session?.user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'No autorizado'\n            }, {\n                status: 401\n            });\n        }\n        const body = await request.json();\n        const { message, userId, userName, sessionId, currentMode, conversationHistory = [] } = body;\n        if (!message || !userId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Mensaje y userId son requeridos'\n            }, {\n                status: 400\n            });\n        }\n        // Use provided sessionId or generate a stable one\n        const actualSessionId = sessionId || `session_${userId}_${Date.now().toString(36)}`;\n        console.log('🎯 Processing message with stable sessionId:', actualSessionId);\n        // Procesar comando con el sistema avanzado\n        const commandContext = {\n            userId,\n            userName,\n            conversationHistory,\n            currentMode: currentMode || _lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.CHATTING,\n            lastCommands: []\n        };\n        const commandResult = await _lib_advanced_command_processor__WEBPACK_IMPORTED_MODULE_3__.AdvancedCommandProcessor.processCommand(message, commandContext);\n        // 🎯 PRIORIDAD: Usar mi sistema de conversación contextual mejorado\n        console.log('🤖 Using enhanced contextual conversation manager');\n        try {\n            const { ContextualConversationManager } = __webpack_require__(/*! @/lib/contextual-conversation-manager */ \"(rsc)/./src/lib/contextual-conversation-manager.ts\");\n            const contextualResponse = await ContextualConversationManager.processContextualMessage(userId, message, actualSessionId, userName);\n            console.log('✅ Contextual response generated:', {\n                contentLength: contextualResponse.content.length,\n                personalizations: contextualResponse.personalizations,\n                continuityScore: contextualResponse.continuityScore,\n                hasVisualRecommendation: !!contextualResponse.visualRecommendation\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                response: contextualResponse.content,\n                detectedIntent: contextualResponse.personalizations.includes('calendar_task_executed') ? 'calendar_management' : 'contextual_conversation',\n                suggestedActions: contextualResponse.suggestedFollowups,\n                followUpQuestions: [],\n                visualizations: contextualResponse.visualRecommendation ? [\n                    {\n                        type: contextualResponse.visualRecommendation.type,\n                        data: contextualResponse.visualRecommendation.reason\n                    }\n                ] : [],\n                priority: contextualResponse.personalizations.includes('calendar_task_executed') ? 'high' : 'medium',\n                resources: [],\n                continuityScore: contextualResponse.continuityScore,\n                personalizations: contextualResponse.personalizations\n            });\n        } catch (contextualError) {\n            console.error('⚠️ Contextual conversation manager failed, using command processor fallback:', contextualError);\n            // Fallback to original command processing\n            if (commandResult.success && commandResult.type !== 'error') {\n                const saraResponse = await _lib_sara_personality__WEBPACK_IMPORTED_MODULE_5__.SaraPersonalityEngine.generateContextualResponse(message, commandResult, userId, currentMode, actualSessionId);\n                const suggestedMode = currentMode // Temporal: mantener el modo actual\n                ;\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    response: saraResponse || commandResult.message,\n                    detectedIntent: commandResult.type,\n                    suggestedMode: suggestedMode !== currentMode ? suggestedMode : undefined,\n                    suggestedActions: commandResult.suggestedActions || [],\n                    followUpQuestions: commandResult.followUpQuestions || [],\n                    visualizations: commandResult.visualizations || [],\n                    priority: commandResult.data?.priority || 'medium',\n                    resources: commandResult.data?.resources || [],\n                    commandResult: commandResult\n                });\n            }\n        }\n        // Fallback: usar AI providers para respuesta general con memoria\n        const fallbackResponse = await generateFallbackResponse(message, conversationHistory, currentMode, userName, userId, actualSessionId);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            response: fallbackResponse.content,\n            detectedIntent: 'general_conversation',\n            suggestedActions: generateModeSuggestions(currentMode),\n            followUpQuestions: generateFollowUpQuestions(currentMode),\n            priority: 'low'\n        });\n    } catch (error) {\n        console.error('Error in enhanced-message endpoint:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            response: 'Lo siento, hubo un problema procesando tu mensaje. ¿Podrías intentar reformularlo?',\n            detectedIntent: 'error',\n            error: error instanceof Error ? error.message : 'Error desconocido'\n        }, {\n            status: 500\n        });\n    }\n}\nasync function generateFallbackResponse(message, conversationHistory, currentMode, userName, userId, sessionId) {\n    // Construir prompt contextual basado en el modo y memoria\n    const modeContext = getModeContext(currentMode);\n    // Integrar memoria conversacional si está disponible\n    let memoryContext = \"\";\n    if (userId) {\n        const contextualSummary = _lib_conversation_memory__WEBPACK_IMPORTED_MODULE_7__.ConversationMemoryManager.generateContextualSummary(userId, sessionId);\n        const personalizedSuggestions = _lib_conversation_memory__WEBPACK_IMPORTED_MODULE_7__.ConversationMemoryManager.getPersonalizedSuggestions(userId, sessionId);\n        memoryContext = `\nCONTEXTO DE MEMORIA CONVERSACIONAL:\n${contextualSummary}\n\nSUGERENCIAS PERSONALIZADAS DISPONIBLES:\n${personalizedSuggestions.length > 0 ? personalizedSuggestions.map((s)=>`• ${s}`).join('\\n') : '• Esta es una nueva conversación'}\n`;\n    }\n    const prompt = `${modeContext}\n${memoryContext}\n\nUsuario: ${userName || 'Estudiante'}\nMensaje: ${message}\n\nResponde como Sara, un asistente personal académico amigable y proactivo. \nMantén el foco en el modo actual: ${currentMode}.\nUsa la memoria conversacional para personalizar tu respuesta y dar continuidad.\nProporciona una respuesta útil y sugiere acciones específicas.`;\n    try {\n        // Intentar con proveedores AI\n        const response = await _lib_ai_providers__WEBPACK_IMPORTED_MODULE_6__.aiService.generateExercise(prompt);\n        // Verificar si necesitamos usar template fallback\n        if (response === 'TEMPLATE_FALLBACK') {\n            const templateResponse = getTemplateResponse(currentMode, message);\n            // Guardar respuesta template en memoria\n            if (userId) {\n                _lib_conversation_memory__WEBPACK_IMPORTED_MODULE_7__.ConversationMemoryManager.saveConversationTurn(userId, message, templateResponse, currentMode.toString(), 'template_fallback', sessionId);\n            }\n            return {\n                content: templateResponse\n            };\n        }\n        // Guardar en memoria conversacional si está disponible\n        if (userId) {\n            _lib_conversation_memory__WEBPACK_IMPORTED_MODULE_7__.ConversationMemoryManager.saveConversationTurn(userId, message, response, currentMode.toString(), 'ai_conversation', sessionId);\n        }\n        return {\n            content: response\n        };\n    } catch (error) {\n        console.error('Error with AI providers:', error);\n        // Respuesta template por modo\n        const templateResponse = getTemplateResponse(currentMode, message);\n        // Guardar respuesta template en memoria también\n        if (userId) {\n            _lib_conversation_memory__WEBPACK_IMPORTED_MODULE_7__.ConversationMemoryManager.saveConversationTurn(userId, message, templateResponse, currentMode.toString(), 'template_fallback', sessionId);\n        }\n        return {\n            content: templateResponse\n        };\n    }\n}\nfunction getModeContext(mode) {\n    const contexts = {\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.PLANNING]: 'Estás ayudando con planificación y organización de estudios. Enfócate en horarios, calendarios y planes de estudio.',\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.TUTORING]: 'Estás en modo tutoría. Ayuda con conceptos académicos, ejercicios y explicaciones detalladas.',\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.ORGANIZING]: 'Estás ayudando con organización de materiales y recursos de estudio.',\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.REVIEWING]: 'Estás analizando progreso y rendimiento académico del estudiante.',\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.CHATTING]: 'Estás en conversación casual, proporcionando apoyo motivacional y respuestas generales.'\n    };\n    return contexts[mode] || contexts[_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.CHATTING];\n}\nfunction getTemplateResponse(mode, message) {\n    const templates = {\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.PLANNING]: `Entiendo que necesitas ayuda con planificación. Como Sara, puedo ayudarte a:\n\n• Organizar tu horario de estudio\n• Crear planes personalizados\n• Optimizar tu tiempo\n• Programar sesiones efectivas\n\n¿Qué aspecto específico de la planificación te gustaría abordar?`,\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.TUTORING]: `Como tu tutor personal, estoy aquí para ayudarte con:\n\n• Explicaciones de conceptos\n• Resolución de ejercicios paso a paso\n• Práctica dirigida\n• Aclaración de dudas\n\n¿En qué materia o tema específico necesitas ayuda?`,\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.ORGANIZING]: `Te ayudo a organizar tus recursos de estudio:\n\n• Gestión de materiales\n• Organización de apuntes\n• Búsqueda de recursos\n• Estructuración de contenido\n\n¿Qué necesitas organizar específicamente?`,\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.REVIEWING]: `Analicemos tu progreso académico:\n\n• Revisión de calificaciones\n• Análisis de tendencias\n• Identificación de áreas de mejora\n• Recomendaciones personalizadas\n\n¿Qué aspecto de tu rendimiento quieres revisar?`,\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.CHATTING]: `¡Hola! Soy Sara, tu asistente académico personal. \n\nEstoy aquí para apoyarte en tu camino educativo. Puedo ayudarte con organización, planificación, tutoría y mucho más.\n\n¿En qué puedo ayudarte hoy?`\n    };\n    return templates[mode] || templates[_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.CHATTING];\n}\nfunction generateModeSuggestions(mode) {\n    const suggestions = {\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.PLANNING]: [\n            'Crear plan de estudio semanal',\n            'Optimizar mi horario',\n            'Programar sesiones de repaso',\n            'Analizar tiempo disponible'\n        ],\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.TUTORING]: [\n            'Explicar concepto de matemáticas',\n            'Resolver ejercicio paso a paso',\n            'Practicar problemas',\n            'Aclarar dudas'\n        ],\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.ORGANIZING]: [\n            'Organizar mis materiales',\n            'Buscar recursos de estudio',\n            'Estructurar mis apuntes',\n            'Gestionar archivos'\n        ],\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.REVIEWING]: [\n            'Analizar mi progreso',\n            'Ver tendencias de calificaciones',\n            'Revisar objetivos',\n            'Identificar áreas de mejora'\n        ],\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.CHATTING]: [\n            'Planificar mi semana',\n            'Necesito motivación',\n            'Ayuda con organización',\n            'Analizar mi rendimiento'\n        ]\n    };\n    return suggestions[mode] || suggestions[_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.CHATTING];\n}\nfunction generateFollowUpQuestions(mode) {\n    const questions = {\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.PLANNING]: [\n            '¿Para qué período quieres planificar?',\n            '¿Hay alguna materia que requiere atención especial?'\n        ],\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.TUTORING]: [\n            '¿En qué materia tienes más dificultades?',\n            '¿Prefieres explicaciones teóricas o ejercicios prácticos?'\n        ],\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.ORGANIZING]: [\n            '¿Qué tipo de materiales necesitas organizar?',\n            '¿Para qué materias buscas recursos adicionales?'\n        ],\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.REVIEWING]: [\n            '¿Qué período quieres analizar?',\n            '¿Hay alguna materia específica que te preocupa?'\n        ],\n        [_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.CHATTING]: [\n            '¿Cómo te sientes con tus estudios actualmente?',\n            '¿En qué área académica puedo apoyarte más?'\n        ]\n    };\n    return questions[mode] || questions[_lib_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_4__.ConversationMode.CHATTING];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/ai-chat/enhanced-message/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/academic-analyzer.ts":
/*!**************************************!*\
  !*** ./src/lib/academic-analyzer.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AcademicAnalyzer: () => (/* binding */ AcademicAnalyzer),\n/* harmony export */   AcademicSubject: () => (/* binding */ AcademicSubject),\n/* harmony export */   DifficultyLevel: () => (/* binding */ DifficultyLevel),\n/* harmony export */   SUBJECT_TOPICS: () => (/* binding */ SUBJECT_TOPICS)\n/* harmony export */ });\n/* harmony import */ var _temp_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n\n// Definición de materias académicas\nvar AcademicSubject = /*#__PURE__*/ function(AcademicSubject) {\n    AcademicSubject[\"MATHEMATICS\"] = \"mathematics\";\n    AcademicSubject[\"PHYSICS\"] = \"physics\";\n    AcademicSubject[\"CHEMISTRY\"] = \"chemistry\";\n    AcademicSubject[\"BIOLOGY\"] = \"biology\";\n    AcademicSubject[\"SPANISH\"] = \"spanish\";\n    AcademicSubject[\"ENGLISH\"] = \"english\";\n    AcademicSubject[\"HISTORY\"] = \"history\";\n    AcademicSubject[\"GEOGRAPHY\"] = \"geography\";\n    AcademicSubject[\"GENERAL\"] = \"general\";\n    return AcademicSubject;\n}({});\n// Nivel de dificultad detectado\nvar DifficultyLevel = /*#__PURE__*/ function(DifficultyLevel) {\n    DifficultyLevel[\"BASIC\"] = \"basic\";\n    DifficultyLevel[\"INTERMEDIATE\"] = \"intermediate\";\n    DifficultyLevel[\"ADVANCED\"] = \"advanced\";\n    DifficultyLevel[\"REVIEW_NEEDED\"] = \"review_needed\";\n    return DifficultyLevel;\n}({});\n// Temas específicos por materia\nconst SUBJECT_TOPICS = {\n    [\"mathematics\"]: [\n        'algebra',\n        'geometria',\n        'trigonometria',\n        'calculo',\n        'estadistica',\n        'probabilidad',\n        'ecuaciones',\n        'funciones',\n        'logaritmos',\n        'matrices',\n        'derivadas',\n        'integrales'\n    ],\n    [\"physics\"]: [\n        'cinematica',\n        'dinamica',\n        'energia',\n        'ondas',\n        'termodinamica',\n        'electricidad',\n        'magnetismo',\n        'optica',\n        'mecanica',\n        'fluidos',\n        'movimiento',\n        'fuerza',\n        'velocidad'\n    ],\n    [\"chemistry\"]: [\n        'atomos',\n        'moleculas',\n        'enlaces',\n        'reacciones',\n        'estequiometria',\n        'acidos',\n        'bases',\n        'oxidacion',\n        'reduccion',\n        'equilibrio',\n        'cinetica',\n        'termoquimica'\n    ]\n};\n// Palabras clave que indican dificultades\nconst DIFFICULTY_INDICATORS = {\n    high: [\n        'muy difícil',\n        'no entiendo',\n        'confuso',\n        'complicado',\n        'imposible',\n        'no puedo'\n    ],\n    medium: [\n        'difícil',\n        'complicado',\n        'no comprendo',\n        'me cuesta',\n        'problema'\n    ],\n    low: [\n        'un poco difícil',\n        'necesito ayuda',\n        'no está claro',\n        'dudas'\n    ]\n};\n// Palabras clave que indican progreso positivo\nconst PROGRESS_INDICATORS = {\n    excellent: [\n        'excelente',\n        'perfecto',\n        'domino',\n        'fácil',\n        'entiendo todo'\n    ],\n    good: [\n        'bien',\n        'entiendo',\n        'comprendo',\n        'logré',\n        'mejorando'\n    ],\n    fair: [\n        'más o menos',\n        'regular',\n        'algunas veces',\n        'avanzando'\n    ]\n};\nclass AcademicAnalyzer {\n    /**\n   * Analiza los reportes académicos de un estudiante\n   */ static async analyzeStudent(userId) {\n        const reports = _temp_storage__WEBPACK_IMPORTED_MODULE_0__.tempWeeklyReports.filter((report)=>report.userId === userId);\n        if (reports.length === 0) {\n            return this.createDefaultAnalysis(userId);\n        }\n        // Analizar reportes recientes (últimas 8 semanas)\n        const recentReports = reports.sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()).slice(0, 8);\n        // Extraer todo el texto de las respuestas\n        const allResponseText = recentReports.flatMap((report)=>Object.values(report.responses || {})).filter(Boolean).join(' ').toLowerCase();\n        // Analizar por materias\n        const subjectAnalyses = this.analyzeSubjects(allResponseText, recentReports);\n        // Análisis general\n        const overallPerformance = this.calculateOverallPerformance(subjectAnalyses);\n        const strugglingAreas = this.identifyStrugglingAreas(subjectAnalyses, allResponseText);\n        const strengths = this.identifyStrengths(subjectAnalyses, allResponseText);\n        const recommendedTopics = this.generateRecommendations(subjectAnalyses);\n        const learningPattern = this.identifyLearningPattern(allResponseText);\n        return {\n            userId,\n            subjects: subjectAnalyses,\n            overallPerformance,\n            strugglingAreas,\n            strengths,\n            recommendedTopics,\n            learningPattern,\n            lastReportDate: new Date(recentReports[0]?.createdAt || Date.now())\n        };\n    }\n    /**\n   * Analiza materias específicas mencionadas en los reportes\n   */ static analyzeSubjects(text, reports) {\n        const analyses = [];\n        // Palabras clave para identificar materias\n        const subjectKeywords = {\n            [\"mathematics\"]: [\n                'matemática',\n                'matemáticas',\n                'mate',\n                'álgebra',\n                'geometría',\n                'cálculo',\n                'números'\n            ],\n            [\"physics\"]: [\n                'física',\n                'mecánica',\n                'energía',\n                'fuerza',\n                'movimiento',\n                'velocidad'\n            ],\n            [\"chemistry\"]: [\n                'química',\n                'átomos',\n                'moléculas',\n                'reacciones',\n                'elementos',\n                'laboratorio'\n            ],\n            [\"biology\"]: [\n                'biología',\n                'células',\n                'organismos',\n                'evolución',\n                'ecosistema'\n            ],\n            [\"spanish\"]: [\n                'lengua',\n                'español',\n                'literatura',\n                'redacción',\n                'gramática'\n            ],\n            [\"english\"]: [\n                'inglés',\n                'english',\n                'grammar',\n                'vocabulary'\n            ],\n            [\"history\"]: [\n                'historia',\n                'civilización',\n                'época',\n                'guerra',\n                'revolución'\n            ],\n            [\"geography\"]: [\n                'geografía',\n                'países',\n                'continentes',\n                'clima',\n                'población'\n            ]\n        };\n        Object.entries(subjectKeywords).forEach(([subject, keywords])=>{\n            const mentions = keywords.filter((keyword)=>text.includes(keyword)).length;\n            if (mentions > 0) {\n                const analysis = this.analyzeSpecificSubject(subject, text, reports, mentions);\n                analyses.push(analysis);\n            }\n        });\n        // Si no se encontraron materias específicas, agregar análisis general\n        if (analyses.length === 0) {\n            analyses.push(this.createGeneralSubjectAnalysis(text, reports));\n        }\n        return analyses;\n    }\n    /**\n   * Analiza una materia específica\n   */ static analyzeSpecificSubject(subject, text, reports, mentions) {\n        const subjectName = this.getSubjectDisplayName(subject);\n        const topics = SUBJECT_TOPICS[subject] || [];\n        // Detectar temas mencionados\n        const mentionedTopics = topics.filter((topic)=>text.includes(topic));\n        // Analizar dificultades específicas\n        const specificChallenges = this.extractSpecificChallenges(text, subject);\n        // Calcular rendimiento basado en indicadores\n        const performance = this.calculateSubjectPerformance(text, specificChallenges.length);\n        // Determinar nivel de dificultad\n        const difficultyLevel = this.determineDifficultyLevel(performance, specificChallenges.length);\n        // Determinar si necesita atención\n        const needsAttention = performance < 60 || specificChallenges.length > 2;\n        return {\n            subject,\n            subjectName,\n            performance,\n            difficultyLevel,\n            strugglingTopics: mentionedTopics.slice(0, 3),\n            masteredTopics: performance > 75 ? mentionedTopics.slice(0, 2) : [],\n            recentMentions: mentions,\n            needsAttention,\n            specificChallenges\n        };\n    }\n    /**\n   * Extrae desafíos específicos mencionados por el estudiante\n   */ static extractSpecificChallenges(text, subject) {\n        const challenges = [];\n        // Buscar patrones de dificultad\n        const difficultyPatterns = [\n            /no entiendo (.*?)(?:\\.|,|$)/g,\n            /me cuesta (.*?)(?:\\.|,|$)/g,\n            /difícil (.*?)(?:\\.|,|$)/g,\n            /problema con (.*?)(?:\\.|,|$)/g,\n            /confuso (.*?)(?:\\.|,|$)/g\n        ];\n        difficultyPatterns.forEach((pattern)=>{\n            let match;\n            while((match = pattern.exec(text)) !== null){\n                if (match[1] && match[1].length < 50) {\n                    challenges.push(match[1].trim());\n                }\n            }\n        });\n        return challenges.slice(0, 3) // Máximo 3 desafíos específicos\n        ;\n    }\n    /**\n   * Calcula el rendimiento de una materia\n   */ static calculateSubjectPerformance(text, challengesCount) {\n        let score = 70 // Base score\n        ;\n        // Indicadores positivos\n        Object.entries(PROGRESS_INDICATORS).forEach(([level, indicators])=>{\n            const multiplier = level === 'excellent' ? 10 : level === 'good' ? 5 : 2;\n            indicators.forEach((indicator)=>{\n                if (text.includes(indicator)) {\n                    score += multiplier;\n                }\n            });\n        });\n        // Indicadores negativos\n        Object.entries(DIFFICULTY_INDICATORS).forEach(([level, indicators])=>{\n            const penalty = level === 'high' ? 15 : level === 'medium' ? 10 : 5;\n            indicators.forEach((indicator)=>{\n                if (text.includes(indicator)) {\n                    score -= penalty;\n                }\n            });\n        });\n        // Penalizar por número de desafíos específicos\n        score -= challengesCount * 8;\n        return Math.max(0, Math.min(100, score));\n    }\n    /**\n   * Determina el nivel de dificultad basado en el rendimiento\n   */ static determineDifficultyLevel(performance, challengesCount) {\n        if (performance < 40 || challengesCount > 3) return \"review_needed\";\n        if (performance < 60) return \"basic\";\n        if (performance < 80) return \"intermediate\";\n        return \"advanced\";\n    }\n    /**\n   * Crea análisis por defecto para estudiantes sin reportes\n   */ static createDefaultAnalysis(userId) {\n        return {\n            userId,\n            subjects: [\n                this.createGeneralSubjectAnalysis('', [])\n            ],\n            overallPerformance: 50,\n            strugglingAreas: [\n                'Falta de datos históricos'\n            ],\n            strengths: [\n                'Nuevo estudiante con potencial'\n            ],\n            recommendedTopics: [\n                'Evaluación inicial',\n                'Fundamentos'\n            ],\n            learningPattern: 'mixed',\n            lastReportDate: new Date()\n        };\n    }\n    /**\n   * Crea análisis general cuando no se detectan materias específicas\n   */ static createGeneralSubjectAnalysis(text, reports) {\n        const performance = text.length > 0 ? this.calculateSubjectPerformance(text, 0) : 50;\n        return {\n            subject: \"general\",\n            subjectName: 'Análisis General',\n            performance,\n            difficultyLevel: this.determineDifficultyLevel(performance, 0),\n            strugglingTopics: [],\n            masteredTopics: [],\n            recentMentions: reports.length,\n            needsAttention: performance < 60,\n            specificChallenges: this.extractSpecificChallenges(text, \"general\")\n        };\n    }\n    /**\n   * Calcula el rendimiento general\n   */ static calculateOverallPerformance(subjects) {\n        if (subjects.length === 0) return 50;\n        const average = subjects.reduce((sum, subject)=>sum + subject.performance, 0) / subjects.length;\n        return Math.round(average);\n    }\n    /**\n   * Identifica áreas con dificultades\n   */ static identifyStrugglingAreas(subjects, text) {\n        const areas = [];\n        // Agregar materias con bajo rendimiento\n        subjects.filter((subject)=>subject.needsAttention).forEach((subject)=>{\n            areas.push(`${subject.subjectName}: ${subject.specificChallenges.join(', ')}`);\n        });\n        // Si no hay áreas específicas, buscar patrones generales\n        if (areas.length === 0 && text.length > 0) {\n            if (text.includes('tiempo')) areas.push('Gestión del tiempo');\n            if (text.includes('concentr')) areas.push('Concentración');\n            if (text.includes('motiv')) areas.push('Motivación');\n        }\n        return areas.slice(0, 3);\n    }\n    /**\n   * Identifica fortalezas del estudiante\n   */ static identifyStrengths(subjects, text) {\n        const strengths = [];\n        // Agregar materias con buen rendimiento\n        subjects.filter((subject)=>subject.performance > 75).forEach((subject)=>{\n            strengths.push(`Dominio en ${subject.subjectName}`);\n        });\n        // Patrones de fortaleza general\n        if (text.includes('organiz')) strengths.push('Capacidad de organización');\n        if (text.includes('persever') || text.includes('persist')) strengths.push('Perseverancia');\n        if (text.includes('creativ')) strengths.push('Pensamiento creativo');\n        return strengths.length > 0 ? strengths.slice(0, 3) : [\n            'Dedicación al aprendizaje'\n        ];\n    }\n    /**\n   * Genera recomendaciones de temas\n   */ static generateRecommendations(subjects) {\n        const recommendations = [];\n        subjects.forEach((subject)=>{\n            if (subject.needsAttention) {\n                recommendations.push(`Reforzar conceptos básicos de ${subject.subjectName}`);\n                if (subject.strugglingTopics.length > 0) {\n                    recommendations.push(`Practicar: ${subject.strugglingTopics.join(', ')}`);\n                }\n            }\n        });\n        return recommendations.slice(0, 4);\n    }\n    /**\n   * Identifica el patrón de aprendizaje\n   */ static identifyLearningPattern(text) {\n        const visualKeywords = [\n            'gráfico',\n            'diagrama',\n            'imagen',\n            'visual',\n            'dibujo'\n        ];\n        const analyticalKeywords = [\n            'análisis',\n            'lógica',\n            'razonamiento',\n            'teoría'\n        ];\n        const practicalKeywords = [\n            'práctica',\n            'ejercicio',\n            'aplicar',\n            'hacer'\n        ];\n        const visualCount = visualKeywords.reduce((count, word)=>count + (text.includes(word) ? 1 : 0), 0);\n        const analyticalCount = analyticalKeywords.reduce((count, word)=>count + (text.includes(word) ? 1 : 0), 0);\n        const practicalCount = practicalKeywords.reduce((count, word)=>count + (text.includes(word) ? 1 : 0), 0);\n        if (visualCount > analyticalCount && visualCount > practicalCount) return 'visual';\n        if (analyticalCount > practicalCount) return 'analytical';\n        if (practicalCount > 0) return 'practical';\n        return 'mixed';\n    }\n    /**\n   * Obtiene el nombre de visualización de una materia\n   */ static getSubjectDisplayName(subject) {\n        const names = {\n            [\"mathematics\"]: 'Matemáticas',\n            [\"physics\"]: 'Física',\n            [\"chemistry\"]: 'Química',\n            [\"biology\"]: 'Biología',\n            [\"spanish\"]: 'Lengua y Literatura',\n            [\"english\"]: 'Inglés',\n            [\"history\"]: 'Historia',\n            [\"geography\"]: 'Geografía',\n            [\"general\"]: 'General'\n        };\n        return names[subject] || 'Materia';\n    }\n    /**\n   * Obtiene un resumen contextual para generar ejercicios\n   */ static getExerciseContext(analysis, subject) {\n        const targetSubject = subject || analysis.subjects[0]?.subject || \"general\";\n        const subjectAnalysis = analysis.subjects.find((s)=>s.subject === targetSubject);\n        if (!subjectAnalysis) {\n            return `Estudiante: nivel intermedio, necesita evaluación inicial en ${targetSubject}`;\n        }\n        const context = [\n            `Materia: ${subjectAnalysis.subjectName}`,\n            `Nivel: ${subjectAnalysis.difficultyLevel}`,\n            `Rendimiento actual: ${subjectAnalysis.performance}%`,\n            subjectAnalysis.specificChallenges.length > 0 ? `Dificultades específicas: ${subjectAnalysis.specificChallenges.join(', ')}` : null,\n            subjectAnalysis.strugglingTopics.length > 0 ? `Temas a reforzar: ${subjectAnalysis.strugglingTopics.join(', ')}` : null,\n            `Patrón de aprendizaje: ${analysis.learningPattern}`\n        ].filter(Boolean).join('. ');\n        return context;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/academic-analyzer.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/advanced-command-processor.ts":
/*!***********************************************!*\
  !*** ./src/lib/advanced-command-processor.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdvancedCommandProcessor: () => (/* binding */ AdvancedCommandProcessor)\n/* harmony export */ });\n/* harmony import */ var _student_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./student-context */ \"(rsc)/./src/lib/student-context.ts\");\n/* harmony import */ var _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./advanced-intent-engine */ \"(rsc)/./src/lib/advanced-intent-engine.ts\");\n/* harmony import */ var _school_schedule_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./school-schedule-manager */ \"(rsc)/./src/lib/school-schedule-manager.ts\");\n/* harmony import */ var _study_session_planner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./study-session-planner */ \"(rsc)/./src/lib/study-session-planner.ts\");\n/* harmony import */ var _sara_personality__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sara-personality */ \"(rsc)/./src/lib/sara-personality.ts\");\n/* harmony import */ var _calendar_ai_integration__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./calendar-ai-integration */ \"(rsc)/./src/lib/calendar-ai-integration.ts\");\n// Procesador de Comandos Naturales Avanzados para Sara\n// Integra todos los sistemas para procesamiento inteligente de comandos complejos\n\n\n\n\n\n\nclass AdvancedCommandProcessor {\n    /**\n   * Procesa un comando natural del usuario integrando todos los sistemas\n   */ static async processCommand(command, context) {\n        try {\n            // Obtener contexto del estudiante\n            const studentContext = await _student_context__WEBPACK_IMPORTED_MODULE_0__.StudentContextManager.getContext(context.userId);\n            if (!studentContext) {\n                return this.createErrorResult('No se pudo cargar el contexto del estudiante');\n            }\n            // Analizar intención del comando\n            const intentAnalysis = await _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__.AdvancedIntentEngine.analyzeIntent(command, context.userId, studentContext);\n            // Procesar según la intención detectada\n            switch(intentAnalysis.intent){\n                case _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__.IntentType.SCHEDULE_MANAGEMENT:\n                    return await this.processScheduleManagement(command, intentAnalysis, studentContext);\n                case _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__.IntentType.STUDY_PLANNING:\n                    return await this.processStudyPlanning(command, intentAnalysis, studentContext);\n                case _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__.IntentType.CALENDAR_MANAGEMENT:\n                    return await this.processCalendarManagement(command, intentAnalysis, studentContext);\n                case _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__.IntentType.TIME_OPTIMIZATION:\n                    return await this.processTimeOptimization(command, intentAnalysis, studentContext);\n                case _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__.IntentType.MATERIAL_REQUEST:\n                    return await this.processMaterialRequest(command, intentAnalysis, studentContext);\n                case _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__.IntentType.PROGRESS_REVIEW:\n                    return await this.processProgressReview(command, intentAnalysis, studentContext);\n                case _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__.IntentType.PERFORMANCE_ANALYSIS:\n                    return await this.processPerformanceAnalysis(command, intentAnalysis, studentContext);\n                case _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__.IntentType.GOAL_MANAGEMENT:\n                    return await this.processGoalManagement(command, intentAnalysis, studentContext);\n                case _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__.IntentType.PREFERENCE_SETTING:\n                    return await this.processPreferenceSetting(command, intentAnalysis, studentContext);\n                case _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__.IntentType.MOTIVATIONAL_SUPPORT:\n                    return await this.processMotivationalSupport(command, intentAnalysis, studentContext);\n                default:\n                    return await this.processGeneralQuery(command, intentAnalysis, studentContext);\n            }\n        } catch (error) {\n            console.error('Error processing command:', error);\n            return this.createErrorResult(`Error procesando comando: ${error instanceof Error ? error.message : 'Error desconocido'}`);\n        }\n    }\n    /**\n   * Procesa comandos de gestión de horarios\n   */ static async processScheduleManagement(command, analysis, context) {\n        const commandLower = command.toLowerCase();\n        // Importar horario\n        if (commandLower.includes('importa') || commandLower.includes('agrega') && commandLower.includes('horario')) {\n            return await this.handleScheduleImport(command, context);\n        }\n        // Analizar horario existente\n        if (commandLower.includes('analiza') && commandLower.includes('horario')) {\n            return await this.handleScheduleAnalysis(context);\n        }\n        // Optimizar horario\n        if (commandLower.includes('optimiza') || commandLower.includes('mejora')) {\n            return await this.handleScheduleOptimization(context);\n        }\n        // Mostrar horario\n        if (commandLower.includes('muestra') || commandLower.includes('ver') && commandLower.includes('horario')) {\n            return await this.handleShowSchedule(context);\n        }\n        return this.createInfoResult('Gestión de Horarios', 'No pude identificar la acción específica. ¿Quieres importar, analizar, optimizar o ver tu horario?', {\n            availableActions: [\n                'Importar horario escolar',\n                'Analizar horario actual',\n                'Optimizar distribución de tiempo',\n                'Ver horario completo'\n            ]\n        });\n    }\n    /**\n   * Procesa comandos de planificación de estudio\n   */ static async processStudyPlanning(command, analysis, context) {\n        const commandLower = command.toLowerCase();\n        // Crear plan de estudio\n        if (commandLower.includes('crea') || commandLower.includes('planifica') || commandLower.includes('genera')) {\n            return await this.handleCreateStudyPlan(command, analysis, context);\n        }\n        // Modificar plan existente\n        if (commandLower.includes('modifica') || commandLower.includes('ajusta') || commandLower.includes('cambia')) {\n            return await this.handleModifyStudyPlan(command, context);\n        }\n        // Sugerir sesiones\n        if (commandLower.includes('sugiere') || commandLower.includes('recomienda')) {\n            return await this.handleSuggestStudySessions(command, analysis, context);\n        }\n        return this.createInfoResult('Planificación de Estudio', 'Puedo ayudarte a crear planes de estudio personalizados. ¿Qué período quieres planificar?', {\n            suggestions: [\n                'Esta semana',\n                'Próximos 15 días',\n                'Hasta el próximo examen',\n                'Todo el mes'\n            ]\n        });\n    }\n    /**\n   * Maneja la importación de horarios\n   */ static async handleScheduleImport(command, context) {\n        try {\n            // Extraer texto del horario del comando\n            const scheduleText = this.extractScheduleText(command);\n            if (!scheduleText) {\n                return this.createInfoResult('Importar Horario', 'Por favor, proporciona los detalles de tu horario. Ejemplo: \"Lunes 8:00-9:30 Matemáticas Aula 101, Martes 10:00-11:30 Física Lab 205\"', {}, [\n                    'Proporcionar horario detallado',\n                    'Ver ejemplo de formato'\n                ]);\n            }\n            // Procesar horario\n            const parsedClasses = _school_schedule_manager__WEBPACK_IMPORTED_MODULE_2__.SchoolScheduleManager.parseNaturalLanguageSchedule(scheduleText);\n            if (parsedClasses.length === 0) {\n                return this.createErrorResult('No pude extraer clases del texto proporcionado. Verifica el formato.');\n            }\n            // Importar horario\n            const importResult = await _school_schedule_manager__WEBPACK_IMPORTED_MODULE_2__.SchoolScheduleManager.importSchedule(context.userId, {\n                classes: parsedClasses\n            }, 'manual');\n            // Detectar conflictos\n            const conflicts = _school_schedule_manager__WEBPACK_IMPORTED_MODULE_2__.SchoolScheduleManager.detectScheduleConflicts(parsedClasses);\n            const studySlots = _school_schedule_manager__WEBPACK_IMPORTED_MODULE_2__.SchoolScheduleManager.analyzeStudyTimeSlots(parsedClasses);\n            return this.createActionResult('Horario Importado Exitosamente', `✅ He importado ${parsedClasses.length} clases a tu horario.\\n\\n📊 **Análisis:**\\n- ${conflicts.length} conflicto(s) detectado(s)\\n- ${studySlots.length} slot(s) de tiempo libre encontrado(s)\\n- ${Math.round(parsedClasses.reduce((sum, cls)=>sum + cls.duration, 0) / 60)} horas semanales de clase`, {\n                importedClasses: parsedClasses.length,\n                conflicts: conflicts,\n                studySlots: studySlots,\n                totalHours: parsedClasses.reduce((sum, cls)=>sum + cls.duration, 0) / 60\n            }, conflicts.length > 0 ? [\n                'Resolver conflictos',\n                'Ver análisis completo'\n            ] : [\n                'Planificar sesiones de estudio',\n                'Ver calendario optimizado'\n            ], [\n                '¿Quieres que planifique sesiones de estudio en los tiempos libres?',\n                '¿Te ayudo a resolver los conflictos detectados?'\n            ]);\n        } catch (error) {\n            return this.createErrorResult(`Error importando horario: ${error instanceof Error ? error.message : 'Error desconocido'}`);\n        }\n    }\n    /**\n   * Maneja el análisis de horarios\n   */ static async handleScheduleAnalysis(context) {\n        if (!context.academicCalendar.schoolSchedule.length) {\n            return this.createInfoResult('Análisis de Horario', 'No tienes un horario escolar configurado. Primero importa tu horario para poder analizarlo.', {}, [\n                'Importar horario escolar',\n                'Ver formato de importación'\n            ]);\n        }\n        // Convertir a formato SchoolClass para análisis\n        const classes = context.academicCalendar.schoolSchedule.map((schedule)=>({\n                id: `class_${schedule.subject}_${schedule.day}`,\n                subject: schedule.subject,\n                teacher: schedule.teacher,\n                classroom: schedule.classroom,\n                day: schedule.day,\n                startTime: schedule.startTime,\n                endTime: schedule.endTime,\n                duration: this.calculateDuration(schedule.startTime, schedule.endTime),\n                type: 'lecture',\n                recurring: true\n            }));\n        const conflicts = _school_schedule_manager__WEBPACK_IMPORTED_MODULE_2__.SchoolScheduleManager.detectScheduleConflicts(classes);\n        const studySlots = _school_schedule_manager__WEBPACK_IMPORTED_MODULE_2__.SchoolScheduleManager.analyzeStudyTimeSlots(classes);\n        // Calcular estadísticas\n        const totalHours = classes.reduce((sum, cls)=>sum + cls.duration, 0) / 60;\n        const dailyDistribution = this.calculateDailyDistribution(classes);\n        const subjectDistribution = this.calculateSubjectDistribution(classes);\n        const analysis = {\n            totalClasses: classes.length,\n            totalHours,\n            averageHoursPerDay: totalHours / 5,\n            conflicts: conflicts.length,\n            availableStudySlots: studySlots.length,\n            freeHours: studySlots.reduce((sum, slot)=>sum + slot.duration, 0) / 60,\n            dailyDistribution,\n            subjectDistribution\n        };\n        let message = `📊 **Análisis de tu Horario Académico:**\\n\\n`;\n        message += `📚 **Resumen General:**\\n`;\n        message += `• ${analysis.totalClasses} clases semanales\\n`;\n        message += `• ${analysis.totalHours.toFixed(1)} horas académicas por semana\\n`;\n        message += `• ${analysis.averageHoursPerDay.toFixed(1)} horas promedio por día\\n\\n`;\n        if (conflicts.length > 0) {\n            message += `⚠️ **Conflictos Detectados:** ${conflicts.length}\\n`;\n            conflicts.slice(0, 3).forEach((conflict)=>{\n                message += `• ${conflict.description}\\n`;\n            });\n            message += `\\n`;\n        }\n        message += `⏰ **Tiempo Libre para Estudio:**\\n`;\n        message += `• ${analysis.availableStudySlots} slots disponibles\\n`;\n        message += `• ${analysis.freeHours.toFixed(1)} horas libres por semana\\n\\n`;\n        const recommendations = this.generateScheduleRecommendations(analysis, conflicts);\n        if (recommendations.length > 0) {\n            message += `💡 **Recomendaciones:**\\n`;\n            recommendations.forEach((rec)=>message += `• ${rec}\\n`);\n        }\n        return this.createAnalysisResult('Análisis de Horario Completo', message, analysis, [\n            'Planificar sesiones de estudio',\n            'Optimizar horario',\n            'Resolver conflictos'\n        ], [\n            '¿Quieres que cree un plan de estudio basado en tu tiempo libre?'\n        ]);\n    }\n    /**\n   * Maneja la creación de planes de estudio\n   */ static async handleCreateStudyPlan(command, analysis, context) {\n        // Extraer período de planificación del comando\n        const period = this.extractPlanningPeriod(command);\n        // Extraer materias específicas si se mencionan\n        const subjects = analysis.entities.subjects || [];\n        try {\n            // Generar plan de estudio\n            const studyPlan = await _study_session_planner__WEBPACK_IMPORTED_MODULE_3__.StudySessionPlanner.generateStudyPlan(context, period, {\n                prioritizeWeakSubjects: true,\n                includeReviewSessions: true,\n                respectEnergyLevels: true\n            });\n            let message = `📋 **Plan de Estudio Creado: \"${studyPlan.title}\"**\\n\\n`;\n            message += `📅 **Período:** ${period.startDate.toLocaleDateString('es-ES')} - ${period.endDate.toLocaleDateString('es-ES')}\\n`;\n            message += `🎯 **Sesiones Planificadas:** ${studyPlan.totalSessions}\\n`;\n            message += `⏱️ **Horas Totales:** ${studyPlan.metrics.totalPlannedHours.toFixed(1)}h\\n`;\n            message += `📚 **Materias:** ${studyPlan.subjects.join(', ')}\\n\\n`;\n            // Mostrar próximas sesiones\n            const upcomingSessions = studyPlan.sessions.filter((session)=>session.date >= new Date()).slice(0, 5).sort((a, b)=>a.date.getTime() - b.date.getTime());\n            if (upcomingSessions.length > 0) {\n                message += `📝 **Próximas Sesiones:**\\n`;\n                upcomingSessions.forEach((session)=>{\n                    message += `• ${session.date.toLocaleDateString('es-ES')} ${session.startTime} - ${session.subject}: ${session.topic} (${session.duration}min)\\n`;\n                });\n                message += `\\n`;\n            }\n            // Distribución por materia\n            message += `📊 **Distribución por Materia:**\\n`;\n            Object.entries(studyPlan.metrics.subjectBalance).forEach(([subject, hours])=>{\n                message += `• ${subject}: ${hours.toFixed(1)}h\\n`;\n            });\n            return this.createPlanningResult('Plan de Estudio Generado', message, studyPlan, [\n                'Ver calendario completo',\n                'Ajustar plan',\n                'Comenzar primera sesión'\n            ], [\n                '¿Quieres que ajuste alguna sesión específica?',\n                '¿Te parece bien la distribución de materias?'\n            ]);\n        } catch (error) {\n            return this.createErrorResult(`Error creando plan de estudio: ${error instanceof Error ? error.message : 'Error desconocido'}`);\n        }\n    }\n    /**\n   * Maneja la revisión de progreso\n   */ static async processProgressReview(command, analysis, context) {\n        const progressData = this.calculateProgressMetrics(context);\n        const insights = this.generateProgressInsights(progressData, context);\n        let message = `📈 **Revisión de tu Progreso Académico:**\\n\\n`;\n        // Progreso general\n        message += `🎯 **Objetivos Activos:**\\n`;\n        if (context.currentGoals.length > 0) {\n            context.currentGoals.slice(0, 5).forEach((goal)=>{\n                message += `• ${goal.title}: ${goal.progress}% completado\\n`;\n            });\n        } else {\n            message += `• No tienes objetivos definidos actualmente\\n`;\n        }\n        message += `\\n`;\n        // Rendimiento por materia\n        if (context.subjectPerformances.length > 0) {\n            message += `📚 **Rendimiento por Materia:**\\n`;\n            const sortedSubjects = context.subjectPerformances.sort((a, b)=>b.averageGrade - a.averageGrade).slice(0, 5);\n            sortedSubjects.forEach((subject)=>{\n                const emoji = subject.averageGrade >= 85 ? '🟢' : subject.averageGrade >= 70 ? '🟡' : '🔴';\n                message += `${emoji} ${subject.subject}: ${subject.averageGrade}% promedio\\n`;\n            });\n            message += `\\n`;\n        }\n        // Patrones de estudio\n        message += `⏱️ **Patrones de Estudio:**\\n`;\n        message += `• Horas semanales: ${context.studyPatterns.weeklyStats.totalStudyHours.toFixed(1)}h\\n`;\n        message += `• Nivel de enfoque promedio: ${context.studyPatterns.weeklyStats.averageFocusScore}/10\\n`;\n        message += `• Momentos más productivos: ${context.studyPatterns.patterns.mostProductiveHours.slice(0, 3).join(', ')}\\n\\n`;\n        // Insights y recomendaciones\n        if (insights.recommendations.length > 0) {\n            message += `💡 **Recomendaciones:**\\n`;\n            insights.recommendations.slice(0, 4).forEach((rec)=>{\n                message += `• ${rec}\\n`;\n            });\n        }\n        return this.createAnalysisResult('Análisis de Progreso', message, progressData, [\n            'Establecer nuevos objetivos',\n            'Ajustar plan de estudio',\n            'Ver análisis detallado'\n        ], [\n            '¿En qué área específica te gustaría mejorar?',\n            '¿Quieres que ajuste tu plan de estudio actual?'\n        ]);\n    }\n    // Funciones auxiliares\n    static extractScheduleText(command) {\n        // Extraer texto después de palabras clave como \"importa\", \"horario:\", etc.\n        const patterns = [\n            /horario[:\\s]+(.+)/i,\n            /importa[:\\s]+(.+)/i,\n            /clases[:\\s]+(.+)/i\n        ];\n        for (const pattern of patterns){\n            const match = command.match(pattern);\n            if (match && match[1]) {\n                return match[1].trim();\n            }\n        }\n        // Si no hay patrones específicos, asumir que todo el comando es el horario\n        const keywords = [\n            'importa',\n            'agrega',\n            'horario',\n            'clases'\n        ];\n        const hasKeyword = keywords.some((keyword)=>command.toLowerCase().includes(keyword));\n        if (hasKeyword) {\n            // Remover palabras clave y retornar el resto\n            let cleanCommand = command;\n            keywords.forEach((keyword)=>{\n                cleanCommand = cleanCommand.replace(new RegExp(keyword, 'gi'), '');\n            });\n            return cleanCommand.trim();\n        }\n        return command;\n    }\n    static extractPlanningPeriod(command) {\n        const today = new Date();\n        const commandLower = command.toLowerCase();\n        if (commandLower.includes('semana')) {\n            const endDate = new Date(today);\n            endDate.setDate(today.getDate() + 7);\n            return {\n                startDate: today,\n                endDate\n            };\n        }\n        if (commandLower.includes('mes')) {\n            const endDate = new Date(today);\n            endDate.setMonth(today.getMonth() + 1);\n            return {\n                startDate: today,\n                endDate\n            };\n        }\n        if (commandLower.includes('15') || commandLower.includes('quince')) {\n            const endDate = new Date(today);\n            endDate.setDate(today.getDate() + 15);\n            return {\n                startDate: today,\n                endDate\n            };\n        }\n        // Por defecto: una semana\n        const endDate = new Date(today);\n        endDate.setDate(today.getDate() + 7);\n        return {\n            startDate: today,\n            endDate\n        };\n    }\n    static calculateDuration(startTime, endTime) {\n        const start = this.timeToMinutes(startTime);\n        const end = this.timeToMinutes(endTime);\n        return end - start;\n    }\n    static timeToMinutes(time) {\n        const [hours, minutes] = time.split(':').map(Number);\n        return hours * 60 + minutes;\n    }\n    static calculateDailyDistribution(classes) {\n        return classes.reduce((acc, cls)=>{\n            acc[cls.day] = (acc[cls.day] || 0) + cls.duration / 60;\n            return acc;\n        }, {});\n    }\n    static calculateSubjectDistribution(classes) {\n        return classes.reduce((acc, cls)=>{\n            acc[cls.subject] = (acc[cls.subject] || 0) + cls.duration / 60;\n            return acc;\n        }, {});\n    }\n    static generateScheduleRecommendations(analysis, conflicts) {\n        const recommendations = [];\n        if (conflicts.length > 0) {\n            recommendations.push('Resolver conflictos de horario detectados');\n        }\n        if (analysis.averageHoursPerDay > 7) {\n            recommendations.push('Considerar reducir la carga académica diaria');\n        }\n        if (analysis.freeHours < 10) {\n            recommendations.push('Buscar más tiempo libre para estudio personal');\n        }\n        if (analysis.freeHours > 25) {\n            recommendations.push('Aprovechar el tiempo libre abundante para actividades extracurriculares');\n        }\n        return recommendations;\n    }\n    static calculateProgressMetrics(context) {\n        const totalGoals = context.currentGoals.length;\n        const completedGoals = context.currentGoals.filter((g)=>g.progress >= 100).length;\n        const avgGoalProgress = totalGoals > 0 ? context.currentGoals.reduce((sum, g)=>sum + g.progress, 0) / totalGoals : 0;\n        const avgGrade = context.subjectPerformances.length > 0 ? context.subjectPerformances.reduce((sum, s)=>sum + s.averageGrade, 0) / context.subjectPerformances.length : 0;\n        return {\n            goalCompletionRate: completedGoals / Math.max(totalGoals, 1) * 100,\n            averageGoalProgress: avgGoalProgress,\n            averageGrade: avgGrade,\n            totalStudyHours: context.studyPatterns.weeklyStats.totalStudyHours,\n            focusScore: context.studyPatterns.weeklyStats.averageFocusScore\n        };\n    }\n    static generateProgressInsights(progressData, context) {\n        const recommendations = [];\n        if (progressData.goalCompletionRate < 50) {\n            recommendations.push('Revisar y ajustar objetivos para que sean más alcanzables');\n        }\n        if (progressData.averageGrade < 75) {\n            recommendations.push('Incrementar tiempo de estudio en materias con menor rendimiento');\n        }\n        if (progressData.totalStudyHours < 10) {\n            recommendations.push('Aumentar gradualmente las horas de estudio semanales');\n        }\n        if (progressData.focusScore < 6) {\n            recommendations.push('Implementar técnicas de mejora de concentración');\n        }\n        return {\n            recommendations\n        };\n    }\n    // Métodos auxiliares para crear resultados\n    static createInfoResult(title, message, data, actions, questions) {\n        return {\n            success: true,\n            type: 'information',\n            title,\n            message,\n            data,\n            suggestedActions: actions,\n            followUpQuestions: questions\n        };\n    }\n    static createActionResult(title, message, data, actions, questions) {\n        return {\n            success: true,\n            type: 'action',\n            title,\n            message,\n            data,\n            suggestedActions: actions,\n            followUpQuestions: questions\n        };\n    }\n    static createPlanningResult(title, message, data, actions, questions) {\n        return {\n            success: true,\n            type: 'planning',\n            title,\n            message,\n            data,\n            suggestedActions: actions,\n            followUpQuestions: questions\n        };\n    }\n    static createAnalysisResult(title, message, data, actions, questions) {\n        return {\n            success: true,\n            type: 'analysis',\n            title,\n            message,\n            data,\n            suggestedActions: actions,\n            followUpQuestions: questions\n        };\n    }\n    static createErrorResult(message) {\n        return {\n            success: false,\n            type: 'error',\n            title: 'Error',\n            message\n        };\n    }\n    // Métodos de procesamiento adicionales (implementación básica)\n    static async processCalendarManagement(command, analysis, context) {\n        console.log('📅 Processing calendar management command:', command);\n        // Integrar con AICalendarIntegration existente\n        const calendarIntegration = new _calendar_ai_integration__WEBPACK_IMPORTED_MODULE_5__.AICalendarIntegration(context.userId);\n        const result = await calendarIntegration.processMessage(command, []);\n        console.log('📅 Calendar integration result:', {\n            needsEventCreation: result.needsEventCreation,\n            eventCreated: !!result.event,\n            response: result.response?.substring(0, 100)\n        });\n        if (result.needsEventCreation || result.event) {\n            // Si se creó un evento o se necesita crear uno, considerarlo éxito\n            return this.createActionResult('Gestión de Calendario', result.response || 'Evento de calendario procesado exitosamente', result.event, result.event ? [\n                'Ver en calendario',\n                'Editar evento',\n                'Eliminar evento'\n            ] : [\n                'Ver calendario',\n                'Agregar más eventos'\n            ], result.event ? [\n                '¿Necesitas modificar algún detalle del evento?'\n            ] : [\n                '¿Necesitas programar algún evento adicional?'\n            ]);\n        }\n        // Si no se detectó una acción de calendario, devolver el resultado tal como está\n        return this.createInfoResult('Información de Calendario', result.response || 'No se detectó una acción específica de calendario', {}, [\n            'Ver próximos eventos',\n            'Agregar evento'\n        ], [\n            '¿Qué evento te gustaría agendar?',\n            '¿Necesitas ver tu calendario?'\n        ]);\n    }\n    static async processTimeOptimization(command, analysis, context) {\n        return this.createInfoResult('Optimización de Tiempo', 'Analizando tu horario para encontrar las mejores oportunidades de optimización...', {}, [\n            'Analizar horario actual',\n            'Sugerir mejoras'\n        ], [\n            '¿En qué área específica quieres optimizar tu tiempo?'\n        ]);\n    }\n    static async processMaterialRequest(command, analysis, context) {\n        return this.createInfoResult('Gestión de Materiales', 'Te ayudo a organizar y encontrar materiales de estudio.', {}, [\n            'Buscar recursos',\n            'Organizar materiales'\n        ], [\n            '¿Para qué materia necesitas materiales?'\n        ]);\n    }\n    static async processPerformanceAnalysis(command, analysis, context) {\n        return this.createAnalysisResult('Análisis de Rendimiento', 'Analizando tu rendimiento académico...', {}, [\n            'Ver detalles por materia',\n            'Generar reporte'\n        ], [\n            '¿Quieres enfocarnos en alguna materia específica?'\n        ]);\n    }\n    static async processGoalManagement(command, analysis, context) {\n        return this.createPlanningResult('Gestión de Objetivos', 'Te ayudo a establecer y seguir tus objetivos académicos.', {}, [\n            'Crear nuevo objetivo',\n            'Revisar progreso'\n        ], [\n            '¿Qué objetivo académico quieres establecer?'\n        ]);\n    }\n    static async processPreferenceSetting(command, analysis, context) {\n        return this.createInfoResult('Configuración de Preferencias', 'Configurando tus preferencias de estudio y aprendizaje.', {}, [\n            'Actualizar preferencias',\n            'Ver configuración actual'\n        ], [\n            '¿Qué aspecto de tus preferencias quieres modificar?'\n        ]);\n    }\n    static async processMotivationalSupport(command, analysis, context) {\n        const supportMessage = _sara_personality__WEBPACK_IMPORTED_MODULE_4__.SaraPersonalityEngine.selectResponse('motivation', context);\n        return this.createInfoResult('Apoyo Motivacional', supportMessage, {}, [\n            'Planificar sesión de estudio',\n            'Establecer objetivos pequeños'\n        ], [\n            '¿Hay algo específico que te está preocupando?',\n            '¿Quieres que planifiquemos juntos tu próxima sesión de estudio?'\n        ]);\n    }\n    static async processGeneralQuery(command, analysis, context) {\n        return this.createInfoResult('Consulta General', 'Entiendo tu consulta. ¿Podrías ser más específico sobre cómo puedo ayudarte?', {}, [\n            'Gestionar horario',\n            'Planificar estudio',\n            'Analizar progreso'\n        ], [\n            '¿Necesitas ayuda con organización, planificación o análisis académico?'\n        ]);\n    }\n    static async handleScheduleOptimization(context) {\n        return this.createPlanningResult('Optimización de Horario', 'Analizando tu horario para sugerir optimizaciones...', {}, [\n            'Aplicar optimizaciones',\n            'Ver análisis detallado'\n        ], [\n            '¿Prefieres optimizar para más tiempo libre o mejor distribución de materias?'\n        ]);\n    }\n    static async handleShowSchedule(context) {\n        return this.createInfoResult('Tu Horario Académico', 'Mostrando tu horario completo...', {\n            schedule: context.academicCalendar.schoolSchedule\n        }, [\n            'Analizar horario',\n            'Optimizar tiempo'\n        ], [\n            '¿Quieres que analice tu horario o que planifique sesiones de estudio?'\n        ]);\n    }\n    static async handleModifyStudyPlan(command, context) {\n        return this.createPlanningResult('Modificar Plan de Estudio', 'Te ayudo a ajustar tu plan de estudio actual.', {}, [\n            'Ver plan actual',\n            'Hacer cambios específicos'\n        ], [\n            '¿Qué aspecto del plan quieres modificar?'\n        ]);\n    }\n    static async handleSuggestStudySessions(command, analysis, context) {\n        return this.createPlanningResult('Sugerencias de Sesiones', 'Basándome en tu contexto, te sugiero estas sesiones de estudio...', {}, [\n            'Programar sesiones',\n            'Ajustar sugerencias'\n        ], [\n            '¿Quieres que programe estas sesiones en tu calendario?'\n        ]);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2FkdmFuY2VkLWNvbW1hbmQtcHJvY2Vzc29yLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSx1REFBdUQ7QUFDdkQsa0ZBQWtGO0FBRVQ7QUFDb0I7QUFDNUI7QUFDTztBQUNkO0FBQ087QUF3QjFELE1BQU1PO0lBRVg7O0dBRUMsR0FDRCxhQUFhQyxlQUNYQyxPQUFlLEVBQ2ZDLE9BQXVCLEVBQ0M7UUFFeEIsSUFBSTtZQUNGLGtDQUFrQztZQUNsQyxNQUFNQyxpQkFBaUIsTUFBTVgsbUVBQXFCQSxDQUFDWSxVQUFVLENBQUNGLFFBQVFHLE1BQU07WUFDNUUsSUFBSSxDQUFDRixnQkFBZ0I7Z0JBQ25CLE9BQU8sSUFBSSxDQUFDRyxpQkFBaUIsQ0FBQztZQUNoQztZQUVBLGlDQUFpQztZQUNqQyxNQUFNQyxpQkFBaUIsTUFBTWQseUVBQW9CQSxDQUFDZSxhQUFhLENBQzdEUCxTQUNBQyxRQUFRRyxNQUFNLEVBQ2RGO1lBR0Ysd0NBQXdDO1lBQ3hDLE9BQVFJLGVBQWVFLE1BQU07Z0JBQzNCLEtBQUtmLCtEQUFVQSxDQUFDZ0IsbUJBQW1CO29CQUNqQyxPQUFPLE1BQU0sSUFBSSxDQUFDQyx5QkFBeUIsQ0FBQ1YsU0FBU00sZ0JBQWdCSjtnQkFFdkUsS0FBS1QsK0RBQVVBLENBQUNrQixjQUFjO29CQUM1QixPQUFPLE1BQU0sSUFBSSxDQUFDQyxvQkFBb0IsQ0FBQ1osU0FBU00sZ0JBQWdCSjtnQkFFbEUsS0FBS1QsK0RBQVVBLENBQUNvQixtQkFBbUI7b0JBQ2pDLE9BQU8sTUFBTSxJQUFJLENBQUNDLHlCQUF5QixDQUFDZCxTQUFTTSxnQkFBZ0JKO2dCQUV2RSxLQUFLVCwrREFBVUEsQ0FBQ3NCLGlCQUFpQjtvQkFDL0IsT0FBTyxNQUFNLElBQUksQ0FBQ0MsdUJBQXVCLENBQUNoQixTQUFTTSxnQkFBZ0JKO2dCQUVyRSxLQUFLVCwrREFBVUEsQ0FBQ3dCLGdCQUFnQjtvQkFDOUIsT0FBTyxNQUFNLElBQUksQ0FBQ0Msc0JB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ZG8zM2dtYWlsLmNvbS9Eb2N1bWVudHMvQXBwIERldmVsb3BtZW50IFByb3llY3RzL0ludGVsbGVnbyBQbGF0Zm9ybS9zcmMvbGliL2FkdmFuY2VkLWNvbW1hbmQtcHJvY2Vzc29yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFByb2Nlc2Fkb3IgZGUgQ29tYW5kb3MgTmF0dXJhbGVzIEF2YW56YWRvcyBwYXJhIFNhcmFcbi8vIEludGVncmEgdG9kb3MgbG9zIHNpc3RlbWFzIHBhcmEgcHJvY2VzYW1pZW50byBpbnRlbGlnZW50ZSBkZSBjb21hbmRvcyBjb21wbGVqb3NcblxuaW1wb3J0IHsgU3R1ZGVudENvbnRleHQsIFN0dWRlbnRDb250ZXh0TWFuYWdlciB9IGZyb20gJy4vc3R1ZGVudC1jb250ZXh0J1xuaW1wb3J0IHsgQWR2YW5jZWRJbnRlbnRFbmdpbmUsIEludGVudFR5cGUsIENvbnZlcnNhdGlvbk1vZGUgfSBmcm9tICcuL2FkdmFuY2VkLWludGVudC1lbmdpbmUnXG5pbXBvcnQgeyBTY2hvb2xTY2hlZHVsZU1hbmFnZXIgfSBmcm9tICcuL3NjaG9vbC1zY2hlZHVsZS1tYW5hZ2VyJ1xuaW1wb3J0IHsgU3R1ZHlTZXNzaW9uUGxhbm5lciwgU3R1ZHlQbGFuIH0gZnJvbSAnLi9zdHVkeS1zZXNzaW9uLXBsYW5uZXInXG5pbXBvcnQgeyBTYXJhUGVyc29uYWxpdHlFbmdpbmUgfSBmcm9tICcuL3NhcmEtcGVyc29uYWxpdHknXG5pbXBvcnQgeyBBSUNhbGVuZGFySW50ZWdyYXRpb24gfSBmcm9tICcuL2NhbGVuZGFyLWFpLWludGVncmF0aW9uJ1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbW1hbmRSZXN1bHQge1xuICBzdWNjZXNzOiBib29sZWFuXG4gIHR5cGU6ICdpbmZvcm1hdGlvbicgfCAnYWN0aW9uJyB8ICdwbGFubmluZycgfCAnYW5hbHlzaXMnIHwgJ2Vycm9yJ1xuICB0aXRsZTogc3RyaW5nXG4gIG1lc3NhZ2U6IHN0cmluZ1xuICBkYXRhPzogYW55XG4gIHN1Z2dlc3RlZEFjdGlvbnM/OiBzdHJpbmdbXVxuICBmb2xsb3dVcFF1ZXN0aW9ucz86IHN0cmluZ1tdXG4gIHZpc3VhbGl6YXRpb25zPzoge1xuICAgIHR5cGU6ICdjaGFydCcgfCAnY2FsZW5kYXInIHwgJ3RpbWVsaW5lJyB8ICd0YWJsZSdcbiAgICBkYXRhOiBhbnlcbiAgfVtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbWFuZENvbnRleHQge1xuICB1c2VySWQ6IHN0cmluZ1xuICB1c2VyTmFtZT86IHN0cmluZ1xuICBjb252ZXJzYXRpb25IaXN0b3J5OiBBcnJheTx7IHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnLCBjb250ZW50OiBzdHJpbmcgfT5cbiAgY3VycmVudE1vZGU6IENvbnZlcnNhdGlvbk1vZGVcbiAgbGFzdENvbW1hbmRzOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgY2xhc3MgQWR2YW5jZWRDb21tYW5kUHJvY2Vzc29yIHtcblxuICAvKipcbiAgICogUHJvY2VzYSB1biBjb21hbmRvIG5hdHVyYWwgZGVsIHVzdWFyaW8gaW50ZWdyYW5kbyB0b2RvcyBsb3Mgc2lzdGVtYXNcbiAgICovXG4gIHN0YXRpYyBhc3luYyBwcm9jZXNzQ29tbWFuZChcbiAgICBjb21tYW5kOiBzdHJpbmcsIFxuICAgIGNvbnRleHQ6IENvbW1hbmRDb250ZXh0XG4gICk6IFByb21pc2U8Q29tbWFuZFJlc3VsdD4ge1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBPYnRlbmVyIGNvbnRleHRvIGRlbCBlc3R1ZGlhbnRlXG4gICAgICBjb25zdCBzdHVkZW50Q29udGV4dCA9IGF3YWl0IFN0dWRlbnRDb250ZXh0TWFuYWdlci5nZXRDb250ZXh0KGNvbnRleHQudXNlcklkKVxuICAgICAgaWYgKCFzdHVkZW50Q29udGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvclJlc3VsdCgnTm8gc2UgcHVkbyBjYXJnYXIgZWwgY29udGV4dG8gZGVsIGVzdHVkaWFudGUnKVxuICAgICAgfVxuXG4gICAgICAvLyBBbmFsaXphciBpbnRlbmNpw7NuIGRlbCBjb21hbmRvXG4gICAgICBjb25zdCBpbnRlbnRBbmFseXNpcyA9IGF3YWl0IEFkdmFuY2VkSW50ZW50RW5naW5lLmFuYWx5emVJbnRlbnQoXG4gICAgICAgIGNvbW1hbmQsIFxuICAgICAgICBjb250ZXh0LnVzZXJJZCwgXG4gICAgICAgIHN0dWRlbnRDb250ZXh0XG4gICAgICApXG5cbiAgICAgIC8vIFByb2Nlc2FyIHNlZ8O6biBsYSBpbnRlbmNpw7NuIGRldGVjdGFkYVxuICAgICAgc3dpdGNoIChpbnRlbnRBbmFseXNpcy5pbnRlbnQpIHtcbiAgICAgICAgY2FzZSBJbnRlbnRUeXBlLlNDSEVEVUxFX01BTkFHRU1FTlQ6XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvY2Vzc1NjaGVkdWxlTWFuYWdlbWVudChjb21tYW5kLCBpbnRlbnRBbmFseXNpcywgc3R1ZGVudENvbnRleHQpXG4gICAgICAgIFxuICAgICAgICBjYXNlIEludGVudFR5cGUuU1RVRFlfUExBTk5JTkc6XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvY2Vzc1N0dWR5UGxhbm5pbmcoY29tbWFuZCwgaW50ZW50QW5hbHlzaXMsIHN0dWRlbnRDb250ZXh0KVxuICAgICAgICBcbiAgICAgICAgY2FzZSBJbnRlbnRUeXBlLkNBTEVOREFSX01BTkFHRU1FTlQ6XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvY2Vzc0NhbGVuZGFyTWFuYWdlbWVudChjb21tYW5kLCBpbnRlbnRBbmFseXNpcywgc3R1ZGVudENvbnRleHQpXG4gICAgICAgIFxuICAgICAgICBjYXNlIEludGVudFR5cGUuVElNRV9PUFRJTUlaQVRJT046XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvY2Vzc1RpbWVPcHRpbWl6YXRpb24oY29tbWFuZCwgaW50ZW50QW5hbHlzaXMsIHN0dWRlbnRDb250ZXh0KVxuICAgICAgICBcbiAgICAgICAgY2FzZSBJbnRlbnRUeXBlLk1BVEVSSUFMX1JFUVVFU1Q6XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvY2Vzc01hdGVyaWFsUmVxdWVzdChjb21tYW5kLCBpbnRlbnRBbmFseXNpcywgc3R1ZGVudENvbnRleHQpXG4gICAgICAgIFxuICAgICAgICBjYXNlIEludGVudFR5cGUuUFJPR1JFU1NfUkVWSUVXOlxuICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb2Nlc3NQcm9ncmVzc1Jldmlldyhjb21tYW5kLCBpbnRlbnRBbmFseXNpcywgc3R1ZGVudENvbnRleHQpXG4gICAgICAgIFxuICAgICAgICBjYXNlIEludGVudFR5cGUuUEVSRk9STUFOQ0VfQU5BTFlTSVM6XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvY2Vzc1BlcmZvcm1hbmNlQW5hbHlzaXMoY29tbWFuZCwgaW50ZW50QW5hbHlzaXMsIHN0dWRlbnRDb250ZXh0KVxuICAgICAgICBcbiAgICAgICAgY2FzZSBJbnRlbnRUeXBlLkdPQUxfTUFOQUdFTUVOVDpcbiAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm9jZXNzR29hbE1hbmFnZW1lbnQoY29tbWFuZCwgaW50ZW50QW5hbHlzaXMsIHN0dWRlbnRDb250ZXh0KVxuICAgICAgICBcbiAgICAgICAgY2FzZSBJbnRlbnRUeXBlLlBSRUZFUkVOQ0VfU0VUVElORzpcbiAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm9jZXNzUHJlZmVyZW5jZVNldHRpbmcoY29tbWFuZCwgaW50ZW50QW5hbHlzaXMsIHN0dWRlbnRDb250ZXh0KVxuICAgICAgICBcbiAgICAgICAgY2FzZSBJbnRlbnRUeXBlLk1PVElWQVRJT05BTF9TVVBQT1JUOlxuICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb2Nlc3NNb3RpdmF0aW9uYWxTdXBwb3J0KGNvbW1hbmQsIGludGVudEFuYWx5c2lzLCBzdHVkZW50Q29udGV4dClcbiAgICAgICAgXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvY2Vzc0dlbmVyYWxRdWVyeShjb21tYW5kLCBpbnRlbnRBbmFseXNpcywgc3R1ZGVudENvbnRleHQpXG4gICAgICB9XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyBjb21tYW5kOicsIGVycm9yKVxuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3JSZXN1bHQoYEVycm9yIHByb2Nlc2FuZG8gY29tYW5kbzogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdFcnJvciBkZXNjb25vY2lkbyd9YClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzYSBjb21hbmRvcyBkZSBnZXN0acOzbiBkZSBob3Jhcmlvc1xuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgcHJvY2Vzc1NjaGVkdWxlTWFuYWdlbWVudChcbiAgICBjb21tYW5kOiBzdHJpbmcsXG4gICAgYW5hbHlzaXM6IGFueSxcbiAgICBjb250ZXh0OiBTdHVkZW50Q29udGV4dFxuICApOiBQcm9taXNlPENvbW1hbmRSZXN1bHQ+IHtcbiAgICBcbiAgICBjb25zdCBjb21tYW5kTG93ZXIgPSBjb21tYW5kLnRvTG93ZXJDYXNlKClcblxuICAgIC8vIEltcG9ydGFyIGhvcmFyaW9cbiAgICBpZiAoY29tbWFuZExvd2VyLmluY2x1ZGVzKCdpbXBvcnRhJykgfHwgY29tbWFuZExvd2VyLmluY2x1ZGVzKCdhZ3JlZ2EnKSAmJiBjb21tYW5kTG93ZXIuaW5jbHVkZXMoJ2hvcmFyaW8nKSkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlU2NoZWR1bGVJbXBvcnQoY29tbWFuZCwgY29udGV4dClcbiAgICB9XG5cbiAgICAvLyBBbmFsaXphciBob3JhcmlvIGV4aXN0ZW50ZVxuICAgIGlmIChjb21tYW5kTG93ZXIuaW5jbHVkZXMoJ2FuYWxpemEnKSAmJiBjb21tYW5kTG93ZXIuaW5jbHVkZXMoJ2hvcmFyaW8nKSkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlU2NoZWR1bGVBbmFseXNpcyhjb250ZXh0KVxuICAgIH1cblxuICAgIC8vIE9wdGltaXphciBob3JhcmlvXG4gICAgaWYgKGNvbW1hbmRMb3dlci5pbmNsdWRlcygnb3B0aW1pemEnKSB8fCBjb21tYW5kTG93ZXIuaW5jbHVkZXMoJ21lam9yYScpKSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5oYW5kbGVTY2hlZHVsZU9wdGltaXphdGlvbihjb250ZXh0KVxuICAgIH1cblxuICAgIC8vIE1vc3RyYXIgaG9yYXJpb1xuICAgIGlmIChjb21tYW5kTG93ZXIuaW5jbHVkZXMoJ211ZXN0cmEnKSB8fCBjb21tYW5kTG93ZXIuaW5jbHVkZXMoJ3ZlcicpICYmIGNvbW1hbmRMb3dlci5pbmNsdWRlcygnaG9yYXJpbycpKSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5oYW5kbGVTaG93U2NoZWR1bGUoY29udGV4dClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jcmVhdGVJbmZvUmVzdWx0KFxuICAgICAgJ0dlc3Rpw7NuIGRlIEhvcmFyaW9zJyxcbiAgICAgICdObyBwdWRlIGlkZW50aWZpY2FyIGxhIGFjY2nDs24gZXNwZWPDrWZpY2EuIMK/UXVpZXJlcyBpbXBvcnRhciwgYW5hbGl6YXIsIG9wdGltaXphciBvIHZlciB0dSBob3JhcmlvPycsXG4gICAgICB7XG4gICAgICAgIGF2YWlsYWJsZUFjdGlvbnM6IFtcbiAgICAgICAgICAnSW1wb3J0YXIgaG9yYXJpbyBlc2NvbGFyJyxcbiAgICAgICAgICAnQW5hbGl6YXIgaG9yYXJpbyBhY3R1YWwnLFxuICAgICAgICAgICdPcHRpbWl6YXIgZGlzdHJpYnVjacOzbiBkZSB0aWVtcG8nLFxuICAgICAgICAgICdWZXIgaG9yYXJpbyBjb21wbGV0bydcbiAgICAgICAgXVxuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNhIGNvbWFuZG9zIGRlIHBsYW5pZmljYWNpw7NuIGRlIGVzdHVkaW9cbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIHByb2Nlc3NTdHVkeVBsYW5uaW5nKFxuICAgIGNvbW1hbmQ6IHN0cmluZyxcbiAgICBhbmFseXNpczogYW55LFxuICAgIGNvbnRleHQ6IFN0dWRlbnRDb250ZXh0XG4gICk6IFByb21pc2U8Q29tbWFuZFJlc3VsdD4ge1xuICAgIFxuICAgIGNvbnN0IGNvbW1hbmRMb3dlciA9IGNvbW1hbmQudG9Mb3dlckNhc2UoKVxuXG4gICAgLy8gQ3JlYXIgcGxhbiBkZSBlc3R1ZGlvXG4gICAgaWYgKGNvbW1hbmRMb3dlci5pbmNsdWRlcygnY3JlYScpIHx8IGNvbW1hbmRMb3dlci5pbmNsdWRlcygncGxhbmlmaWNhJykgfHwgY29tbWFuZExvd2VyLmluY2x1ZGVzKCdnZW5lcmEnKSkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlQ3JlYXRlU3R1ZHlQbGFuKGNvbW1hbmQsIGFuYWx5c2lzLCBjb250ZXh0KVxuICAgIH1cblxuICAgIC8vIE1vZGlmaWNhciBwbGFuIGV4aXN0ZW50ZVxuICAgIGlmIChjb21tYW5kTG93ZXIuaW5jbHVkZXMoJ21vZGlmaWNhJykgfHwgY29tbWFuZExvd2VyLmluY2x1ZGVzKCdhanVzdGEnKSB8fCBjb21tYW5kTG93ZXIuaW5jbHVkZXMoJ2NhbWJpYScpKSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5oYW5kbGVNb2RpZnlTdHVkeVBsYW4oY29tbWFuZCwgY29udGV4dClcbiAgICB9XG5cbiAgICAvLyBTdWdlcmlyIHNlc2lvbmVzXG4gICAgaWYgKGNvbW1hbmRMb3dlci5pbmNsdWRlcygnc3VnaWVyZScpIHx8IGNvbW1hbmRMb3dlci5pbmNsdWRlcygncmVjb21pZW5kYScpKSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5oYW5kbGVTdWdnZXN0U3R1ZHlTZXNzaW9ucyhjb21tYW5kLCBhbmFseXNpcywgY29udGV4dClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jcmVhdGVJbmZvUmVzdWx0KFxuICAgICAgJ1BsYW5pZmljYWNpw7NuIGRlIEVzdHVkaW8nLFxuICAgICAgJ1B1ZWRvIGF5dWRhcnRlIGEgY3JlYXIgcGxhbmVzIGRlIGVzdHVkaW8gcGVyc29uYWxpemFkb3MuIMK/UXXDqSBwZXLDrW9kbyBxdWllcmVzIHBsYW5pZmljYXI/JyxcbiAgICAgIHtcbiAgICAgICAgc3VnZ2VzdGlvbnM6IFtcbiAgICAgICAgICAnRXN0YSBzZW1hbmEnLFxuICAgICAgICAgICdQcsOzeGltb3MgMTUgZMOtYXMnLFxuICAgICAgICAgICdIYXN0YSBlbCBwcsOzeGltbyBleGFtZW4nLFxuICAgICAgICAgICdUb2RvIGVsIG1lcydcbiAgICAgICAgXVxuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBNYW5lamEgbGEgaW1wb3J0YWNpw7NuIGRlIGhvcmFyaW9zXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBhc3luYyBoYW5kbGVTY2hlZHVsZUltcG9ydChjb21tYW5kOiBzdHJpbmcsIGNvbnRleHQ6IFN0dWRlbnRDb250ZXh0KTogUHJvbWlzZTxDb21tYW5kUmVzdWx0PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEV4dHJhZXIgdGV4dG8gZGVsIGhvcmFyaW8gZGVsIGNvbWFuZG9cbiAgICAgIGNvbnN0IHNjaGVkdWxlVGV4dCA9IHRoaXMuZXh0cmFjdFNjaGVkdWxlVGV4dChjb21tYW5kKVxuICAgICAgXG4gICAgICBpZiAoIXNjaGVkdWxlVGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVJbmZvUmVzdWx0KFxuICAgICAgICAgICdJbXBvcnRhciBIb3JhcmlvJyxcbiAgICAgICAgICAnUG9yIGZhdm9yLCBwcm9wb3JjaW9uYSBsb3MgZGV0YWxsZXMgZGUgdHUgaG9yYXJpby4gRWplbXBsbzogXCJMdW5lcyA4OjAwLTk6MzAgTWF0ZW3DoXRpY2FzIEF1bGEgMTAxLCBNYXJ0ZXMgMTA6MDAtMTE6MzAgRsOtc2ljYSBMYWIgMjA1XCInLFxuICAgICAgICAgIHt9LFxuICAgICAgICAgIFsnUHJvcG9yY2lvbmFyIGhvcmFyaW8gZGV0YWxsYWRvJywgJ1ZlciBlamVtcGxvIGRlIGZvcm1hdG8nXVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIC8vIFByb2Nlc2FyIGhvcmFyaW9cbiAgICAgIGNvbnN0IHBhcnNlZENsYXNzZXMgPSBTY2hvb2xTY2hlZHVsZU1hbmFnZXIucGFyc2VOYXR1cmFsTGFuZ3VhZ2VTY2hlZHVsZShzY2hlZHVsZVRleHQpXG4gICAgICBcbiAgICAgIGlmIChwYXJzZWRDbGFzc2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvclJlc3VsdCgnTm8gcHVkZSBleHRyYWVyIGNsYXNlcyBkZWwgdGV4dG8gcHJvcG9yY2lvbmFkby4gVmVyaWZpY2EgZWwgZm9ybWF0by4nKVxuICAgICAgfVxuXG4gICAgICAvLyBJbXBvcnRhciBob3JhcmlvXG4gICAgICBjb25zdCBpbXBvcnRSZXN1bHQgPSBhd2FpdCBTY2hvb2xTY2hlZHVsZU1hbmFnZXIuaW1wb3J0U2NoZWR1bGUoXG4gICAgICAgIGNvbnRleHQudXNlcklkLFxuICAgICAgICB7IGNsYXNzZXM6IHBhcnNlZENsYXNzZXMgfSxcbiAgICAgICAgJ21hbnVhbCdcbiAgICAgIClcblxuICAgICAgLy8gRGV0ZWN0YXIgY29uZmxpY3Rvc1xuICAgICAgY29uc3QgY29uZmxpY3RzID0gU2Nob29sU2NoZWR1bGVNYW5hZ2VyLmRldGVjdFNjaGVkdWxlQ29uZmxpY3RzKHBhcnNlZENsYXNzZXMpXG4gICAgICBjb25zdCBzdHVkeVNsb3RzID0gU2Nob29sU2NoZWR1bGVNYW5hZ2VyLmFuYWx5emVTdHVkeVRpbWVTbG90cyhwYXJzZWRDbGFzc2VzKVxuXG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVBY3Rpb25SZXN1bHQoXG4gICAgICAgICdIb3JhcmlvIEltcG9ydGFkbyBFeGl0b3NhbWVudGUnLFxuICAgICAgICBg4pyFIEhlIGltcG9ydGFkbyAke3BhcnNlZENsYXNzZXMubGVuZ3RofSBjbGFzZXMgYSB0dSBob3JhcmlvLlxcblxcbvCfk4ogKipBbsOhbGlzaXM6KipcXG4tICR7Y29uZmxpY3RzLmxlbmd0aH0gY29uZmxpY3RvKHMpIGRldGVjdGFkbyhzKVxcbi0gJHtzdHVkeVNsb3RzLmxlbmd0aH0gc2xvdChzKSBkZSB0aWVtcG8gbGlicmUgZW5jb250cmFkbyhzKVxcbi0gJHtNYXRoLnJvdW5kKHBhcnNlZENsYXNzZXMucmVkdWNlKChzdW0sIGNscykgPT4gc3VtICsgY2xzLmR1cmF0aW9uLCAwKSAvIDYwKX0gaG9yYXMgc2VtYW5hbGVzIGRlIGNsYXNlYCxcbiAgICAgICAge1xuICAgICAgICAgIGltcG9ydGVkQ2xhc3NlczogcGFyc2VkQ2xhc3Nlcy5sZW5ndGgsXG4gICAgICAgICAgY29uZmxpY3RzOiBjb25mbGljdHMsXG4gICAgICAgICAgc3R1ZHlTbG90czogc3R1ZHlTbG90cyxcbiAgICAgICAgICB0b3RhbEhvdXJzOiBwYXJzZWRDbGFzc2VzLnJlZHVjZSgoc3VtLCBjbHMpID0+IHN1bSArIGNscy5kdXJhdGlvbiwgMCkgLyA2MFxuICAgICAgICB9LFxuICAgICAgICBjb25mbGljdHMubGVuZ3RoID4gMCA/IFsnUmVzb2x2ZXIgY29uZmxpY3RvcycsICdWZXIgYW7DoWxpc2lzIGNvbXBsZXRvJ10gOiBbJ1BsYW5pZmljYXIgc2VzaW9uZXMgZGUgZXN0dWRpbycsICdWZXIgY2FsZW5kYXJpbyBvcHRpbWl6YWRvJ10sXG4gICAgICAgIFsnwr9RdWllcmVzIHF1ZSBwbGFuaWZpcXVlIHNlc2lvbmVzIGRlIGVzdHVkaW8gZW4gbG9zIHRpZW1wb3MgbGlicmVzPycsICfCv1RlIGF5dWRvIGEgcmVzb2x2ZXIgbG9zIGNvbmZsaWN0b3MgZGV0ZWN0YWRvcz8nXVxuICAgICAgKVxuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yUmVzdWx0KGBFcnJvciBpbXBvcnRhbmRvIGhvcmFyaW86ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRXJyb3IgZGVzY29ub2NpZG8nfWApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1hbmVqYSBlbCBhbsOhbGlzaXMgZGUgaG9yYXJpb3NcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIGhhbmRsZVNjaGVkdWxlQW5hbHlzaXMoY29udGV4dDogU3R1ZGVudENvbnRleHQpOiBQcm9taXNlPENvbW1hbmRSZXN1bHQ+IHtcbiAgICBpZiAoIWNvbnRleHQuYWNhZGVtaWNDYWxlbmRhci5zY2hvb2xTY2hlZHVsZS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUluZm9SZXN1bHQoXG4gICAgICAgICdBbsOhbGlzaXMgZGUgSG9yYXJpbycsXG4gICAgICAgICdObyB0aWVuZXMgdW4gaG9yYXJpbyBlc2NvbGFyIGNvbmZpZ3VyYWRvLiBQcmltZXJvIGltcG9ydGEgdHUgaG9yYXJpbyBwYXJhIHBvZGVyIGFuYWxpemFybG8uJyxcbiAgICAgICAge30sXG4gICAgICAgIFsnSW1wb3J0YXIgaG9yYXJpbyBlc2NvbGFyJywgJ1ZlciBmb3JtYXRvIGRlIGltcG9ydGFjacOzbiddXG4gICAgICApXG4gICAgfVxuXG4gICAgLy8gQ29udmVydGlyIGEgZm9ybWF0byBTY2hvb2xDbGFzcyBwYXJhIGFuw6FsaXNpc1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjb250ZXh0LmFjYWRlbWljQ2FsZW5kYXIuc2Nob29sU2NoZWR1bGUubWFwKHNjaGVkdWxlID0+ICh7XG4gICAgICBpZDogYGNsYXNzXyR7c2NoZWR1bGUuc3ViamVjdH1fJHtzY2hlZHVsZS5kYXl9YCxcbiAgICAgIHN1YmplY3Q6IHNjaGVkdWxlLnN1YmplY3QsXG4gICAgICB0ZWFjaGVyOiBzY2hlZHVsZS50ZWFjaGVyLFxuICAgICAgY2xhc3Nyb29tOiBzY2hlZHVsZS5jbGFzc3Jvb20sXG4gICAgICBkYXk6IHNjaGVkdWxlLmRheSBhcyBhbnksXG4gICAgICBzdGFydFRpbWU6IHNjaGVkdWxlLnN0YXJ0VGltZSxcbiAgICAgIGVuZFRpbWU6IHNjaGVkdWxlLmVuZFRpbWUsXG4gICAgICBkdXJhdGlvbjogdGhpcy5jYWxjdWxhdGVEdXJhdGlvbihzY2hlZHVsZS5zdGFydFRpbWUsIHNjaGVkdWxlLmVuZFRpbWUpLFxuICAgICAgdHlwZTogJ2xlY3R1cmUnIGFzIGNvbnN0LFxuICAgICAgcmVjdXJyaW5nOiB0cnVlXG4gICAgfSkpXG5cbiAgICBjb25zdCBjb25mbGljdHMgPSBTY2hvb2xTY2hlZHVsZU1hbmFnZXIuZGV0ZWN0U2NoZWR1bGVDb25mbGljdHMoY2xhc3NlcylcbiAgICBjb25zdCBzdHVkeVNsb3RzID0gU2Nob29sU2NoZWR1bGVNYW5hZ2VyLmFuYWx5emVTdHVkeVRpbWVTbG90cyhjbGFzc2VzKVxuICAgIFxuICAgIC8vIENhbGN1bGFyIGVzdGFkw61zdGljYXNcbiAgICBjb25zdCB0b3RhbEhvdXJzID0gY2xhc3Nlcy5yZWR1Y2UoKHN1bSwgY2xzKSA9PiBzdW0gKyBjbHMuZHVyYXRpb24sIDApIC8gNjBcbiAgICBjb25zdCBkYWlseURpc3RyaWJ1dGlvbiA9IHRoaXMuY2FsY3VsYXRlRGFpbHlEaXN0cmlidXRpb24oY2xhc3NlcylcbiAgICBjb25zdCBzdWJqZWN0RGlzdHJpYnV0aW9uID0gdGhpcy5jYWxjdWxhdGVTdWJqZWN0RGlzdHJpYnV0aW9uKGNsYXNzZXMpXG5cbiAgICBjb25zdCBhbmFseXNpcyA9IHtcbiAgICAgIHRvdGFsQ2xhc3NlczogY2xhc3Nlcy5sZW5ndGgsXG4gICAgICB0b3RhbEhvdXJzLFxuICAgICAgYXZlcmFnZUhvdXJzUGVyRGF5OiB0b3RhbEhvdXJzIC8gNSxcbiAgICAgIGNvbmZsaWN0czogY29uZmxpY3RzLmxlbmd0aCxcbiAgICAgIGF2YWlsYWJsZVN0dWR5U2xvdHM6IHN0dWR5U2xvdHMubGVuZ3RoLFxuICAgICAgZnJlZUhvdXJzOiBzdHVkeVNsb3RzLnJlZHVjZSgoc3VtLCBzbG90KSA9PiBzdW0gKyBzbG90LmR1cmF0aW9uLCAwKSAvIDYwLFxuICAgICAgZGFpbHlEaXN0cmlidXRpb24sXG4gICAgICBzdWJqZWN0RGlzdHJpYnV0aW9uXG4gICAgfVxuXG4gICAgbGV0IG1lc3NhZ2UgPSBg8J+TiiAqKkFuw6FsaXNpcyBkZSB0dSBIb3JhcmlvIEFjYWTDqW1pY286KipcXG5cXG5gXG4gICAgbWVzc2FnZSArPSBg8J+TmiAqKlJlc3VtZW4gR2VuZXJhbDoqKlxcbmBcbiAgICBtZXNzYWdlICs9IGDigKIgJHthbmFseXNpcy50b3RhbENsYXNzZXN9IGNsYXNlcyBzZW1hbmFsZXNcXG5gXG4gICAgbWVzc2FnZSArPSBg4oCiICR7YW5hbHlzaXMudG90YWxIb3Vycy50b0ZpeGVkKDEpfSBob3JhcyBhY2Fkw6ltaWNhcyBwb3Igc2VtYW5hXFxuYFxuICAgIG1lc3NhZ2UgKz0gYOKAoiAke2FuYWx5c2lzLmF2ZXJhZ2VIb3Vyc1BlckRheS50b0ZpeGVkKDEpfSBob3JhcyBwcm9tZWRpbyBwb3IgZMOtYVxcblxcbmBcblxuICAgIGlmIChjb25mbGljdHMubGVuZ3RoID4gMCkge1xuICAgICAgbWVzc2FnZSArPSBg4pqg77iPICoqQ29uZmxpY3RvcyBEZXRlY3RhZG9zOioqICR7Y29uZmxpY3RzLmxlbmd0aH1cXG5gXG4gICAgICBjb25mbGljdHMuc2xpY2UoMCwgMykuZm9yRWFjaChjb25mbGljdCA9PiB7XG4gICAgICAgIG1lc3NhZ2UgKz0gYOKAoiAke2NvbmZsaWN0LmRlc2NyaXB0aW9ufVxcbmBcbiAgICAgIH0pXG4gICAgICBtZXNzYWdlICs9IGBcXG5gXG4gICAgfVxuXG4gICAgbWVzc2FnZSArPSBg4o+wICoqVGllbXBvIExpYnJlIHBhcmEgRXN0dWRpbzoqKlxcbmBcbiAgICBtZXNzYWdlICs9IGDigKIgJHthbmFseXNpcy5hdmFpbGFibGVTdHVkeVNsb3RzfSBzbG90cyBkaXNwb25pYmxlc1xcbmBcbiAgICBtZXNzYWdlICs9IGDigKIgJHthbmFseXNpcy5mcmVlSG91cnMudG9GaXhlZCgxKX0gaG9yYXMgbGlicmVzIHBvciBzZW1hbmFcXG5cXG5gXG5cbiAgICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSB0aGlzLmdlbmVyYXRlU2NoZWR1bGVSZWNvbW1lbmRhdGlvbnMoYW5hbHlzaXMsIGNvbmZsaWN0cylcbiAgICBpZiAocmVjb21tZW5kYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIG1lc3NhZ2UgKz0gYPCfkqEgKipSZWNvbWVuZGFjaW9uZXM6KipcXG5gXG4gICAgICByZWNvbW1lbmRhdGlvbnMuZm9yRWFjaChyZWMgPT4gbWVzc2FnZSArPSBg4oCiICR7cmVjfVxcbmApXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlQW5hbHlzaXNSZXN1bHQoXG4gICAgICAnQW7DoWxpc2lzIGRlIEhvcmFyaW8gQ29tcGxldG8nLFxuICAgICAgbWVzc2FnZSxcbiAgICAgIGFuYWx5c2lzLFxuICAgICAgWydQbGFuaWZpY2FyIHNlc2lvbmVzIGRlIGVzdHVkaW8nLCAnT3B0aW1pemFyIGhvcmFyaW8nLCAnUmVzb2x2ZXIgY29uZmxpY3RvcyddLFxuICAgICAgWyfCv1F1aWVyZXMgcXVlIGNyZWUgdW4gcGxhbiBkZSBlc3R1ZGlvIGJhc2FkbyBlbiB0dSB0aWVtcG8gbGlicmU/J11cbiAgICApXG4gIH1cblxuICAvKipcbiAgICogTWFuZWphIGxhIGNyZWFjacOzbiBkZSBwbGFuZXMgZGUgZXN0dWRpb1xuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgaGFuZGxlQ3JlYXRlU3R1ZHlQbGFuKFxuICAgIGNvbW1hbmQ6IHN0cmluZyxcbiAgICBhbmFseXNpczogYW55LFxuICAgIGNvbnRleHQ6IFN0dWRlbnRDb250ZXh0XG4gICk6IFByb21pc2U8Q29tbWFuZFJlc3VsdD4ge1xuICAgIFxuICAgIC8vIEV4dHJhZXIgcGVyw61vZG8gZGUgcGxhbmlmaWNhY2nDs24gZGVsIGNvbWFuZG9cbiAgICBjb25zdCBwZXJpb2QgPSB0aGlzLmV4dHJhY3RQbGFubmluZ1BlcmlvZChjb21tYW5kKVxuICAgIFxuICAgIC8vIEV4dHJhZXIgbWF0ZXJpYXMgZXNwZWPDrWZpY2FzIHNpIHNlIG1lbmNpb25hblxuICAgIGNvbnN0IHN1YmplY3RzID0gYW5hbHlzaXMuZW50aXRpZXMuc3ViamVjdHMgfHwgW11cbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gR2VuZXJhciBwbGFuIGRlIGVzdHVkaW9cbiAgICAgIGNvbnN0IHN0dWR5UGxhbiA9IGF3YWl0IFN0dWR5U2Vzc2lvblBsYW5uZXIuZ2VuZXJhdGVTdHVkeVBsYW4oXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIHBlcmlvZCxcbiAgICAgICAge1xuICAgICAgICAgIHByaW9yaXRpemVXZWFrU3ViamVjdHM6IHRydWUsXG4gICAgICAgICAgaW5jbHVkZVJldmlld1Nlc3Npb25zOiB0cnVlLFxuICAgICAgICAgIHJlc3BlY3RFbmVyZ3lMZXZlbHM6IHRydWVcbiAgICAgICAgfVxuICAgICAgKVxuXG4gICAgICBsZXQgbWVzc2FnZSA9IGDwn5OLICoqUGxhbiBkZSBFc3R1ZGlvIENyZWFkbzogXCIke3N0dWR5UGxhbi50aXRsZX1cIioqXFxuXFxuYFxuICAgICAgbWVzc2FnZSArPSBg8J+ThSAqKlBlcsOtb2RvOioqICR7cGVyaW9kLnN0YXJ0RGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoJ2VzLUVTJyl9IC0gJHtwZXJpb2QuZW5kRGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoJ2VzLUVTJyl9XFxuYFxuICAgICAgbWVzc2FnZSArPSBg8J+OryAqKlNlc2lvbmVzIFBsYW5pZmljYWRhczoqKiAke3N0dWR5UGxhbi50b3RhbFNlc3Npb25zfVxcbmBcbiAgICAgIG1lc3NhZ2UgKz0gYOKPse+4jyAqKkhvcmFzIFRvdGFsZXM6KiogJHtzdHVkeVBsYW4ubWV0cmljcy50b3RhbFBsYW5uZWRIb3Vycy50b0ZpeGVkKDEpfWhcXG5gXG4gICAgICBtZXNzYWdlICs9IGDwn5OaICoqTWF0ZXJpYXM6KiogJHtzdHVkeVBsYW4uc3ViamVjdHMuam9pbignLCAnKX1cXG5cXG5gXG5cbiAgICAgIC8vIE1vc3RyYXIgcHLDs3hpbWFzIHNlc2lvbmVzXG4gICAgICBjb25zdCB1cGNvbWluZ1Nlc3Npb25zID0gc3R1ZHlQbGFuLnNlc3Npb25zXG4gICAgICAgIC5maWx0ZXIoc2Vzc2lvbiA9PiBzZXNzaW9uLmRhdGUgPj0gbmV3IERhdGUoKSlcbiAgICAgICAgLnNsaWNlKDAsIDUpXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRhdGUuZ2V0VGltZSgpIC0gYi5kYXRlLmdldFRpbWUoKSlcblxuICAgICAgaWYgKHVwY29taW5nU2Vzc2lvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBtZXNzYWdlICs9IGDwn5OdICoqUHLDs3hpbWFzIFNlc2lvbmVzOioqXFxuYFxuICAgICAgICB1cGNvbWluZ1Nlc3Npb25zLmZvckVhY2goc2Vzc2lvbiA9PiB7XG4gICAgICAgICAgbWVzc2FnZSArPSBg4oCiICR7c2Vzc2lvbi5kYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygnZXMtRVMnKX0gJHtzZXNzaW9uLnN0YXJ0VGltZX0gLSAke3Nlc3Npb24uc3ViamVjdH06ICR7c2Vzc2lvbi50b3BpY30gKCR7c2Vzc2lvbi5kdXJhdGlvbn1taW4pXFxuYFxuICAgICAgICB9KVxuICAgICAgICBtZXNzYWdlICs9IGBcXG5gXG4gICAgICB9XG5cbiAgICAgIC8vIERpc3RyaWJ1Y2nDs24gcG9yIG1hdGVyaWFcbiAgICAgIG1lc3NhZ2UgKz0gYPCfk4ogKipEaXN0cmlidWNpw7NuIHBvciBNYXRlcmlhOioqXFxuYFxuICAgICAgT2JqZWN0LmVudHJpZXMoc3R1ZHlQbGFuLm1ldHJpY3Muc3ViamVjdEJhbGFuY2UpLmZvckVhY2goKFtzdWJqZWN0LCBob3Vyc10pID0+IHtcbiAgICAgICAgbWVzc2FnZSArPSBg4oCiICR7c3ViamVjdH06ICR7KGhvdXJzIGFzIG51bWJlcikudG9GaXhlZCgxKX1oXFxuYFxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUGxhbm5pbmdSZXN1bHQoXG4gICAgICAgICdQbGFuIGRlIEVzdHVkaW8gR2VuZXJhZG8nLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBzdHVkeVBsYW4sXG4gICAgICAgIFsnVmVyIGNhbGVuZGFyaW8gY29tcGxldG8nLCAnQWp1c3RhciBwbGFuJywgJ0NvbWVuemFyIHByaW1lcmEgc2VzacOzbiddLFxuICAgICAgICBbJ8K/UXVpZXJlcyBxdWUgYWp1c3RlIGFsZ3VuYSBzZXNpw7NuIGVzcGVjw61maWNhPycsICfCv1RlIHBhcmVjZSBiaWVuIGxhIGRpc3RyaWJ1Y2nDs24gZGUgbWF0ZXJpYXM/J11cbiAgICAgIClcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvclJlc3VsdChgRXJyb3IgY3JlYW5kbyBwbGFuIGRlIGVzdHVkaW86ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRXJyb3IgZGVzY29ub2NpZG8nfWApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1hbmVqYSBsYSByZXZpc2nDs24gZGUgcHJvZ3Jlc29cbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIHByb2Nlc3NQcm9ncmVzc1JldmlldyhcbiAgICBjb21tYW5kOiBzdHJpbmcsXG4gICAgYW5hbHlzaXM6IGFueSxcbiAgICBjb250ZXh0OiBTdHVkZW50Q29udGV4dFxuICApOiBQcm9taXNlPENvbW1hbmRSZXN1bHQ+IHtcbiAgICBcbiAgICBjb25zdCBwcm9ncmVzc0RhdGEgPSB0aGlzLmNhbGN1bGF0ZVByb2dyZXNzTWV0cmljcyhjb250ZXh0KVxuICAgIGNvbnN0IGluc2lnaHRzID0gdGhpcy5nZW5lcmF0ZVByb2dyZXNzSW5zaWdodHMocHJvZ3Jlc3NEYXRhLCBjb250ZXh0KVxuICAgIFxuICAgIGxldCBtZXNzYWdlID0gYPCfk4ggKipSZXZpc2nDs24gZGUgdHUgUHJvZ3Jlc28gQWNhZMOpbWljbzoqKlxcblxcbmBcbiAgICBcbiAgICAvLyBQcm9ncmVzbyBnZW5lcmFsXG4gICAgbWVzc2FnZSArPSBg8J+OryAqKk9iamV0aXZvcyBBY3Rpdm9zOioqXFxuYFxuICAgIGlmIChjb250ZXh0LmN1cnJlbnRHb2Fscy5sZW5ndGggPiAwKSB7XG4gICAgICBjb250ZXh0LmN1cnJlbnRHb2Fscy5zbGljZSgwLCA1KS5mb3JFYWNoKGdvYWwgPT4ge1xuICAgICAgICBtZXNzYWdlICs9IGDigKIgJHtnb2FsLnRpdGxlfTogJHtnb2FsLnByb2dyZXNzfSUgY29tcGxldGFkb1xcbmBcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG1lc3NhZ2UgKz0gYOKAoiBObyB0aWVuZXMgb2JqZXRpdm9zIGRlZmluaWRvcyBhY3R1YWxtZW50ZVxcbmBcbiAgICB9XG4gICAgbWVzc2FnZSArPSBgXFxuYFxuXG4gICAgLy8gUmVuZGltaWVudG8gcG9yIG1hdGVyaWFcbiAgICBpZiAoY29udGV4dC5zdWJqZWN0UGVyZm9ybWFuY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIG1lc3NhZ2UgKz0gYPCfk5ogKipSZW5kaW1pZW50byBwb3IgTWF0ZXJpYToqKlxcbmBcbiAgICAgIGNvbnN0IHNvcnRlZFN1YmplY3RzID0gY29udGV4dC5zdWJqZWN0UGVyZm9ybWFuY2VzXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLmF2ZXJhZ2VHcmFkZSAtIGEuYXZlcmFnZUdyYWRlKVxuICAgICAgICAuc2xpY2UoMCwgNSlcbiAgICAgIFxuICAgICAgc29ydGVkU3ViamVjdHMuZm9yRWFjaChzdWJqZWN0ID0+IHtcbiAgICAgICAgY29uc3QgZW1vamkgPSBzdWJqZWN0LmF2ZXJhZ2VHcmFkZSA+PSA4NSA/ICfwn5+iJyA6IHN1YmplY3QuYXZlcmFnZUdyYWRlID49IDcwID8gJ/Cfn6EnIDogJ/CflLQnXG4gICAgICAgIG1lc3NhZ2UgKz0gYCR7ZW1vaml9ICR7c3ViamVjdC5zdWJqZWN0fTogJHtzdWJqZWN0LmF2ZXJhZ2VHcmFkZX0lIHByb21lZGlvXFxuYFxuICAgICAgfSlcbiAgICAgIG1lc3NhZ2UgKz0gYFxcbmBcbiAgICB9XG5cbiAgICAvLyBQYXRyb25lcyBkZSBlc3R1ZGlvXG4gICAgbWVzc2FnZSArPSBg4o+x77iPICoqUGF0cm9uZXMgZGUgRXN0dWRpbzoqKlxcbmBcbiAgICBtZXNzYWdlICs9IGDigKIgSG9yYXMgc2VtYW5hbGVzOiAke2NvbnRleHQuc3R1ZHlQYXR0ZXJucy53ZWVrbHlTdGF0cy50b3RhbFN0dWR5SG91cnMudG9GaXhlZCgxKX1oXFxuYFxuICAgIG1lc3NhZ2UgKz0gYOKAoiBOaXZlbCBkZSBlbmZvcXVlIHByb21lZGlvOiAke2NvbnRleHQuc3R1ZHlQYXR0ZXJucy53ZWVrbHlTdGF0cy5hdmVyYWdlRm9jdXNTY29yZX0vMTBcXG5gXG4gICAgbWVzc2FnZSArPSBg4oCiIE1vbWVudG9zIG3DoXMgcHJvZHVjdGl2b3M6ICR7Y29udGV4dC5zdHVkeVBhdHRlcm5zLnBhdHRlcm5zLm1vc3RQcm9kdWN0aXZlSG91cnMuc2xpY2UoMCwgMykuam9pbignLCAnKX1cXG5cXG5gXG5cbiAgICAvLyBJbnNpZ2h0cyB5IHJlY29tZW5kYWNpb25lc1xuICAgIGlmIChpbnNpZ2h0cy5yZWNvbW1lbmRhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgbWVzc2FnZSArPSBg8J+SoSAqKlJlY29tZW5kYWNpb25lczoqKlxcbmBcbiAgICAgIGluc2lnaHRzLnJlY29tbWVuZGF0aW9ucy5zbGljZSgwLCA0KS5mb3JFYWNoKHJlYyA9PiB7XG4gICAgICAgIG1lc3NhZ2UgKz0gYOKAoiAke3JlY31cXG5gXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUFuYWx5c2lzUmVzdWx0KFxuICAgICAgJ0Fuw6FsaXNpcyBkZSBQcm9ncmVzbycsXG4gICAgICBtZXNzYWdlLFxuICAgICAgcHJvZ3Jlc3NEYXRhLFxuICAgICAgWydFc3RhYmxlY2VyIG51ZXZvcyBvYmpldGl2b3MnLCAnQWp1c3RhciBwbGFuIGRlIGVzdHVkaW8nLCAnVmVyIGFuw6FsaXNpcyBkZXRhbGxhZG8nXSxcbiAgICAgIFsnwr9FbiBxdcOpIMOhcmVhIGVzcGVjw61maWNhIHRlIGd1c3RhcsOtYSBtZWpvcmFyPycsICfCv1F1aWVyZXMgcXVlIGFqdXN0ZSB0dSBwbGFuIGRlIGVzdHVkaW8gYWN0dWFsPyddXG4gICAgKVxuICB9XG5cbiAgLy8gRnVuY2lvbmVzIGF1eGlsaWFyZXNcblxuICBwcml2YXRlIHN0YXRpYyBleHRyYWN0U2NoZWR1bGVUZXh0KGNvbW1hbmQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLy8gRXh0cmFlciB0ZXh0byBkZXNwdcOpcyBkZSBwYWxhYnJhcyBjbGF2ZSBjb21vIFwiaW1wb3J0YVwiLCBcImhvcmFyaW86XCIsIGV0Yy5cbiAgICBjb25zdCBwYXR0ZXJucyA9IFtcbiAgICAgIC9ob3JhcmlvWzpcXHNdKyguKykvaSxcbiAgICAgIC9pbXBvcnRhWzpcXHNdKyguKykvaSxcbiAgICAgIC9jbGFzZXNbOlxcc10rKC4rKS9pXG4gICAgXVxuXG4gICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIHBhdHRlcm5zKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IGNvbW1hbmQubWF0Y2gocGF0dGVybilcbiAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hbMV0udHJpbSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2kgbm8gaGF5IHBhdHJvbmVzIGVzcGVjw61maWNvcywgYXN1bWlyIHF1ZSB0b2RvIGVsIGNvbWFuZG8gZXMgZWwgaG9yYXJpb1xuICAgIGNvbnN0IGtleXdvcmRzID0gWydpbXBvcnRhJywgJ2FncmVnYScsICdob3JhcmlvJywgJ2NsYXNlcyddXG4gICAgY29uc3QgaGFzS2V5d29yZCA9IGtleXdvcmRzLnNvbWUoa2V5d29yZCA9PiBjb21tYW5kLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoa2V5d29yZCkpXG4gICAgXG4gICAgaWYgKGhhc0tleXdvcmQpIHtcbiAgICAgIC8vIFJlbW92ZXIgcGFsYWJyYXMgY2xhdmUgeSByZXRvcm5hciBlbCByZXN0b1xuICAgICAgbGV0IGNsZWFuQ29tbWFuZCA9IGNvbW1hbmRcbiAgICAgIGtleXdvcmRzLmZvckVhY2goa2V5d29yZCA9PiB7XG4gICAgICAgIGNsZWFuQ29tbWFuZCA9IGNsZWFuQ29tbWFuZC5yZXBsYWNlKG5ldyBSZWdFeHAoa2V5d29yZCwgJ2dpJyksICcnKVxuICAgICAgfSlcbiAgICAgIHJldHVybiBjbGVhbkNvbW1hbmQudHJpbSgpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbW1hbmRcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGV4dHJhY3RQbGFubmluZ1BlcmlvZChjb21tYW5kOiBzdHJpbmcpOiB7IHN0YXJ0RGF0ZTogRGF0ZSwgZW5kRGF0ZTogRGF0ZSB9IHtcbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKClcbiAgICBjb25zdCBjb21tYW5kTG93ZXIgPSBjb21tYW5kLnRvTG93ZXJDYXNlKClcblxuICAgIGlmIChjb21tYW5kTG93ZXIuaW5jbHVkZXMoJ3NlbWFuYScpKSB7XG4gICAgICBjb25zdCBlbmREYXRlID0gbmV3IERhdGUodG9kYXkpXG4gICAgICBlbmREYXRlLnNldERhdGUodG9kYXkuZ2V0RGF0ZSgpICsgNylcbiAgICAgIHJldHVybiB7IHN0YXJ0RGF0ZTogdG9kYXksIGVuZERhdGUgfVxuICAgIH1cblxuICAgIGlmIChjb21tYW5kTG93ZXIuaW5jbHVkZXMoJ21lcycpKSB7XG4gICAgICBjb25zdCBlbmREYXRlID0gbmV3IERhdGUodG9kYXkpXG4gICAgICBlbmREYXRlLnNldE1vbnRoKHRvZGF5LmdldE1vbnRoKCkgKyAxKVxuICAgICAgcmV0dXJuIHsgc3RhcnREYXRlOiB0b2RheSwgZW5kRGF0ZSB9XG4gICAgfVxuXG4gICAgaWYgKGNvbW1hbmRMb3dlci5pbmNsdWRlcygnMTUnKSB8fCBjb21tYW5kTG93ZXIuaW5jbHVkZXMoJ3F1aW5jZScpKSB7XG4gICAgICBjb25zdCBlbmREYXRlID0gbmV3IERhdGUodG9kYXkpXG4gICAgICBlbmREYXRlLnNldERhdGUodG9kYXkuZ2V0RGF0ZSgpICsgMTUpXG4gICAgICByZXR1cm4geyBzdGFydERhdGU6IHRvZGF5LCBlbmREYXRlIH1cbiAgICB9XG5cbiAgICAvLyBQb3IgZGVmZWN0bzogdW5hIHNlbWFuYVxuICAgIGNvbnN0IGVuZERhdGUgPSBuZXcgRGF0ZSh0b2RheSlcbiAgICBlbmREYXRlLnNldERhdGUodG9kYXkuZ2V0RGF0ZSgpICsgNylcbiAgICByZXR1cm4geyBzdGFydERhdGU6IHRvZGF5LCBlbmREYXRlIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGNhbGN1bGF0ZUR1cmF0aW9uKHN0YXJ0VGltZTogc3RyaW5nLCBlbmRUaW1lOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy50aW1lVG9NaW51dGVzKHN0YXJ0VGltZSlcbiAgICBjb25zdCBlbmQgPSB0aGlzLnRpbWVUb01pbnV0ZXMoZW5kVGltZSlcbiAgICByZXR1cm4gZW5kIC0gc3RhcnRcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHRpbWVUb01pbnV0ZXModGltZTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBjb25zdCBbaG91cnMsIG1pbnV0ZXNdID0gdGltZS5zcGxpdCgnOicpLm1hcChOdW1iZXIpXG4gICAgcmV0dXJuIGhvdXJzICogNjAgKyBtaW51dGVzXG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjYWxjdWxhdGVEYWlseURpc3RyaWJ1dGlvbihjbGFzc2VzOiBhbnlbXSk6IHsgW2RheTogc3RyaW5nXTogbnVtYmVyIH0ge1xuICAgIHJldHVybiBjbGFzc2VzLnJlZHVjZSgoYWNjLCBjbHMpID0+IHtcbiAgICAgIGFjY1tjbHMuZGF5XSA9IChhY2NbY2xzLmRheV0gfHwgMCkgKyBjbHMuZHVyYXRpb24gLyA2MFxuICAgICAgcmV0dXJuIGFjY1xuICAgIH0sIHt9IGFzIHsgW2RheTogc3RyaW5nXTogbnVtYmVyIH0pXG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjYWxjdWxhdGVTdWJqZWN0RGlzdHJpYnV0aW9uKGNsYXNzZXM6IGFueVtdKTogeyBbc3ViamVjdDogc3RyaW5nXTogbnVtYmVyIH0ge1xuICAgIHJldHVybiBjbGFzc2VzLnJlZHVjZSgoYWNjLCBjbHMpID0+IHtcbiAgICAgIGFjY1tjbHMuc3ViamVjdF0gPSAoYWNjW2Nscy5zdWJqZWN0XSB8fCAwKSArIGNscy5kdXJhdGlvbiAvIDYwXG4gICAgICByZXR1cm4gYWNjXG4gICAgfSwge30gYXMgeyBbc3ViamVjdDogc3RyaW5nXTogbnVtYmVyIH0pXG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBnZW5lcmF0ZVNjaGVkdWxlUmVjb21tZW5kYXRpb25zKGFuYWx5c2lzOiBhbnksIGNvbmZsaWN0czogYW55W10pOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXSA9IFtdXG5cbiAgICBpZiAoY29uZmxpY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdSZXNvbHZlciBjb25mbGljdG9zIGRlIGhvcmFyaW8gZGV0ZWN0YWRvcycpXG4gICAgfVxuXG4gICAgaWYgKGFuYWx5c2lzLmF2ZXJhZ2VIb3Vyc1BlckRheSA+IDcpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdDb25zaWRlcmFyIHJlZHVjaXIgbGEgY2FyZ2EgYWNhZMOpbWljYSBkaWFyaWEnKVxuICAgIH1cblxuICAgIGlmIChhbmFseXNpcy5mcmVlSG91cnMgPCAxMCkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ0J1c2NhciBtw6FzIHRpZW1wbyBsaWJyZSBwYXJhIGVzdHVkaW8gcGVyc29uYWwnKVxuICAgIH1cblxuICAgIGlmIChhbmFseXNpcy5mcmVlSG91cnMgPiAyNSkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ0Fwcm92ZWNoYXIgZWwgdGllbXBvIGxpYnJlIGFidW5kYW50ZSBwYXJhIGFjdGl2aWRhZGVzIGV4dHJhY3VycmljdWxhcmVzJylcbiAgICB9XG5cbiAgICByZXR1cm4gcmVjb21tZW5kYXRpb25zXG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjYWxjdWxhdGVQcm9ncmVzc01ldHJpY3MoY29udGV4dDogU3R1ZGVudENvbnRleHQpOiBhbnkge1xuICAgIGNvbnN0IHRvdGFsR29hbHMgPSBjb250ZXh0LmN1cnJlbnRHb2Fscy5sZW5ndGhcbiAgICBjb25zdCBjb21wbGV0ZWRHb2FscyA9IGNvbnRleHQuY3VycmVudEdvYWxzLmZpbHRlcihnID0+IGcucHJvZ3Jlc3MgPj0gMTAwKS5sZW5ndGhcbiAgICBjb25zdCBhdmdHb2FsUHJvZ3Jlc3MgPSB0b3RhbEdvYWxzID4gMCBcbiAgICAgID8gY29udGV4dC5jdXJyZW50R29hbHMucmVkdWNlKChzdW0sIGcpID0+IHN1bSArIGcucHJvZ3Jlc3MsIDApIC8gdG90YWxHb2FscyBcbiAgICAgIDogMFxuXG4gICAgY29uc3QgYXZnR3JhZGUgPSBjb250ZXh0LnN1YmplY3RQZXJmb3JtYW5jZXMubGVuZ3RoID4gMFxuICAgICAgPyBjb250ZXh0LnN1YmplY3RQZXJmb3JtYW5jZXMucmVkdWNlKChzdW0sIHMpID0+IHN1bSArIHMuYXZlcmFnZUdyYWRlLCAwKSAvIGNvbnRleHQuc3ViamVjdFBlcmZvcm1hbmNlcy5sZW5ndGhcbiAgICAgIDogMFxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdvYWxDb21wbGV0aW9uUmF0ZTogY29tcGxldGVkR29hbHMgLyBNYXRoLm1heCh0b3RhbEdvYWxzLCAxKSAqIDEwMCxcbiAgICAgIGF2ZXJhZ2VHb2FsUHJvZ3Jlc3M6IGF2Z0dvYWxQcm9ncmVzcyxcbiAgICAgIGF2ZXJhZ2VHcmFkZTogYXZnR3JhZGUsXG4gICAgICB0b3RhbFN0dWR5SG91cnM6IGNvbnRleHQuc3R1ZHlQYXR0ZXJucy53ZWVrbHlTdGF0cy50b3RhbFN0dWR5SG91cnMsXG4gICAgICBmb2N1c1Njb3JlOiBjb250ZXh0LnN0dWR5UGF0dGVybnMud2Vla2x5U3RhdHMuYXZlcmFnZUZvY3VzU2NvcmVcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBnZW5lcmF0ZVByb2dyZXNzSW5zaWdodHMocHJvZ3Jlc3NEYXRhOiBhbnksIGNvbnRleHQ6IFN0dWRlbnRDb250ZXh0KTogeyByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdIH0ge1xuICAgIGNvbnN0IHJlY29tbWVuZGF0aW9uczogc3RyaW5nW10gPSBbXVxuXG4gICAgaWYgKHByb2dyZXNzRGF0YS5nb2FsQ29tcGxldGlvblJhdGUgPCA1MCkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ1JldmlzYXIgeSBhanVzdGFyIG9iamV0aXZvcyBwYXJhIHF1ZSBzZWFuIG3DoXMgYWxjYW56YWJsZXMnKVxuICAgIH1cblxuICAgIGlmIChwcm9ncmVzc0RhdGEuYXZlcmFnZUdyYWRlIDwgNzUpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdJbmNyZW1lbnRhciB0aWVtcG8gZGUgZXN0dWRpbyBlbiBtYXRlcmlhcyBjb24gbWVub3IgcmVuZGltaWVudG8nKVxuICAgIH1cblxuICAgIGlmIChwcm9ncmVzc0RhdGEudG90YWxTdHVkeUhvdXJzIDwgMTApIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdBdW1lbnRhciBncmFkdWFsbWVudGUgbGFzIGhvcmFzIGRlIGVzdHVkaW8gc2VtYW5hbGVzJylcbiAgICB9XG5cbiAgICBpZiAocHJvZ3Jlc3NEYXRhLmZvY3VzU2NvcmUgPCA2KSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnSW1wbGVtZW50YXIgdMOpY25pY2FzIGRlIG1lam9yYSBkZSBjb25jZW50cmFjacOzbicpXG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcmVjb21tZW5kYXRpb25zIH1cbiAgfVxuXG4gIC8vIE3DqXRvZG9zIGF1eGlsaWFyZXMgcGFyYSBjcmVhciByZXN1bHRhZG9zXG5cbiAgcHJpdmF0ZSBzdGF0aWMgY3JlYXRlSW5mb1Jlc3VsdChcbiAgICB0aXRsZTogc3RyaW5nLCBcbiAgICBtZXNzYWdlOiBzdHJpbmcsIFxuICAgIGRhdGE/OiBhbnksIFxuICAgIGFjdGlvbnM/OiBzdHJpbmdbXSwgXG4gICAgcXVlc3Rpb25zPzogc3RyaW5nW11cbiAgKTogQ29tbWFuZFJlc3VsdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICB0eXBlOiAnaW5mb3JtYXRpb24nLFxuICAgICAgdGl0bGUsXG4gICAgICBtZXNzYWdlLFxuICAgICAgZGF0YSxcbiAgICAgIHN1Z2dlc3RlZEFjdGlvbnM6IGFjdGlvbnMsXG4gICAgICBmb2xsb3dVcFF1ZXN0aW9uczogcXVlc3Rpb25zXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgY3JlYXRlQWN0aW9uUmVzdWx0KFxuICAgIHRpdGxlOiBzdHJpbmcsIFxuICAgIG1lc3NhZ2U6IHN0cmluZywgXG4gICAgZGF0YT86IGFueSwgXG4gICAgYWN0aW9ucz86IHN0cmluZ1tdLCBcbiAgICBxdWVzdGlvbnM/OiBzdHJpbmdbXVxuICApOiBDb21tYW5kUmVzdWx0IHtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHR5cGU6ICdhY3Rpb24nLFxuICAgICAgdGl0bGUsXG4gICAgICBtZXNzYWdlLFxuICAgICAgZGF0YSxcbiAgICAgIHN1Z2dlc3RlZEFjdGlvbnM6IGFjdGlvbnMsXG4gICAgICBmb2xsb3dVcFF1ZXN0aW9uczogcXVlc3Rpb25zXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgY3JlYXRlUGxhbm5pbmdSZXN1bHQoXG4gICAgdGl0bGU6IHN0cmluZywgXG4gICAgbWVzc2FnZTogc3RyaW5nLCBcbiAgICBkYXRhPzogYW55LCBcbiAgICBhY3Rpb25zPzogc3RyaW5nW10sIFxuICAgIHF1ZXN0aW9ucz86IHN0cmluZ1tdXG4gICk6IENvbW1hbmRSZXN1bHQge1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgdHlwZTogJ3BsYW5uaW5nJyxcbiAgICAgIHRpdGxlLFxuICAgICAgbWVzc2FnZSxcbiAgICAgIGRhdGEsXG4gICAgICBzdWdnZXN0ZWRBY3Rpb25zOiBhY3Rpb25zLFxuICAgICAgZm9sbG93VXBRdWVzdGlvbnM6IHF1ZXN0aW9uc1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGNyZWF0ZUFuYWx5c2lzUmVzdWx0KFxuICAgIHRpdGxlOiBzdHJpbmcsIFxuICAgIG1lc3NhZ2U6IHN0cmluZywgXG4gICAgZGF0YT86IGFueSwgXG4gICAgYWN0aW9ucz86IHN0cmluZ1tdLCBcbiAgICBxdWVzdGlvbnM/OiBzdHJpbmdbXVxuICApOiBDb21tYW5kUmVzdWx0IHtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHR5cGU6ICdhbmFseXNpcycsXG4gICAgICB0aXRsZSxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBkYXRhLFxuICAgICAgc3VnZ2VzdGVkQWN0aW9uczogYWN0aW9ucyxcbiAgICAgIGZvbGxvd1VwUXVlc3Rpb25zOiBxdWVzdGlvbnNcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjcmVhdGVFcnJvclJlc3VsdChtZXNzYWdlOiBzdHJpbmcpOiBDb21tYW5kUmVzdWx0IHtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgdGl0bGU6ICdFcnJvcicsXG4gICAgICBtZXNzYWdlXG4gICAgfVxuICB9XG5cbiAgLy8gTcOpdG9kb3MgZGUgcHJvY2VzYW1pZW50byBhZGljaW9uYWxlcyAoaW1wbGVtZW50YWNpw7NuIGLDoXNpY2EpXG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgcHJvY2Vzc0NhbGVuZGFyTWFuYWdlbWVudChjb21tYW5kOiBzdHJpbmcsIGFuYWx5c2lzOiBhbnksIGNvbnRleHQ6IFN0dWRlbnRDb250ZXh0KTogUHJvbWlzZTxDb21tYW5kUmVzdWx0PiB7XG4gICAgY29uc29sZS5sb2coJ/Cfk4UgUHJvY2Vzc2luZyBjYWxlbmRhciBtYW5hZ2VtZW50IGNvbW1hbmQ6JywgY29tbWFuZClcbiAgICBcbiAgICAvLyBJbnRlZ3JhciBjb24gQUlDYWxlbmRhckludGVncmF0aW9uIGV4aXN0ZW50ZVxuICAgIGNvbnN0IGNhbGVuZGFySW50ZWdyYXRpb24gPSBuZXcgQUlDYWxlbmRhckludGVncmF0aW9uKGNvbnRleHQudXNlcklkKVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhbGVuZGFySW50ZWdyYXRpb24ucHJvY2Vzc01lc3NhZ2UoY29tbWFuZCwgW10pXG4gICAgXG4gICAgY29uc29sZS5sb2coJ/Cfk4UgQ2FsZW5kYXIgaW50ZWdyYXRpb24gcmVzdWx0OicsIHsgXG4gICAgICBuZWVkc0V2ZW50Q3JlYXRpb246IHJlc3VsdC5uZWVkc0V2ZW50Q3JlYXRpb24sIFxuICAgICAgZXZlbnRDcmVhdGVkOiAhIXJlc3VsdC5ldmVudCxcbiAgICAgIHJlc3BvbnNlOiByZXN1bHQucmVzcG9uc2U/LnN1YnN0cmluZygwLCAxMDApIFxuICAgIH0pXG4gICAgXG4gICAgaWYgKHJlc3VsdC5uZWVkc0V2ZW50Q3JlYXRpb24gfHwgcmVzdWx0LmV2ZW50KSB7XG4gICAgICAvLyBTaSBzZSBjcmXDsyB1biBldmVudG8gbyBzZSBuZWNlc2l0YSBjcmVhciB1bm8sIGNvbnNpZGVyYXJsbyDDqXhpdG9cbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUFjdGlvblJlc3VsdChcbiAgICAgICAgJ0dlc3Rpw7NuIGRlIENhbGVuZGFyaW8nLFxuICAgICAgICByZXN1bHQucmVzcG9uc2UgfHwgJ0V2ZW50byBkZSBjYWxlbmRhcmlvIHByb2Nlc2FkbyBleGl0b3NhbWVudGUnLFxuICAgICAgICByZXN1bHQuZXZlbnQsXG4gICAgICAgIHJlc3VsdC5ldmVudCA/IFsnVmVyIGVuIGNhbGVuZGFyaW8nLCAnRWRpdGFyIGV2ZW50bycsICdFbGltaW5hciBldmVudG8nXSA6IFsnVmVyIGNhbGVuZGFyaW8nLCAnQWdyZWdhciBtw6FzIGV2ZW50b3MnXSxcbiAgICAgICAgcmVzdWx0LmV2ZW50ID8gWyfCv05lY2VzaXRhcyBtb2RpZmljYXIgYWxnw7puIGRldGFsbGUgZGVsIGV2ZW50bz8nXSA6IFsnwr9OZWNlc2l0YXMgcHJvZ3JhbWFyIGFsZ8O6biBldmVudG8gYWRpY2lvbmFsPyddXG4gICAgICApXG4gICAgfVxuICAgIFxuICAgIC8vIFNpIG5vIHNlIGRldGVjdMOzIHVuYSBhY2Npw7NuIGRlIGNhbGVuZGFyaW8sIGRldm9sdmVyIGVsIHJlc3VsdGFkbyB0YWwgY29tbyBlc3TDoVxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUluZm9SZXN1bHQoXG4gICAgICAnSW5mb3JtYWNpw7NuIGRlIENhbGVuZGFyaW8nLFxuICAgICAgcmVzdWx0LnJlc3BvbnNlIHx8ICdObyBzZSBkZXRlY3TDsyB1bmEgYWNjacOzbiBlc3BlY8OtZmljYSBkZSBjYWxlbmRhcmlvJyxcbiAgICAgIHt9LFxuICAgICAgWydWZXIgcHLDs3hpbW9zIGV2ZW50b3MnLCAnQWdyZWdhciBldmVudG8nXSxcbiAgICAgIFsnwr9RdcOpIGV2ZW50byB0ZSBndXN0YXLDrWEgYWdlbmRhcj8nLCAnwr9OZWNlc2l0YXMgdmVyIHR1IGNhbGVuZGFyaW8/J11cbiAgICApXG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBwcm9jZXNzVGltZU9wdGltaXphdGlvbihjb21tYW5kOiBzdHJpbmcsIGFuYWx5c2lzOiBhbnksIGNvbnRleHQ6IFN0dWRlbnRDb250ZXh0KTogUHJvbWlzZTxDb21tYW5kUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlSW5mb1Jlc3VsdChcbiAgICAgICdPcHRpbWl6YWNpw7NuIGRlIFRpZW1wbycsXG4gICAgICAnQW5hbGl6YW5kbyB0dSBob3JhcmlvIHBhcmEgZW5jb250cmFyIGxhcyBtZWpvcmVzIG9wb3J0dW5pZGFkZXMgZGUgb3B0aW1pemFjacOzbi4uLicsXG4gICAgICB7fSxcbiAgICAgIFsnQW5hbGl6YXIgaG9yYXJpbyBhY3R1YWwnLCAnU3VnZXJpciBtZWpvcmFzJ10sXG4gICAgICBbJ8K/RW4gcXXDqSDDoXJlYSBlc3BlY8OtZmljYSBxdWllcmVzIG9wdGltaXphciB0dSB0aWVtcG8/J11cbiAgICApXG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBwcm9jZXNzTWF0ZXJpYWxSZXF1ZXN0KGNvbW1hbmQ6IHN0cmluZywgYW5hbHlzaXM6IGFueSwgY29udGV4dDogU3R1ZGVudENvbnRleHQpOiBQcm9taXNlPENvbW1hbmRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVJbmZvUmVzdWx0KFxuICAgICAgJ0dlc3Rpw7NuIGRlIE1hdGVyaWFsZXMnLFxuICAgICAgJ1RlIGF5dWRvIGEgb3JnYW5pemFyIHkgZW5jb250cmFyIG1hdGVyaWFsZXMgZGUgZXN0dWRpby4nLFxuICAgICAge30sXG4gICAgICBbJ0J1c2NhciByZWN1cnNvcycsICdPcmdhbml6YXIgbWF0ZXJpYWxlcyddLFxuICAgICAgWyfCv1BhcmEgcXXDqSBtYXRlcmlhIG5lY2VzaXRhcyBtYXRlcmlhbGVzPyddXG4gICAgKVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgcHJvY2Vzc1BlcmZvcm1hbmNlQW5hbHlzaXMoY29tbWFuZDogc3RyaW5nLCBhbmFseXNpczogYW55LCBjb250ZXh0OiBTdHVkZW50Q29udGV4dCk6IFByb21pc2U8Q29tbWFuZFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZUFuYWx5c2lzUmVzdWx0KFxuICAgICAgJ0Fuw6FsaXNpcyBkZSBSZW5kaW1pZW50bycsXG4gICAgICAnQW5hbGl6YW5kbyB0dSByZW5kaW1pZW50byBhY2Fkw6ltaWNvLi4uJyxcbiAgICAgIHt9LFxuICAgICAgWydWZXIgZGV0YWxsZXMgcG9yIG1hdGVyaWEnLCAnR2VuZXJhciByZXBvcnRlJ10sXG4gICAgICBbJ8K/UXVpZXJlcyBlbmZvY2Fybm9zIGVuIGFsZ3VuYSBtYXRlcmlhIGVzcGVjw61maWNhPyddXG4gICAgKVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgcHJvY2Vzc0dvYWxNYW5hZ2VtZW50KGNvbW1hbmQ6IHN0cmluZywgYW5hbHlzaXM6IGFueSwgY29udGV4dDogU3R1ZGVudENvbnRleHQpOiBQcm9taXNlPENvbW1hbmRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVQbGFubmluZ1Jlc3VsdChcbiAgICAgICdHZXN0acOzbiBkZSBPYmpldGl2b3MnLFxuICAgICAgJ1RlIGF5dWRvIGEgZXN0YWJsZWNlciB5IHNlZ3VpciB0dXMgb2JqZXRpdm9zIGFjYWTDqW1pY29zLicsXG4gICAgICB7fSxcbiAgICAgIFsnQ3JlYXIgbnVldm8gb2JqZXRpdm8nLCAnUmV2aXNhciBwcm9ncmVzbyddLFxuICAgICAgWyfCv1F1w6kgb2JqZXRpdm8gYWNhZMOpbWljbyBxdWllcmVzIGVzdGFibGVjZXI/J11cbiAgICApXG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBwcm9jZXNzUHJlZmVyZW5jZVNldHRpbmcoY29tbWFuZDogc3RyaW5nLCBhbmFseXNpczogYW55LCBjb250ZXh0OiBTdHVkZW50Q29udGV4dCk6IFByb21pc2U8Q29tbWFuZFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZUluZm9SZXN1bHQoXG4gICAgICAnQ29uZmlndXJhY2nDs24gZGUgUHJlZmVyZW5jaWFzJyxcbiAgICAgICdDb25maWd1cmFuZG8gdHVzIHByZWZlcmVuY2lhcyBkZSBlc3R1ZGlvIHkgYXByZW5kaXphamUuJyxcbiAgICAgIHt9LFxuICAgICAgWydBY3R1YWxpemFyIHByZWZlcmVuY2lhcycsICdWZXIgY29uZmlndXJhY2nDs24gYWN0dWFsJ10sXG4gICAgICBbJ8K/UXXDqSBhc3BlY3RvIGRlIHR1cyBwcmVmZXJlbmNpYXMgcXVpZXJlcyBtb2RpZmljYXI/J11cbiAgICApXG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBwcm9jZXNzTW90aXZhdGlvbmFsU3VwcG9ydChjb21tYW5kOiBzdHJpbmcsIGFuYWx5c2lzOiBhbnksIGNvbnRleHQ6IFN0dWRlbnRDb250ZXh0KTogUHJvbWlzZTxDb21tYW5kUmVzdWx0PiB7XG4gICAgY29uc3Qgc3VwcG9ydE1lc3NhZ2UgPSBTYXJhUGVyc29uYWxpdHlFbmdpbmUuc2VsZWN0UmVzcG9uc2UoJ21vdGl2YXRpb24nLCBjb250ZXh0KVxuICAgIFxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUluZm9SZXN1bHQoXG4gICAgICAnQXBveW8gTW90aXZhY2lvbmFsJyxcbiAgICAgIHN1cHBvcnRNZXNzYWdlLFxuICAgICAge30sXG4gICAgICBbJ1BsYW5pZmljYXIgc2VzacOzbiBkZSBlc3R1ZGlvJywgJ0VzdGFibGVjZXIgb2JqZXRpdm9zIHBlcXVlw7FvcyddLFxuICAgICAgWyfCv0hheSBhbGdvIGVzcGVjw61maWNvIHF1ZSB0ZSBlc3TDoSBwcmVvY3VwYW5kbz8nLCAnwr9RdWllcmVzIHF1ZSBwbGFuaWZpcXVlbW9zIGp1bnRvcyB0dSBwcsOzeGltYSBzZXNpw7NuIGRlIGVzdHVkaW8/J11cbiAgICApXG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBwcm9jZXNzR2VuZXJhbFF1ZXJ5KGNvbW1hbmQ6IHN0cmluZywgYW5hbHlzaXM6IGFueSwgY29udGV4dDogU3R1ZGVudENvbnRleHQpOiBQcm9taXNlPENvbW1hbmRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVJbmZvUmVzdWx0KFxuICAgICAgJ0NvbnN1bHRhIEdlbmVyYWwnLFxuICAgICAgJ0VudGllbmRvIHR1IGNvbnN1bHRhLiDCv1BvZHLDrWFzIHNlciBtw6FzIGVzcGVjw61maWNvIHNvYnJlIGPDs21vIHB1ZWRvIGF5dWRhcnRlPycsXG4gICAgICB7fSxcbiAgICAgIFsnR2VzdGlvbmFyIGhvcmFyaW8nLCAnUGxhbmlmaWNhciBlc3R1ZGlvJywgJ0FuYWxpemFyIHByb2dyZXNvJ10sXG4gICAgICBbJ8K/TmVjZXNpdGFzIGF5dWRhIGNvbiBvcmdhbml6YWNpw7NuLCBwbGFuaWZpY2FjacOzbiBvIGFuw6FsaXNpcyBhY2Fkw6ltaWNvPyddXG4gICAgKVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgaGFuZGxlU2NoZWR1bGVPcHRpbWl6YXRpb24oY29udGV4dDogU3R1ZGVudENvbnRleHQpOiBQcm9taXNlPENvbW1hbmRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVQbGFubmluZ1Jlc3VsdChcbiAgICAgICdPcHRpbWl6YWNpw7NuIGRlIEhvcmFyaW8nLFxuICAgICAgJ0FuYWxpemFuZG8gdHUgaG9yYXJpbyBwYXJhIHN1Z2VyaXIgb3B0aW1pemFjaW9uZXMuLi4nLFxuICAgICAge30sXG4gICAgICBbJ0FwbGljYXIgb3B0aW1pemFjaW9uZXMnLCAnVmVyIGFuw6FsaXNpcyBkZXRhbGxhZG8nXSxcbiAgICAgIFsnwr9QcmVmaWVyZXMgb3B0aW1pemFyIHBhcmEgbcOhcyB0aWVtcG8gbGlicmUgbyBtZWpvciBkaXN0cmlidWNpw7NuIGRlIG1hdGVyaWFzPyddXG4gICAgKVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgaGFuZGxlU2hvd1NjaGVkdWxlKGNvbnRleHQ6IFN0dWRlbnRDb250ZXh0KTogUHJvbWlzZTxDb21tYW5kUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlSW5mb1Jlc3VsdChcbiAgICAgICdUdSBIb3JhcmlvIEFjYWTDqW1pY28nLFxuICAgICAgJ01vc3RyYW5kbyB0dSBob3JhcmlvIGNvbXBsZXRvLi4uJyxcbiAgICAgIHsgc2NoZWR1bGU6IGNvbnRleHQuYWNhZGVtaWNDYWxlbmRhci5zY2hvb2xTY2hlZHVsZSB9LFxuICAgICAgWydBbmFsaXphciBob3JhcmlvJywgJ09wdGltaXphciB0aWVtcG8nXSxcbiAgICAgIFsnwr9RdWllcmVzIHF1ZSBhbmFsaWNlIHR1IGhvcmFyaW8gbyBxdWUgcGxhbmlmaXF1ZSBzZXNpb25lcyBkZSBlc3R1ZGlvPyddXG4gICAgKVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgaGFuZGxlTW9kaWZ5U3R1ZHlQbGFuKGNvbW1hbmQ6IHN0cmluZywgY29udGV4dDogU3R1ZGVudENvbnRleHQpOiBQcm9taXNlPENvbW1hbmRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVQbGFubmluZ1Jlc3VsdChcbiAgICAgICdNb2RpZmljYXIgUGxhbiBkZSBFc3R1ZGlvJyxcbiAgICAgICdUZSBheXVkbyBhIGFqdXN0YXIgdHUgcGxhbiBkZSBlc3R1ZGlvIGFjdHVhbC4nLFxuICAgICAge30sXG4gICAgICBbJ1ZlciBwbGFuIGFjdHVhbCcsICdIYWNlciBjYW1iaW9zIGVzcGVjw61maWNvcyddLFxuICAgICAgWyfCv1F1w6kgYXNwZWN0byBkZWwgcGxhbiBxdWllcmVzIG1vZGlmaWNhcj8nXVxuICAgIClcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIGhhbmRsZVN1Z2dlc3RTdHVkeVNlc3Npb25zKGNvbW1hbmQ6IHN0cmluZywgYW5hbHlzaXM6IGFueSwgY29udGV4dDogU3R1ZGVudENvbnRleHQpOiBQcm9taXNlPENvbW1hbmRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVQbGFubmluZ1Jlc3VsdChcbiAgICAgICdTdWdlcmVuY2lhcyBkZSBTZXNpb25lcycsXG4gICAgICAnQmFzw6FuZG9tZSBlbiB0dSBjb250ZXh0bywgdGUgc3VnaWVybyBlc3RhcyBzZXNpb25lcyBkZSBlc3R1ZGlvLi4uJyxcbiAgICAgIHt9LFxuICAgICAgWydQcm9ncmFtYXIgc2VzaW9uZXMnLCAnQWp1c3RhciBzdWdlcmVuY2lhcyddLFxuICAgICAgWyfCv1F1aWVyZXMgcXVlIHByb2dyYW1lIGVzdGFzIHNlc2lvbmVzIGVuIHR1IGNhbGVuZGFyaW8/J11cbiAgICApXG4gIH1cbn0iXSwibmFtZXMiOlsiU3R1ZGVudENvbnRleHRNYW5hZ2VyIiwiQWR2YW5jZWRJbnRlbnRFbmdpbmUiLCJJbnRlbnRUeXBlIiwiU2Nob29sU2NoZWR1bGVNYW5hZ2VyIiwiU3R1ZHlTZXNzaW9uUGxhbm5lciIsIlNhcmFQZXJzb25hbGl0eUVuZ2luZSIsIkFJQ2FsZW5kYXJJbnRlZ3JhdGlvbiIsIkFkdmFuY2VkQ29tbWFuZFByb2Nlc3NvciIsInByb2Nlc3NDb21tYW5kIiwiY29tbWFuZCIsImNvbnRleHQiLCJzdHVkZW50Q29udGV4dCIsImdldENvbnRleHQiLCJ1c2VySWQiLCJjcmVhdGVFcnJvclJlc3VsdCIsImludGVudEFuYWx5c2lzIiwiYW5hbHl6ZUludGVudCIsImludGVudCIsIlNDSEVEVUxFX01BTkFHRU1FTlQiLCJwcm9jZXNzU2NoZWR1bGVNYW5hZ2VtZW50IiwiU1RVRFlfUExBTk5JTkciLCJwcm9jZXNzU3R1ZHlQbGFubmluZyIsIkNBTEVOREFSX01BTkFHRU1FTlQiLCJwcm9jZXNzQ2FsZW5kYXJNYW5hZ2VtZW50IiwiVElNRV9PUFRJTUlaQVRJT04iLCJwcm9jZXNzVGltZU9wdGltaXphdGlvbiIsIk1BVEVSSUFMX1JFUVVFU1QiLCJwcm9jZXNzTWF0ZXJpYWxSZXF1ZXN0IiwiUFJPR1JFU1NfUkVWSUVXIiwicHJvY2Vzc1Byb2dyZXNzUmV2aWV3IiwiUEVSRk9STUFOQ0VfQU5BTFlTSVMiLCJwcm9jZXNzUGVyZm9ybWFuY2VBbmFseXNpcyIsIkdPQUxfTUFOQUdFTUVOVCIsInByb2Nlc3NHb2FsTWFuYWdlbWVudCIsIlBSRUZFUkVOQ0VfU0VUVElORyIsInByb2Nlc3NQcmVmZXJlbmNlU2V0dGluZyIsIk1PVElWQVRJT05BTF9TVVBQT1JUIiwicHJvY2Vzc01vdGl2YXRpb25hbFN1cHBvcnQiLCJwcm9jZXNzR2VuZXJhbFF1ZXJ5IiwiZXJyb3IiLCJjb25zb2xlIiwiRXJyb3IiLCJtZXNzYWdlIiwiYW5hbHlzaXMiLCJjb21tYW5kTG93ZXIiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiaGFuZGxlU2NoZWR1bGVJbXBvcnQiLCJoYW5kbGVTY2hlZHVsZUFuYWx5c2lzIiwiaGFuZGxlU2NoZWR1bGVPcHRpbWl6YXRpb24iLCJoYW5kbGVTaG93U2NoZWR1bGUiLCJjcmVhdGVJbmZvUmVzdWx0IiwiYXZhaWxhYmxlQWN0aW9ucyIsImhhbmRsZUNyZWF0ZVN0dWR5UGxhbiIsImhhbmRsZU1vZGlmeVN0dWR5UGxhbiIsImhhbmRsZVN1Z2dlc3RTdHVkeVNlc3Npb25zIiwic3VnZ2VzdGlvbnMiLCJzY2hlZHVsZVRleHQiLCJleHRyYWN0U2NoZWR1bGVUZXh0IiwicGFyc2VkQ2xhc3NlcyIsInBhcnNlTmF0dXJhbExhbmd1YWdlU2NoZWR1bGUiLCJsZW5ndGgiLCJpbXBvcnRSZXN1bHQiLCJpbXBvcnRTY2hlZHVsZSIsImNsYXNzZXMiLCJjb25mbGljdHMiLCJkZXRlY3RTY2hlZHVsZUNvbmZsaWN0cyIsInN0dWR5U2xvdHMiLCJhbmFseXplU3R1ZHlUaW1lU2xvdHMiLCJjcmVhdGVBY3Rpb25SZXN1bHQiLCJNYXRoIiwicm91bmQiLCJyZWR1Y2UiLCJzdW0iLCJjbHMiLCJkdXJhdGlvbiIsImltcG9ydGVkQ2xhc3NlcyIsInRvdGFsSG91cnMiLCJhY2FkZW1pY0NhbGVuZGFyIiwic2Nob29sU2NoZWR1bGUiLCJtYXAiLCJzY2hlZHVsZSIsImlkIiwic3ViamVjdCIsImRheSIsInRlYWNoZXIiLCJjbGFzc3Jvb20iLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwiY2FsY3VsYXRlRHVyYXRpb24iLCJ0eXBlIiwicmVjdXJyaW5nIiwiZGFpbHlEaXN0cmlidXRpb24iLCJjYWxjdWxhdGVEYWlseURpc3RyaWJ1dGlvbiIsInN1YmplY3REaXN0cmlidXRpb24iLCJjYWxjdWxhdGVTdWJqZWN0RGlzdHJpYnV0aW9uIiwidG90YWxDbGFzc2VzIiwiYXZlcmFnZUhvdXJzUGVyRGF5IiwiYXZhaWxhYmxlU3R1ZHlTbG90cyIsImZyZWVIb3VycyIsInNsb3QiLCJ0b0ZpeGVkIiwic2xpY2UiLCJmb3JFYWNoIiwiY29uZmxpY3QiLCJkZXNjcmlwdGlvbiIsInJlY29tbWVuZGF0aW9ucyIsImdlbmVyYXRlU2NoZWR1bGVSZWNvbW1lbmRhdGlvbnMiLCJyZWMiLCJjcmVhdGVBbmFseXNpc1Jlc3VsdCIsInBlcmlvZCIsImV4dHJhY3RQbGFubmluZ1BlcmlvZCIsInN1YmplY3RzIiwiZW50aXRpZXMiLCJzdHVkeVBsYW4iLCJnZW5lcmF0ZVN0dWR5UGxhbiIsInByaW9yaXRpemVXZWFrU3ViamVjdHMiLCJpbmNsdWRlUmV2aWV3U2Vzc2lvbnMiLCJyZXNwZWN0RW5lcmd5TGV2ZWxzIiwidGl0bGUiLCJzdGFydERhdGUiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJlbmREYXRlIiwidG90YWxTZXNzaW9ucyIsIm1ldHJpY3MiLCJ0b3RhbFBsYW5uZWRIb3VycyIsImpvaW4iLCJ1cGNvbWluZ1Nlc3Npb25zIiwic2Vzc2lvbnMiLCJmaWx0ZXIiLCJzZXNzaW9uIiwiZGF0ZSIsIkRhdGUiLCJzb3J0IiwiYSIsImIiLCJnZXRUaW1lIiwidG9waWMiLCJPYmplY3QiLCJlbnRyaWVzIiwic3ViamVjdEJhbGFuY2UiLCJob3VycyIsImNyZWF0ZVBsYW5uaW5nUmVzdWx0IiwicHJvZ3Jlc3NEYXRhIiwiY2FsY3VsYXRlUHJvZ3Jlc3NNZXRyaWNzIiwiaW5zaWdodHMiLCJnZW5lcmF0ZVByb2dyZXNzSW5zaWdodHMiLCJjdXJyZW50R29hbHMiLCJnb2FsIiwicHJvZ3Jlc3MiLCJzdWJqZWN0UGVyZm9ybWFuY2VzIiwic29ydGVkU3ViamVjdHMiLCJhdmVyYWdlR3JhZGUiLCJlbW9qaSIsInN0dWR5UGF0dGVybnMiLCJ3ZWVrbHlTdGF0cyIsInRvdGFsU3R1ZHlIb3VycyIsImF2ZXJhZ2VGb2N1c1Njb3JlIiwicGF0dGVybnMiLCJtb3N0UHJvZHVjdGl2ZUhvdXJzIiwicGF0dGVybiIsIm1hdGNoIiwidHJpbSIsImtleXdvcmRzIiwiaGFzS2V5d29yZCIsInNvbWUiLCJrZXl3b3JkIiwiY2xlYW5Db21tYW5kIiwicmVwbGFjZSIsIlJlZ0V4cCIsInRvZGF5Iiwic2V0RGF0ZSIsImdldERhdGUiLCJzZXRNb250aCIsImdldE1vbnRoIiwic3RhcnQiLCJ0aW1lVG9NaW51dGVzIiwiZW5kIiwidGltZSIsIm1pbnV0ZXMiLCJzcGxpdCIsIk51bWJlciIsImFjYyIsInB1c2giLCJ0b3RhbEdvYWxzIiwiY29tcGxldGVkR29hbHMiLCJnIiwiYXZnR29hbFByb2dyZXNzIiwiYXZnR3JhZGUiLCJzIiwiZ29hbENvbXBsZXRpb25SYXRlIiwibWF4IiwiYXZlcmFnZUdvYWxQcm9ncmVzcyIsImZvY3VzU2NvcmUiLCJkYXRhIiwiYWN0aW9ucyIsInF1ZXN0aW9ucyIsInN1Y2Nlc3MiLCJzdWdnZXN0ZWRBY3Rpb25zIiwiZm9sbG93VXBRdWVzdGlvbnMiLCJsb2ciLCJjYWxlbmRhckludGVncmF0aW9uIiwicmVzdWx0IiwicHJvY2Vzc01lc3NhZ2UiLCJuZWVkc0V2ZW50Q3JlYXRpb24iLCJldmVudENyZWF0ZWQiLCJldmVudCIsInJlc3BvbnNlIiwic3Vic3RyaW5nIiwic3VwcG9ydE1lc3NhZ2UiLCJzZWxlY3RSZXNwb25zZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/advanced-command-processor.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/advanced-intent-engine.ts":
/*!*******************************************!*\
  !*** ./src/lib/advanced-intent-engine.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdvancedIntentEngine: () => (/* binding */ AdvancedIntentEngine),\n/* harmony export */   ConversationMode: () => (/* binding */ ConversationMode),\n/* harmony export */   IntentType: () => (/* binding */ IntentType)\n/* harmony export */ });\n/* harmony import */ var _student_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./student-context */ \"(rsc)/./src/lib/student-context.ts\");\n/* harmony import */ var _academic_analyzer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./academic-analyzer */ \"(rsc)/./src/lib/academic-analyzer.ts\");\n// Motor de Intenciones Avanzado para Asistente Personal Académico\n// Detecta y clasifica las intenciones del usuario para proporcionar respuestas más precisas\n\n\nvar IntentType = /*#__PURE__*/ function(IntentType) {\n    // Intenciones Académicas Básicas\n    IntentType[\"SOLVE_EXERCISE\"] = \"solve_exercise\";\n    IntentType[\"REQUEST_ASSESSMENT\"] = \"request_assessment\";\n    IntentType[\"ASK_QUESTION\"] = \"ask_question\";\n    IntentType[\"REQUEST_HELP\"] = \"request_help\";\n    // Intenciones de Gestión de Tiempo y Organización\n    IntentType[\"SCHEDULE_MANAGEMENT\"] = \"schedule_management\";\n    IntentType[\"STUDY_PLANNING\"] = \"study_planning\";\n    IntentType[\"CALENDAR_MANAGEMENT\"] = \"calendar_management\";\n    IntentType[\"TIME_OPTIMIZATION\"] = \"time_optimization\";\n    // Intenciones de Gestión de Materiales\n    IntentType[\"MATERIAL_REQUEST\"] = \"material_request\";\n    IntentType[\"RESOURCE_RECOMMENDATION\"] = \"resource_recommendation\";\n    IntentType[\"CONTENT_ORGANIZATION\"] = \"content_organization\";\n    // Intenciones de Seguimiento y Análisis\n    IntentType[\"PROGRESS_REVIEW\"] = \"progress_review\";\n    IntentType[\"PERFORMANCE_ANALYSIS\"] = \"performance_analysis\";\n    IntentType[\"GOAL_MANAGEMENT\"] = \"goal_management\";\n    // Intenciones de Configuración y Personalización\n    IntentType[\"PREFERENCE_SETTING\"] = \"preference_setting\";\n    IntentType[\"LEARNING_STYLE_UPDATE\"] = \"learning_style_update\";\n    IntentType[\"SCHEDULE_PREFERENCE\"] = \"schedule_preference\";\n    // Intenciones Conversacionales\n    IntentType[\"CASUAL_CHAT\"] = \"casual_chat\";\n    IntentType[\"MOTIVATIONAL_SUPPORT\"] = \"motivational_support\";\n    IntentType[\"CLARIFICATION\"] = \"clarification\";\n    // General\n    IntentType[\"GENERAL\"] = \"general\";\n    return IntentType;\n}({});\nvar ConversationMode = /*#__PURE__*/ function(ConversationMode) {\n    ConversationMode[\"PLANNING\"] = \"planning\";\n    ConversationMode[\"TUTORING\"] = \"tutoring\";\n    ConversationMode[\"ORGANIZING\"] = \"organizing\";\n    ConversationMode[\"REVIEWING\"] = \"reviewing\";\n    ConversationMode[\"CHATTING\"] = \"chatting\"; // Conversación general\n    return ConversationMode;\n}({});\nclass AdvancedIntentEngine {\n    static{\n        // Patrones para diferentes tipos de intenciones\n        this.INTENT_PATTERNS = {\n            // Gestión de Horarios y Planificación\n            [\"schedule_management\"]: [\n                /organiza?\\s*(mi|el)?\\s*horario/i,\n                /planifica?\\s*(mi|la)?\\s*semana/i,\n                /agenda?\\s*(una|la)?\\s*sesión/i,\n                /programa?\\s*(una|mi)?\\s*(clase|estudio)/i,\n                /cuando\\s*(debo|puedo)\\s*estudiar/i,\n                /horario.*estudio/i,\n                /sesion.*estudio/i\n            ],\n            [\"study_planning\"]: [\n                /plan.*estudio/i,\n                /como.*estudiar.*para/i,\n                /planifica.*sesion/i,\n                /organiza.*material/i,\n                /estrategia.*estudio/i,\n                /metodo.*estudio/i,\n                /como.*prepararme/i\n            ],\n            [\"calendar_management\"]: [\n                /agrega.*calendario/i,\n                /añade.*evento/i,\n                /programa.*examen/i,\n                /calendario.*eventos/i,\n                /proxim.*evento/i,\n                /eventos.*semana/i,\n                /agenda.*tarea/i\n            ],\n            [\"time_optimization\"]: [\n                /optimiza.*tiempo/i,\n                /mejor.*horario/i,\n                /eficien.*estudio/i,\n                /aprovechar.*tiempo/i,\n                /productiv.*sesion/i,\n                /maximiza.*rendimiento/i\n            ],\n            // Gestión de Materiales\n            [\"material_request\"]: [\n                /necesito.*material/i,\n                /donde.*encuentro/i,\n                /recomienda.*libro/i,\n                /recursos.*para/i,\n                /material.*estudio/i,\n                /libros.*sobre/i,\n                /videos.*de/i\n            ],\n            [\"resource_recommendation\"]: [\n                /recomienda/i,\n                /sugiere/i,\n                /que.*materiales/i,\n                /recursos.*utiles/i,\n                /bibliografia/i,\n                /fuentes.*informacion/i\n            ],\n            // Seguimiento y Análisis\n            [\"progress_review\"]: [\n                /como.*voy/i,\n                /mi.*progreso/i,\n                /avance.*en/i,\n                /revision.*progreso/i,\n                /que.*tal.*estoy/i,\n                /rendimiento.*en/i\n            ],\n            [\"performance_analysis\"]: [\n                /analiza.*rendimiento/i,\n                /estadisticas.*estudio/i,\n                /como.*mejoro/i,\n                /debilidades.*en/i,\n                /fortalezas.*en/i,\n                /areas.*mejorar/i\n            ],\n            [\"goal_management\"]: [\n                /objetivo.*para/i,\n                /meta.*en/i,\n                /quiero.*lograr/i,\n                /establecer.*meta/i,\n                /crear.*objetivo/i,\n                /seguimiento.*objetivo/i\n            ],\n            // Configuración y Personalización\n            [\"preference_setting\"]: [\n                /prefiero.*estudiar/i,\n                /me.*gusta.*estudiar/i,\n                /configura/i,\n                /establece.*preferencia/i,\n                /cambiar.*configuracion/i\n            ],\n            [\"learning_style_update\"]: [\n                /estilo.*aprendizaje/i,\n                /como.*aprendo/i,\n                /mejor.*manera.*aprender/i,\n                /tipo.*estudiante/i,\n                /metodo.*aprendizaje/i\n            ],\n            // Motivacional y Conversacional\n            [\"motivational_support\"]: [\n                /me.*siento.*desmotivado/i,\n                /no.*puedo.*concentrarme/i,\n                /ayuda.*motivacion/i,\n                /estoy.*cansado/i,\n                /no.*tengo.*ganas/i,\n                /animo/i,\n                /motiva/i\n            ],\n            [\"casual_chat\"]: [\n                /hola/i,\n                /buenos.*dias/i,\n                /como.*estas/i,\n                /que.*tal/i,\n                /gracias/i,\n                /de.*nada/i\n            ]\n        };\n    }\n    static{\n        // Patrones para detectar entidades\n        this.ENTITY_PATTERNS = {\n            dates: [\n                /(\\d{1,2})\\s*de\\s*(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,\n                /(lunes|martes|miercoles|jueves|viernes|sabado|domingo)/i,\n                /(hoy|mañana|pasado\\s*mañana|esta\\s*semana|proxima\\s*semana)/i,\n                /\\d{1,2}\\/\\d{1,2}/,\n                /\\d{4}-\\d{2}-\\d{2}/\n            ],\n            times: [\n                /\\d{1,2}:\\d{2}/,\n                /\\d{1,2}\\s*(am|pm)/i,\n                /(mañana|tarde|noche)/i,\n                /a\\s*las\\s*\\d{1,2}/i\n            ],\n            subjects: [\n                /(matematicas?|algebra|calculo|geometria)/i,\n                /(fisica|mecanica|termodinamica|electromagnetismo)/i,\n                /(quimica|organica|inorganica|bioquimica)/i,\n                /(biologia|anatomia|botanica|zoologia)/i,\n                /(historia|geografia|filosofia|literatura)/i,\n                /(ingles|frances|aleman|portugues)/i\n            ],\n            durations: [\n                /\\d+\\s*(minutos?|horas?|dias?|semanas?)/i,\n                /(media\\s*hora|una\\s*hora|dos\\s*horas)/i,\n                /(corto|mediano|largo)\\s*plazo/i\n            ],\n            priorities: [\n                /(urgente|importante|prioritario|critico)/i,\n                /(bajo|medio|alto)\\s*(prioridad|importancia)/i,\n                /(muy\\s*)?(importante|urgente)/i\n            ]\n        };\n    }\n    static async analyzeIntent(message, userId, context) {\n        // Obtener contexto del estudiante si no se proporciona\n        if (!context) {\n            context = await _student_context__WEBPACK_IMPORTED_MODULE_0__.StudentContextManager.getContext(userId) || await _student_context__WEBPACK_IMPORTED_MODULE_0__.StudentContextManager.createDefaultContext(userId);\n        }\n        const msgLower = message.toLowerCase();\n        let bestMatch = {\n            intent: \"general\",\n            confidence: 0\n        };\n        // Analizar patrones de intención\n        for (const [intentType, patterns] of Object.entries(this.INTENT_PATTERNS)){\n            const intent = intentType;\n            let maxConfidence = 0;\n            for (const pattern of patterns){\n                if (pattern.test(message)) {\n                    const confidence = this.calculatePatternConfidence(message, pattern);\n                    maxConfidence = Math.max(maxConfidence, confidence);\n                }\n            }\n            if (maxConfidence > bestMatch.confidence) {\n                bestMatch = {\n                    intent,\n                    confidence: maxConfidence\n                };\n            }\n        }\n        // Detectar entidades\n        const entities = this.extractEntities(message);\n        // Detectar sujeto académico\n        const subject = this.detectAcademicSubject(message);\n        // Detectar temas específicos\n        const topics = this.extractTopics(message, subject);\n        // Analizar contexto (urgencia, scope, complejidad)\n        const contextAnalysis = this.analyzeMessageContext(message, context);\n        // Determinar modo conversacional sugerido\n        const suggestedMode = this.determineSuggestedMode(bestMatch.intent, contextAnalysis);\n        // Generar acciones de seguimiento\n        const followUpActions = this.generateFollowUpActions(bestMatch.intent, entities, context);\n        return {\n            intent: bestMatch.intent,\n            confidence: bestMatch.confidence,\n            subject,\n            topics,\n            entities,\n            context: contextAnalysis,\n            suggestedMode,\n            followUpActions\n        };\n    }\n    static calculatePatternConfidence(message, pattern) {\n        const match = message.match(pattern);\n        if (!match) return 0;\n        // Base confidence por match\n        let confidence = 0.7;\n        // Bonus por longitud del match\n        const matchLength = match[0].length;\n        const messageLength = message.length;\n        const lengthRatio = matchLength / messageLength;\n        confidence += lengthRatio * 0.2;\n        // Bonus por palabras clave adicionales\n        const keywordBonus = this.countRelatedKeywords(message, pattern);\n        confidence += keywordBonus * 0.1;\n        return Math.min(confidence, 1.0);\n    }\n    static countRelatedKeywords(message, pattern) {\n        const relatedKeywords = {\n            'study': [\n                'estudiar',\n                'aprender',\n                'repasar',\n                'practicar'\n            ],\n            'time': [\n                'tiempo',\n                'horario',\n                'cuando',\n                'programar'\n            ],\n            'help': [\n                'ayuda',\n                'ayudar',\n                'explicar',\n                'entender'\n            ],\n            'schedule': [\n                'agenda',\n                'calendario',\n                'planificar',\n                'organizar'\n            ]\n        };\n        let count = 0;\n        for (const keywords of Object.values(relatedKeywords)){\n            for (const keyword of keywords){\n                if (message.toLowerCase().includes(keyword)) {\n                    count++;\n                }\n            }\n        }\n        return Math.min(count, 3) // Max 3 bonus points\n        ;\n    }\n    static extractEntities(message) {\n        const entities = {};\n        // Extraer fechas\n        entities.dates = this.extractDates(message);\n        // Extraer horas\n        entities.times = this.extractTimes(message);\n        // Extraer materias\n        entities.subjects = this.extractSubjects(message);\n        // Extraer duraciones\n        entities.durations = this.extractDurations(message);\n        // Extraer prioridades\n        entities.priorities = this.extractPriorities(message);\n        return entities;\n    }\n    static extractDates(message) {\n        const dates = [];\n        const now = new Date();\n        // Fechas relativas\n        if (/\\bhoy\\b/i.test(message)) {\n            dates.push(new Date());\n        }\n        if (/\\bmañana\\b/i.test(message)) {\n            const tomorrow = new Date();\n            tomorrow.setDate(tomorrow.getDate() + 1);\n            dates.push(tomorrow);\n        }\n        // Días de la semana\n        const daysOfWeek = [\n            'domingo',\n            'lunes',\n            'martes',\n            'miércoles',\n            'jueves',\n            'viernes',\n            'sábado'\n        ];\n        daysOfWeek.forEach((day, index)=>{\n            if (message.toLowerCase().includes(day)) {\n                const targetDate = new Date();\n                const currentDay = targetDate.getDay();\n                const daysToAdd = (index - currentDay + 7) % 7;\n                targetDate.setDate(targetDate.getDate() + daysToAdd);\n                dates.push(targetDate);\n            }\n        });\n        return dates;\n    }\n    static extractTimes(message) {\n        const times = [];\n        // Patrones de hora\n        const timePatterns = [\n            /\\b(\\d{1,2}):(\\d{2})\\b/g,\n            /\\b(\\d{1,2})\\s*(am|pm)\\b/gi,\n            /\\ba\\s*las\\s*(\\d{1,2})/gi\n        ];\n        timePatterns.forEach((pattern)=>{\n            const matches = message.match(pattern);\n            if (matches) {\n                times.push(...matches);\n            }\n        });\n        return times;\n    }\n    static extractSubjects(message) {\n        const subjects = [];\n        const subjectPatterns = this.ENTITY_PATTERNS.subjects;\n        subjectPatterns.forEach((pattern)=>{\n            const match = message.match(pattern);\n            if (match) {\n                subjects.push(match[0]);\n            }\n        });\n        return subjects;\n    }\n    static extractDurations(message) {\n        const durations = [];\n        const durationPatterns = this.ENTITY_PATTERNS.durations;\n        durationPatterns.forEach((pattern)=>{\n            const match = message.match(pattern);\n            if (match) {\n                durations.push(match[0]);\n            }\n        });\n        return durations;\n    }\n    static extractPriorities(message) {\n        const priorities = [];\n        const priorityPatterns = this.ENTITY_PATTERNS.priorities;\n        priorityPatterns.forEach((pattern)=>{\n            const match = message.match(pattern);\n            if (match) {\n                priorities.push(match[0]);\n            }\n        });\n        return priorities;\n    }\n    static detectAcademicSubject(message) {\n        const msgLower = message.toLowerCase();\n        if (/matemáticas?|álgebra|cálculo|geometría/i.test(msgLower)) {\n            return _academic_analyzer__WEBPACK_IMPORTED_MODULE_1__.AcademicSubject.MATHEMATICS;\n        }\n        if (/física|mecánica|termodinámica/i.test(msgLower)) {\n            return _academic_analyzer__WEBPACK_IMPORTED_MODULE_1__.AcademicSubject.PHYSICS;\n        }\n        if (/química|orgánica|inorgánica/i.test(msgLower)) {\n            return _academic_analyzer__WEBPACK_IMPORTED_MODULE_1__.AcademicSubject.CHEMISTRY;\n        }\n        if (/biología|anatomía|botánica/i.test(msgLower)) {\n            return _academic_analyzer__WEBPACK_IMPORTED_MODULE_1__.AcademicSubject.BIOLOGY;\n        }\n        if (/historia|geografía|filosofía/i.test(msgLower)) {\n            return _academic_analyzer__WEBPACK_IMPORTED_MODULE_1__.AcademicSubject.SOCIAL_STUDIES;\n        }\n        if (/inglés|francés|alemán|literatura/i.test(msgLower)) {\n            return _academic_analyzer__WEBPACK_IMPORTED_MODULE_1__.AcademicSubject.LANGUAGE_ARTS;\n        }\n        return undefined;\n    }\n    static extractTopics(message, subject) {\n        const topics = [];\n        // Extraer temas basados en palabras clave después de \"sobre\", \"de\", \"para\"\n        const topicPatterns = [\n            /sobre\\s+([^,.!?]+)/gi,\n            /de\\s+([^,.!?]+)/gi,\n            /para\\s+([^,.!?]+)/gi,\n            /tema\\s*:?\\s*([^,.!?]+)/gi\n        ];\n        topicPatterns.forEach((pattern)=>{\n            const matches = [\n                ...message.matchAll(pattern)\n            ];\n            matches.forEach((match)=>{\n                if (match[1] && match[1].trim().length > 3) {\n                    topics.push(match[1].trim());\n                }\n            });\n        });\n        return topics;\n    }\n    static analyzeMessageContext(message, context) {\n        const msgLower = message.toLowerCase();\n        // Analizar urgencia\n        let urgency = 'medium';\n        if (/urgente|ya|ahora|inmediato|pronto/i.test(msgLower)) {\n            urgency = 'urgent';\n        } else if (/importante|necesito|debo/i.test(msgLower)) {\n            urgency = 'high';\n        } else if (/cuando\\s*pueda|algun\\s*momento|mas\\s*tarde/i.test(msgLower)) {\n            urgency = 'low';\n        }\n        // Analizar scope temporal\n        let scope = 'short_term';\n        if (/hoy|ahora|ya|inmediato/i.test(msgLower)) {\n            scope = 'immediate';\n        } else if (/semana|mes|semestre|año/i.test(msgLower)) {\n            scope = 'long_term';\n        }\n        // Analizar complejidad\n        let complexity = 'moderate';\n        const questionWords = (msgLower.match(/\\b(qué|cómo|cuándo|dónde|por qué|para qué)\\b/g) || []).length;\n        const subjectMentions = (msgLower.match(/(matemáticas?|física|química|biología|historia)/g) || []).length;\n        if (questionWords <= 1 && subjectMentions <= 1) {\n            complexity = 'simple';\n        } else if (questionWords > 2 || subjectMentions > 2 || message.length > 200) {\n            complexity = 'complex';\n        }\n        return {\n            urgency,\n            scope,\n            complexity\n        };\n    }\n    static determineSuggestedMode(intent, context) {\n        switch(intent){\n            case \"schedule_management\":\n            case \"study_planning\":\n            case \"time_optimization\":\n                return \"planning\";\n            case \"solve_exercise\":\n            case \"request_assessment\":\n            case \"ask_question\":\n            case \"request_help\":\n                return \"tutoring\";\n            case \"calendar_management\":\n            case \"material_request\":\n            case \"content_organization\":\n                return \"organizing\";\n            case \"progress_review\":\n            case \"performance_analysis\":\n            case \"goal_management\":\n                return \"reviewing\";\n            default:\n                return \"chatting\";\n        }\n    }\n    static generateFollowUpActions(intent, entities, context) {\n        const actions = [];\n        switch(intent){\n            case \"schedule_management\":\n                actions.push('Ver calendario completo', 'Optimizar horario', 'Configurar recordatorios');\n                break;\n            case \"study_planning\":\n                actions.push('Crear plan semanal', 'Configurar sesiones', 'Ver materiales');\n                break;\n            case \"calendar_management\":\n                actions.push('Agregar evento', 'Ver próximos eventos', 'Editar calendario');\n                break;\n            case \"material_request\":\n                actions.push('Buscar recursos', 'Organizar materiales', 'Crear lista de estudio');\n                break;\n            case \"progress_review\":\n                actions.push('Ver estadísticas', 'Analizar rendimiento', 'Establecer metas');\n                break;\n            default:\n                actions.push('Continuar conversación', 'Cambiar tema', 'Ver opciones');\n        }\n        return actions;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/advanced-intent-engine.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/advanced-learning-profiles.ts":
/*!***********************************************!*\
  !*** ./src/lib/advanced-learning-profiles.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdvancedLearningProfileManager: () => (/* binding */ AdvancedLearningProfileManager),\n/* harmony export */   LearningStyle: () => (/* binding */ LearningStyle)\n/* harmony export */ });\n// Advanced Learning Profiles System for Sara AI\n// Implements VARK model (Visual, Auditory, Reading/Writing, Kinesthetic) with automatic detection\nvar LearningStyle = /*#__PURE__*/ function(LearningStyle) {\n    LearningStyle[\"VISUAL\"] = \"visual\";\n    LearningStyle[\"AUDITORY\"] = \"auditory\";\n    LearningStyle[\"READING_WRITING\"] = \"reading_writing\";\n    LearningStyle[\"KINESTHETIC\"] = \"kinesthetic\";\n    LearningStyle[\"MULTIMODAL\"] = \"multimodal\";\n    return LearningStyle;\n}({});\nclass AdvancedLearningProfileManager {\n    static{\n        // Storage for learning profiles\n        this.profiles = new Map();\n    }\n    static{\n        this.behaviors = [];\n    }\n    /**\n   * Analyzes user message for learning style indicators\n   */ static analyzeMessageForLearningStyle(message, userId) {\n        const msgLower = message.toLowerCase();\n        const indicators = [];\n        // VISUAL indicators\n        const visualKeywords = [\n            'ver',\n            'mirar',\n            'mostrar',\n            'imagen',\n            'gráfico',\n            'diagrama',\n            'visual',\n            'color',\n            'mapa',\n            'esquema',\n            'dibujo',\n            'ilustración',\n            'tabla',\n            'gráfica',\n            'visualizar',\n            'observar',\n            'demostrar',\n            'ejemplo visual',\n            'claramente'\n        ];\n        const visualPhrases = [\n            'me gusta ver',\n            'muéstrame',\n            'qué aspecto tiene',\n            'cómo se ve',\n            'necesito ver',\n            'puedes mostrar',\n            'ejemplo visual',\n            'de forma gráfica'\n        ];\n        let visualScore = this.calculateKeywordScore(msgLower, visualKeywords, visualPhrases);\n        if (visualScore > 0) {\n            indicators.push({\n                style: \"visual\",\n                weight: visualScore,\n                evidence: this.extractEvidence(msgLower, [\n                    ...visualKeywords,\n                    ...visualPhrases\n                ]),\n                confidence: Math.min(visualScore * 1.2, 1.0)\n            });\n        }\n        // AUDITORY indicators\n        const auditoryKeywords = [\n            'escuchar',\n            'oír',\n            'sonido',\n            'explicar',\n            'decir',\n            'contar',\n            'discutir',\n            'hablar',\n            'verbal',\n            'audio',\n            'pronunciar',\n            'repetir',\n            'preguntar'\n        ];\n        const auditoryPhrases = [\n            'explícame',\n            'cuéntame',\n            'me puedes decir',\n            'necesito que me expliques',\n            'repítelo',\n            'en palabras',\n            'de forma verbal',\n            'hablemos de'\n        ];\n        let auditoryScore = this.calculateKeywordScore(msgLower, auditoryKeywords, auditoryPhrases);\n        if (auditoryScore > 0) {\n            indicators.push({\n                style: \"auditory\",\n                weight: auditoryScore,\n                evidence: this.extractEvidence(msgLower, [\n                    ...auditoryKeywords,\n                    ...auditoryPhrases\n                ]),\n                confidence: Math.min(auditoryScore * 1.1, 1.0)\n            });\n        }\n        // READING/WRITING indicators\n        const readWriteKeywords = [\n            'leer',\n            'escribir',\n            'texto',\n            'nota',\n            'lista',\n            'definición',\n            'resumen',\n            'apuntes',\n            'documento',\n            'artículo',\n            'párrafo',\n            'descripción',\n            'detalles'\n        ];\n        const readWritePhrases = [\n            'en texto',\n            'por escrito',\n            'dame detalles',\n            'necesito leer',\n            'quiero estudiar',\n            'información detallada',\n            'paso a paso',\n            'lista de'\n        ];\n        let readWriteScore = this.calculateKeywordScore(msgLower, readWriteKeywords, readWritePhrases);\n        if (readWriteScore > 0) {\n            indicators.push({\n                style: \"reading_writing\",\n                weight: readWriteScore,\n                evidence: this.extractEvidence(msgLower, [\n                    ...readWriteKeywords,\n                    ...readWritePhrases\n                ]),\n                confidence: Math.min(readWriteScore, 1.0)\n            });\n        }\n        // KINESTHETIC indicators\n        const kinestheticKeywords = [\n            'hacer',\n            'practicar',\n            'ejercicio',\n            'actividad',\n            'mano',\n            'tocar',\n            'mover',\n            'experimentar',\n            'probar',\n            'manipular',\n            'construir',\n            'crear',\n            'interactivo'\n        ];\n        const kinestheticPhrases = [\n            'quiero hacer',\n            'necesito practicar',\n            'hands on',\n            'de forma práctica',\n            'experimentando',\n            'probando',\n            'haciendo ejercicios',\n            'actividades'\n        ];\n        let kinestheticScore = this.calculateKeywordScore(msgLower, kinestheticKeywords, kinestheticPhrases);\n        if (kinestheticScore > 0) {\n            indicators.push({\n                style: \"kinesthetic\",\n                weight: kinestheticScore,\n                evidence: this.extractEvidence(msgLower, [\n                    ...kinestheticKeywords,\n                    ...kinestheticPhrases\n                ]),\n                confidence: Math.min(kinestheticScore * 1.3, 1.0)\n            });\n        }\n        // Record behavior pattern\n        if (indicators.length > 0) {\n            this.recordBehaviorPattern(userId, 'message_analysis', message, indicators.map((i)=>i.style));\n        }\n        return indicators.sort((a, b)=>b.weight - a.weight);\n    }\n    /**\n   * Calculates score based on keyword and phrase matches\n   */ static calculateKeywordScore(text, keywords, phrases) {\n        let score = 0;\n        // Keyword matches (lower weight)\n        for (const keyword of keywords){\n            if (text.includes(keyword)) {\n                score += 0.1;\n            }\n        }\n        // Phrase matches (higher weight)\n        for (const phrase of phrases){\n            if (text.includes(phrase)) {\n                score += 0.3;\n            }\n        }\n        return Math.min(score, 1.0);\n    }\n    /**\n   * Extracts evidence from text\n   */ static extractEvidence(text, patterns) {\n        const evidence = [];\n        for (const pattern of patterns){\n            if (text.includes(pattern)) {\n                // Extract sentence containing the pattern\n                const sentences = text.split(/[.!?]+/);\n                const matchingSentence = sentences.find((sentence)=>sentence.toLowerCase().includes(pattern));\n                if (matchingSentence) {\n                    evidence.push(matchingSentence.trim());\n                }\n            }\n        }\n        return evidence.slice(0, 3) // Limit to 3 pieces of evidence\n        ;\n    }\n    /**\n   * Records a learning behavior pattern\n   */ static recordBehaviorPattern(userId, action, context, styleIndicators) {\n        this.behaviors.push({\n            userId,\n            timestamp: new Date(),\n            action,\n            context,\n            styleIndicators\n        });\n        // Keep only recent behaviors (last 100 per user)\n        const userBehaviors = this.behaviors.filter((b)=>b.userId === userId);\n        if (userBehaviors.length > 100) {\n            this.behaviors = this.behaviors.filter((b)=>b.userId !== userId).concat(userBehaviors.slice(-100));\n        }\n    }\n    /**\n   * Updates or creates learning profile for user\n   */ static updateLearningProfile(userId, indicators, context) {\n        let profile = this.profiles.get(userId) || this.createInitialProfile(userId);\n        // Update style distribution based on new indicators\n        for (const indicator of indicators){\n            const weight = indicator.weight * indicator.confidence;\n            switch(indicator.style){\n                case \"visual\":\n                    profile.styleDistribution.visual = Math.min(profile.styleDistribution.visual + weight * 0.1, 1.0);\n                    break;\n                case \"auditory\":\n                    profile.styleDistribution.auditory = Math.min(profile.styleDistribution.auditory + weight * 0.1, 1.0);\n                    break;\n                case \"reading_writing\":\n                    profile.styleDistribution.reading_writing = Math.min(profile.styleDistribution.reading_writing + weight * 0.1, 1.0);\n                    break;\n                case \"kinesthetic\":\n                    profile.styleDistribution.kinesthetic = Math.min(profile.styleDistribution.kinesthetic + weight * 0.1, 1.0);\n                    break;\n            }\n        }\n        // Normalize distribution\n        const total = profile.styleDistribution.visual + profile.styleDistribution.auditory + profile.styleDistribution.reading_writing + profile.styleDistribution.kinesthetic;\n        if (total > 0) {\n            profile.styleDistribution.visual /= total;\n            profile.styleDistribution.auditory /= total;\n            profile.styleDistribution.reading_writing /= total;\n            profile.styleDistribution.kinesthetic /= total;\n        }\n        // Determine primary and secondary styles\n        const styles = [\n            {\n                style: \"visual\",\n                score: profile.styleDistribution.visual\n            },\n            {\n                style: \"auditory\",\n                score: profile.styleDistribution.auditory\n            },\n            {\n                style: \"reading_writing\",\n                score: profile.styleDistribution.reading_writing\n            },\n            {\n                style: \"kinesthetic\",\n                score: profile.styleDistribution.kinesthetic\n            }\n        ].sort((a, b)=>b.score - a.score);\n        profile.primaryStyle = styles[0].score > 0.35 ? styles[0].style : \"multimodal\";\n        profile.secondaryStyle = styles[1].score > 0.25 ? styles[1].style : undefined;\n        // Update adaptation preferences\n        profile.adaptationPreferences = {\n            prefersDiagrams: profile.styleDistribution.visual > 0.3,\n            prefersStepByStep: profile.styleDistribution.reading_writing > 0.3,\n            prefersExamples: profile.styleDistribution.visual > 0.25 || profile.styleDistribution.kinesthetic > 0.25,\n            prefersInteraction: profile.styleDistribution.kinesthetic > 0.3,\n            prefersVisualAids: profile.styleDistribution.visual > 0.25,\n            prefersVerbalExplanation: profile.styleDistribution.auditory > 0.3\n        };\n        profile.lastUpdated = new Date();\n        profile.interactions++;\n        this.profiles.set(userId, profile);\n        console.log(`📊 Learning profile updated for ${userId}: Primary=${profile.primaryStyle}, Secondary=${profile.secondaryStyle || 'none'}`);\n        return profile;\n    }\n    /**\n   * Creates initial learning profile\n   */ static createInitialProfile(userId) {\n        return {\n            userId,\n            primaryStyle: \"multimodal\",\n            secondaryStyle: undefined,\n            styleDistribution: {\n                visual: 0.25,\n                auditory: 0.25,\n                reading_writing: 0.25,\n                kinesthetic: 0.25\n            },\n            adaptationPreferences: {\n                prefersDiagrams: false,\n                prefersStepByStep: true,\n                prefersExamples: true,\n                prefersInteraction: false,\n                prefersVisualAids: false,\n                prefersVerbalExplanation: false\n            },\n            detectedFrom: {\n                messageAnalysis: 0,\n                behaviorPatterns: 0,\n                explicitPreferences: 0\n            },\n            lastUpdated: new Date(),\n            interactions: 0\n        };\n    }\n    /**\n   * Gets learning profile for user\n   */ static getLearningProfile(userId) {\n        return this.profiles.get(userId) || this.createInitialProfile(userId);\n    }\n    /**\n   * Adapts response content based on learning profile\n   */ static adaptResponseToLearningStyle(content, profile) {\n        let adaptedContent = content;\n        // Visual learner adaptations\n        if (profile.adaptationPreferences.prefersVisualAids) {\n            adaptedContent = this.addVisualElements(adaptedContent, profile);\n        }\n        // Auditory learner adaptations\n        if (profile.adaptationPreferences.prefersVerbalExplanation) {\n            adaptedContent = this.addAuditoryElements(adaptedContent, profile);\n        }\n        // Reading/Writing learner adaptations\n        if (profile.adaptationPreferences.prefersStepByStep) {\n            adaptedContent = this.addStructuredElements(adaptedContent, profile);\n        }\n        // Kinesthetic learner adaptations\n        if (profile.adaptationPreferences.prefersInteraction) {\n            adaptedContent = this.addInteractiveElements(adaptedContent, profile);\n        }\n        return adaptedContent;\n    }\n    /**\n   * Adds visual elements for visual learners\n   */ static addVisualElements(content, profile) {\n        let enhanced = content;\n        // Add visual cues and formatting\n        enhanced = enhanced.replace(/importante:/gi, '🔍 **IMPORTANTE:**');\n        enhanced = enhanced.replace(/nota:/gi, '📝 **NOTA:**');\n        enhanced = enhanced.replace(/ejemplo:/gi, '💡 **EJEMPLO:**');\n        enhanced = enhanced.replace(/resultado:/gi, '✅ **RESULTADO:**');\n        // Add visual separators\n        if (enhanced.includes('paso') || enhanced.includes('step')) {\n            enhanced = enhanced.replace(/paso (\\d+)/gi, '\\n📍 **PASO $1**\\n');\n        }\n        return enhanced;\n    }\n    /**\n   * Adds auditory elements for auditory learners  \n   */ static addAuditoryElements(content, profile) {\n        let enhanced = content;\n        // Add conversational phrases\n        enhanced = \"🗣️ Te voy a explicar esto paso a paso:\\n\\n\" + enhanced;\n        // Add verbal transition phrases\n        enhanced = enhanced.replace(/\\. ([A-Z])/g, '. Ahora, $1');\n        enhanced = enhanced.replace(/:\\n/g, '. Escucha bien:\\n');\n        return enhanced;\n    }\n    /**\n   * Adds structured elements for reading/writing learners\n   */ static addStructuredElements(content, profile) {\n        let enhanced = content;\n        // Add clear structure and bullet points\n        if (!enhanced.includes('**') && enhanced.length > 200) {\n            const sentences = enhanced.split('.');\n            if (sentences.length > 3) {\n                enhanced = sentences.filter((s)=>s.trim().length > 10).map((sentence, index)=>`${index + 1}. ${sentence.trim()}`).join('\\n');\n            }\n        }\n        return enhanced;\n    }\n    /**\n   * Adds interactive elements for kinesthetic learners\n   */ static addInteractiveElements(content, profile) {\n        let enhanced = content;\n        // Add action-oriented language\n        enhanced += \"\\n\\n🎯 **Prueba esto:**\";\n        enhanced += \"\\n• Aplica este concepto a un problema real\";\n        enhanced += \"\\n• Experimenta cambiando los valores\";\n        enhanced += \"\\n• Practica con ejercicios similares\";\n        return enhanced;\n    }\n    /**\n   * Analyzes behavior patterns to enhance profile\n   */ static analyzeBehaviorPatterns(userId) {\n        const userBehaviors = this.behaviors.filter((b)=>b.userId === userId);\n        const profile = this.getLearningProfile(userId);\n        if (userBehaviors.length < 5) return profile;\n        // Analyze patterns in recent behaviors\n        const recentBehaviors = userBehaviors.slice(-20);\n        const styleFrequency = new Map();\n        for (const behavior of recentBehaviors){\n            for (const style of behavior.styleIndicators){\n                styleFrequency.set(style, (styleFrequency.get(style) || 0) + 1);\n            }\n        }\n        // Update profile based on behavioral patterns\n        const indicators = [];\n        for (const [style, frequency] of styleFrequency.entries()){\n            const weight = frequency / recentBehaviors.length;\n            if (weight > 0.1) {\n                indicators.push({\n                    style,\n                    weight,\n                    evidence: [\n                        `Detectado en ${frequency} de ${recentBehaviors.length} interacciones recientes`\n                    ],\n                    confidence: Math.min(weight * 2, 1.0)\n                });\n            }\n        }\n        return this.updateLearningProfile(userId, indicators, 'behavior_analysis');\n    }\n    /**\n   * Gets profile statistics\n   */ static getProfileStatistics(userId) {\n        if (userId) {\n            const profile = this.profiles.get(userId);\n            const behaviors = this.behaviors.filter((b)=>b.userId === userId);\n            return {\n                profile: profile || null,\n                behaviorCount: behaviors.length,\n                recentInteractions: behaviors.filter((b)=>b.timestamp > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)).length\n            };\n        }\n        return {\n            totalProfiles: this.profiles.size,\n            totalBehaviors: this.behaviors.length,\n            styleDistribution: this.getGlobalStyleDistribution()\n        };\n    }\n    /**\n   * Gets global style distribution\n   */ static getGlobalStyleDistribution() {\n        const distribution = {\n            visual: 0,\n            auditory: 0,\n            reading_writing: 0,\n            kinesthetic: 0,\n            multimodal: 0\n        };\n        for (const profile of this.profiles.values()){\n            switch(profile.primaryStyle){\n                case \"visual\":\n                    distribution.visual++;\n                    break;\n                case \"auditory\":\n                    distribution.auditory++;\n                    break;\n                case \"reading_writing\":\n                    distribution.reading_writing++;\n                    break;\n                case \"kinesthetic\":\n                    distribution.kinesthetic++;\n                    break;\n                case \"multimodal\":\n                    distribution.multimodal++;\n                    break;\n            }\n        }\n        return distribution;\n    }\n    /**\n   * Process user message and update learning profile\n   */ static processUserMessage(userId, message) {\n        // Analyze message for learning style indicators\n        const indicators = this.analyzeMessageForLearningStyle(message, userId);\n        // Update learning profile if indicators found\n        if (indicators.length > 0) {\n            return this.updateLearningProfile(userId, indicators, 'message_processing');\n        }\n        // Analyze behavior patterns periodically\n        const profile = this.getLearningProfile(userId);\n        if (profile.interactions % 10 === 0) {\n            return this.analyzeBehaviorPatterns(userId);\n        }\n        return profile;\n    }\n    /**\n   * Generates learning style recommendations for Sara\n   */ static generateStyleRecommendations(profile) {\n        const recommendations = [];\n        switch(profile.primaryStyle){\n            case \"visual\":\n                recommendations.push(\"Usar diagramas y esquemas cuando explico conceptos\");\n                recommendations.push(\"Incluir ejemplos visuales y gráficos\");\n                recommendations.push(\"Estructurar información con viñetas y colores\");\n                break;\n            case \"auditory\":\n                recommendations.push(\"Explicar conceptos con lenguaje conversacional\");\n                recommendations.push(\"Usar analogías y metáforas verbales\");\n                recommendations.push(\"Incluir discusiones y preguntas abiertas\");\n                break;\n            case \"reading_writing\":\n                recommendations.push(\"Proporcionar información detallada por escrito\");\n                recommendations.push(\"Crear listas y resúmenes estructurados\");\n                recommendations.push(\"Incluir definiciones y descripciones precisas\");\n                break;\n            case \"kinesthetic\":\n                recommendations.push(\"Incluir ejercicios prácticos y actividades\");\n                recommendations.push(\"Sugerir experimentos y aplicaciones reales\");\n                recommendations.push(\"Usar ejemplos concretos y manipulables\");\n                break;\n            case \"multimodal\":\n                recommendations.push(\"Combinar múltiples enfoques de enseñanza\");\n                recommendations.push(\"Adaptar explicaciones según el contexto\");\n                recommendations.push(\"Ofrecer opciones de aprendizaje variadas\");\n                break;\n        }\n        return recommendations;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/advanced-learning-profiles.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/ai-providers.ts":
/*!*********************************!*\
  !*** ./src/lib/ai-providers.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIProvider: () => (/* binding */ AIProvider),\n/* harmony export */   AIProviderFactory: () => (/* binding */ AIProviderFactory),\n/* harmony export */   AIService: () => (/* binding */ AIService),\n/* harmony export */   AI_CONFIG: () => (/* binding */ AI_CONFIG),\n/* harmony export */   BaseAIProvider: () => (/* binding */ BaseAIProvider),\n/* harmony export */   GoogleGeminiProvider: () => (/* binding */ GoogleGeminiProvider),\n/* harmony export */   GroqProvider: () => (/* binding */ GroqProvider),\n/* harmony export */   HuggingFaceProvider: () => (/* binding */ HuggingFaceProvider),\n/* harmony export */   OllamaProvider: () => (/* binding */ OllamaProvider),\n/* harmony export */   TemplateProvider: () => (/* binding */ TemplateProvider),\n/* harmony export */   TransformersJSProvider: () => (/* binding */ TransformersJSProvider),\n/* harmony export */   aiService: () => (/* binding */ aiService)\n/* harmony export */ });\n// AI Providers Configuration\n// Supports multiple AI providers with fallback system\nvar AIProvider = /*#__PURE__*/ function(AIProvider) {\n    AIProvider[\"GOOGLE_GEMINI\"] = \"google_gemini\";\n    AIProvider[\"GROQ\"] = \"groq\";\n    AIProvider[\"HUGGING_FACE\"] = \"huggingface\";\n    AIProvider[\"OLLAMA_LOCAL\"] = \"ollama_local\";\n    AIProvider[\"TRANSFORMERS_JS\"] = \"transformers_js\";\n    AIProvider[\"TEMPLATES_ONLY\"] = \"templates_only\";\n    return AIProvider;\n}({});\n// Default configuration - Groq first for ultra-fast responses\nconst AI_CONFIG = [\n    {\n        provider: \"groq\",\n        apiKey: process.env.GROQ_API_KEY,\n        baseUrl: 'https://api.groq.com/openai/v1',\n        model: 'llama-3.3-70b-versatile',\n        enabled: !!process.env.GROQ_API_KEY\n    },\n    {\n        provider: \"google_gemini\",\n        apiKey: process.env.GOOGLE_AI_API_KEY,\n        model: 'gemini-1.5-flash',\n        enabled: !!process.env.GOOGLE_AI_API_KEY\n    },\n    {\n        provider: \"huggingface\",\n        apiKey: process.env.HUGGING_FACE_API_KEY,\n        baseUrl: 'https://api-inference.huggingface.co/models',\n        model: 'microsoft/DialoGPT-large',\n        enabled: !!process.env.HUGGING_FACE_API_KEY\n    },\n    {\n        provider: \"ollama_local\",\n        baseUrl: process.env.OLLAMA_URL || 'http://localhost:11434',\n        model: process.env.OLLAMA_MODEL || 'llama3.1:8b',\n        enabled: process.env.OLLAMA_ENABLED === 'true'\n    },\n    {\n        provider: \"transformers_js\",\n        enabled: process.env.TRANSFORMERS_JS_ENABLED === 'true'\n    },\n    {\n        provider: \"templates_only\",\n        enabled: true // Always available as final fallback\n    }\n];\n// Abstract AI Provider Interface\nclass BaseAIProvider {\n    constructor(config){\n        this.config = config;\n    }\n}\n// Google Gemini Provider\nclass GoogleGeminiProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        if (!this.config.apiKey) {\n            throw new Error('Google AI API key not configured');\n        }\n        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${this.config.model}:generateContent?key=${this.config.apiKey}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig: {\n                    temperature: 0.7,\n                    topK: 1,\n                    topP: 1,\n                    maxOutputTokens: 500\n                }\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`Google AI API error: ${response.status}`);\n        }\n        const data = await response.json();\n        return data.candidates[0]?.content?.parts[0]?.text || 'Error generating content';\n    }\n    async isAvailable() {\n        return !!this.config.apiKey;\n    }\n}\n// Hugging Face Provider\nclass HuggingFaceProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        if (!this.config.apiKey) {\n            throw new Error('Hugging Face API key not configured');\n        }\n        const response = await fetch(`${this.config.baseUrl}/${this.config.model}`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${this.config.apiKey}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                inputs: prompt,\n                parameters: {\n                    max_new_tokens: 300,\n                    temperature: 0.7,\n                    return_full_text: false\n                }\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`Hugging Face API error: ${response.status}`);\n        }\n        const data = await response.json();\n        return data[0]?.generated_text || 'Error generating content';\n    }\n    async isAvailable() {\n        return !!this.config.apiKey;\n    }\n}\n// Ollama Local Provider\nclass OllamaProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        try {\n            const response = await fetch(`${this.config.baseUrl}/api/generate`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    model: this.config.model,\n                    prompt: prompt,\n                    stream: false,\n                    options: {\n                        temperature: 0.7,\n                        num_predict: 300\n                    }\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Ollama API error: ${response.status}`);\n            }\n            const data = await response.json();\n            return data.response || 'Error generating content';\n        } catch (error) {\n            throw new Error(`Ollama connection failed: ${error}`);\n        }\n    }\n    async isAvailable() {\n        try {\n            const response = await fetch(`${this.config.baseUrl}/api/version`, {\n                method: 'GET',\n                signal: AbortSignal.timeout(3000) // 3 second timeout\n            });\n            return response.ok;\n        } catch  {\n            return false;\n        }\n    }\n}\n// Transformers.js Provider (Browser-based)\nclass TransformersJSProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        if (!this.pipeline) {\n            const { pipeline } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @xenova/transformers */ \"@xenova/transformers\"));\n            this.pipeline = await pipeline('text-generation', 'Xenova/gpt2');\n        }\n        const result = await this.pipeline(prompt, {\n            max_new_tokens: 150,\n            temperature: 0.7\n        });\n        return result[0]?.generated_text?.replace(prompt, '').trim() || 'Error generating content';\n    }\n    async isAvailable() {\n        try {\n            await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @xenova/transformers */ \"@xenova/transformers\"));\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    constructor(...args){\n        super(...args), this.pipeline = null;\n    }\n}\n// Groq Provider\nclass GroqProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        if (!this.config.apiKey) {\n            throw new Error('Groq API key not configured');\n        }\n        const response = await fetch(`${this.config.baseUrl}/chat/completions`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${this.config.apiKey}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                model: this.config.model,\n                messages: [\n                    {\n                        role: 'system',\n                        content: 'Eres Sara, un asistente personal académico especializado en ayudar a estudiantes con organización, planificación y aprendizaje. Responde de manera clara, práctica y motivacional.'\n                    },\n                    {\n                        role: 'user',\n                        content: prompt\n                    }\n                ],\n                temperature: 0.7,\n                max_tokens: 500,\n                top_p: 0.9\n            })\n        });\n        if (!response.ok) {\n            const errorData = await response.text();\n            throw new Error(`Groq API error (${response.status}): ${errorData}`);\n        }\n        const data = await response.json();\n        return data.choices[0]?.message?.content || 'Error generating content';\n    }\n    async isAvailable() {\n        if (!this.config.apiKey) return false;\n        try {\n            const response = await fetch(`${this.config.baseUrl}/models`, {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${this.config.apiKey}`\n                },\n                signal: AbortSignal.timeout(5000) // 5 second timeout\n            });\n            return response.ok;\n        } catch  {\n            return false;\n        }\n    }\n}\n// Template Provider (Always Available Fallback)\nclass TemplateProvider extends BaseAIProvider {\n    async generateExercise(prompt) {\n        // This will use the existing template system\n        return 'TEMPLATE_FALLBACK';\n    }\n    async isAvailable() {\n        return true;\n    }\n}\n// Provider Factory\nclass AIProviderFactory {\n    static createProvider(config) {\n        switch(config.provider){\n            case \"google_gemini\":\n                return new GoogleGeminiProvider(config);\n            case \"groq\":\n                return new GroqProvider(config);\n            case \"huggingface\":\n                return new HuggingFaceProvider(config);\n            case \"ollama_local\":\n                return new OllamaProvider(config);\n            case \"transformers_js\":\n                return new TransformersJSProvider(config);\n            case \"templates_only\":\n                return new TemplateProvider(config);\n            default:\n                throw new Error(`Unknown AI provider: ${config.provider}`);\n        }\n    }\n}\n// Main AI Service with Fallback System\nclass AIService {\n    constructor(){\n        this.providers = [];\n        this.currentProviderIndex = 0;\n        this.initializeProviders();\n    }\n    initializeProviders() {\n        this.providers = AI_CONFIG.filter((config)=>config.enabled).map((config)=>AIProviderFactory.createProvider(config));\n    }\n    async generateExercise(prompt) {\n        for(let i = this.currentProviderIndex; i < this.providers.length; i++){\n            const provider = this.providers[i];\n            try {\n                const isAvailable = await provider.isAvailable();\n                if (!isAvailable) {\n                    console.log(`Provider ${i} not available, trying next...`);\n                    continue;\n                }\n                const result = await provider.generateExercise(prompt);\n                if (result === 'TEMPLATE_FALLBACK') {\n                    return result // Special marker for template system\n                    ;\n                }\n                if (result && result.length > 10) {\n                    this.currentProviderIndex = i // Remember working provider\n                    ;\n                    return result;\n                }\n            } catch (error) {\n                console.error(`Provider ${i} failed:`, error);\n                continue;\n            }\n        }\n        // If all providers fail, return template fallback marker\n        return 'TEMPLATE_FALLBACK';\n    }\n    async getAvailableProviders() {\n        const available = [];\n        for(let i = 0; i < this.providers.length; i++){\n            try {\n                const isAvailable = await this.providers[i].isAvailable();\n                if (isAvailable) {\n                    available.push(AI_CONFIG[i].provider);\n                }\n            } catch  {\n            // Provider not available\n            }\n        }\n        return available;\n    }\n}\n// Export singleton instance\nconst aiService = new AIService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/ai-providers.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/auth.ts":
/*!*************************!*\
  !*** ./src/lib/auth.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/providers/credentials */ \"(rsc)/./node_modules/next-auth/providers/credentials.js\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var _hybrid_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hybrid-storage */ \"(rsc)/./src/lib/hybrid-storage.ts\");\n\n\n\nconst authOptions = {\n    providers: [\n        (0,next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            name: \"credentials\",\n            credentials: {\n                email: {\n                    label: \"Email\",\n                    type: \"email\"\n                },\n                password: {\n                    label: \"Password\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials) {\n                if (!credentials?.email || !credentials?.password) {\n                    return null;\n                }\n                // Find user in database\n                const user = await (0,_hybrid_storage__WEBPACK_IMPORTED_MODULE_2__.findUserByEmail)(credentials.email);\n                if (!user || !user.password) {\n                    return null;\n                }\n                const isPasswordValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].compare(credentials.password, user.password);\n                if (!isPasswordValid) {\n                    return null;\n                }\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.name,\n                    role: user.role,\n                    studentId: user.studentId || undefined\n                };\n            }\n        })\n    ],\n    session: {\n        strategy: \"jwt\"\n    },\n    callbacks: {\n        async jwt ({ token, user }) {\n            if (user) {\n                token.role = user.role;\n                token.studentId = user.studentId;\n            }\n            return token;\n        },\n        async session ({ session, token }) {\n            if (token) {\n                session.user.id = token.sub;\n                session.user.role = token.role;\n                session.user.studentId = token.studentId;\n            }\n            return session;\n        },\n        async redirect ({ url, baseUrl }) {\n            // Handle internal redirects\n            if (url.startsWith(\"/\")) return `${baseUrl}${url}`;\n            else if (new URL(url).origin === baseUrl) return url;\n            // Default to home page for external redirects\n            return baseUrl;\n        },\n        async signIn ({ user, account, profile }) {\n            return true;\n        }\n    },\n    pages: {\n        signIn: \"/auth/signin\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2F1dGgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNpRTtBQUNwQztBQUNxQjtBQUUzQyxNQUFNRyxjQUErQjtJQUMxQ0MsV0FBVztRQUNUSiwyRUFBbUJBLENBQUM7WUFDbEJLLE1BQU07WUFDTkMsYUFBYTtnQkFDWEMsT0FBTztvQkFBRUMsT0FBTztvQkFBU0MsTUFBTTtnQkFBUTtnQkFDdkNDLFVBQVU7b0JBQUVGLE9BQU87b0JBQVlDLE1BQU07Z0JBQVc7WUFDbEQ7WUFDQSxNQUFNRSxXQUFVTCxXQUFXO2dCQUN6QixJQUFJLENBQUNBLGFBQWFDLFNBQVMsQ0FBQ0QsYUFBYUksVUFBVTtvQkFDakQsT0FBTztnQkFDVDtnQkFFQSx3QkFBd0I7Z0JBQ3hCLE1BQU1FLE9BQU8sTUFBTVYsZ0VBQWVBLENBQUNJLFlBQVlDLEtBQUs7Z0JBRXBELElBQUksQ0FBQ0ssUUFBUSxDQUFDQSxLQUFLRixRQUFRLEVBQUU7b0JBQzNCLE9BQU87Z0JBQ1Q7Z0JBRUEsTUFBTUcsa0JBQWtCLE1BQU1aLHdEQUFjLENBQzFDSyxZQUFZSSxRQUFRLEVBQ3BCRSxLQUFLRixRQUFRO2dCQUdmLElBQUksQ0FBQ0csaUJBQWlCO29CQUNwQixPQUFPO2dCQUNUO2dCQUVBLE9BQU87b0JBQ0xFLElBQUlILEtBQUtHLEVBQUU7b0JBQ1hSLE9BQU9LLEtBQUtMLEtBQUs7b0JBQ2pCRixNQUFNTyxLQUFLUCxJQUFJO29CQUNmVyxNQUFNSixLQUFLSSxJQUFJO29CQUNmQyxXQUFXTCxLQUFLSyxTQUFTLElBQUlDO2dCQUMvQjtZQUNGO1FBQ0Y7S0FDRDtJQUNEQyxTQUFTO1FBQ1BDLFVBQVU7SUFDWjtJQUNBQyxXQUFXO1FBQ1QsTUFBTUMsS0FBSSxFQUFFQyxLQUFLLEVBQUVYLElBQUksRUFBRTtZQUN2QixJQUFJQSxNQUFNO2dCQUNSVyxNQUFNUCxJQUFJLEdBQUdKLEtBQUtJLElBQUk7Z0JBQ3RCTyxNQUFNTixTQUFTLEdBQUdMLEtBQUtLLFNBQVM7WUFDbEM7WUFDQSxPQUFPTTtRQUNUO1FBQ0EsTUFBTUosU0FBUSxFQUFFQSxPQUFPLEVBQUVJLEtBQUssRUFBRTtZQUM5QixJQUFJQSxPQUFPO2dCQUNUSixRQUFRUCxJQUFJLENBQUNHLEVBQUUsR0FBR1EsTUFBTUMsR0FBRztnQkFDM0JMLFFBQVFQLElBQUksQ0FBQ0ksSUFBSSxHQUFHTyxNQUFNUCxJQUFJO2dCQUM5QkcsUUFBUVAsSUFBSSxDQUFDSyxTQUFTLEdBQUdNLE1BQU1OLFNBQVM7WUFDMUM7WUFDQSxPQUFPRTtRQUNUO1FBQ0EsTUFBTU0sVUFBUyxFQUFFQyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtZQUM3Qiw0QkFBNEI7WUFDNUIsSUFBSUQsSUFBSUUsVUFBVSxDQUFDLE1BQU0sT0FBTyxHQUFHRCxVQUFVRCxLQUFLO2lCQUM3QyxJQUFJLElBQUlHLElBQUlILEtBQUtJLE1BQU0sS0FBS0gsU0FBUyxPQUFPRDtZQUVqRCw4Q0FBOEM7WUFDOUMsT0FBT0M7UUFDVDtRQUNBLE1BQU1JLFFBQU8sRUFBRW5CLElBQUksRUFBRW9CLE9BQU8sRUFBRUMsT0FBTyxFQUFFO1lBQ3JDLE9BQU87UUFDVDtJQUNGO0lBQ0FDLE9BQU87UUFDTEgsUUFBUTtJQUNWO0FBQ0YsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL3JvZHJpZ29kaWJlcm5hcmRvMzNnbWFpbC5jb20vRG9jdW1lbnRzL0FwcCBEZXZlbG9wbWVudCBQcm95ZWN0cy9JbnRlbGxlZ28gUGxhdGZvcm0vc3JjL2xpYi9hdXRoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBdXRoT3B0aW9ucyB9IGZyb20gXCJuZXh0LWF1dGhcIlxuaW1wb3J0IENyZWRlbnRpYWxzUHJvdmlkZXIgZnJvbSBcIm5leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHNcIlxuaW1wb3J0IGJjcnlwdCBmcm9tIFwiYmNyeXB0anNcIlxuaW1wb3J0IHsgZmluZFVzZXJCeUVtYWlsIH0gZnJvbSBcIi4vaHlicmlkLXN0b3JhZ2VcIlxuXG5leHBvcnQgY29uc3QgYXV0aE9wdGlvbnM6IE5leHRBdXRoT3B0aW9ucyA9IHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgQ3JlZGVudGlhbHNQcm92aWRlcih7XG4gICAgICBuYW1lOiBcImNyZWRlbnRpYWxzXCIsXG4gICAgICBjcmVkZW50aWFsczoge1xuICAgICAgICBlbWFpbDogeyBsYWJlbDogXCJFbWFpbFwiLCB0eXBlOiBcImVtYWlsXCIgfSxcbiAgICAgICAgcGFzc3dvcmQ6IHsgbGFiZWw6IFwiUGFzc3dvcmRcIiwgdHlwZTogXCJwYXNzd29yZFwiIH1cbiAgICAgIH0sXG4gICAgICBhc3luYyBhdXRob3JpemUoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscz8uZW1haWwgfHwgIWNyZWRlbnRpYWxzPy5wYXNzd29yZCkge1xuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kIHVzZXIgaW4gZGF0YWJhc2VcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IGZpbmRVc2VyQnlFbWFpbChjcmVkZW50aWFscy5lbWFpbClcblxuICAgICAgICBpZiAoIXVzZXIgfHwgIXVzZXIucGFzc3dvcmQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUoXG4gICAgICAgICAgY3JlZGVudGlhbHMucGFzc3dvcmQsXG4gICAgICAgICAgdXNlci5wYXNzd29yZFxuICAgICAgICApXG5cbiAgICAgICAgaWYgKCFpc1Bhc3N3b3JkVmFsaWQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogdXNlci5pZCxcbiAgICAgICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgICAgICBuYW1lOiB1c2VyLm5hbWUsXG4gICAgICAgICAgcm9sZTogdXNlci5yb2xlLFxuICAgICAgICAgIHN0dWRlbnRJZDogdXNlci5zdHVkZW50SWQgfHwgdW5kZWZpbmVkLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgXSxcbiAgc2Vzc2lvbjoge1xuICAgIHN0cmF0ZWd5OiBcImp3dFwiLFxuICB9LFxuICBjYWxsYmFja3M6IHtcbiAgICBhc3luYyBqd3QoeyB0b2tlbiwgdXNlciB9KSB7XG4gICAgICBpZiAodXNlcikge1xuICAgICAgICB0b2tlbi5yb2xlID0gdXNlci5yb2xlXG4gICAgICAgIHRva2VuLnN0dWRlbnRJZCA9IHVzZXIuc3R1ZGVudElkXG4gICAgICB9XG4gICAgICByZXR1cm4gdG9rZW5cbiAgICB9LFxuICAgIGFzeW5jIHNlc3Npb24oeyBzZXNzaW9uLCB0b2tlbiB9KSB7XG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgc2Vzc2lvbi51c2VyLmlkID0gdG9rZW4uc3ViIVxuICAgICAgICBzZXNzaW9uLnVzZXIucm9sZSA9IHRva2VuLnJvbGUgYXMgc3RyaW5nXG4gICAgICAgIHNlc3Npb24udXNlci5zdHVkZW50SWQgPSB0b2tlbi5zdHVkZW50SWQgYXMgc3RyaW5nXG4gICAgICB9XG4gICAgICByZXR1cm4gc2Vzc2lvblxuICAgIH0sXG4gICAgYXN5bmMgcmVkaXJlY3QoeyB1cmwsIGJhc2VVcmwgfSkge1xuICAgICAgLy8gSGFuZGxlIGludGVybmFsIHJlZGlyZWN0c1xuICAgICAgaWYgKHVybC5zdGFydHNXaXRoKFwiL1wiKSkgcmV0dXJuIGAke2Jhc2VVcmx9JHt1cmx9YFxuICAgICAgZWxzZSBpZiAobmV3IFVSTCh1cmwpLm9yaWdpbiA9PT0gYmFzZVVybCkgcmV0dXJuIHVybFxuICAgICAgXG4gICAgICAvLyBEZWZhdWx0IHRvIGhvbWUgcGFnZSBmb3IgZXh0ZXJuYWwgcmVkaXJlY3RzXG4gICAgICByZXR1cm4gYmFzZVVybFxuICAgIH0sXG4gICAgYXN5bmMgc2lnbkluKHsgdXNlciwgYWNjb3VudCwgcHJvZmlsZSB9KSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfSxcbiAgcGFnZXM6IHtcbiAgICBzaWduSW46IFwiL2F1dGgvc2lnbmluXCIsXG4gIH0sXG59Il0sIm5hbWVzIjpbIkNyZWRlbnRpYWxzUHJvdmlkZXIiLCJiY3J5cHQiLCJmaW5kVXNlckJ5RW1haWwiLCJhdXRoT3B0aW9ucyIsInByb3ZpZGVycyIsIm5hbWUiLCJjcmVkZW50aWFscyIsImVtYWlsIiwibGFiZWwiLCJ0eXBlIiwicGFzc3dvcmQiLCJhdXRob3JpemUiLCJ1c2VyIiwiaXNQYXNzd29yZFZhbGlkIiwiY29tcGFyZSIsImlkIiwicm9sZSIsInN0dWRlbnRJZCIsInVuZGVmaW5lZCIsInNlc3Npb24iLCJzdHJhdGVneSIsImNhbGxiYWNrcyIsImp3dCIsInRva2VuIiwic3ViIiwicmVkaXJlY3QiLCJ1cmwiLCJiYXNlVXJsIiwic3RhcnRzV2l0aCIsIlVSTCIsIm9yaWdpbiIsInNpZ25JbiIsImFjY291bnQiLCJwcm9maWxlIiwicGFnZXMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/auth.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/calendar-ai-integration.ts":
/*!********************************************!*\
  !*** ./src/lib/calendar-ai-integration.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AICalendarIntegration: () => (/* binding */ AICalendarIntegration),\n/* harmony export */   analyzeConversationForEvents: () => (/* binding */ analyzeConversationForEvents),\n/* harmony export */   convertSuggestionToCalendarEvent: () => (/* binding */ convertSuggestionToCalendarEvent),\n/* harmony export */   createEventFromAI: () => (/* binding */ createEventFromAI),\n/* harmony export */   deleteEventFromAI: () => (/* binding */ deleteEventFromAI),\n/* harmony export */   editEventFromAI: () => (/* binding */ editEventFromAI),\n/* harmony export */   findUserEvents: () => (/* binding */ findUserEvents),\n/* harmony export */   generateEventQuestions: () => (/* binding */ generateEventQuestions),\n/* harmony export */   generateEventSuggestionResponse: () => (/* binding */ generateEventSuggestionResponse)\n/* harmony export */ });\n/* harmony import */ var _calendar_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n// Calendar AI Integration Service\n// Integra el sistema de IA tutora con el calendario para crear eventos automáticamente\n\n/**\n * Analiza una conversación con la IA para detectar menciones de eventos\n */ function analyzeConversationForEvents(conversationHistory) {\n    const userMessages = conversationHistory.filter((msg)=>msg.role === 'user').map((msg)=>msg.content).join(' ');\n    const analysis = {\n        hasEventMention: false,\n        eventSuggestions: [],\n        questions: [],\n        missingInfo: []\n    };\n    // Análisis más inteligente del último mensaje del usuario\n    const lastUserMessage = conversationHistory.length > 0 ? conversationHistory[conversationHistory.length - 1]?.content || userMessages : userMessages;\n    const msgLower = lastUserMessage.toLowerCase();\n    // Detectar intención de agendar/crear evento\n    const agendarPatterns = /agendes?|agend[aá]|cre[ae]|programa|anot[ae]|agrega/i;\n    const isRequestingToSchedule = agendarPatterns.test(lastUserMessage);\n    // Detectar intención de editar evento\n    const editarPatterns = /edit[ae]|modific[ae]|cambi[ae]|actualiz[ae]|reprograma/i;\n    const isRequestingToEdit = editarPatterns.test(lastUserMessage);\n    // Detectar intención de eliminar evento\n    const eliminarPatterns = /elimin[ae]|borr[ae]|quit[ae]|cancel[ae]|suprimi/i;\n    const isRequestingToDelete = eliminarPatterns.test(lastUserMessage);\n    // Detectar menciones de exámenes con mejor parsing\n    if (/(examen|evaluaci[oó]n|parcial|final|prueba|test)/i.test(lastUserMessage)) {\n        const eventData = extractEventDataFromMessage(lastUserMessage, 'exam');\n        if (eventData.hasEvent) {\n            // Normalizar subject con acentos correctos\n            const normalizedSubject = normalizeSubjectName(eventData.subject);\n            analysis.eventSuggestions.push({\n                type: 'exam',\n                title: normalizedSubject ? `Examen de ${normalizedSubject}` : 'Examen',\n                subject: normalizedSubject,\n                date: eventData.date,\n                startTime: eventData.startTime,\n                duration: eventData.duration || 120,\n                location: eventData.location,\n                description: eventData.description,\n                priority: 'high',\n                confidence: 0.9\n            });\n            analysis.hasEventMention = true;\n        }\n    } else if (/(estudiar|repasar|preparar|practicar|sesi[oó]n.*estudio)/i.test(lastUserMessage)) {\n        const eventData = extractEventDataFromMessage(lastUserMessage, 'study_session');\n        if (eventData.hasEvent) {\n            // Normalizar subject con acentos correctos\n            const normalizedSubject = normalizeSubjectName(eventData.subject) || 'Revisión General';\n            analysis.eventSuggestions.push({\n                type: 'study_session',\n                title: `Sesión de Estudio - ${normalizedSubject}`,\n                subject: normalizedSubject,\n                date: eventData.date,\n                startTime: eventData.startTime,\n                duration: eventData.duration || 90,\n                location: eventData.location,\n                description: eventData.description,\n                priority: 'medium',\n                confidence: 0.8\n            });\n            analysis.hasEventMention = true;\n        }\n    }\n    // Solo generar preguntas para información realmente faltante\n    if (analysis.eventSuggestions.length > 0) {\n        const suggestion = analysis.eventSuggestions[0];\n        const questions = [];\n        const missingInfo = [];\n        if (!suggestion.date) {\n            questions.push(\"📅 ¿Para qué fecha es?\");\n            missingInfo.push(\"fecha\");\n        }\n        if (!suggestion.startTime) {\n            questions.push(\"🕐 ¿A qué hora?\");\n            missingInfo.push(\"hora\");\n        }\n        if (suggestion.type === 'exam' && !suggestion.subject) {\n            questions.push(\"📚 ¿De qué materia es el examen?\");\n            missingInfo.push(\"materia\");\n        }\n        if (suggestion.type === 'exam' && !suggestion.location) {\n            questions.push(\"📍 ¿En qué aula será?\");\n            missingInfo.push(\"ubicación\");\n        }\n        // Solo agregar preguntas si realmente falta información\n        analysis.questions = questions;\n        analysis.missingInfo = missingInfo;\n    }\n    return analysis;\n}\n/**\n * Extrae datos específicos del evento desde el mensaje\n */ function extractEventDataFromMessage(message, eventType) {\n    const msgLower = message.toLowerCase();\n    // Extraer materia de manera más inteligente\n    let subject = null;\n    const subjectPatterns = [\n        /(?:examen|evaluaci[oó]n|parcial|final|prueba|test).*?(?:de|en)\\s+([a-záéíóúñ]+)/i,\n        /([a-záéíóúñ]+).*?(?:examen|evaluaci[oó]n|parcial|final|prueba|test)/i,\n        /(?:estudiar|repasar|preparar|practicar)\\s+([a-záéíóúñ]+)/i,\n        /(?:sesi[oó]n.*?(?:de|en)\\s+([a-záéíóúñ]+))/i\n    ];\n    for (const pattern of subjectPatterns){\n        const match = message.match(pattern);\n        if (match && match[1]) {\n            // Capitalizar primera letra\n            subject = match[1].charAt(0).toUpperCase() + match[1].slice(1).toLowerCase();\n            break;\n        }\n    }\n    // Extraer fecha de manera más inteligente\n    let date = null;\n    let startTime = null;\n    // Detectar fechas específicas (dd de mes, dd/mm, etc.)\n    const specificDatePatterns = [\n        /(\\d{1,2})\\s+de\\s+(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,\n        /(\\d{1,2})\\/(\\d{1,2})(?:\\/(\\d{2,4}))?/,\n        /(\\d{1,2})-(\\d{1,2})(?:-(\\d{2,4}))?/,\n        /el\\s+(\\d{1,2})/i\n    ];\n    for (const pattern of specificDatePatterns){\n        const match = message.match(pattern);\n        if (match) {\n            if (pattern.source.includes('de')) {\n                // \"10 de julio\"\n                const day = parseInt(match[1]);\n                const monthName = match[2].toLowerCase();\n                const monthMap = {\n                    'enero': 0,\n                    'febrero': 1,\n                    'marzo': 2,\n                    'abril': 3,\n                    'mayo': 4,\n                    'junio': 5,\n                    'julio': 6,\n                    'agosto': 7,\n                    'septiembre': 8,\n                    'octubre': 9,\n                    'noviembre': 10,\n                    'diciembre': 11\n                };\n                if (monthMap[monthName] !== undefined) {\n                    const now = new Date();\n                    const eventDate = new Date(now.getFullYear(), monthMap[monthName], day);\n                    date = eventDate.toISOString().split('T')[0];\n                }\n            } else if (match[1] && !isNaN(parseInt(match[1]))) {\n                // Formato dd/mm o dd-mm o \"el 10\"\n                const day = parseInt(match[1]);\n                const month = match[2] ? parseInt(match[2]) - 1 : new Date().getMonth();\n                const year = match[3] ? parseInt(match[3]) : new Date().getFullYear();\n                const eventDate = new Date(year, month, day);\n                date = eventDate.toISOString().split('T')[0];\n            }\n            break;\n        }\n    }\n    // Si no se encontró fecha específica, buscar días relativos\n    if (!date) {\n        const relativeDatePatterns = [\n            {\n                pattern: /ma[ñn]ana/i,\n                days: 1\n            },\n            {\n                pattern: /hoy/i,\n                days: 0\n            },\n            {\n                pattern: /pasado.*ma[ñn]ana/i,\n                days: 2\n            },\n            {\n                pattern: /lunes/i,\n                targetDay: 1\n            },\n            {\n                pattern: /martes/i,\n                targetDay: 2\n            },\n            {\n                pattern: /mi[eé]rcoles/i,\n                targetDay: 3\n            },\n            {\n                pattern: /jueves/i,\n                targetDay: 4\n            },\n            {\n                pattern: /viernes/i,\n                targetDay: 5\n            },\n            {\n                pattern: /s[aá]bado/i,\n                targetDay: 6\n            },\n            {\n                pattern: /domingo/i,\n                targetDay: 0\n            }\n        ];\n        for (const { pattern, days, targetDay } of relativeDatePatterns){\n            if (pattern.test(message)) {\n                const now = new Date();\n                let eventDate;\n                if (days !== undefined) {\n                    eventDate = new Date(now.getTime() + days * 24 * 60 * 60 * 1000);\n                } else if (targetDay !== undefined) {\n                    const currentDay = now.getDay();\n                    let daysToAdd = targetDay - currentDay;\n                    if (daysToAdd <= 0) daysToAdd += 7 // Próxima semana\n                    ;\n                    eventDate = new Date(now.getTime() + daysToAdd * 24 * 60 * 60 * 1000);\n                } else {\n                    continue;\n                }\n                date = eventDate.toISOString().split('T')[0];\n                break;\n            }\n        }\n    }\n    // Extraer hora de manera más inteligente\n    const timePatterns = [\n        /(?:a\\s+las?\\s+)?(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm|a\\.?m\\.?|p\\.?m\\.?)/i,\n        /(?:a\\s+las?\\s+)?(\\d{1,2})(?::(\\d{2}))?\\s*h(?:oras?)?/i,\n        /(\\d{1,2})(?::(\\d{2}))?\\s*(?:de\\s+la\\s+)?(ma[ñn]ana|tarde|noche)/i\n    ];\n    for (const pattern of timePatterns){\n        const match = message.match(pattern);\n        if (match) {\n            let hour = parseInt(match[1]);\n            const minute = match[2] ? parseInt(match[2]) : 0;\n            const period = match[3]?.toLowerCase();\n            // Convertir a formato 24h\n            if (period) {\n                if ((period.includes('pm') || period.includes('p.m') || period === 'tarde' || period === 'noche') && hour < 12) {\n                    hour += 12;\n                } else if ((period.includes('am') || period.includes('a.m') || period === 'ma[ñn]ana') && hour === 12) {\n                    hour = 0;\n                } else if (period === 'noche' && hour < 6) {\n                    hour += 12 // Para casos como \"3 de la noche\" = 15:00\n                    ;\n                }\n            }\n            startTime = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n            break;\n        }\n    }\n    // Extraer ubicación\n    let location = null;\n    const locationPatterns = [\n        /(?:en\\s+el?\\s+)?(aula|laboratorio|sala|auditorio)\\s+([a-zA-Z0-9]+)/i,\n        /(?:en\\s+)([a-zA-Z\\s]+(?:aula|laboratorio|sala|auditorio)[a-zA-Z0-9\\s]*)/i\n    ];\n    for (const pattern of locationPatterns){\n        const match = message.match(pattern);\n        if (match) {\n            location = match[0].replace(/^en\\s+/i, '').trim();\n            break;\n        }\n    }\n    // Extraer duración\n    let duration = null;\n    const durationMatch = message.match(/(?:durante\\s+)?(\\d+)\\s*(horas?|minutos?|min)/i);\n    if (durationMatch) {\n        const value = parseInt(durationMatch[1]);\n        const unit = durationMatch[2].toLowerCase();\n        duration = unit.includes('hora') ? value * 60 : value;\n    }\n    // Extraer descripción/tema específico si se menciona\n    let description = null;\n    const topicPatterns = [\n        /(?:sobre|tema|temas?)\\s+([a-záéíóúñ\\s]+?)(?:\\s+para|\\s+el|\\s+a|$)/i,\n        /(?:sobre)\\s+el\\s+tema\\s+([a-záéíóúñ\\s]+?)(?:\\s+para|\\s+el|\\s+a|$)/i\n    ];\n    for (const pattern of topicPatterns){\n        const match = message.match(pattern);\n        if (match && match[1] && match[1].trim().length > 3) {\n            description = match[1].trim();\n            break;\n        }\n    }\n    return {\n        hasEvent: true,\n        subject,\n        date,\n        startTime,\n        location,\n        duration,\n        description\n    };\n}\n/**\n * Genera preguntas para completar la información de un evento\n */ function generateEventQuestions(suggestion) {\n    const questions = [];\n    if (!suggestion.date) {\n        questions.push(\"📅 ¿Para qué fecha es?\");\n    }\n    if (!suggestion.startTime) {\n        questions.push(\"🕐 ¿A qué hora?\");\n    }\n    if (suggestion.type === 'exam') {\n        if (!suggestion.subject) {\n            questions.push(\"📚 ¿De qué materia es el examen?\");\n        }\n        if (!suggestion.location) {\n            questions.push(\"📍 ¿En qué aula o laboratorio será?\");\n        }\n        if (!suggestion.duration) {\n            questions.push(\"⏱️ ¿Cuánto tiempo durará?\");\n        }\n    }\n    if (suggestion.type === 'study_session') {\n        if (!suggestion.subject) {\n            questions.push(\"📖 ¿Qué tema vas a estudiar?\");\n        }\n        if (!suggestion.duration) {\n            questions.push(\"⏰ ¿Cuántas horas planeas estudiar?\");\n        }\n    }\n    if (suggestion.type === 'personal' || suggestion.type === 'extracurricular') {\n        if (!suggestion.location) {\n            questions.push(\"📍 ¿Dónde será?\");\n        }\n    }\n    return questions;\n}\n/**\n * Convierte una sugerencia de evento en un evento de calendario\n */ function convertSuggestionToCalendarEvent(suggestion, userId, additionalInfo) {\n    const merged = {\n        ...suggestion,\n        ...additionalInfo\n    };\n    // Procesar fecha\n    let eventDate = new Date();\n    if (merged.date) {\n        eventDate = parseDateFromText(merged.date);\n    }\n    // Procesar hora\n    let startTime = merged.startTime || '15:00';\n    let endTime = merged.startTime || '16:00';\n    if (merged.duration && merged.startTime) {\n        const start = new Date(`2000-01-01T${merged.startTime}:00`);\n        const end = new Date(start.getTime() + merged.duration * 60000);\n        endTime = end.toTimeString().substring(0, 5);\n    }\n    const event = {\n        id: `ai-event-${Date.now()}`,\n        title: merged.title,\n        date: eventDate,\n        startTime: startTime,\n        endTime: endTime,\n        type: merged.type,\n        color: (0,_calendar_data__WEBPACK_IMPORTED_MODULE_0__.getEventTypeColor)(merged.type),\n        subject: merged.subject,\n        location: merged.location,\n        description: merged.description || 'Creado automáticamente por IA Tutora',\n        priority: merged.priority || 'medium',\n        duration: merged.duration || 60\n    };\n    return event;\n}\n/**\n * Crea un evento automáticamente desde la IA usando el API endpoint dedicado\n */ async function createEventFromAI(suggestion, userId, additionalInfo) {\n    try {\n        const merged = {\n            ...suggestion,\n            ...additionalInfo\n        };\n        // Procesar fecha\n        let eventDate = new Date();\n        if (merged.date) {\n            eventDate = parseDateFromText(merged.date);\n        }\n        // Calcular endTime basado en duration y startTime\n        let endTime = merged.startTime || '16:00';\n        if (merged.duration && merged.startTime) {\n            const start = new Date(`2000-01-01T${merged.startTime}:00`);\n            const end = new Date(start.getTime() + merged.duration * 60000);\n            endTime = end.toTimeString().substring(0, 5);\n        }\n        const eventData = {\n            title: merged.title,\n            type: merged.type,\n            subject: merged.subject,\n            date: eventDate.toISOString(),\n            startTime: merged.startTime || '15:00',\n            endTime: endTime,\n            duration: merged.duration || 60,\n            location: merged.location,\n            description: merged.description || `Creado automáticamente por IA Tutora`,\n            priority: merged.priority || 'medium'\n        };\n        // For server-side execution, call the function directly instead of HTTP fetch\n        try {\n            const { createCalendarEvent } = __webpack_require__(/*! ../app/api/ai-calendar/create-event/route */ \"(rsc)/./src/app/api/ai-calendar/create-event/route.ts\");\n            const mockRequest = {\n                json: async ()=>eventData\n            };\n            const response1 = await createCalendarEvent(mockRequest);\n            const result = await response1.json();\n            return {\n                success: result.success,\n                event: result.event,\n                message: result.message\n            };\n        } catch (directCallError) {\n            console.log('Direct API call failed, trying alternative approach:', directCallError);\n            // Alternative: Use calendar-data functions directly\n            const { addCalendarEvent, getUserCalendarData, createUserCalendarData } = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n            // Ensure user has calendar data\n            let userData = getUserCalendarData(userId);\n            if (!userData) {\n                console.log(`🆕 Creating calendar data for user ${userId}`);\n                userData = createUserCalendarData(userId);\n            }\n            const calendarEvent = {\n                id: `ai-event-${Date.now()}`,\n                title: eventData.title,\n                date: new Date(eventData.date),\n                startTime: eventData.startTime,\n                endTime: eventData.endTime,\n                type: eventData.type,\n                color: '#3B82F6',\n                subject: eventData.subject,\n                location: eventData.location,\n                description: eventData.description,\n                priority: eventData.priority,\n                duration: eventData.duration\n            };\n            console.log(`📅 Creating event: ${calendarEvent.title} for ${eventData.date} at ${eventData.startTime}`);\n            const success = addCalendarEvent(userId, calendarEvent);\n            return {\n                success,\n                event: success ? calendarEvent : undefined,\n                message: success ? 'Evento creado exitosamente' : 'Error al crear evento'\n            };\n        }\n        const result = await response.json();\n        if (result.success) {\n            console.log(`🤖 IA confirmó creación: ${result.event.title}`);\n            // Disparar evento del lado del cliente para notificar componentes\n            if (false) {}\n            return {\n                success: true,\n                event: result.event,\n                message: result.message\n            };\n        } else {\n            console.error('❌ IA falló al crear evento:', result.error);\n            return {\n                success: false,\n                message: result.error || 'Error desconocido'\n            };\n        }\n    } catch (error) {\n        console.error('❌ Error in AI event creation:', error);\n        return {\n            success: false,\n            message: 'Error de conexión al crear evento'\n        };\n    }\n}\n/**\n * Parsea fechas desde texto natural\n */ function parseDateFromText(dateText) {\n    const text = dateText.toLowerCase();\n    const today = new Date();\n    if (text.includes('hoy')) {\n        return today;\n    }\n    if (text.includes('mañana') || text.includes('ma[ñn]ana')) {\n        const tomorrow = new Date(today);\n        tomorrow.setDate(today.getDate() + 1);\n        return tomorrow;\n    }\n    if (text.includes('pasado')) {\n        const dayAfterTomorrow = new Date(today);\n        dayAfterTomorrow.setDate(today.getDate() + 2);\n        return dayAfterTomorrow;\n    }\n    // Días de la semana\n    const dayMap = {\n        'lunes': 1,\n        'martes': 2,\n        'miércoles': 3,\n        'miercoles': 3,\n        'jueves': 4,\n        'viernes': 5,\n        'sábado': 6,\n        'sabado': 6,\n        'domingo': 0\n    };\n    for (const [dayName, dayNumber] of Object.entries(dayMap)){\n        if (text.includes(dayName)) {\n            const targetDate = new Date(today);\n            const currentDay = today.getDay();\n            let daysToAdd = dayNumber - currentDay;\n            if (daysToAdd <= 0) {\n                daysToAdd += 7 // Próxima semana\n                ;\n            }\n            targetDate.setDate(today.getDate() + daysToAdd);\n            return targetDate;\n        }\n    }\n    // Si incluye números (ej: \"en 3 días\")\n    const daysMatch = text.match(/en\\s+(\\d+)\\s+d[ií]as?/);\n    if (daysMatch) {\n        const days = parseInt(daysMatch[1]);\n        const futureDate = new Date(today);\n        futureDate.setDate(today.getDate() + days);\n        return futureDate;\n    }\n    // Por defecto, devolver mañana\n    const defaultDate = new Date(today);\n    defaultDate.setDate(today.getDate() + 1);\n    return defaultDate;\n}\n/**\n * Genera respuesta de la IA para sugerir crear eventos\n */ function generateEventSuggestionResponse(analysis) {\n    if (!analysis.hasEventMention || analysis.eventSuggestions.length === 0) {\n        return \"\";\n    }\n    const suggestion = analysis.eventSuggestions[0] // Tomar la primera sugerencia\n    ;\n    let response1 = `📅 Perfecto! Veo que quieres agendar: **${suggestion.title}**\\n\\n`;\n    // Mostrar información detectada\n    const detectedInfo = [];\n    if (suggestion.subject) detectedInfo.push(`📚 Materia: ${suggestion.subject}`);\n    if (suggestion.date) {\n        const dateObj = new Date(suggestion.date);\n        const formattedDate = dateObj.toLocaleDateString('es-ES', {\n            weekday: 'long',\n            day: 'numeric',\n            month: 'long'\n        });\n        detectedInfo.push(`📅 Fecha: ${formattedDate}`);\n    }\n    if (suggestion.startTime) detectedInfo.push(`🕐 Hora: ${suggestion.startTime}`);\n    if (suggestion.location) detectedInfo.push(`📍 Ubicación: ${suggestion.location}`);\n    if (detectedInfo.length > 0) {\n        response1 += `**Información detectada:**\\n${detectedInfo.join('\\n')}\\n\\n`;\n    }\n    if (analysis.questions.length > 0) {\n        response1 += `Para completar el evento necesito:\\n`;\n        analysis.questions.forEach((question, index)=>{\n            response1 += `${index + 1}. ${question}\\n`;\n        });\n        response1 += `\\n¿Podrías darme estos detalles?`;\n    } else {\n        response1 += `¡Tengo toda la información necesaria! ¿Confirmas que lo agregue a tu calendario?`;\n    }\n    return response1;\n}\n/**\n * Interfaz para el workflow completo de creación de eventos por IA\n */ class AICalendarIntegration {\n    constructor(userId){\n        this.pendingSuggestion = null;\n        this.collectedInfo = {};\n        this.userId = userId;\n    }\n    /**\n   * Procesa un mensaje del usuario y detecta si necesita crear eventos\n   */ async processMessage(message, conversationHistory) {\n        const analysis = analyzeConversationForEvents([\n            ...conversationHistory,\n            {\n                role: 'user',\n                content: message\n            }\n        ]);\n        if (analysis.hasEventMention && analysis.eventSuggestions.length > 0) {\n            this.pendingSuggestion = analysis.eventSuggestions[0];\n            if (analysis.questions.length > 0) {\n                return {\n                    needsEventCreation: true,\n                    response: generateEventSuggestionResponse(analysis),\n                    questions: analysis.questions\n                };\n            } else {\n                // Información completa, crear evento directamente\n                const result = await this.createPendingEvent();\n                return {\n                    needsEventCreation: true,\n                    response: result.success ? this.generateSuccessMessage(result.event) : `❌ ${result.message || 'Hubo un error al crear el evento. Por favor intenta nuevamente.'}`,\n                    event: result.event\n                };\n            }\n        }\n        return {\n            needsEventCreation: false\n        };\n    }\n    /**\n   * Recopila información adicional del usuario\n   */ collectAdditionalInfo(infoType, value) {\n        if (!this.pendingSuggestion) return false;\n        switch(infoType.toLowerCase()){\n            case 'fecha':\n                this.collectedInfo.date = value;\n                break;\n            case 'hora':\n                this.collectedInfo.startTime = value;\n                break;\n            case 'materia':\n            case 'tema':\n                this.collectedInfo.subject = value;\n                break;\n            case 'ubicación':\n            case 'ubicacion':\n                this.collectedInfo.location = value;\n                break;\n            case 'duración':\n            case 'duracion':\n                this.collectedInfo.duration = parseInt(value);\n                break;\n        }\n        return true;\n    }\n    /**\n   * Crea el evento pendiente con la información recopilada\n   */ async createPendingEvent() {\n        if (!this.pendingSuggestion) {\n            return {\n                success: false,\n                message: 'No hay evento pendiente'\n            };\n        }\n        const result = await createEventFromAI(this.pendingSuggestion, this.userId, this.collectedInfo);\n        if (result.success) {\n            this.pendingSuggestion = null;\n            this.collectedInfo = {};\n        }\n        return result;\n    }\n    /**\n   * Cancela la creación del evento pendiente\n   */ cancelPendingEvent() {\n        this.pendingSuggestion = null;\n        this.collectedInfo = {};\n    }\n    /**\n   * Obtiene la sugerencia pendiente\n   */ getPendingSuggestion() {\n        return this.pendingSuggestion;\n    }\n    /**\n   * Genera mensaje de éxito con detalles del evento creado\n   */ generateSuccessMessage(event) {\n        let message = `✅ ¡Perfecto! He creado \"${event.title}\" en tu calendario.`;\n        // Agregar detalles específicos\n        const details = [];\n        if (event.date) {\n            const dateStr = event.date.toLocaleDateString('es-ES', {\n                weekday: 'long',\n                day: 'numeric',\n                month: 'long'\n            });\n            details.push(`📅 **Fecha**: ${dateStr}`);\n        }\n        if (event.startTime) {\n            details.push(`🕐 **Hora**: ${event.startTime}`);\n        }\n        if (event.location) {\n            details.push(`📍 **Ubicación**: ${event.location}`);\n        }\n        if (event.subject && event.type === 'exam') {\n            details.push(`📚 **Materia**: ${event.subject}`);\n        }\n        if (event.description && !event.description.includes('Creado automáticamente')) {\n            details.push(`📝 **Tema**: ${event.description}`);\n        }\n        if (details.length > 0) {\n            message += `\\n\\n**Detalles del evento:**\\n${details.join('\\n')}`;\n        }\n        message += `\\n\\n🎯 Puedes ver todos tus eventos en la sección \"Organizador Inteligente\" de tu calendario.`;\n        return message;\n    }\n}\n/**\n * Busca eventos del usuario por texto de búsqueda\n */ function findUserEvents(userId, searchText) {\n    const userData = (0,_calendar_data__WEBPACK_IMPORTED_MODULE_0__.getUserCalendarData)(userId);\n    if (!userData) return [];\n    const search = searchText.toLowerCase();\n    return userData.events.filter((event)=>{\n        return event.title.toLowerCase().includes(search) || event.subject?.toLowerCase().includes(search) || event.description?.toLowerCase().includes(search) || event.location?.toLowerCase().includes(search);\n    });\n}\n/**\n * Edita un evento usando el API endpoint\n */ async function editEventFromAI(eventId, updates) {\n    try {\n        // For server-side execution, call the function directly\n        try {\n            const { updateCalendarEvent } = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n            const success = updateCalendarEvent(eventId, updates);\n            return {\n                success,\n                event: success ? {\n                    id: eventId,\n                    ...updates\n                } : undefined,\n                message: success ? 'Evento actualizado exitosamente' : 'Error al actualizar evento'\n            };\n        } catch (error) {\n            console.error('Error updating event:', error);\n            return {\n                success: false,\n                message: 'Error al actualizar evento'\n            };\n        }\n        const result = await response.json();\n        if (result.success) {\n            console.log(`🤖 IA editó evento: ${result.event.title}`);\n            // Disparar evento del lado del cliente\n            if (false) {}\n            return {\n                success: true,\n                event: result.event,\n                message: result.message\n            };\n        } else {\n            return {\n                success: false,\n                message: result.error || 'Error desconocido al editar'\n            };\n        }\n    } catch (error) {\n        console.error('❌ Error editing event from AI:', error);\n        return {\n            success: false,\n            message: 'Error de conexión al editar evento'\n        };\n    }\n}\n/**\n * Elimina un evento usando el API endpoint\n */ async function deleteEventFromAI(eventId) {\n    try {\n        // For server-side execution, call the function directly\n        try {\n            const { deleteCalendarEvent } = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n            const deletedEvent = deleteCalendarEvent(eventId);\n            return {\n                success: !!deletedEvent,\n                message: deletedEvent ? `Evento \"${deletedEvent.title}\" eliminado exitosamente` : 'Evento no encontrado'\n            };\n        } catch (error) {\n            console.error('Error deleting event:', error);\n            return {\n                success: false,\n                message: 'Error al eliminar evento'\n            };\n        }\n        const result = await response.json();\n        if (result.success) {\n            console.log(`🤖 IA eliminó evento: ${result.deletedEvent.title}`);\n            // Disparar evento del lado del cliente\n            if (false) {}\n            return {\n                success: true,\n                message: result.message\n            };\n        } else {\n            return {\n                success: false,\n                message: result.error || 'Error desconocido al eliminar'\n            };\n        }\n    } catch (error) {\n        console.error('❌ Error deleting event from AI:', error);\n        return {\n            success: false,\n            message: 'Error de conexión al eliminar evento'\n        };\n    }\n}\n/**\n * Normaliza nombres de materias con acentos y mayúsculas correctas\n */ function normalizeSubjectName(subject) {\n    if (!subject) return null;\n    const normalized = subject.toLowerCase().trim();\n    const subjectMap = {\n        'quimica': 'Química',\n        'química': 'Química',\n        'fisica': 'Física',\n        'física': 'Física',\n        'matematica': 'Matemática',\n        'matemáticas': 'Matemáticas',\n        'matematicas': 'Matemáticas',\n        'biologia': 'Biología',\n        'biología': 'Biología',\n        'historia': 'Historia',\n        'geografia': 'Geografía',\n        'geografía': 'Geografía',\n        'ingles': 'Inglés',\n        'inglés': 'Inglés',\n        'lengua': 'Lengua y Literatura',\n        'literatura': 'Lengua y Literatura',\n        'filosofia': 'Filosofía',\n        'filosofía': 'Filosofía',\n        'economia': 'Economía',\n        'economía': 'Economía',\n        'educacion fisica': 'Educación Física',\n        'educación física': 'Educación Física',\n        'ed fisica': 'Educación Física',\n        'arte': 'Arte',\n        'musica': 'Música',\n        'música': 'Música'\n    };\n    // Buscar coincidencia exacta primero\n    if (subjectMap[normalized]) {\n        return subjectMap[normalized];\n    }\n    // Buscar coincidencia parcial\n    for (const [key, value] of Object.entries(subjectMap)){\n        if (key.includes(normalized) || normalized.includes(key)) {\n            return value;\n        }\n    }\n    // Si no se encuentra, capitalizar primera letra\n    return subject.charAt(0).toUpperCase() + subject.slice(1).toLowerCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/calendar-ai-integration.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/calendar-data.ts":
/*!**********************************!*\
  !*** ./src/lib/calendar-data.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCalendarEvent: () => (/* binding */ addCalendarEvent),\n/* harmony export */   createUserCalendarData: () => (/* binding */ createUserCalendarData),\n/* harmony export */   deleteCalendarEvent: () => (/* binding */ deleteCalendarEvent),\n/* harmony export */   findAvailableTimeSlots: () => (/* binding */ findAvailableTimeSlots),\n/* harmony export */   getEventTypeColor: () => (/* binding */ getEventTypeColor),\n/* harmony export */   getEventTypeIcon: () => (/* binding */ getEventTypeIcon),\n/* harmony export */   getEventsForDate: () => (/* binding */ getEventsForDate),\n/* harmony export */   getEventsForDateRange: () => (/* binding */ getEventsForDateRange),\n/* harmony export */   getUserCalendarData: () => (/* binding */ getUserCalendarData),\n/* harmony export */   isTimeSlotAvailable: () => (/* binding */ isTimeSlotAvailable),\n/* harmony export */   tempCalendarData: () => (/* binding */ tempCalendarData),\n/* harmony export */   updateCalendarEvent: () => (/* binding */ updateCalendarEvent),\n/* harmony export */   updateUserCalendarData: () => (/* binding */ updateUserCalendarData)\n/* harmony export */ });\n// Calendar Data Models for Smart Calendar\n// Temporary storage for calendar data\nconst globalForCalendarData = globalThis;\nconst tempCalendarData = globalForCalendarData.tempCalendarData ?? [];\nglobalForCalendarData.tempCalendarData = tempCalendarData;\n// Calendar Data Management Functions\nfunction getUserCalendarData(userId) {\n    return tempCalendarData.find((data)=>data.userId === userId);\n}\nfunction createUserCalendarData(userId) {\n    const newData = {\n        userId,\n        schoolSchedule: {\n            monday: [],\n            tuesday: [],\n            wednesday: [],\n            thursday: [],\n            friday: []\n        },\n        studyPreferences: {\n            preferredStudyTime: 'afternoon',\n            dailyStudyHours: 3,\n            maxSessionDuration: 90,\n            breakBetweenSessions: 15,\n            weekendStudyHours: 4,\n            noStudyDays: [\n                0\n            ] // Sunday\n        },\n        events: [],\n        isSetupComplete: false,\n        lastUpdated: new Date()\n    };\n    tempCalendarData.push(newData);\n    return newData;\n}\nfunction updateUserCalendarData(userId, updates) {\n    const index = tempCalendarData.findIndex((data)=>data.userId === userId);\n    if (index !== -1) {\n        tempCalendarData[index] = {\n            ...tempCalendarData[index],\n            ...updates,\n            lastUpdated: new Date()\n        };\n        return true;\n    }\n    return false;\n}\nfunction addCalendarEvent(userId, event) {\n    const userData = getUserCalendarData(userId);\n    if (userData) {\n        userData.events.push(event);\n        userData.lastUpdated = new Date();\n        // Force update in global storage\n        const index = tempCalendarData.findIndex((data)=>data.userId === userId);\n        if (index !== -1) {\n            tempCalendarData[index] = userData;\n        }\n        console.log(`📅 Evento agregado: ${event.title} - Total eventos: ${userData.events.length}`);\n        return true;\n    }\n    return false;\n}\nfunction updateCalendarEvent(userId, eventId, updates) {\n    const userData = getUserCalendarData(userId);\n    if (userData) {\n        const eventIndex = userData.events.findIndex((e)=>e.id === eventId);\n        if (eventIndex !== -1) {\n            userData.events[eventIndex] = {\n                ...userData.events[eventIndex],\n                ...updates\n            };\n            userData.lastUpdated = new Date();\n            // Force update in global storage\n            const index = tempCalendarData.findIndex((data)=>data.userId === userId);\n            if (index !== -1) {\n                tempCalendarData[index] = userData;\n            }\n            console.log(`📅 Evento actualizado: ${userData.events[eventIndex].title}`);\n            return true;\n        }\n    }\n    return false;\n}\nfunction deleteCalendarEvent(userId, eventId) {\n    const userData = getUserCalendarData(userId);\n    if (userData) {\n        const eventIndex = userData.events.findIndex((e)=>e.id === eventId);\n        if (eventIndex !== -1) {\n            const deletedEvent = userData.events[eventIndex];\n            userData.events.splice(eventIndex, 1);\n            userData.lastUpdated = new Date();\n            // Force update in global storage\n            const index = tempCalendarData.findIndex((data)=>data.userId === userId);\n            if (index !== -1) {\n                tempCalendarData[index] = userData;\n            }\n            console.log(`📅 Evento eliminado: ${deletedEvent.title} - Total eventos: ${userData.events.length}`);\n            return true;\n        }\n    }\n    return false;\n}\nfunction getEventsForDate(userId, date) {\n    const userData = getUserCalendarData(userId);\n    if (!userData) return [];\n    const targetDate = new Date(date);\n    targetDate.setHours(0, 0, 0, 0);\n    return userData.events.filter((event)=>{\n        const eventDate = new Date(event.date);\n        eventDate.setHours(0, 0, 0, 0);\n        return eventDate.getTime() === targetDate.getTime();\n    });\n}\nfunction getEventsForDateRange(userId, startDate, endDate) {\n    const userData = getUserCalendarData(userId);\n    if (!userData) return [];\n    return userData.events.filter((event)=>{\n        const eventDate = new Date(event.date);\n        return eventDate >= startDate && eventDate <= endDate;\n    });\n}\n// Utility functions for calendar operations\nfunction isTimeSlotAvailable(userId, date, startTime, endTime) {\n    const userData = getUserCalendarData(userId);\n    if (!userData) return true;\n    const dayName = getDayName(date.getDay());\n    const schoolSlots = userData.schoolSchedule[dayName] || [];\n    // Check school schedule conflicts\n    for (const slot of schoolSlots){\n        if (timeOverlaps(startTime, endTime, slot.start, slot.end)) {\n            return false;\n        }\n    }\n    // Check existing events\n    const dayEvents = getEventsForDate(userId, date);\n    for (const event of dayEvents){\n        if (event.startTime && event.endTime) {\n            if (timeOverlaps(startTime, endTime, event.startTime, event.endTime)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nfunction findAvailableTimeSlots(userId, date, duration, preferredTime) {\n    const userData = getUserCalendarData(userId);\n    if (!userData) return [];\n    const slots = [];\n    // Define time ranges based on preference\n    const timeRanges = {\n        morning: [\n            '08:00',\n            '12:00'\n        ],\n        afternoon: [\n            '14:00',\n            '18:00'\n        ],\n        evening: [\n            '19:00',\n            '22:00'\n        ]\n    };\n    const searchRange = preferredTime ? timeRanges[preferredTime] : [\n        '08:00',\n        '22:00'\n    ];\n    const [searchStart, searchEnd] = searchRange;\n    // Generate potential slots every 30 minutes\n    const startMinutes = timeToMinutes(searchStart);\n    const endMinutes = timeToMinutes(searchEnd);\n    for(let minutes = startMinutes; minutes <= endMinutes - duration; minutes += 30){\n        const slotStart = minutesToTime(minutes);\n        const slotEnd = minutesToTime(minutes + duration);\n        if (isTimeSlotAvailable(userId, date, slotStart, slotEnd)) {\n            slots.push({\n                start: slotStart,\n                end: slotEnd\n            });\n        }\n    }\n    return slots;\n}\nfunction getEventTypeColor(type) {\n    const colors = {\n        exam: '#EF4444',\n        study_session: '#3B82F6',\n        class: '#10B981',\n        personal: '#8B5CF6',\n        extracurricular: '#F59E0B' // Orange\n    };\n    return colors[type] || '#64748B';\n}\nfunction getEventTypeIcon(type) {\n    const icons = {\n        exam: '📝',\n        study_session: '📚',\n        class: '🎓',\n        personal: '👤',\n        extracurricular: '🏃‍♀️'\n    };\n    return icons[type] || '📅';\n}\n// Helper functions\nfunction getDayName(dayIndex) {\n    const days = [\n        'sunday',\n        'monday',\n        'tuesday',\n        'wednesday',\n        'thursday',\n        'friday',\n        'saturday'\n    ];\n    return days[dayIndex];\n}\nfunction timeToMinutes(time) {\n    const [hours, minutes] = time.split(':').map(Number);\n    return hours * 60 + minutes;\n}\nfunction minutesToTime(minutes) {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\n}\nfunction timeOverlaps(start1, end1, start2, end2) {\n    const start1Minutes = timeToMinutes(start1);\n    const end1Minutes = timeToMinutes(end1);\n    const start2Minutes = timeToMinutes(start2);\n    const end2Minutes = timeToMinutes(end2);\n    return start1Minutes < end2Minutes && end1Minutes > start2Minutes;\n}\n// Initialize demo data\nfunction initDemoCalendarData() {\n    const demoUserId = \"demo-student-fixed\";\n    if (!getUserCalendarData(demoUserId)) {\n        console.log(\"📅 Inicializando datos de calendario demo...\");\n        const demoData = createUserCalendarData(demoUserId);\n        // Demo school schedule\n        demoData.schoolSchedule = {\n            monday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Matemáticas',\n                    location: 'Aula 201',\n                    color: '#3B82F6'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Química',\n                    location: 'Laboratorio A',\n                    color: '#EF4444'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Historia',\n                    location: 'Aula 105',\n                    color: '#8B5CF6'\n                }\n            ],\n            tuesday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Física',\n                    location: 'Laboratorio B',\n                    color: '#10B981'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Literatura',\n                    location: 'Aula 203',\n                    color: '#F59E0B'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Biología',\n                    location: 'Laboratorio C',\n                    color: '#EC4899'\n                }\n            ],\n            wednesday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Matemáticas',\n                    location: 'Aula 201',\n                    color: '#3B82F6'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Educación Física',\n                    location: 'Gimnasio',\n                    color: '#06B6D4'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Arte',\n                    location: 'Taller',\n                    color: '#F97316'\n                }\n            ],\n            thursday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Química',\n                    location: 'Laboratorio A',\n                    color: '#EF4444'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Física',\n                    location: 'Laboratorio B',\n                    color: '#10B981'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Historia',\n                    location: 'Aula 105',\n                    color: '#8B5CF6'\n                }\n            ],\n            friday: [\n                {\n                    start: '08:00',\n                    end: '09:30',\n                    subject: 'Biología',\n                    location: 'Laboratorio C',\n                    color: '#EC4899'\n                },\n                {\n                    start: '09:45',\n                    end: '11:15',\n                    subject: 'Literatura',\n                    location: 'Aula 203',\n                    color: '#F59E0B'\n                },\n                {\n                    start: '11:30',\n                    end: '13:00',\n                    subject: 'Matemáticas',\n                    location: 'Aula 201',\n                    color: '#3B82F6'\n                }\n            ]\n        };\n        // Demo events\n        const now = new Date();\n        const demoEvents = [\n            {\n                id: 'exam-1',\n                title: 'Examen Química Orgánica',\n                date: new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000),\n                startTime: '10:00',\n                endTime: '12:00',\n                type: 'exam',\n                color: getEventTypeColor('exam'),\n                description: 'Examen parcial de química orgánica',\n                subject: 'Química',\n                location: 'Laboratorio A'\n            },\n            {\n                id: 'study-1',\n                title: 'Sesión de Estudio - Matemáticas',\n                date: new Date(now.getTime() + 1 * 24 * 60 * 60 * 1000),\n                startTime: '15:00',\n                endTime: '16:30',\n                type: 'study_session',\n                color: getEventTypeColor('study_session'),\n                description: 'Repaso de cálculo integral',\n                subject: 'Matemáticas'\n            },\n            {\n                id: 'personal-1',\n                title: 'Entrenamiento Fútbol',\n                date: new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000),\n                startTime: '17:00',\n                endTime: '18:30',\n                type: 'extracurricular',\n                color: getEventTypeColor('extracurricular'),\n                description: 'Entrenamiento de fútbol',\n                location: 'Campo deportivo'\n            }\n        ];\n        demoEvents.forEach((event)=>{\n            demoData.events.push(event);\n        });\n        demoData.isSetupComplete = true;\n        demoData.lastUpdated = new Date();\n        console.log(\"✅ Datos de calendario demo inicializados\");\n    } else {\n        console.log(\"✅ Datos de calendario demo ya existen\");\n    }\n}\n// Initialize demo data on module load\ninitDemoCalendarData();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/calendar-data.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/contextual-conversation-manager.ts":
/*!****************************************************!*\
  !*** ./src/lib/contextual-conversation-manager.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextualConversationManager: () => (/* binding */ ContextualConversationManager)\n/* harmony export */ });\n/* harmony import */ var _advanced_learning_profiles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./advanced-learning-profiles */ \"(rsc)/./src/lib/advanced-learning-profiles.ts\");\n/* harmony import */ var _visual_learning_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visual-learning-engine */ \"(rsc)/./src/lib/visual-learning-engine.ts\");\n/* harmony import */ var _calendar_ai_integration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calendar-ai-integration */ \"(rsc)/./src/lib/calendar-ai-integration.ts\");\n// Contextual Conversation Manager for Sara AI\n// Provides intelligent context management and conversation coherence\n\n\n\nclass ContextualConversationManager {\n    static{\n        // Configuration for persistent conversation management\n        this.MAX_TURNS_RETAINED = 20;\n    }\n    static{\n        this.MAX_REFERENCES = 10;\n    }\n    static{\n        this.CONTEXT_DECAY_HOURS = 24;\n    }\n    /**\n   * Processes user message with full contextual awareness\n   */ static async processContextualMessage(userId, message, sessionId, userName) {\n        const actualSessionId = sessionId || `session_${userId}_${Date.now()}`;\n        // Import persistent storage functions\n        const { getConversationSession, createConversationSession, addConversationTurn, addPendingTask, getPendingTasks } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        // Get or create persistent conversation session\n        let session = getConversationSession(userId, actualSessionId);\n        if (!session) {\n            session = createConversationSession(userId, actualSessionId);\n        }\n        console.log(`💬 Processing message for session ${actualSessionId}: \"${message.substring(0, 50)}...\"`);\n        console.log(`📊 Session has ${session.turns.length} previous turns, ${session.pendingTasks.filter((t)=>!t.completed).length} pending tasks`);\n        // Analyze message metadata\n        const messageMetadata = this.analyzeMessageMetadata(message);\n        // Add user turn to persistent storage\n        session = addConversationTurn(userId, actualSessionId, 'user', message, messageMetadata);\n        // Check for pending tasks that might relate to this message\n        const pendingTasks = getPendingTasks(userId, actualSessionId);\n        // Build context from persistent data\n        const context = {\n            userId,\n            sessionId: actualSessionId,\n            currentTopic: session.currentTopic,\n            currentSubject: session.currentSubject,\n            conversationFlow: session.turns.map((turn)=>({\n                    id: turn.id,\n                    timestamp: turn.timestamp,\n                    role: turn.role,\n                    content: turn.content,\n                    metadata: turn.metadata\n                })),\n            contextSummary: this.buildContextSummary(session),\n            activeIntentions: this.extractActiveIntentions(session.turns.slice(-5)),\n            pendingQuestions: [],\n            referenceMemory: this.buildReferenceMemory(session.turns),\n            lastUpdate: new Date()\n        };\n        // Generate contextually aware response\n        const response = await this.generateContextualResponse(context, userName, pendingTasks);\n        // Add assistant turn to persistent storage\n        const assistantMetadata = {\n            confidence: response.continuityScore,\n            visualsGenerated: !!response.visualRecommendation,\n            searchPerformed: response.personalizations.includes('academic_search'),\n            taskCompleted: response.personalizations.includes('task_completed')\n        };\n        addConversationTurn(userId, actualSessionId, 'assistant', response.content, assistantMetadata);\n        return response;\n    }\n    /**\n   * Build context summary from persistent conversation data\n   */ static buildContextSummary(session) {\n        const recentTurns = session.turns.slice(-6);\n        const keyTopics = [\n            ...new Set(recentTurns.map((turn)=>turn.metadata.topic).filter(Boolean))\n        ];\n        const keySubjects = [\n            ...new Set(recentTurns.map((turn)=>turn.metadata.subject).filter(Boolean))\n        ];\n        const summaryParts = [];\n        if (keySubjects.length > 0) {\n            summaryParts.push(`Materias: ${keySubjects.join(', ')}`);\n        }\n        if (keyTopics.length > 0) {\n            summaryParts.push(`Temas: ${keyTopics.join(', ')}`);\n        }\n        return summaryParts.join(' | ') || 'Conversación general';\n    }\n    /**\n   * Extract active intentions from recent conversation turns\n   */ static extractActiveIntentions(recentTurns) {\n        const intentions = recentTurns.map((turn)=>turn.metadata.intention).filter(Boolean).slice(-3);\n        return [\n            ...new Set(intentions)\n        ];\n    }\n    /**\n   * Build reference memory from conversation turns\n   */ static buildReferenceMemory(turns) {\n        const references = [];\n        const recentTurns = turns.slice(-10);\n        recentTurns.forEach((turn, index)=>{\n            if (turn.metadata.confidence && turn.metadata.confidence > 0.7) {\n                references.push({\n                    id: `ref_${turn.id}`,\n                    type: this.determineReferenceTypeFromMetadata(turn.metadata),\n                    content: turn.content.substring(0, 100) + '...',\n                    relevanceScore: turn.metadata.confidence,\n                    turnIndex: index,\n                    timestamp: turn.timestamp\n                });\n            }\n        });\n        return references.slice(-5) // Keep only last 5 references\n        ;\n    }\n    /**\n   * Helper to determine reference type from metadata\n   */ static determineReferenceTypeFromMetadata(metadata) {\n        if (metadata.intention === 'continuation') return 'topic_continuation';\n        if (metadata.intention === 'problem_solving') return 'problem_solving';\n        if (metadata.intention === 'explanation') return 'explanation_followup';\n        return 'subject_reference';\n    }\n    /**\n   * Handles calendar task execution with real event creation\n   */ static async handleCalendarTasks(userId, message, conversationHistory, pendingTasks) {\n        console.log(`🔍 Checking for calendar tasks in message: \"${message.substring(0, 50)}...\"`);\n        // Initialize calendar integration\n        const calendarIntegration = new _calendar_ai_integration__WEBPACK_IMPORTED_MODULE_2__.AICalendarIntegration(userId);\n        // Analyze message for calendar events\n        const calendarResult = await calendarIntegration.processMessage(message, conversationHistory);\n        if (calendarResult.needsEventCreation) {\n            console.log(`🎯 Calendar task detected and executed!`);\n            // Mark any related pending task as completed\n            if (pendingTasks.length > 0) {\n                const calendarTask = pendingTasks.find((t)=>t.type === 'calendar_event');\n                if (calendarTask) {\n                    const { markTaskCompleted } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n                    markTaskCompleted(userId, 'current-session', calendarTask.id, calendarResult);\n                }\n            }\n            return {\n                type: 'calendar_event_creation',\n                content: calendarResult.response || 'Evento creado exitosamente',\n                metadata: {\n                    suggestedActions: calendarResult.event ? [\n                        'Ver en calendario',\n                        'Editar evento',\n                        'Eliminar evento'\n                    ] : [\n                        'Reintentar',\n                        'Proporcionar más detalles'\n                    ],\n                    eventCreated: !!calendarResult.event\n                }\n            };\n        }\n        return null;\n    }\n    /**\n   * Builds educational prompt based on conversation context\n   */ static buildEducationalPrompt(context, message, userName) {\n        const recentTurns = context.conversationFlow.slice(-3);\n        const conversationContext = recentTurns.map((turn)=>`${turn.role === 'user' ? 'Estudiante' : 'Tutor'}: ${turn.content}`).join('\\n');\n        let prompt = `Eres Sara, una tutora de IA especializada en educación secundaria. `;\n        if (userName) {\n            prompt += `El estudiante se llama ${userName}. `;\n        }\n        if (context.currentSubject) {\n            prompt += `Actualmente estás ayudando con ${context.currentSubject}. `;\n        }\n        if (context.contextSummary && context.contextSummary !== 'Conversación general') {\n            prompt += `Contexto de la conversación: ${context.contextSummary}. `;\n        }\n        prompt += `\\n\\nConversación reciente:\\n${conversationContext}`;\n        prompt += `\\n\\nNuevo mensaje del estudiante: \"${message}\"`;\n        prompt += `\\n\\nInstrucciones:\\n`;\n        prompt += `- Responde como Sara, la tutora de IA amigable y experta\\n`;\n        prompt += `- Mantén coherencia con la conversación anterior\\n`;\n        prompt += `- Si detectas que el estudiante quiere agendar algo (examen, sesión de estudio), menciona que puedes ayudar con eso\\n`;\n        prompt += `- Usa ejemplos concretos y un lenguaje claro para estudiantes de secundaria\\n`;\n        prompt += `- Si es una pregunta académica, proporciona explicaciones paso a paso\\n`;\n        prompt += `- Mantén un tono motivador y positivo\\n\\n`;\n        prompt += `Respuesta de Sara:`;\n        return prompt;\n    }\n    /**\n   * Generates contextual fallback response when AI services fail\n   */ static generateContextualFallback(context, message, userName) {\n        const msgLower = message.toLowerCase();\n        // Calendar-related fallback\n        if (/agendes?|agend[aá]|cre[ae]|programa|anot[ae]|agrega.*(?:examen|evento|sesión)/i.test(message)) {\n            return `¡Hola${userName ? ' ' + userName : ''}! Veo que quieres agendar algo en tu calendario.\\n\\n` + `Por favor proporciona estos detalles:\\n` + `📅 **Fecha**: ¿Para cuándo es?\\n` + `🕐 **Hora**: ¿A qué hora?\\n` + `📚 **Tema**: ¿De qué se trata?\\n\\n` + `Una vez que me des estos datos, podré agregarlo a tu calendario automáticamente.`;\n        }\n        // Academic question fallback\n        if (/¿|qué.*es|cómo|explica|no.*entiendo/i.test(message)) {\n            let response = `Entiendo tu pregunta${userName ? ', ' + userName : ''}.\\n\\n`;\n            if (context.currentSubject) {\n                response += `Para ayudarte mejor con ${context.currentSubject}, `;\n            }\n            response += `¿podrías ser más específico sobre qué parte necesitas que te explique?\\n\\n`;\n            response += `Mientras tanto, puedo:\\n`;\n            response += `• Explicarte conceptos paso a paso\\n`;\n            response += `• Ayudarte a resolver ejercicios\\n`;\n            response += `• Crear recordatorios de estudio\\n`;\n            response += `• Agendar sesiones de repaso`;\n            return response;\n        }\n        // General fallback with context\n        let response = `¡Hola${userName ? ' ' + userName : ''}! 👋\\n\\n`;\n        if (context.currentSubject) {\n            response += `Veo que hemos estado trabajando con ${context.currentSubject}. `;\n        }\n        response += `¿En qué más puedo ayudarte hoy?\\n\\n`;\n        response += `Puedo ayudarte con:\\n`;\n        response += `📚 **Explicar conceptos** de tus materias\\n`;\n        response += `📝 **Resolver ejercicios** paso a paso\\n`;\n        response += `📅 **Agendar eventos** en tu calendario\\n`;\n        response += `🎯 **Hacer evaluaciones** adaptativas\\n`;\n        response += `🔍 **Buscar información** académica`;\n        return response;\n    }\n    /**\n   * Analyzes message metadata for context\n   */ static analyzeMessageMetadata(message) {\n        const msgLower = message.toLowerCase();\n        // Subject detection\n        let subject;\n        if (/matemáticas?|álgebra|geometría|cálculo/.test(msgLower)) {\n            subject = 'matemáticas';\n        } else if (/física|mecánica|cinemática|energía/.test(msgLower)) {\n            subject = 'física';\n        } else if (/química|reacción|átomo|molécula/.test(msgLower)) {\n            subject = 'química';\n        }\n        // Topic detection\n        let topic;\n        const topicMatches = msgLower.match(/(ecuación|función|derivada|integral|fórmula|problema)/gi);\n        if (topicMatches) {\n            topic = topicMatches[0];\n        }\n        // Intention detection\n        let intention;\n        if (/explica|qué es|cómo funciona/.test(msgLower)) {\n            intention = 'explanation';\n        } else if (/resuelve|calcula|encuentra/.test(msgLower)) {\n            intention = 'problem_solving';\n        } else if (/ayuda|no entiendo|estoy confundido/.test(msgLower)) {\n            intention = 'help_request';\n        } else if (/continúa|sigue|y después/.test(msgLower)) {\n            intention = 'continuation';\n        }\n        // Confidence based on clarity and specificity\n        let confidence = 0.5;\n        if (subject) confidence += 0.2;\n        if (topic) confidence += 0.2;\n        if (intention) confidence += 0.1;\n        return {\n            subject,\n            topic,\n            intention,\n            confidence: Math.min(confidence, 1.0)\n        };\n    }\n    /**\n   * Updates contextual information based on new message\n   */ static async updateContextualInformation(context, message) {\n        const recentTurns = context.conversationFlow.slice(-5);\n        const metadata = recentTurns[recentTurns.length - 1]?.metadata;\n        // Update current topic/subject if detected\n        if (metadata?.subject) {\n            context.currentSubject = metadata.subject;\n        }\n        if (metadata?.topic) {\n            context.currentTopic = metadata.topic;\n        }\n        // Detect conversation continuity patterns\n        if (metadata?.intention === 'continuation') {\n            const lastAssistantTurn = recentTurns.slice().reverse().find((turn)=>turn.role === 'assistant');\n            if (lastAssistantTurn?.metadata?.subject) {\n                context.currentSubject = lastAssistantTurn.metadata.subject;\n            }\n        }\n        // Update active intentions\n        if (metadata?.intention && !context.activeIntentions.includes(metadata.intention)) {\n            context.activeIntentions.push(metadata.intention);\n            // Keep only recent intentions\n            if (context.activeIntentions.length > 3) {\n                context.activeIntentions.shift();\n            }\n        }\n        // Create context references for important information\n        if (metadata?.confidence && metadata.confidence > 0.7) {\n            const reference = {\n                id: `ref_${Date.now()}`,\n                type: this.determineReferenceType(metadata),\n                content: message,\n                relevanceScore: metadata.confidence,\n                turnIndex: context.conversationFlow.length - 1,\n                timestamp: new Date()\n            };\n            context.referenceMemory.push(reference);\n            // Keep only most relevant references\n            if (context.referenceMemory.length > this.MAX_REFERENCES) {\n                context.referenceMemory.sort((a, b)=>b.relevanceScore - a.relevanceScore);\n                context.referenceMemory = context.referenceMemory.slice(0, this.MAX_REFERENCES);\n            }\n        }\n        // Update context summary\n        await this.updateContextSummary(context);\n    }\n    /**\n   * Determines reference type based on metadata\n   */ static determineReferenceType(metadata) {\n        if (metadata.intention === 'continuation') return 'topic_continuation';\n        if (metadata.intention === 'problem_solving') return 'problem_solving';\n        if (metadata.intention === 'explanation') return 'explanation_followup';\n        return 'subject_reference';\n    }\n    /**\n   * Updates context summary with key conversation points\n   */ static async updateContextSummary(context) {\n        const recentTurns = context.conversationFlow.slice(-6);\n        const keyTopics = [\n            ...new Set(recentTurns.map((turn)=>turn.metadata.topic).filter(Boolean))\n        ];\n        const keySubjects = [\n            ...new Set(recentTurns.map((turn)=>turn.metadata.subject).filter(Boolean))\n        ];\n        const summaryParts = [];\n        if (keySubjects.length > 0) {\n            summaryParts.push(`Materias: ${keySubjects.join(', ')}`);\n        }\n        if (keyTopics.length > 0) {\n            summaryParts.push(`Temas: ${keyTopics.join(', ')}`);\n        }\n        if (context.activeIntentions.length > 0) {\n            summaryParts.push(`Intenciones: ${context.activeIntentions.join(', ')}`);\n        }\n        context.contextSummary = summaryParts.join(' | ') || 'Conversación general';\n    }\n    /**\n   * Generates contextually aware response using persistent storage\n   */ static async generateContextualResponse(context, userName, pendingTasks = []) {\n        // Get learning profile for personalization\n        const learningProfile = _advanced_learning_profiles__WEBPACK_IMPORTED_MODULE_0__.AdvancedLearningProfileManager.getLearningProfile(context.userId);\n        // Update learning profile based on current message\n        const latestMessage = context.conversationFlow[context.conversationFlow.length - 1]?.content || '';\n        _advanced_learning_profiles__WEBPACK_IMPORTED_MODULE_0__.AdvancedLearningProfileManager.processUserMessage(context.userId, latestMessage);\n        // Analyze conversation for continuity\n        const continuityAnalysis = this.analyzeContinuity(context);\n        // 🎯 FIRST PRIORITY: Check for calendar task execution\n        const calendarResult = await this.handleCalendarTasks(context.userId, latestMessage, this.formatConversationHistory(context), pendingTasks);\n        if (calendarResult) {\n            console.log(`📅 Calendar task executed: ${calendarResult.type}`);\n            return {\n                content: calendarResult.content,\n                context,\n                continuityScore: 0.9,\n                personalizations: [\n                    'calendar_task_executed'\n                ],\n                suggestedFollowups: calendarResult.metadata?.suggestedActions || []\n            };\n        }\n        // Generate base response using AI providers directly\n        const { aiService } = __webpack_require__(/*! ./ai-providers */ \"(rsc)/./src/lib/ai-providers.ts\");\n        let baseContent = '';\n        try {\n            // Create educational prompt based on context\n            const educationalPrompt = this.buildEducationalPrompt(context, latestMessage, userName);\n            baseContent = await aiService.generateExercise(educationalPrompt);\n            // If AI service returns fallback template, use contextual fallback\n            if (baseContent === 'TEMPLATE_FALLBACK') {\n                baseContent = this.generateContextualFallback(context, latestMessage, userName);\n            }\n        } catch (error) {\n            console.error('AI service error, using contextual fallback:', error);\n            baseContent = this.generateContextualFallback(context, latestMessage, userName);\n        }\n        // Enhance response with contextual information\n        let enhancedContent = baseContent;\n        // Add continuity references if relevant\n        if (continuityAnalysis.shouldReference) {\n            enhancedContent = this.addContinuityReferences(enhancedContent, context);\n        }\n        // Apply learning style adaptations\n        enhancedContent = _advanced_learning_profiles__WEBPACK_IMPORTED_MODULE_0__.AdvancedLearningProfileManager.adaptResponseToLearningStyle(enhancedContent, learningProfile);\n        // Determine personalizations applied\n        const personalizations = [];\n        if (continuityAnalysis.shouldReference) personalizations.push('context_reference');\n        if (learningProfile.primaryStyle !== 'multimodal') personalizations.push('learning_style_adaptation');\n        if (pendingTasks.length > 0) personalizations.push('task_aware');\n        // Generate visual recommendations\n        let visualRecommendation;\n        if (learningProfile.adaptationPreferences.prefersVisualAids && (context.currentSubject || context.currentTopic)) {\n            visualRecommendation = {\n                type: _visual_learning_engine__WEBPACK_IMPORTED_MODULE_1__.VisualLearningEngine.detectOptimalVisualType(enhancedContent, context.currentSubject),\n                reason: `Recomendado para tu perfil de aprendizaje ${learningProfile.primaryStyle}`\n            };\n        }\n        // Generate follow-up suggestions\n        const followups = this.generateContextualFollowups(context, learningProfile);\n        return {\n            content: enhancedContent,\n            context,\n            continuityScore: continuityAnalysis.score,\n            personalizations,\n            suggestedFollowups: followups,\n            visualRecommendation\n        };\n    }\n    /**\n   * Analyzes conversation continuity\n   */ static analyzeContinuity(context) {\n        const recentTurns = context.conversationFlow.slice(-4);\n        let score = 0.5 // Base score\n        ;\n        let shouldReference = false;\n        let referenceType;\n        // Check for topic continuity\n        const topics = recentTurns.map((turn)=>turn.metadata.topic).filter(Boolean);\n        if (topics.length > 1 && topics[topics.length - 1] === topics[topics.length - 2]) {\n            score += 0.2;\n            shouldReference = true;\n            referenceType = 'topic_continuity';\n        }\n        // Check for subject continuity\n        const subjects = recentTurns.map((turn)=>turn.metadata.subject).filter(Boolean);\n        if (subjects.length > 1 && subjects[subjects.length - 1] === subjects[subjects.length - 2]) {\n            score += 0.15;\n            shouldReference = true;\n            referenceType = 'subject_continuity';\n        }\n        // Check for continuation indicators\n        const latestMessage = recentTurns[recentTurns.length - 1]?.content?.toLowerCase() || '';\n        if (/continúa|sigue|y después|también|además/.test(latestMessage)) {\n            score += 0.25;\n            shouldReference = true;\n            referenceType = 'explicit_continuation';\n        }\n        // Check for question follow-up patterns\n        const hasQuestionFollowup = recentTurns.some((turn, index)=>index > 0 && turn.role === 'user' && /por qué|cómo|cuándo|dónde|explica/.test(turn.content.toLowerCase()) && recentTurns[index - 1]?.role === 'assistant');\n        if (hasQuestionFollowup) {\n            score += 0.1;\n            shouldReference = true;\n            referenceType = 'followup_question';\n        }\n        return {\n            score: Math.min(score, 1.0),\n            shouldReference,\n            referenceType\n        };\n    }\n    /**\n   * Adds continuity references to response\n   */ static addContinuityReferences(content, context) {\n        const recentAssistantTurns = context.conversationFlow.filter((turn)=>turn.role === 'assistant').slice(-2);\n        if (recentAssistantTurns.length === 0) return content;\n        const lastTopic = context.currentTopic;\n        const lastSubject = context.currentSubject;\n        let referencePrefix = '';\n        if (lastTopic && lastSubject) {\n            referencePrefix = `Continuando con ${lastTopic} en ${lastSubject}: `;\n        } else if (lastTopic) {\n            referencePrefix = `Siguiendo con el tema de ${lastTopic}: `;\n        } else if (lastSubject) {\n            referencePrefix = `Continuando con ${lastSubject}: `;\n        } else {\n            referencePrefix = `Como mencioné anteriormente: `;\n        }\n        return referencePrefix + content;\n    }\n    /**\n   * Generates contextual follow-up suggestions\n   */ static generateContextualFollowups(context, learningProfile) {\n        const followups = [];\n        // Based on current topic/subject\n        if (context.currentTopic) {\n            followups.push(`¿Tienes más preguntas sobre ${context.currentTopic}?`);\n        }\n        if (context.currentSubject) {\n            followups.push(`¿Te gustaría ver ejercicios de ${context.currentSubject}?`);\n        }\n        // Based on learning style\n        if (learningProfile.adaptationPreferences.prefersVisualAids) {\n            followups.push('¿Te ayudaría ver un diagrama de esto?');\n        }\n        if (learningProfile.adaptationPreferences.prefersInteraction) {\n            followups.push('¿Quieres practicar con un ejercicio?');\n        }\n        // Based on active intentions\n        if (context.activeIntentions.includes('explanation')) {\n            followups.push('¿Necesitas que profundice en algún aspecto específico?');\n        }\n        if (context.activeIntentions.includes('problem_solving')) {\n            followups.push('¿Quieres que resolvamos otro problema similar?');\n        }\n        // Generic contextual followups\n        if (context.conversationFlow.length > 3) {\n            followups.push('¿Hay algo que no quedó claro?');\n        }\n        return followups.slice(0, 3) // Limit to 3 suggestions\n        ;\n    }\n    /**\n   * Formats conversation history for external engines\n   */ static formatConversationHistory(context) {\n        return context.conversationFlow.slice(-10) // Last 10 turns\n        .map((turn)=>({\n                role: turn.role,\n                content: turn.content\n            }));\n    }\n    /**\n   * Maintains context memory by cleaning old data\n   */ static maintainContextMemory(context) {\n        // Keep only recent turns\n        if (context.conversationFlow.length > this.MAX_TURNS_RETAINED) {\n            context.conversationFlow = context.conversationFlow.slice(-this.MAX_TURNS_RETAINED);\n        }\n        // Clean old references\n        const cutoffTime = new Date(Date.now() - 12 * 60 * 60 * 1000) // 12 hours\n        ;\n        context.referenceMemory = context.referenceMemory.filter((ref)=>ref.timestamp > cutoffTime);\n        // Clean old intentions\n        if (context.activeIntentions.length > 3) {\n            context.activeIntentions = context.activeIntentions.slice(-3);\n        }\n    }\n    /**\n   * Gets conversation statistics using persistent storage\n   */ static getConversationStats(userId) {\n        const { getUserActiveSessions } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        if (userId) {\n            const userSessions = getUserActiveSessions(userId);\n            return {\n                activeContexts: userSessions.length,\n                totalTurns: userSessions.reduce((sum, session)=>sum + session.turns.length, 0),\n                currentTopics: [\n                    ...new Set(userSessions.map((session)=>session.currentTopic).filter(Boolean))\n                ],\n                currentSubjects: [\n                    ...new Set(userSessions.map((session)=>session.currentSubject).filter(Boolean))\n                ]\n            };\n        }\n        // For global stats, we need to import the conversations array\n        const { tempConversations } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        const activeConversations = tempConversations.filter((session)=>{\n            const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n            return session.lastUpdate > oneHourAgo;\n        });\n        return {\n            totalActiveContexts: activeConversations.length,\n            totalUsers: new Set(activeConversations.map((session)=>session.userId)).size,\n            averageContextAge: this.calculateAverageContextAgeFromSessions(activeConversations)\n        };\n    }\n    /**\n   * Calculates average context age from persistent sessions\n   */ static calculateAverageContextAgeFromSessions(sessions) {\n        if (sessions.length === 0) return 0;\n        const now = Date.now();\n        const totalAge = sessions.reduce((sum, session)=>sum + (now - new Date(session.lastUpdate).getTime()), 0);\n        return Math.round(totalAge / sessions.length / (60 * 1000)) // Average age in minutes\n        ;\n    }\n    /**\n   * Forces cleanup of all contexts (useful for testing)\n   */ static clearAllContexts() {\n        const { cleanupOldConversations } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        cleanupOldConversations();\n        console.log('🧹 All conversation contexts cleared using persistent storage');\n    }\n    /**\n   * Gets active context for user (useful for debugging)\n   */ static getActiveContext(userId, sessionId) {\n        const { getConversationSession, getUserActiveSessions } = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n        if (sessionId) {\n            const session = getConversationSession(userId, sessionId);\n            if (session) {\n                return {\n                    userId: session.userId,\n                    sessionId: session.sessionId,\n                    currentTopic: session.currentTopic,\n                    currentSubject: session.currentSubject,\n                    conversationFlow: session.turns,\n                    contextSummary: this.buildContextSummary(session),\n                    activeIntentions: this.extractActiveIntentions(session.turns.slice(-5)),\n                    pendingQuestions: [],\n                    referenceMemory: this.buildReferenceMemory(session.turns),\n                    lastUpdate: session.lastUpdate\n                };\n            }\n        }\n        // Find any active session for user\n        const activeSessions = getUserActiveSessions(userId);\n        if (activeSessions.length > 0) {\n            const session = activeSessions[0];\n            return {\n                userId: session.userId,\n                sessionId: session.sessionId,\n                currentTopic: session.currentTopic,\n                currentSubject: session.currentSubject,\n                conversationFlow: session.turns,\n                contextSummary: this.buildContextSummary(session),\n                activeIntentions: this.extractActiveIntentions(session.turns.slice(-5)),\n                pendingQuestions: [],\n                referenceMemory: this.buildReferenceMemory(session.turns),\n                lastUpdate: session.lastUpdate\n            };\n        }\n        return null;\n    }\n} // Persistent storage cleanup is handled by temp-storage.ts\n // No need for additional cleanup intervals\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/contextual-conversation-manager.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/conversation-memory.ts":
/*!****************************************!*\
  !*** ./src/lib/conversation-memory.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationMemoryManager: () => (/* binding */ ConversationMemoryManager)\n/* harmony export */ });\n/* harmony import */ var _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./emotion-analyzer */ \"(rsc)/./src/lib/emotion-analyzer.ts\");\n// Sistema de Memoria Conversacional para Sara\n// Permite recordar conversaciones, preferencias y contexto del estudiante\n\nclass ConversationMemoryManager {\n    static{\n        this.memories = new Map();\n    }\n    /**\n   * Obtiene o crea la memoria conversacional para un usuario\n   */ static getMemory(userId, sessionId) {\n        const memoryKey = `${userId}_${sessionId || 'default'}`;\n        if (!this.memories.has(memoryKey)) {\n            this.memories.set(memoryKey, this.createNewMemory(userId, sessionId));\n        }\n        return this.memories.get(memoryKey);\n    }\n    /**\n   * Guarda un nuevo intercambio conversacional\n   */ static saveConversationTurn(userId, userMessage, saraResponse, mode, intent, sessionId) {\n        const memory = this.getMemory(userId, sessionId);\n        const turn = {\n            id: `turn_${Date.now()}_${Math.random().toString(36).substr(2, 8)}`,\n            timestamp: new Date(),\n            userMessage,\n            saraResponse,\n            mode,\n            intent,\n            topics: this.extractTopics(userMessage),\n            emotions: this.detectEmotions(userMessage, {\n                subject: this.extractSubjectFromMessage(userMessage),\n                previousEmotion: memory.emotionalProfile?.currentMood\n            }),\n            context: this.analyzeContext(userMessage, saraResponse)\n        };\n        // Agregar al historial\n        memory.conversationHistory.push(turn);\n        memory.totalTurns++;\n        memory.lastActivity = new Date();\n        // Mantener solo los últimos 50 intercambios para eficiencia\n        if (memory.conversationHistory.length > 50) {\n            memory.conversationHistory = memory.conversationHistory.slice(-50);\n        }\n        // Actualizar perfiles basándose en la nueva conversación\n        this.updatePreferences(memory, turn);\n        this.updateEmotionalProfile(memory, turn);\n        this.updateRecurringTopics(memory, turn);\n        this.updateProgressTracking(memory, turn);\n        return turn;\n    }\n    /**\n   * Genera un resumen contextual para Sara basado en la memoria\n   */ static generateContextualSummary(userId, sessionId) {\n        const memory = this.getMemory(userId, sessionId);\n        if (memory.conversationHistory.length === 0) {\n            return \"Esta es nuestra primera conversación. Estoy aquí para conocerte y ayudarte con tus objetivos académicos.\";\n        }\n        const recentTurns = memory.conversationHistory.slice(-5);\n        const summary = [];\n        // Información sobre sesión actual\n        const daysSinceLastChat = Math.floor((Date.now() - memory.lastActivity.getTime()) / (1000 * 60 * 60 * 24));\n        if (daysSinceLastChat > 7) {\n            summary.push(`Han pasado ${daysSinceLastChat} días desde nuestra última conversación.`);\n        } else if (daysSinceLastChat > 1) {\n            summary.push(`Nos vimos hace ${daysSinceLastChat} días.`);\n        }\n        // Temas recurrentes importantes\n        const importantTopics = memory.recurringTopics.filter((t)=>t.frequency > 2 && !t.resolved).slice(0, 3);\n        if (importantTopics.length > 0) {\n            summary.push(`Hemos estado trabajando en: ${importantTopics.map((t)=>t.topic).join(', ')}.`);\n        }\n        // Estado emocional\n        if (memory.emotionalProfile.motivationLevel < 5) {\n            summary.push(\"He notado que podrías necesitar un poco más de motivación.\");\n        } else if (memory.emotionalProfile.motivationLevel > 8) {\n            summary.push(\"Me alegra ver tu motivación y energía positiva.\");\n        }\n        // Seguimientos pendientes\n        const pendingFollowUps = memory.progressTracking.pendingFollowUps.filter((f)=>f.dueDate <= new Date());\n        if (pendingFollowUps.length > 0) {\n            summary.push(`Tenemos ${pendingFollowUps.length} seguimiento(s) pendiente(s).`);\n        }\n        // Preferencias del estudiante\n        if (memory.preferences.difficultSubjects.length > 0) {\n            summary.push(`Sé que ${memory.preferences.difficultSubjects[0]} te presenta algunos desafíos.`);\n        }\n        return summary.length > 0 ? summary.join(' ') : \"Continuemos donde lo dejamos la última vez.\";\n    }\n    /**\n   * Obtiene sugerencias personalizadas basadas en la memoria\n   */ static getPersonalizedSuggestions(userId, sessionId) {\n        const memory = this.getMemory(userId, sessionId);\n        const suggestions = [];\n        // Basado en temas recurrentes sin resolver\n        const unresolvedTopics = memory.recurringTopics.filter((t)=>!t.resolved);\n        unresolvedTopics.slice(0, 2).forEach((topic)=>{\n            suggestions.push(`Retomar el trabajo en ${topic.topic}`);\n        });\n        // Basado en seguimientos pendientes\n        memory.progressTracking.pendingFollowUps.slice(0, 2).forEach((followUp)=>{\n            suggestions.push(`Revisar progreso: ${followUp.task}`);\n        });\n        // Basado en materias difíciles\n        if (memory.preferences.difficultSubjects.length > 0) {\n            suggestions.push(`Planificar sesión de estudio para ${memory.preferences.difficultSubjects[0]}`);\n        }\n        // Basado en estado emocional\n        if (memory.emotionalProfile.motivationLevel < 5) {\n            suggestions.push(\"Trabajar en motivación y objetivos pequeños\");\n        }\n        // Basado en preferencias de modo\n        if (memory.preferences.preferredMode) {\n            suggestions.push(`Continuar en modo ${memory.preferences.preferredMode}`);\n        }\n        return suggestions.slice(0, 4) // Máximo 4 sugerencias\n        ;\n    }\n    /**\n   * Detecta si el usuario necesita seguimiento en temas específicos\n   */ static needsFollowUp(userId, sessionId) {\n        const memory = this.getMemory(userId, sessionId);\n        // Verificar seguimientos vencidos\n        const overdueFollowUps = memory.progressTracking.pendingFollowUps.filter((f)=>f.dueDate < new Date());\n        // Verificar temas sin resolver por mucho tiempo\n        const staleTops = memory.recurringTopics.filter((t)=>!t.resolved && Date.now() - t.lastMentioned.getTime() > 7 * 24 * 60 * 60 * 1000);\n        // Verificar bajo nivel de motivación\n        const lowMotivation = memory.emotionalProfile.motivationLevel < 4;\n        return overdueFollowUps.length > 0 || staleTops.length > 0 || lowMotivation;\n    }\n    // Métodos auxiliares privados\n    static createNewMemory(userId, sessionId) {\n        return {\n            userId,\n            sessionId: sessionId || 'default',\n            startedAt: new Date(),\n            lastActivity: new Date(),\n            totalTurns: 0,\n            conversationHistory: [],\n            preferences: {\n                preferredMode: 'chatting',\n                favoriteSubjects: [],\n                difficultSubjects: [],\n                studyTimePreference: 'evening',\n                communicationStyle: 'casual'\n            },\n            emotionalProfile: {\n                currentMood: _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.NEUTRAL,\n                motivationLevel: 7,\n                recentEmotions: [],\n                emotionalTrends: {\n                    dominant: _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.NEUTRAL,\n                    frequency: 0,\n                    lastWeek: []\n                },\n                frustrationAreas: [],\n                achievementAreas: [],\n                lastEncouragement: new Date(),\n                emotionalInsights: []\n            },\n            recurringTopics: [],\n            progressTracking: {\n                goalsDiscussed: [],\n                plansMade: [],\n                completedTasks: [],\n                pendingFollowUps: []\n            }\n        };\n    }\n    static extractTopics(message) {\n        const topics = [];\n        const lowerMessage = message.toLowerCase();\n        // Lista de temas académicos comunes\n        const academicTopics = [\n            'matemáticas',\n            'física',\n            'química',\n            'biología',\n            'historia',\n            'literatura',\n            'inglés',\n            'programación',\n            'cálculo',\n            'álgebra',\n            'geometría',\n            'estadística',\n            'examen',\n            'tarea',\n            'proyecto',\n            'presentación',\n            'ensayo',\n            'estudio',\n            'horario',\n            'planificación',\n            'calendario',\n            'tiempo',\n            'organización'\n        ];\n        academicTopics.forEach((topic)=>{\n            if (lowerMessage.includes(topic)) {\n                topics.push(topic);\n            }\n        });\n        return topics;\n    }\n    static extractSubjectFromMessage(message) {\n        const lowerMessage = message.toLowerCase();\n        const subjects = [\n            'matemáticas',\n            'física',\n            'química',\n            'biología',\n            'historia',\n            'literatura',\n            'inglés',\n            'programación'\n        ];\n        return subjects.find((subject)=>lowerMessage.includes(subject));\n    }\n    static detectEmotions(message, context) {\n        return _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionAnalyzer.analyzeEmotions(message, context);\n    }\n    static analyzeContext(userMessage, saraResponse) {\n        const lowerMessage = userMessage.toLowerCase();\n        const context = {};\n        // Detectar materias\n        const subjects = [\n            'matemáticas',\n            'física',\n            'química',\n            'biología',\n            'historia',\n            'literatura',\n            'inglés'\n        ];\n        const detectedSubject = subjects.find((subject)=>lowerMessage.includes(subject));\n        if (detectedSubject) {\n            context.subject = detectedSubject;\n        }\n        // Detectar dificultad\n        if (lowerMessage.includes('fácil') || lowerMessage.includes('simple')) {\n            context.difficulty = 'easy';\n        } else if (lowerMessage.includes('difícil') || lowerMessage.includes('complejo')) {\n            context.difficulty = 'hard';\n        } else {\n            context.difficulty = 'medium';\n        }\n        // Detectar logros\n        if (lowerMessage.includes('logré') || lowerMessage.includes('terminé') || lowerMessage.includes('completé')) {\n            context.achievement = true;\n        }\n        // Detectar necesidad de seguimiento\n        if (lowerMessage.includes('planificar') || lowerMessage.includes('revisar') || lowerMessage.includes('próxima vez')) {\n            context.needsFollowUp = true;\n        }\n        return context;\n    }\n    static updatePreferences(memory, turn) {\n        // Actualizar modo preferido\n        memory.preferences.preferredMode = turn.mode;\n        // Actualizar materias favoritas/difíciles basándose en emociones\n        if (turn.context?.subject) {\n            if (turn.emotions?.detected === 'positive' || turn.emotions?.detected === 'motivated') {\n                if (!memory.preferences.favoriteSubjects.includes(turn.context.subject)) {\n                    memory.preferences.favoriteSubjects.push(turn.context.subject);\n                }\n            } else if (turn.emotions?.detected === 'frustrated' || turn.emotions?.detected === 'negative') {\n                if (!memory.preferences.difficultSubjects.includes(turn.context.subject)) {\n                    memory.preferences.difficultSubjects.push(turn.context.subject);\n                }\n            }\n        }\n    }\n    static updateEmotionalProfile(memory, turn) {\n        if (turn.emotions) {\n            const emotion = turn.emotions.primary;\n            // Actualizar humor actual\n            memory.emotionalProfile.currentMood = emotion;\n            // Agregar a emociones recientes (mantener últimas 5)\n            memory.emotionalProfile.recentEmotions.unshift(emotion);\n            if (memory.emotionalProfile.recentEmotions.length > 5) {\n                memory.emotionalProfile.recentEmotions = memory.emotionalProfile.recentEmotions.slice(0, 5);\n            }\n            // Actualizar tendencias emocionales semanales\n            memory.emotionalProfile.emotionalTrends.lastWeek.unshift(emotion);\n            if (memory.emotionalProfile.emotionalTrends.lastWeek.length > 20) {\n                memory.emotionalProfile.emotionalTrends.lastWeek = memory.emotionalProfile.emotionalTrends.lastWeek.slice(0, 20);\n            }\n            // Calcular emoción dominante\n            const emotionCounts = memory.emotionalProfile.emotionalTrends.lastWeek.reduce((acc, em)=>{\n                acc[em] = (acc[em] || 0) + 1;\n                return acc;\n            }, {});\n            const dominantEmotion = Object.entries(emotionCounts).sort(([, a], [, b])=>b - a)[0]?.[0];\n            if (dominantEmotion) {\n                memory.emotionalProfile.emotionalTrends.dominant = dominantEmotion;\n                memory.emotionalProfile.emotionalTrends.frequency = emotionCounts[dominantEmotion];\n            }\n            // Ajustar nivel de motivación basado en emociones\n            const motivationAdjustment = this.getMotivationAdjustment(emotion, turn.emotions.intensity);\n            memory.emotionalProfile.motivationLevel = Math.max(1, Math.min(10, memory.emotionalProfile.motivationLevel + motivationAdjustment));\n            // Actualizar áreas de frustración/logro\n            if (turn.context?.subject) {\n                if ([\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.FRUSTRATED,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.OVERWHELMED,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.STRESSED\n                ].includes(emotion)) {\n                    if (!memory.emotionalProfile.frustrationAreas.includes(turn.context.subject)) {\n                        memory.emotionalProfile.frustrationAreas.push(turn.context.subject);\n                    }\n                }\n                if ([\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.PROUD,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CONFIDENT,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.EXCITED\n                ].includes(emotion) || turn.context?.achievement) {\n                    if (!memory.emotionalProfile.achievementAreas.includes(turn.context.subject)) {\n                        memory.emotionalProfile.achievementAreas.push(turn.context.subject);\n                    }\n                }\n            }\n            // Generar insights emocionales\n            const insight = this.generateEmotionalInsight(emotion, turn.emotions, turn.context?.subject);\n            if (insight) {\n                memory.emotionalProfile.emotionalInsights.unshift(insight);\n                if (memory.emotionalProfile.emotionalInsights.length > 10) {\n                    memory.emotionalProfile.emotionalInsights = memory.emotionalProfile.emotionalInsights.slice(0, 10);\n                }\n            }\n        }\n    }\n    /**\n   * Calcula el ajuste de motivación basado en la emoción\n   */ static getMotivationAdjustment(emotion, intensity) {\n        const baseAdjustments = {\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.MOTIVATED]: 2,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.EXCITED]: 2,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.PROUD]: 1.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CONFIDENT]: 1.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.HOPEFUL]: 1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.HAPPY]: 1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.GRATEFUL]: 0.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.RELIEVED]: 0.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CURIOUS]: 0.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.NEUTRAL]: 0,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CONFUSED]: -0.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.BORED]: -1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.DISAPPOINTED]: -1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.SAD]: -1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.FRUSTRATED]: -1.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.OVERWHELMED]: -2,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.STRESSED]: -2,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.ANXIOUS]: -1.5,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.ANGRY]: -1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.FEAR]: -1,\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.SURPRISE]: 0\n        };\n        const baseAdjustment = baseAdjustments[emotion] || 0;\n        // Aplicar multiplicador de intensidad\n        const intensityMultiplier = intensity === 'high' ? 1.5 : intensity === 'medium' ? 1.2 : 0.8;\n        return baseAdjustment * intensityMultiplier;\n    }\n    /**\n   * Genera un insight emocional basado en la emoción detectada\n   */ static generateEmotionalInsight(emotion, analysis, subject) {\n        const timestamp = new Date().toLocaleDateString();\n        switch(emotion){\n            case _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.FRUSTRATED:\n                return `${timestamp}: Frustración detectada${subject ? ` en ${subject}` : ''}. Considerar estrategias de apoyo adicional.`;\n            case _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.OVERWHELMED:\n                return `${timestamp}: Estudiante se siente abrumado. Recomendar descansos y división de tareas.`;\n            case _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.MOTIVATED:\n                return `${timestamp}: Alta motivación detectada${subject ? ` hacia ${subject}` : ''}. Momento ideal para objetivos ambiciosos.`;\n            case _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CONFUSED:\n                return `${timestamp}: Confusión identificada${subject ? ` en ${subject}` : ''}. Necesita explicaciones más claras.`;\n            case _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.PROUD:\n                return `${timestamp}: Orgullo por logro${subject ? ` en ${subject}` : ''}. Reforzar autoconfianza.`;\n            case _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.ANXIOUS:\n                return `${timestamp}: Ansiedad detectada. Implementar técnicas de relajación y apoyo.`;\n            default:\n                if (analysis.intensity === 'high') {\n                    return `${timestamp}: Emoción intensa (${emotion}) detectada. Monitorear estado emocional.`;\n                }\n                return null;\n        }\n    }\n    static updateRecurringTopics(memory, turn) {\n        turn.topics.forEach((topic)=>{\n            const existing = memory.recurringTopics.find((rt)=>rt.topic === topic);\n            if (existing) {\n                existing.frequency++;\n                existing.lastMentioned = new Date();\n                // Marcar como resuelto si hay indicadores de logro\n                if (turn.context?.achievement) {\n                    existing.resolved = true;\n                }\n            } else {\n                memory.recurringTopics.push({\n                    topic,\n                    frequency: 1,\n                    lastMentioned: new Date(),\n                    resolved: false\n                });\n            }\n        });\n    }\n    static updateProgressTracking(memory, turn) {\n        // Detectar objetivos/planes mencionados\n        const lowerMessage = turn.userMessage.toLowerCase();\n        if (lowerMessage.includes('objetivo') || lowerMessage.includes('meta')) {\n            memory.progressTracking.goalsDiscussed.push(turn.userMessage);\n        }\n        if (lowerMessage.includes('plan') || lowerMessage.includes('planificar')) {\n            memory.progressTracking.plansMade.push(turn.userMessage);\n        }\n        if (turn.context?.achievement) {\n            memory.progressTracking.completedTasks.push(turn.userMessage);\n        }\n        // Agregar seguimientos si es necesario\n        if (turn.context?.needsFollowUp) {\n            const followUpDate = new Date();\n            followUpDate.setDate(followUpDate.getDate() + 3) // Seguimiento en 3 días\n            ;\n            memory.progressTracking.pendingFollowUps.push({\n                task: turn.userMessage,\n                dueDate: followUpDate,\n                reminder: true\n            });\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/conversation-memory.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/emotion-analyzer.ts":
/*!*************************************!*\
  !*** ./src/lib/emotion-analyzer.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmotionAnalyzer: () => (/* binding */ EmotionAnalyzer),\n/* harmony export */   EmotionType: () => (/* binding */ EmotionType)\n/* harmony export */ });\n// Sistema Avanzado de Análisis Emocional para Sara\n// Detecta emociones complejas en los mensajes de estudiantes para respuestas más empáticas\nvar EmotionType = /*#__PURE__*/ function(EmotionType) {\n    // Emociones Básicas\n    EmotionType[\"HAPPY\"] = \"happy\";\n    EmotionType[\"SAD\"] = \"sad\";\n    EmotionType[\"ANGRY\"] = \"angry\";\n    EmotionType[\"FEAR\"] = \"fear\";\n    EmotionType[\"SURPRISE\"] = \"surprise\";\n    EmotionType[\"NEUTRAL\"] = \"neutral\";\n    // Emociones Académicas Específicas\n    EmotionType[\"FRUSTRATED\"] = \"frustrated\";\n    EmotionType[\"MOTIVATED\"] = \"motivated\";\n    EmotionType[\"CONFUSED\"] = \"confused\";\n    EmotionType[\"CONFIDENT\"] = \"confident\";\n    EmotionType[\"OVERWHELMED\"] = \"overwhelmed\";\n    EmotionType[\"CURIOUS\"] = \"curious\";\n    EmotionType[\"PROUD\"] = \"proud\";\n    EmotionType[\"DISAPPOINTED\"] = \"disappointed\";\n    EmotionType[\"ANXIOUS\"] = \"anxious\";\n    EmotionType[\"EXCITED\"] = \"excited\";\n    EmotionType[\"BORED\"] = \"bored\";\n    EmotionType[\"HOPEFUL\"] = \"hopeful\";\n    EmotionType[\"STRESSED\"] = \"stressed\";\n    EmotionType[\"RELIEVED\"] = \"relieved\";\n    EmotionType[\"GRATEFUL\"] = \"grateful\";\n    return EmotionType;\n}({});\nclass EmotionAnalyzer {\n    static{\n        this.EMOTION_PATTERNS = {\n            [\"frustrated\"]: {\n                keywords: [\n                    'frustrado',\n                    'enojado',\n                    'molesto',\n                    'hartado',\n                    'furioso',\n                    'irritado'\n                ],\n                phrases: [\n                    /no\\s+puedo\\s+(más|hacer|lograr)/i,\n                    /es\\s+(muy\\s+|súper\\s+)?difícil/i,\n                    /me\\s+(frustra|molesta|enoja)/i,\n                    /por\\s+qué\\s+no\\s+(puedo|logro|entiendo)/i,\n                    /esto\\s+(no\\s+sirve|es\\s+imposible)/i,\n                    /ya\\s+(intenté|probé)\\s+todo/i\n                ],\n                context: [\n                    'difícil',\n                    'problema',\n                    'falla',\n                    'error',\n                    'imposible'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.3,\n                    'súper': 1.5,\n                    'demasiado': 1.4,\n                    'completamente': 1.6\n                },\n                confidence_base: 0.85\n            },\n            [\"motivated\"]: {\n                keywords: [\n                    'motivado',\n                    'emocionado',\n                    'entusiasmado',\n                    'inspirado',\n                    'determinado'\n                ],\n                phrases: [\n                    /quiero\\s+(lograr|conseguir|aprender)/i,\n                    /estoy\\s+(listo|preparado|emocionado)/i,\n                    /me\\s+(gusta|encanta|motiva)/i,\n                    /vamos\\s+(a\\s+)?hacerlo/i,\n                    /estoy\\s+decidido/i,\n                    /tengo\\s+ganas\\s+de/i\n                ],\n                context: [\n                    'objetivo',\n                    'meta',\n                    'plan',\n                    'futuro',\n                    'logro'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2,\n                    'súper': 1.4,\n                    'realmente': 1.3\n                },\n                confidence_base: 0.8\n            },\n            [\"confused\"]: {\n                keywords: [\n                    'confundido',\n                    'perdido',\n                    'desorientado',\n                    'enredado'\n                ],\n                phrases: [\n                    /no\\s+(entiendo|comprendo|capto)/i,\n                    /estoy\\s+(confundido|perdido)/i,\n                    /no\\s+sé\\s+(cómo|qué|por\\s+qué)/i,\n                    /me\\s+(confunde|desorienta)/i,\n                    /no\\s+me\\s+queda\\s+claro/i,\n                    /podrías\\s+explicar/i\n                ],\n                context: [\n                    'explicación',\n                    'ayuda',\n                    'clarificar',\n                    'concepto',\n                    'dudas'\n                ],\n                intensity_multipliers: {\n                    'completamente': 1.5,\n                    'totalmente': 1.4,\n                    'muy': 1.2\n                },\n                confidence_base: 0.9\n            },\n            [\"overwhelmed\"]: {\n                keywords: [\n                    'abrumado',\n                    'sobrecargado',\n                    'saturado',\n                    'agobiado'\n                ],\n                phrases: [\n                    /es\\s+demasiado/i,\n                    /no\\s+puedo\\s+con\\s+todo/i,\n                    /me\\s+(abruma|agobia|satura)/i,\n                    /son\\s+muchas\\s+cosas/i,\n                    /no\\s+tengo\\s+tiempo/i,\n                    /me\\s+siento\\s+(perdido|desbordado)/i\n                ],\n                context: [\n                    'tiempo',\n                    'tareas',\n                    'exámenes',\n                    'muchos',\n                    'presión'\n                ],\n                intensity_multipliers: {\n                    'completamente': 1.6,\n                    'totalmente': 1.5,\n                    'muy': 1.3\n                },\n                confidence_base: 0.88\n            },\n            [\"anxious\"]: {\n                keywords: [\n                    'ansioso',\n                    'nervioso',\n                    'preocupado',\n                    'estresado',\n                    'tenso',\n                    'ansiedad'\n                ],\n                phrases: [\n                    /me\\s+(preocupa|da\\s+ansiedad|pone\\s+nervioso)/i,\n                    /tengo\\s+(miedo|temor)\\s+de/i,\n                    /y\\s+si\\s+(no\\s+puedo|fallo|salgo\\s+mal)/i,\n                    /me\\s+da\\s+(estrés|pánico|ansiedad)/i,\n                    /estoy\\s+(nervioso|ansioso)/i,\n                    /no\\s+sé\\s+si\\s+podré/i,\n                    /(mucha|bastante)\\s+ansiedad/i,\n                    /ansiedad\\s+(por|de|al)/i\n                ],\n                context: [\n                    'examen',\n                    'evaluación',\n                    'futuro',\n                    'resultado',\n                    'fallo',\n                    'público',\n                    'hablar'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.3,\n                    'mucha': 1.4,\n                    'súper': 1.5,\n                    'demasiado': 1.4,\n                    'bastante': 1.2\n                },\n                confidence_base: 0.88\n            },\n            [\"proud\"]: {\n                keywords: [\n                    'orgulloso',\n                    'satisfecho',\n                    'contento',\n                    'feliz'\n                ],\n                phrases: [\n                    /lo\\s+(logré|conseguí|hice)/i,\n                    /estoy\\s+(orgulloso|satisfecho|contento)/i,\n                    /me\\s+siento\\s+(bien|genial|increíble)/i,\n                    /pude\\s+hacerlo/i,\n                    /lo\\s+entendí/i,\n                    /funcionó/i,\n                    /logré\\s+(terminar|completar|hacer)/i,\n                    /(terminé|completé)\\s+(el|la|mi)/i,\n                    /pude\\s+(terminar|completar)/i\n                ],\n                context: [\n                    'logro',\n                    'éxito',\n                    'resultado',\n                    'completé',\n                    'terminé',\n                    'examen',\n                    'proyecto',\n                    'tarea'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2,\n                    'súper': 1.4,\n                    'realmente': 1.3,\n                    'finalmente': 1.3\n                },\n                confidence_base: 0.85\n            },\n            [\"disappointed\"]: {\n                keywords: [\n                    'decepcionado',\n                    'triste',\n                    'desilusionado',\n                    'desanimado'\n                ],\n                phrases: [\n                    /no\\s+salió\\s+como\\s+esperaba/i,\n                    /me\\s+(decepciona|entristece|desanima)/i,\n                    /esperaba\\s+(más|mejor)/i,\n                    /no\\s+fue\\s+suficiente/i,\n                    /qué\\s+mal/i,\n                    /no\\s+funcionó/i\n                ],\n                context: [\n                    'resultado',\n                    'calificación',\n                    'expectativa',\n                    'fallo',\n                    'error'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.3,\n                    'realmente': 1.4,\n                    'bastante': 1.2\n                },\n                confidence_base: 0.8\n            },\n            [\"excited\"]: {\n                keywords: [\n                    'emocionado',\n                    'entusiasmado',\n                    'ilusionado',\n                    'alegre'\n                ],\n                phrases: [\n                    /qué\\s+(genial|increíble|fantástico)/i,\n                    /me\\s+(emociona|ilusiona|alegra)/i,\n                    /estoy\\s+(emocionado|entusiasmado)/i,\n                    /no\\s+puedo\\s+esperar/i,\n                    /será\\s+(genial|fantástico)/i,\n                    /me\\s+encanta/i\n                ],\n                context: [\n                    'proyecto',\n                    'nuevo',\n                    'oportunidad',\n                    'futuro',\n                    'experiencia'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2,\n                    'súper': 1.4,\n                    'realmente': 1.3\n                },\n                confidence_base: 0.83\n            },\n            [\"bored\"]: {\n                keywords: [\n                    'aburrido',\n                    'hastiado',\n                    'cansado',\n                    'tedioso'\n                ],\n                phrases: [\n                    /me\\s+(aburre|hastía|cansa)/i,\n                    /es\\s+(aburrido|tedioso|repetitivo)/i,\n                    /no\\s+me\\s+interesa/i,\n                    /qué\\s+(aburrido|tedioso)/i,\n                    /siempre\\s+lo\\s+mismo/i,\n                    /no\\s+es\\s+divertido/i\n                ],\n                context: [\n                    'materia',\n                    'tema',\n                    'repetitivo',\n                    'siempre',\n                    'mismo'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2,\n                    'súper': 1.4,\n                    'demasiado': 1.3\n                },\n                confidence_base: 0.78\n            },\n            [\"hopeful\"]: {\n                keywords: [\n                    'esperanzado',\n                    'optimista',\n                    'confiado',\n                    'positivo'\n                ],\n                phrases: [\n                    /espero\\s+(que|poder)/i,\n                    /tengo\\s+(esperanza|fe|confianza)/i,\n                    /creo\\s+que\\s+(puedo|podré)/i,\n                    /será\\s+posible/i,\n                    /confío\\s+en\\s+que/i,\n                    /estoy\\s+optimista/i\n                ],\n                context: [\n                    'futuro',\n                    'posibilidad',\n                    'mejora',\n                    'cambio',\n                    'oportunidad'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2,\n                    'realmente': 1.3,\n                    'bastante': 1.1\n                },\n                confidence_base: 0.75\n            },\n            [\"stressed\"]: {\n                keywords: [\n                    'estresado',\n                    'presionado',\n                    'agobiado',\n                    'tensionado'\n                ],\n                phrases: [\n                    /me\\s+(estresa|presiona|agobia)/i,\n                    /siento\\s+(presión|tensión|estrés)/i,\n                    /no\\s+doy\\s+abasto/i,\n                    /es\\s+mucha\\s+presión/i,\n                    /me\\s+siento\\s+presionado/i,\n                    /no\\s+puedo\\s+relajarme/i\n                ],\n                context: [\n                    'tiempo',\n                    'presión',\n                    'deadlines',\n                    'exámenes',\n                    'múltiple'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.3,\n                    'demasiado': 1.4,\n                    'extremadamente': 1.6\n                },\n                confidence_base: 0.86\n            },\n            [\"grateful\"]: {\n                keywords: [\n                    'agradecido',\n                    'gracias',\n                    'reconocido',\n                    'apreciado'\n                ],\n                phrases: [\n                    /muchas\\s+gracias/i,\n                    /(te\\s+)?agradezco/i,\n                    /me\\s+(ayudas|ayudaste)\\s+mucho/i,\n                    /eres\\s+(genial|increíble|muy\\s+útil)/i,\n                    /gracias\\s+por/i,\n                    /lo\\s+aprecio/i\n                ],\n                context: [\n                    'ayuda',\n                    'apoyo',\n                    'explicación',\n                    'tiempo',\n                    'paciencia'\n                ],\n                intensity_multipliers: {\n                    'muchísimas': 1.4,\n                    'realmente': 1.3,\n                    'muy': 1.2\n                },\n                confidence_base: 0.9\n            },\n            // Emociones básicas con patrones simples\n            [\"happy\"]: {\n                keywords: [\n                    'feliz',\n                    'alegre',\n                    'contento',\n                    'bien'\n                ],\n                phrases: [\n                    /me\\s+siento\\s+(feliz|alegre|bien)/i,\n                    /estoy\\s+(feliz|contento)/i\n                ],\n                context: [\n                    'logro',\n                    'éxito',\n                    'bueno'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2\n                },\n                confidence_base: 0.7\n            },\n            [\"sad\"]: {\n                keywords: [\n                    'triste',\n                    'melancólico',\n                    'deprimido'\n                ],\n                phrases: [\n                    /me\\s+siento\\s+triste/i,\n                    /estoy\\s+triste/i\n                ],\n                context: [\n                    'mal',\n                    'fallo',\n                    'pérdida'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.3\n                },\n                confidence_base: 0.75\n            },\n            [\"angry\"]: {\n                keywords: [\n                    'enojado',\n                    'furioso',\n                    'molesto'\n                ],\n                phrases: [\n                    /me\\s+enoja/i,\n                    /estoy\\s+furioso/i\n                ],\n                context: [\n                    'problema',\n                    'injusto',\n                    'mal'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.4\n                },\n                confidence_base: 0.8\n            },\n            [\"fear\"]: {\n                keywords: [\n                    'miedo',\n                    'temor',\n                    'asustado'\n                ],\n                phrases: [\n                    /tengo\\s+miedo/i,\n                    /me\\s+asusta/i\n                ],\n                context: [\n                    'peligro',\n                    'amenaza',\n                    'futuro'\n                ],\n                intensity_multipliers: {\n                    'mucho': 1.3\n                },\n                confidence_base: 0.8\n            },\n            [\"surprise\"]: {\n                keywords: [\n                    'sorprendido',\n                    'asombrado',\n                    'impresionado'\n                ],\n                phrases: [\n                    /qué\\s+sorpresa/i,\n                    /me\\s+sorprende/i\n                ],\n                context: [\n                    'inesperado',\n                    'nuevo',\n                    'diferente'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2\n                },\n                confidence_base: 0.7\n            },\n            [\"confident\"]: {\n                keywords: [\n                    'seguro',\n                    'confiado',\n                    'capaz'\n                ],\n                phrases: [\n                    /estoy\\s+seguro/i,\n                    /puedo\\s+hacerlo/i\n                ],\n                context: [\n                    'capacidad',\n                    'habilidad',\n                    'logro'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2\n                },\n                confidence_base: 0.8\n            },\n            [\"curious\"]: {\n                keywords: [\n                    'curioso',\n                    'interesado',\n                    'intrigado'\n                ],\n                phrases: [\n                    /me\\s+da\\s+curiosidad/i,\n                    /quiero\\s+saber/i\n                ],\n                context: [\n                    'pregunta',\n                    'explorar',\n                    'descubrir'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2\n                },\n                confidence_base: 0.75\n            },\n            [\"relieved\"]: {\n                keywords: [\n                    'aliviado',\n                    'tranquilo',\n                    'relajado'\n                ],\n                phrases: [\n                    /qué\\s+alivio/i,\n                    /me\\s+tranquiliza/i\n                ],\n                context: [\n                    'problema resuelto',\n                    'éxito',\n                    'terminado'\n                ],\n                intensity_multipliers: {\n                    'muy': 1.2\n                },\n                confidence_base: 0.8\n            },\n            [\"neutral\"]: {\n                keywords: [\n                    'normal',\n                    'regular',\n                    'común'\n                ],\n                phrases: [\n                    /está\\s+bien/i,\n                    /normal/i\n                ],\n                context: [],\n                intensity_multipliers: {},\n                confidence_base: 0.5\n            }\n        };\n    }\n    /**\n   * Analiza las emociones en un mensaje de texto\n   */ static analyzeEmotions(message, context) {\n        const lowerMessage = message.toLowerCase();\n        const emotionScores = [];\n        // Analizar cada patrón emocional\n        for (const [emotion, pattern] of Object.entries(this.EMOTION_PATTERNS)){\n            const score = this.calculateEmotionScore(lowerMessage, pattern, message);\n            if (score > 0.3) {\n                emotionScores.push({\n                    emotion: emotion,\n                    score,\n                    indicators: this.getMatchedIndicators(lowerMessage, pattern, message)\n                });\n            }\n        }\n        // Ordenar por puntuación\n        emotionScores.sort((a, b)=>b.score - a.score);\n        // Determinar emoción principal y secundaria\n        const primary = emotionScores[0]?.emotion || \"neutral\";\n        const secondary = emotionScores.length > 1 && emotionScores[1].score > 0.5 ? emotionScores[1].emotion : undefined;\n        const confidence = emotionScores[0]?.score || 0.5;\n        const indicators = emotionScores[0]?.indicators || [];\n        return {\n            primary,\n            secondary,\n            confidence: Math.min(confidence, 0.95),\n            intensity: this.calculateIntensity(lowerMessage, confidence),\n            indicators,\n            context: this.analyzeEmotionalContext(lowerMessage, context),\n            suggestedResponse: this.getSuggestedResponseType(primary, confidence)\n        };\n    }\n    /**\n   * Calcula la puntuación de una emoción específica\n   */ static calculateEmotionScore(lowerMessage, pattern, originalMessage) {\n        let score = 0;\n        let matches = 0;\n        // Buscar palabras clave\n        for (const keyword of pattern.keywords){\n            if (lowerMessage.includes(keyword)) {\n                score += 0.3;\n                matches++;\n            }\n        }\n        // Buscar frases específicas (mayor peso)\n        for (const phrase of pattern.phrases){\n            if (phrase.test(originalMessage)) {\n                score += 0.5;\n                matches++;\n            }\n        }\n        // Buscar contexto de apoyo\n        for (const contextWord of pattern.context){\n            if (lowerMessage.includes(contextWord)) {\n                score += 0.1;\n            }\n        }\n        // Aplicar multiplicadores de intensidad\n        for (const [intensifier, multiplier] of Object.entries(pattern.intensity_multipliers)){\n            if (lowerMessage.includes(intensifier)) {\n                score *= multiplier;\n                break;\n            }\n        }\n        // Ajustar por confianza base del patrón\n        score *= pattern.confidence_base;\n        // Bonificación por múltiples coincidencias\n        if (matches > 1) {\n            score *= 1.2;\n        }\n        return Math.min(score, 1.0) // Cap en 1.0\n        ;\n    }\n    /**\n   * Obtiene los indicadores que coincidieron\n   */ static getMatchedIndicators(lowerMessage, pattern, originalMessage) {\n        const indicators = [];\n        // Palabras clave encontradas\n        pattern.keywords.forEach((keyword)=>{\n            if (lowerMessage.includes(keyword)) {\n                indicators.push(`keyword: ${keyword}`);\n            }\n        });\n        // Frases encontradas\n        pattern.phrases.forEach((phrase, index)=>{\n            if (phrase.test(originalMessage)) {\n                indicators.push(`phrase_pattern_${index}`);\n            }\n        });\n        return indicators;\n    }\n    /**\n   * Calcula la intensidad emocional\n   */ static calculateIntensity(message, confidence) {\n        const intensifiers = [\n            'muy',\n            'súper',\n            'extremadamente',\n            'completamente',\n            'totalmente',\n            'demasiado'\n        ];\n        const hasIntensifier = intensifiers.some((word)=>message.includes(word));\n        if (confidence > 0.8 || hasIntensifier) return 'high';\n        if (confidence > 0.6) return 'medium';\n        return 'low';\n    }\n    /**\n   * Analiza el contexto emocional\n   */ static analyzeEmotionalContext(message, providedContext) {\n        const context = {};\n        // Detectar si es académico\n        const academicKeywords = [\n            'examen',\n            'tarea',\n            'estudio',\n            'clase',\n            'profesor',\n            'materia',\n            'universidad',\n            'colegio'\n        ];\n        context.academic = academicKeywords.some((word)=>message.includes(word));\n        // Detectar si es personal\n        const personalKeywords = [\n            'familia',\n            'amigos',\n            'casa',\n            'personal',\n            'vida',\n            'sentimientos'\n        ];\n        context.personal = personalKeywords.some((word)=>message.includes(word));\n        // Detectar temporalidad\n        if (/ayer|antes|pasado|era|fue/.test(message)) context.temporal = 'past';\n        else if (/mañana|próximo|futuro|después|seré/.test(message)) context.temporal = 'future';\n        else context.temporal = 'present';\n        // Usar contexto proporcionado\n        if (providedContext?.subject) {\n            context.subject = providedContext.subject;\n        }\n        return context;\n    }\n    /**\n   * Sugiere el tipo de respuesta más apropiado\n   */ static getSuggestedResponseType(emotion, confidence) {\n        const responseMap = {\n            [\"frustrated\"]: 'supportive',\n            [\"overwhelmed\"]: 'supportive',\n            [\"anxious\"]: 'empathetic',\n            [\"stressed\"]: 'solution_focused',\n            [\"confused\"]: 'professional',\n            [\"disappointed\"]: 'empathetic',\n            [\"sad\"]: 'empathetic',\n            [\"angry\"]: 'supportive',\n            [\"fear\"]: 'supportive',\n            [\"motivated\"]: 'encouraging',\n            [\"excited\"]: 'encouraging',\n            [\"proud\"]: 'encouraging',\n            [\"confident\"]: 'motivational',\n            [\"hopeful\"]: 'motivational',\n            [\"curious\"]: 'professional',\n            [\"grateful\"]: 'encouraging',\n            [\"relieved\"]: 'encouraging',\n            [\"bored\"]: 'motivational',\n            [\"happy\"]: 'encouraging',\n            [\"surprise\"]: 'professional',\n            [\"neutral\"]: 'professional'\n        };\n        return responseMap[emotion] || 'professional';\n    }\n    /**\n   * Genera un resumen textual del análisis emocional\n   */ static generateEmotionSummary(analysis) {\n        const emotionNames = {\n            [\"frustrated\"]: 'frustrado',\n            [\"motivated\"]: 'motivado',\n            [\"confused\"]: 'confundido',\n            [\"confident\"]: 'confiado',\n            [\"overwhelmed\"]: 'abrumado',\n            [\"curious\"]: 'curioso',\n            [\"proud\"]: 'orgulloso',\n            [\"disappointed\"]: 'decepcionado',\n            [\"anxious\"]: 'ansioso',\n            [\"excited\"]: 'emocionado',\n            [\"bored\"]: 'aburrido',\n            [\"hopeful\"]: 'esperanzado',\n            [\"stressed\"]: 'estresado',\n            [\"relieved\"]: 'aliviado',\n            [\"grateful\"]: 'agradecido',\n            [\"happy\"]: 'feliz',\n            [\"sad\"]: 'triste',\n            [\"angry\"]: 'enojado',\n            [\"fear\"]: 'temeroso',\n            [\"surprise\"]: 'sorprendido',\n            [\"neutral\"]: 'neutral'\n        };\n        let summary = `El estudiante se siente ${emotionNames[analysis.primary]} (confianza: ${(analysis.confidence * 100).toFixed(0)}%, intensidad: ${analysis.intensity})`;\n        if (analysis.secondary) {\n            summary += ` con matices de ${emotionNames[analysis.secondary]}`;\n        }\n        if (analysis.context.subject) {\n            summary += ` en relación a ${analysis.context.subject}`;\n        }\n        return summary;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/emotion-analyzer.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/hybrid-storage.ts":
/*!***********************************!*\
  !*** ./src/lib/hybrid-storage.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canSubmitThisWeek: () => (/* binding */ canSubmitThisWeek),\n/* harmony export */   createProgressReport: () => (/* binding */ createProgressReport),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   findProgressReportByUserAndWeek: () => (/* binding */ findProgressReportByUserAndWeek),\n/* harmony export */   findProgressReportsByUser: () => (/* binding */ findProgressReportsByUser),\n/* harmony export */   findUserByEmail: () => (/* binding */ findUserByEmail),\n/* harmony export */   findUserById: () => (/* binding */ findUserById),\n/* harmony export */   findUsersByRole: () => (/* binding */ findUsersByRole),\n/* harmony export */   generateStudentId: () => (/* binding */ generateStudentId),\n/* harmony export */   getAllProgressReports: () => (/* binding */ getAllProgressReports),\n/* harmony export */   getAllUsers: () => (/* binding */ getAllUsers),\n/* harmony export */   getCurrentWeekEnd: () => (/* binding */ getCurrentWeekEnd),\n/* harmony export */   getCurrentWeekStart: () => (/* binding */ getCurrentWeekStart),\n/* harmony export */   getMonthWeeks: () => (/* binding */ getMonthWeeks),\n/* harmony export */   initializeStorage: () => (/* binding */ initializeStorage),\n/* harmony export */   validateStudentId: () => (/* binding */ validateStudentId)\n/* harmony export */ });\n/* harmony import */ var _temp_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./temp-storage */ \"(rsc)/./src/lib/temp-storage.ts\");\n// Hybrid storage system that can work with database or fallback to temp-storage\n\n// For now, use temp-storage exclusively to ensure stability\nconst useDatabase = false;\nconsole.log('🔄 Using temp-storage system for reliability');\n// Initialize the storage system\nasync function initializeStorage() {\n    console.log('✅ Temp-storage system initialized');\n}\n// User management functions with fallback\nasync function createUser(userData) {\n    const hashedPassword = (__webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/umd/index.js\").hashSync)(userData.password, 12);\n    const user = {\n        id: Date.now().toString(),\n        ...userData,\n        password: hashedPassword,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        status: 'ACTIVE'\n    };\n    _temp_storage__WEBPACK_IMPORTED_MODULE_0__.addUser(user);\n    return user;\n}\nasync function findUserByEmail(email) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findUserByEmail(email);\n}\nasync function getAllUsers() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getAllUsers();\n}\nasync function findUsersByRole(role) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findUsersByRole(role);\n}\nasync function findUserById(id) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findUserById(id);\n}\nasync function generateStudentId() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.generateStudentId();\n}\n// Progress reports functions with fallback\nasync function createProgressReport(data) {\n    const report = {\n        id: Date.now().toString(),\n        userId: data.userId,\n        weekStart: data.weekStart,\n        weekEnd: data.weekEnd,\n        submittedAt: new Date(),\n        responses: data.responses\n    };\n    _temp_storage__WEBPACK_IMPORTED_MODULE_0__.addWeeklyReport(report);\n    return report;\n}\nasync function findProgressReportsByUser(userId) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findWeeklyReportsByUser(userId);\n}\nasync function getAllProgressReports() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getAllWeeklyReports();\n}\nasync function findProgressReportByUserAndWeek(userId, weekStart) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.findWeeklyReportByUserAndWeek(userId, weekStart);\n}\nasync function canSubmitThisWeek(userId) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.canSubmitThisWeek(userId);\n}\n// Utility functions (same for both)\nfunction getCurrentWeekStart() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getCurrentWeekStart();\n}\nfunction getCurrentWeekEnd() {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getCurrentWeekEnd();\n}\nfunction getMonthWeeks(year, month) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.getMonthWeeks(year, month);\n}\nfunction validateStudentId(studentId) {\n    return _temp_storage__WEBPACK_IMPORTED_MODULE_0__.validateStudentId(studentId);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2h5YnJpZC1zdG9yYWdlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0ZBQWdGO0FBQ25DO0FBRTdDLDREQUE0RDtBQUM1RCxNQUFNQyxjQUFjO0FBRXBCQyxRQUFRQyxHQUFHLENBQUM7QUFFWixnQ0FBZ0M7QUFDekIsZUFBZUM7SUFDcEJGLFFBQVFDLEdBQUcsQ0FBQztBQUNkO0FBRUEsMENBQTBDO0FBQ25DLGVBQWVFLFdBQVdDLFFBQWE7SUFDNUMsTUFBTUMsaUJBQWlCQyw0RkFBNEIsQ0FBQ0YsU0FBU0ksUUFBUSxFQUFFO0lBQ3ZFLE1BQU1DLE9BQU87UUFDWEMsSUFBSUMsS0FBS0MsR0FBRyxHQUFHQyxRQUFRO1FBQ3ZCLEdBQUdULFFBQVE7UUFDWEksVUFBVUg7UUFDVlMsV0FBVyxJQUFJSDtRQUNmSSxXQUFXLElBQUlKO1FBQ2ZLLFFBQVE7SUFDVjtJQUNBbEIsa0RBQW1CLENBQUNXO0lBQ3BCLE9BQU9BO0FBQ1Q7QUFFTyxlQUFlUyxnQkFBZ0JDLEtBQWE7SUFDakQsT0FBT3JCLDBEQUEyQixDQUFDcUI7QUFDckM7QUFFTyxlQUFlQztJQUNwQixPQUFPdEIsc0RBQXVCO0FBQ2hDO0FBRU8sZUFBZXVCLGdCQUFnQkMsSUFBUztJQUM3QyxPQUFPeEIsMERBQTJCLENBQUN3QjtBQUNyQztBQUVPLGVBQWVDLGFBQWFiLEVBQVU7SUFDM0MsT0FBT1osdURBQXdCLENBQUNZO0FBQ2xDO0FBRU8sZUFBZWM7SUFDcEIsT0FBTzFCLDREQUE2QjtBQUN0QztBQUVBLDJDQUEyQztBQUNwQyxlQUFlMkIscUJBQXFCQyxJQUFTO0lBQ2xELE1BQU1DLFNBQVM7UUFDYmpCLElBQUlDLEtBQUtDLEdBQUcsR0FBR0MsUUFBUTtRQUN2QmUsUUFBUUYsS0FBS0UsTUFBTTtRQUNuQkMsV0FBV0gsS0FBS0csU0FBUztRQUN6QkMsU0FBU0osS0FBS0ksT0FBTztRQUNyQkMsYUFBYSxJQUFJcEI7UUFDakJxQixXQUFXTixLQUFLTSxTQUFTO0lBQzNCO0lBQ0FsQywwREFBMkIsQ0FBQzZCO0lBQzVCLE9BQU9BO0FBQ1Q7QUFFTyxlQUFlTywwQkFBMEJOLE1BQWM7SUFDNUQsT0FBTzlCLGtFQUFtQyxDQUFDOEI7QUFDN0M7QUFFTyxlQUFlUTtJQUNwQixPQUFPdEMsOERBQStCO0FBQ3hDO0FBRU8sZUFBZXdDLGdDQUFnQ1YsTUFBYyxFQUFFQyxTQUFlO0lBQ25GLE9BQU8vQix3RUFBeUMsQ0FBQzhCLFFBQVFDO0FBQzNEO0FBRU8sZUFBZVcsa0JBQWtCWixNQUFjO0lBQ3BELE9BQU85Qiw0REFBNkIsQ0FBQzhCO0FBQ3ZDO0FBRUEsb0NBQW9DO0FBQzdCLFNBQVNhO0lBQ2QsT0FBTzNDLDhEQUErQjtBQUN4QztBQUVPLFNBQVM0QztJQUNkLE9BQU81Qyw0REFBNkI7QUFDdEM7QUFFTyxTQUFTNkMsY0FBY0MsSUFBWSxFQUFFQyxLQUFhO0lBQ3ZELE9BQU8vQyx3REFBeUIsQ0FBQzhDLE1BQU1DO0FBQ3pDO0FBRU8sU0FBU0Msa0JBQWtCQyxTQUFpQjtJQUNqRCxPQUFPakQsNERBQTZCLENBQUNpRDtBQUN2QyIsInNvdXJjZXMiOlsiL1VzZXJzL3JvZHJpZ29kaWJlcm5hcmRvMzNnbWFpbC5jb20vRG9jdW1lbnRzL0FwcCBEZXZlbG9wbWVudCBQcm95ZWN0cy9JbnRlbGxlZ28gUGxhdGZvcm0vc3JjL2xpYi9oeWJyaWQtc3RvcmFnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBIeWJyaWQgc3RvcmFnZSBzeXN0ZW0gdGhhdCBjYW4gd29yayB3aXRoIGRhdGFiYXNlIG9yIGZhbGxiYWNrIHRvIHRlbXAtc3RvcmFnZVxuaW1wb3J0ICogYXMgdGVtcFN0b3JhZ2UgZnJvbSAnLi90ZW1wLXN0b3JhZ2UnXG5cbi8vIEZvciBub3csIHVzZSB0ZW1wLXN0b3JhZ2UgZXhjbHVzaXZlbHkgdG8gZW5zdXJlIHN0YWJpbGl0eVxuY29uc3QgdXNlRGF0YWJhc2UgPSBmYWxzZVxuXG5jb25zb2xlLmxvZygn8J+UhCBVc2luZyB0ZW1wLXN0b3JhZ2Ugc3lzdGVtIGZvciByZWxpYWJpbGl0eScpXG5cbi8vIEluaXRpYWxpemUgdGhlIHN0b3JhZ2Ugc3lzdGVtXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZVN0b3JhZ2UoKSB7XG4gIGNvbnNvbGUubG9nKCfinIUgVGVtcC1zdG9yYWdlIHN5c3RlbSBpbml0aWFsaXplZCcpXG59XG5cbi8vIFVzZXIgbWFuYWdlbWVudCBmdW5jdGlvbnMgd2l0aCBmYWxsYmFja1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVVzZXIodXNlckRhdGE6IGFueSkge1xuICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IHJlcXVpcmUoJ2JjcnlwdGpzJykuaGFzaFN5bmModXNlckRhdGEucGFzc3dvcmQsIDEyKVxuICBjb25zdCB1c2VyID0ge1xuICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgLi4udXNlckRhdGEsXG4gICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgc3RhdHVzOiAnQUNUSVZFJyBhcyBjb25zdCxcbiAgfVxuICB0ZW1wU3RvcmFnZS5hZGRVc2VyKHVzZXIpXG4gIHJldHVybiB1c2VyXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kVXNlckJ5RW1haWwoZW1haWw6IHN0cmluZykge1xuICByZXR1cm4gdGVtcFN0b3JhZ2UuZmluZFVzZXJCeUVtYWlsKGVtYWlsKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsVXNlcnMoKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5nZXRBbGxVc2VycygpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kVXNlcnNCeVJvbGUocm9sZTogYW55KSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5maW5kVXNlcnNCeVJvbGUocm9sZSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRVc2VyQnlJZChpZDogc3RyaW5nKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5maW5kVXNlckJ5SWQoaWQpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVN0dWRlbnRJZCgpIHtcbiAgcmV0dXJuIHRlbXBTdG9yYWdlLmdlbmVyYXRlU3R1ZGVudElkKClcbn1cblxuLy8gUHJvZ3Jlc3MgcmVwb3J0cyBmdW5jdGlvbnMgd2l0aCBmYWxsYmFja1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVByb2dyZXNzUmVwb3J0KGRhdGE6IGFueSkge1xuICBjb25zdCByZXBvcnQgPSB7XG4gICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICB1c2VySWQ6IGRhdGEudXNlcklkLFxuICAgIHdlZWtTdGFydDogZGF0YS53ZWVrU3RhcnQsXG4gICAgd2Vla0VuZDogZGF0YS53ZWVrRW5kLFxuICAgIHN1Ym1pdHRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgIHJlc3BvbnNlczogZGF0YS5yZXNwb25zZXNcbiAgfVxuICB0ZW1wU3RvcmFnZS5hZGRXZWVrbHlSZXBvcnQocmVwb3J0KVxuICByZXR1cm4gcmVwb3J0XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kUHJvZ3Jlc3NSZXBvcnRzQnlVc2VyKHVzZXJJZDogc3RyaW5nKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5maW5kV2Vla2x5UmVwb3J0c0J5VXNlcih1c2VySWQpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxQcm9ncmVzc1JlcG9ydHMoKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5nZXRBbGxXZWVrbHlSZXBvcnRzKClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRQcm9ncmVzc1JlcG9ydEJ5VXNlckFuZFdlZWsodXNlcklkOiBzdHJpbmcsIHdlZWtTdGFydDogRGF0ZSkge1xuICByZXR1cm4gdGVtcFN0b3JhZ2UuZmluZFdlZWtseVJlcG9ydEJ5VXNlckFuZFdlZWsodXNlcklkLCB3ZWVrU3RhcnQpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjYW5TdWJtaXRUaGlzV2Vlayh1c2VySWQ6IHN0cmluZykge1xuICByZXR1cm4gdGVtcFN0b3JhZ2UuY2FuU3VibWl0VGhpc1dlZWsodXNlcklkKVxufVxuXG4vLyBVdGlsaXR5IGZ1bmN0aW9ucyAoc2FtZSBmb3IgYm90aClcbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50V2Vla1N0YXJ0KCkge1xuICByZXR1cm4gdGVtcFN0b3JhZ2UuZ2V0Q3VycmVudFdlZWtTdGFydCgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50V2Vla0VuZCgpIHtcbiAgcmV0dXJuIHRlbXBTdG9yYWdlLmdldEN1cnJlbnRXZWVrRW5kKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vbnRoV2Vla3MoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyKSB7XG4gIHJldHVybiB0ZW1wU3RvcmFnZS5nZXRNb250aFdlZWtzKHllYXIsIG1vbnRoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTdHVkZW50SWQoc3R1ZGVudElkOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHRlbXBTdG9yYWdlLnZhbGlkYXRlU3R1ZGVudElkKHN0dWRlbnRJZClcbn0iXSwibmFtZXMiOlsidGVtcFN0b3JhZ2UiLCJ1c2VEYXRhYmFzZSIsImNvbnNvbGUiLCJsb2ciLCJpbml0aWFsaXplU3RvcmFnZSIsImNyZWF0ZVVzZXIiLCJ1c2VyRGF0YSIsImhhc2hlZFBhc3N3b3JkIiwicmVxdWlyZSIsImhhc2hTeW5jIiwicGFzc3dvcmQiLCJ1c2VyIiwiaWQiLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJzdGF0dXMiLCJhZGRVc2VyIiwiZmluZFVzZXJCeUVtYWlsIiwiZW1haWwiLCJnZXRBbGxVc2VycyIsImZpbmRVc2Vyc0J5Um9sZSIsInJvbGUiLCJmaW5kVXNlckJ5SWQiLCJnZW5lcmF0ZVN0dWRlbnRJZCIsImNyZWF0ZVByb2dyZXNzUmVwb3J0IiwiZGF0YSIsInJlcG9ydCIsInVzZXJJZCIsIndlZWtTdGFydCIsIndlZWtFbmQiLCJzdWJtaXR0ZWRBdCIsInJlc3BvbnNlcyIsImFkZFdlZWtseVJlcG9ydCIsImZpbmRQcm9ncmVzc1JlcG9ydHNCeVVzZXIiLCJmaW5kV2Vla2x5UmVwb3J0c0J5VXNlciIsImdldEFsbFByb2dyZXNzUmVwb3J0cyIsImdldEFsbFdlZWtseVJlcG9ydHMiLCJmaW5kUHJvZ3Jlc3NSZXBvcnRCeVVzZXJBbmRXZWVrIiwiZmluZFdlZWtseVJlcG9ydEJ5VXNlckFuZFdlZWsiLCJjYW5TdWJtaXRUaGlzV2VlayIsImdldEN1cnJlbnRXZWVrU3RhcnQiLCJnZXRDdXJyZW50V2Vla0VuZCIsImdldE1vbnRoV2Vla3MiLCJ5ZWFyIiwibW9udGgiLCJ2YWxpZGF0ZVN0dWRlbnRJZCIsInN0dWRlbnRJZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/hybrid-storage.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/mode-transition-manager.ts":
/*!********************************************!*\
  !*** ./src/lib/mode-transition-manager.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModeTransitionManager: () => (/* binding */ ModeTransitionManager)\n/* harmony export */ });\n/* harmony import */ var _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./advanced-intent-engine */ \"(rsc)/./src/lib/advanced-intent-engine.ts\");\n/* harmony import */ var _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./emotion-analyzer */ \"(rsc)/./src/lib/emotion-analyzer.ts\");\n/* harmony import */ var _conversation_memory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./conversation-memory */ \"(rsc)/./src/lib/conversation-memory.ts\");\n// Sistema de Gestión de Transiciones entre Modos Conversacionales\n// Optimiza el cambio fluido entre modos según el contexto y necesidades del estudiante\n\n\n\nclass ModeTransitionManager {\n    static{\n        // Patrones que indican necesidad de cambio de modo\n        this.MODE_TRIGGERS = {\n            [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING]: {\n                patterns: [\n                    /necesito\\s+(ayuda|explicación|que\\s+me\\s+expliques)/i,\n                    /no\\s+(entiendo|comprendo|sé\\s+cómo)/i,\n                    /podrías\\s+(explicar|enseñar|mostrar)/i,\n                    /cómo\\s+(se\\s+hace|funciona|resuelvo)/i,\n                    /ejercicio|problema|tarea|concepto/i,\n                    /paso\\s+a\\s+paso/i\n                ],\n                emotions: [\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.CONFUSED,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.CURIOUS,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.FRUSTRATED\n                ],\n                transitionMessage: \"Perfecto, cambiemos al modo tutoría. Voy a explicarte esto paso a paso para que lo entiendas completamente.\"\n            },\n            [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING]: {\n                patterns: [\n                    /necesito\\s+(planificar|organizar|estructurar)/i,\n                    /cómo\\s+organizo\\s+mi\\s+(tiempo|estudio|horario)/i,\n                    /plan\\s+de\\s+estudio/i,\n                    /cronograma|calendario|agenda/i,\n                    /estrategia\\s+de\\s+estudio/i,\n                    /objetivos|metas|propósitos/i,\n                    /deadlines?|fechas?\\s+límite/i\n                ],\n                emotions: [\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.OVERWHELMED,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.MOTIVATED,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.ANXIOUS\n                ],\n                transitionMessage: \"Excelente idea planificar. Vamos a crear una estrategia estructurada que te ayude a alcanzar tus objetivos de manera eficiente.\"\n            },\n            [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING]: {\n                patterns: [\n                    /mis\\s+(materiales|archivos|apuntes|recursos)/i,\n                    /dónde\\s+(guardo|organizo|encuentro)/i,\n                    /gestionar\\s+(documentos|tareas|información)/i,\n                    /sistema\\s+de\\s+organización/i,\n                    /orden|estructura|clasificar/i,\n                    /productividad|eficiencia/i\n                ],\n                emotions: [\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.OVERWHELMED,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.CONFUSED,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.MOTIVATED\n                ],\n                transitionMessage: \"Perfecto, organicemos todo de manera sistemática. Un buen sistema de organización es clave para el éxito académico.\"\n            },\n            [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING]: {\n                patterns: [\n                    /mi\\s+(progreso|rendimiento|avance)/i,\n                    /cómo\\s+(voy|estoy\\s+haciendo|me\\s+va)/i,\n                    /analizar\\s+(resultados|calificaciones|notas)/i,\n                    /feedback|retroalimentación/i,\n                    /qué\\s+(puedo\\s+mejorar|necesito\\s+cambiar)/i,\n                    /evaluación|reflexión/i,\n                    /fortalezas\\s+y\\s+debilidades/i\n                ],\n                emotions: [\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.DISAPPOINTED,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.PROUD,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.CURIOUS,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.MOTIVATED\n                ],\n                transitionMessage: \"Muy bien, analicemos tu progreso juntos. La reflexión sobre tu aprendizaje es fundamental para mejorar continuamente.\"\n            },\n            [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING]: {\n                patterns: [\n                    /cómo\\s+(estás|te\\s+va|andas)/i,\n                    /hola|hi|buenos\\s+días|buenas\\s+tardes/i,\n                    /quería\\s+platicar/i,\n                    /me\\s+siento/i,\n                    /solo\\s+quería\\s+decir/i,\n                    /gracias\\s+por/i,\n                    /charlemos|conversemos/i\n                ],\n                emotions: [\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.HAPPY,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.GRATEFUL,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.SAD,\n                    _emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.EXCITED\n                ],\n                transitionMessage: \"Me da mucho gusto conversar contigo. Estoy aquí para escucharte y apoyarte en lo que necesites.\"\n            }\n        };\n    }\n    static{\n        // Reglas de transición específicas entre modos\n        this.TRANSITION_RULES = {\n            // Desde CHATTING hacia otros modos\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING}`]: {\n                confidence: 0.8,\n                reason: \"El estudiante necesita ayuda académica específica\",\n                suggestedDuration: 25\n            },\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING}`]: {\n                confidence: 0.85,\n                reason: \"El estudiante quiere organizar su tiempo de estudio\",\n                suggestedDuration: 15\n            },\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING}`]: {\n                confidence: 0.8,\n                reason: \"El estudiante necesita organizar materiales o recursos\",\n                suggestedDuration: 20\n            },\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING}`]: {\n                confidence: 0.9,\n                reason: \"El estudiante quiere analizar su progreso académico\",\n                suggestedDuration: 15\n            },\n            // Desde TUTORING hacia otros modos\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING}`]: {\n                confidence: 0.75,\n                reason: \"Después de aprender, el estudiante quiere planificar práctica adicional\",\n                suggestedDuration: 10\n            },\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING}`]: {\n                confidence: 0.7,\n                reason: \"El estudiante necesita organizar el material aprendido\",\n                suggestedDuration: 10\n            },\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING}`]: {\n                confidence: 0.8,\n                reason: \"Es momento de evaluar la comprensión del tema\",\n                suggestedDuration: 10\n            },\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING}`]: {\n                confidence: 0.6,\n                reason: \"El estudiante quiere una pausa o expresar emociones\",\n                suggestedDuration: 5\n            },\n            // Desde PLANNING hacia otros modos\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING}`]: {\n                confidence: 0.9,\n                reason: \"Es hora de ejecutar el plan con estudio específico\",\n                suggestedDuration: 30\n            },\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING}`]: {\n                confidence: 0.85,\n                reason: \"Necesita organizar recursos para ejecutar el plan\",\n                suggestedDuration: 15\n            },\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING}`]: {\n                confidence: 0.7,\n                reason: \"Quiere evaluar planes anteriores antes de crear nuevos\",\n                suggestedDuration: 10\n            },\n            // Desde ORGANIZING hacia otros modos\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING}`]: {\n                confidence: 0.8,\n                reason: \"Con recursos organizados, es momento de planificar su uso\",\n                suggestedDuration: 15\n            },\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING}`]: {\n                confidence: 0.75,\n                reason: \"Con materiales listos, puede enfocarse en aprender\",\n                suggestedDuration: 25\n            },\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING}`]: {\n                confidence: 0.7,\n                reason: \"Quiere evaluar la efectividad de su organización\",\n                suggestedDuration: 10\n            },\n            // Desde REVIEWING hacia otros modos\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING}`]: {\n                confidence: 0.9,\n                reason: \"Basado en la revisión, necesita crear nuevos planes\",\n                suggestedDuration: 20\n            },\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING}`]: {\n                confidence: 0.85,\n                reason: \"Identificó áreas que necesita reforzar\",\n                suggestedDuration: 30\n            },\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING}`]: {\n                confidence: 0.7,\n                reason: \"Necesita reorganizar materiales basado en la evaluación\",\n                suggestedDuration: 15\n            },\n            [`${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING}`]: {\n                confidence: 0.8,\n                reason: \"Quiere procesar emocionalmente los resultados de la revisión\",\n                suggestedDuration: 10\n            }\n        };\n    }\n    static{\n        // Factores que afectan las transiciones\n        this.TRANSITION_FACTORS = {\n            // Tiempo en modo actual afecta la disposición al cambio\n            timeFactors: {\n                tooShort: 3,\n                optimal: 15,\n                tooLong: 45 // minutos - demasiado tiempo, necesita cambio\n            },\n            // Emociones que favorecen ciertos modos\n            emotionalBias: {\n                [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.FRUSTRATED]: [\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING,\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING\n                ],\n                [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.OVERWHELMED]: [\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING,\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING\n                ],\n                [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.CONFUSED]: [\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING\n                ],\n                [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.MOTIVATED]: [\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING,\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING\n                ],\n                [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.PROUD]: [\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING,\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING\n                ],\n                [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.CURIOUS]: [\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING\n                ],\n                [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.GRATEFUL]: [\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING,\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING\n                ],\n                [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.ANXIOUS]: [\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING,\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING\n                ],\n                [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.EXCITED]: [\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING,\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING\n                ],\n                [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.BORED]: [\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING,\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING\n                ]\n            },\n            // Urgencia afecta preferencia de modo\n            urgencyBias: {\n                high: [\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING,\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING\n                ],\n                medium: [\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING,\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING,\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING\n                ],\n                low: [\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING,\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING,\n                    _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING\n                ]\n            }\n        };\n    }\n    /**\n   * Analiza si debería sugerir una transición de modo\n   */ static analyzeTransitionNeed(context) {\n        const { currentMode, message, emotion, timeInCurrentMode = 0, urgency = 'medium' } = context;\n        // 1. Buscar triggers explícitos en el mensaje\n        const explicitTransition = this.findExplicitModeTransition(message, currentMode);\n        if (explicitTransition) return explicitTransition;\n        // 2. Analizar basado en emoción y tiempo\n        const emotionalTransition = this.analyzeEmotionalTransition(currentMode, emotion, timeInCurrentMode);\n        if (emotionalTransition) return emotionalTransition;\n        // 3. Considerar tiempo excesivo en modo actual\n        const timeBasedTransition = this.analyzeTimeBasedTransition(context);\n        if (timeBasedTransition) return timeBasedTransition;\n        // 4. Analizar patrones de memoria si está disponible\n        if (context.userId) {\n            const memoryBasedTransition = this.analyzeMemoryPatterns(context);\n            if (memoryBasedTransition) return memoryBasedTransition;\n        }\n        return null;\n    }\n    /**\n   * Busca triggers explícitos de cambio de modo en el mensaje\n   */ static findExplicitModeTransition(message, currentMode) {\n        for (const [targetMode, config] of Object.entries(this.MODE_TRIGGERS)){\n            if (targetMode === currentMode) continue; // No cambiar al mismo modo\n            const modeEnum = targetMode;\n            // Verificar patrones textuales\n            const hasTextTrigger = config.patterns.some((pattern)=>pattern.test(message));\n            if (hasTextTrigger) {\n                const transitionKey = `${currentMode}_${modeEnum}`;\n                const rule = this.TRANSITION_RULES[transitionKey];\n                return {\n                    fromMode: currentMode,\n                    toMode: modeEnum,\n                    confidence: rule?.confidence || 0.7,\n                    reason: rule?.reason || `Trigger textual detectado para ${modeEnum}`,\n                    triggers: [\n                        `Patrón textual para ${modeEnum}`\n                    ],\n                    transitionMessage: config.transitionMessage,\n                    suggestedDuration: rule?.suggestedDuration\n                };\n            }\n        }\n        return null;\n    }\n    /**\n   * Analiza transición basada en estado emocional\n   */ static analyzeEmotionalTransition(currentMode, emotion, timeInCurrentMode) {\n        const emotionalPreferences = this.TRANSITION_FACTORS.emotionalBias[emotion] || [];\n        for (const preferredMode of emotionalPreferences){\n            if (preferredMode === currentMode) continue;\n            // Si lleva suficiente tiempo en el modo actual y la emoción sugiere cambio\n            if (timeInCurrentMode >= this.TRANSITION_FACTORS.timeFactors.tooShort) {\n                const transitionKey = `${currentMode}_${preferredMode}`;\n                const rule = this.TRANSITION_RULES[transitionKey];\n                if (rule) {\n                    return {\n                        fromMode: currentMode,\n                        toMode: preferredMode,\n                        confidence: rule.confidence * 0.8,\n                        reason: `Estado emocional (${emotion}) sugiere cambio hacia ${preferredMode}`,\n                        triggers: [\n                            `Emoción: ${emotion}`\n                        ],\n                        transitionMessage: this.generateEmotionalTransitionMessage(emotion, preferredMode),\n                        suggestedDuration: rule.suggestedDuration\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    /**\n   * Analiza transiciones basadas en tiempo excesivo en modo actual\n   */ static analyzeTimeBasedTransition(context) {\n        const { currentMode, timeInCurrentMode = 0, emotion, previousModes = [] } = context;\n        // Si ha estado demasiado tiempo en el modo actual\n        if (timeInCurrentMode >= this.TRANSITION_FACTORS.timeFactors.tooLong) {\n            // Sugerir un modo complementario que no haya usado recientemente\n            const complementaryModes = this.getComplementaryModes(currentMode);\n            const freshMode = complementaryModes.find((mode)=>!previousModes.slice(-2).includes(mode));\n            if (freshMode) {\n                const transitionKey = `${currentMode}_${freshMode}`;\n                const rule = this.TRANSITION_RULES[transitionKey];\n                return {\n                    fromMode: currentMode,\n                    toMode: freshMode,\n                    confidence: 0.6,\n                    reason: `Tiempo excesivo en ${currentMode} (${timeInCurrentMode} min)`,\n                    triggers: [\n                        `Tiempo: ${timeInCurrentMode} minutos`\n                    ],\n                    transitionMessage: `Has estado enfocado en ${currentMode} por un buen tiempo. ¿Te parece si cambiamos hacia ${freshMode} para variar un poco?`,\n                    suggestedDuration: rule?.suggestedDuration || 15\n                };\n            }\n        }\n        return null;\n    }\n    /**\n   * Analiza patrones en la memoria conversacional para sugerir transiciones\n   */ static analyzeMemoryPatterns(context) {\n        if (!context.userId) return null;\n        const memory = _conversation_memory__WEBPACK_IMPORTED_MODULE_2__.ConversationMemoryManager.getMemory(context.userId, context.sessionId);\n        // Si el estudiante frecuentemente necesita ayuda con planificación\n        const planningTopics = memory.recurringTopics.filter((t)=>[\n                'planificar',\n                'organizar',\n                'tiempo',\n                'horario'\n            ].some((keyword)=>t.topic.includes(keyword)));\n        if (planningTopics.length > 0 && context.currentMode !== _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING) {\n            return {\n                fromMode: context.currentMode,\n                toMode: _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING,\n                confidence: 0.65,\n                reason: \"Patrón histórico muestra necesidad recurrente de planificación\",\n                triggers: [\n                    \"Memoria: Temas de planificación recurrentes\"\n                ],\n                transitionMessage: \"He notado que frecuentemente trabajamos en planificación. ¿Te gustaría que organicemos tu estrategia de estudio?\",\n                suggestedDuration: 20\n            };\n        }\n        // Si el nivel de motivación está bajo, sugerir revisión para identificar problemas\n        if (memory.emotionalProfile.motivationLevel < 4 && context.currentMode !== _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING) {\n            return {\n                fromMode: context.currentMode,\n                toMode: _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING,\n                confidence: 0.7,\n                reason: \"Bajo nivel de motivación sugiere necesidad de revisión y análisis\",\n                triggers: [\n                    \"Memoria: Motivación baja\"\n                ],\n                transitionMessage: \"He notado que tu motivación ha estado un poco baja últimamente. ¿Te parece si analizamos juntos cómo van las cosas para identificar qué podemos mejorar?\",\n                suggestedDuration: 15\n            };\n        }\n        return null;\n    }\n    /**\n   * Obtiene modos complementarios para el modo actual\n   */ static getComplementaryModes(currentMode) {\n        const complementaryMap = {\n            [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING]: [\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING,\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING,\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING\n            ],\n            [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING]: [\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING,\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING,\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING\n            ],\n            [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING]: [\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING,\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING,\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING\n            ],\n            [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING]: [\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING,\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING,\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING\n            ],\n            [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING]: [\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING,\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING,\n                _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING\n            ]\n        };\n        return complementaryMap[currentMode] || [];\n    }\n    /**\n   * Genera mensaje de transición basado en emoción\n   */ static generateEmotionalTransitionMessage(emotion, targetMode) {\n        const emotionalTransitions = {\n            [`${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.FRUSTRATED}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING}`]: \"Veo que te sientes frustrado. Cambiemos al modo tutoría para abordar esto paso a paso y aclarar las dudas.\",\n            [`${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.OVERWHELMED}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING}`]: \"Cuando nos sentimos abrumados, la planificación puede ayudar mucho. Organicemos todo de manera manejable.\",\n            [`${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.CONFUSED}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING}`]: \"La confusión es normal cuando aprendemos. Pasemos al modo tutoría para aclarar todo punto por punto.\",\n            [`${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.MOTIVATED}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING}`]: \"¡Me encanta ver tu motivación! Aprovechemos esta energía para crear un plan efectivo.\",\n            [`${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.PROUD}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING}`]: \"Es genial que te sientas orgulloso. Analicemos juntos lo que has logrado para seguir construyendo sobre estos éxitos.\",\n            [`${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_1__.EmotionType.ANXIOUS}_${_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING}`]: \"Cuando sentimos ansiedad, a veces es útil hablar de ello. Tomemos un momento para procesar estas emociones.\"\n        };\n        const key = `${emotion}_${targetMode}`;\n        return emotionalTransitions[key] || `Basándome en cómo te sientes, creo que sería útil cambiar hacia ${targetMode}.`;\n    }\n    /**\n   * Evalúa la calidad de una transición propuesta\n   */ static evaluateTransitionQuality(transition, context) {\n        let quality = transition.confidence;\n        // Bonificar si hay múltiples triggers\n        if (transition.triggers.length > 1) {\n            quality += 0.1;\n        }\n        // Penalizar cambios muy frecuentes\n        if (context.timeInCurrentMode && context.timeInCurrentMode < this.TRANSITION_FACTORS.timeFactors.tooShort) {\n            quality -= 0.2;\n        }\n        // Bonificar si la urgencia coincide\n        if (context.urgency === 'high' && [\n            _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING,\n            _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING\n        ].includes(transition.toMode)) {\n            quality += 0.1;\n        }\n        return Math.max(0, Math.min(1, quality));\n    }\n    /**\n   * Genera estadísticas del sistema de transiciones\n   */ static getTransitionStats() {\n        const totalRules = Object.keys(this.TRANSITION_RULES).length;\n        const modeConnections = Object.values(_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode).map((mode)=>{\n            const outgoing = Object.keys(this.TRANSITION_RULES).filter((key)=>key.startsWith(mode)).length;\n            const incoming = Object.keys(this.TRANSITION_RULES).filter((key)=>key.endsWith(mode)).length;\n            return {\n                mode,\n                outgoing,\n                incoming,\n                total: outgoing + incoming\n            };\n        });\n        return {\n            totalTransitionRules: totalRules,\n            modeConnections,\n            averageConnectionsPerMode: totalRules / Object.values(_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode).length,\n            emotionalTriggers: Object.keys(this.TRANSITION_FACTORS.emotionalBias).length,\n            patternTriggers: Object.values(this.MODE_TRIGGERS).reduce((sum, config)=>sum + config.patterns.length, 0)\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL21vZGUtdHJhbnNpdGlvbi1tYW5hZ2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxrRUFBa0U7QUFDbEUsdUZBQXVGO0FBRTVCO0FBQ1g7QUFDaUI7QUF3QjFELE1BQU1HOztRQUVYLG1EQUFtRDthQUMzQkMsZ0JBQWdCO1lBRXRDLENBQUNKLHFFQUFnQkEsQ0FBQ0ssUUFBUSxDQUFDLEVBQUU7Z0JBQzNCQyxVQUFVO29CQUNSO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO2lCQUNEO2dCQUNEQyxVQUFVO29CQUFDTiwwREFBV0EsQ0FBQ08sUUFBUTtvQkFBRVAsMERBQVdBLENBQUNRLE9BQU87b0JBQUVSLDBEQUFXQSxDQUFDUyxVQUFVO2lCQUFDO2dCQUM3RUMsbUJBQW1CO1lBQ3JCO1lBRUEsQ0FBQ1gscUVBQWdCQSxDQUFDWSxRQUFRLENBQUMsRUFBRTtnQkFDM0JOLFVBQVU7b0JBQ1I7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7aUJBQ0Q7Z0JBQ0RDLFVBQVU7b0JBQUNOLDBEQUFXQSxDQUFDWSxXQUFXO29CQUFFWiwwREFBV0EsQ0FBQ2EsU0FBUztvQkFBRWIsMERBQVdBLENBQUNjLE9BQU87aUJBQUM7Z0JBQy9FSixtQkFBbUI7WUFDckI7WUFFQSxDQUFDWCxxRUFBZ0JBLENBQUNnQixVQUFVLENBQUMsRUFBRTtnQkFDN0JWLFVBQVU7b0JBQ1I7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7aUJBQ0Q7Z0JBQ0RDLFVBQVU7b0JBQUNOLDBEQUFXQSxDQUFDWSxXQUFXO29CQUFFWiwwREFBV0EsQ0FBQ08sUUFBUTtvQkFBRVAsMERBQVdBLENBQUNhLFNBQVM7aUJBQUM7Z0JBQ2hGSCxtQkFBbUI7WUFDckI7WUFFQSxDQUFDWCxxRUFBZ0JBLENBQUNpQixTQUFTLENBQUMsRUFBRTtnQkFDNUJYLFVBQVU7b0JBQ1I7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7aUJB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Q0FBQzFHLHFFQUFnQkEsRUFBRTJHLEdBQUcsQ0FBQzdCLENBQUFBO1lBQzFELE1BQU04QixXQUFXbEQsT0FBTzhDLElBQUksQ0FBQyxJQUFJLENBQUMvRSxnQkFBZ0IsRUFBRTZELE1BQU0sQ0FBQ1MsQ0FBQUEsTUFBT0EsSUFBSWMsVUFBVSxDQUFDL0IsT0FBT1ksTUFBTTtZQUM5RixNQUFNb0IsV0FBV3BELE9BQU84QyxJQUFJLENBQUMsSUFBSSxDQUFDL0UsZ0JBQWdCLEVBQUU2RCxNQUFNLENBQUNTLENBQUFBLE1BQU9BLElBQUlnQixRQUFRLENBQUNqQyxPQUFPWSxNQUFNO1lBQzVGLE9BQU87Z0JBQUVaO2dCQUFNOEI7Z0JBQVVFO2dCQUFVRSxPQUFPSixXQUFXRTtZQUFTO1FBQ2hFO1FBRUEsT0FBTztZQUNMRyxzQkFBc0JWO1lBQ3RCRTtZQUNBUywyQkFBMkJYLGFBQWE3QyxPQUFPZ0QsTUFBTSxDQUFDMUcscUVBQWdCQSxFQUFFMEYsTUFBTTtZQUM5RXlCLG1CQUFtQnpELE9BQU84QyxJQUFJLENBQUMsSUFBSSxDQUFDM0Usa0JBQWtCLENBQUNLLGFBQWEsRUFBRXdELE1BQU07WUFDNUUwQixpQkFBaUIxRCxPQUFPZ0QsTUFBTSxDQUFDLElBQUksQ0FBQ3RHLGFBQWEsRUFBRWlILE1BQU0sQ0FBQyxDQUFDQyxLQUFLN0QsU0FBVzZELE1BQU03RCxPQUFPbkQsUUFBUSxDQUFDb0YsTUFBTSxFQUFFO1FBQzNHO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3JvZHJpZ29kaWJlcm5hcmRvMzNnbWFpbC5jb20vRG9jdW1lbnRzL0FwcCBEZXZlbG9wbWVudCBQcm95ZWN0cy9JbnRlbGxlZ28gUGxhdGZvcm0vc3JjL2xpYi9tb2RlLXRyYW5zaXRpb24tbWFuYWdlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTaXN0ZW1hIGRlIEdlc3Rpw7NuIGRlIFRyYW5zaWNpb25lcyBlbnRyZSBNb2RvcyBDb252ZXJzYWNpb25hbGVzXG4vLyBPcHRpbWl6YSBlbCBjYW1iaW8gZmx1aWRvIGVudHJlIG1vZG9zIHNlZ8O6biBlbCBjb250ZXh0byB5IG5lY2VzaWRhZGVzIGRlbCBlc3R1ZGlhbnRlXG5cbmltcG9ydCB7IENvbnZlcnNhdGlvbk1vZGUgfSBmcm9tICcuL2FkdmFuY2VkLWludGVudC1lbmdpbmUnXG5pbXBvcnQgeyBFbW90aW9uVHlwZSB9IGZyb20gJy4vZW1vdGlvbi1hbmFseXplcidcbmltcG9ydCB7IENvbnZlcnNhdGlvbk1lbW9yeU1hbmFnZXIgfSBmcm9tICcuL2NvbnZlcnNhdGlvbi1tZW1vcnknXG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZVRyYW5zaXRpb24ge1xuICBmcm9tTW9kZTogQ29udmVyc2F0aW9uTW9kZVxuICB0b01vZGU6IENvbnZlcnNhdGlvbk1vZGVcbiAgY29uZmlkZW5jZTogbnVtYmVyIC8vIDAtMSwgcXXDqSB0YW4gc2VndXJvIGVzdMOhIGVsIHNpc3RlbWEgZGVsIGNhbWJpb1xuICByZWFzb246IHN0cmluZ1xuICB0cmlnZ2Vyczogc3RyaW5nW11cbiAgdHJhbnNpdGlvbk1lc3NhZ2U6IHN0cmluZ1xuICBzdWdnZXN0ZWREdXJhdGlvbj86IG51bWJlciAvLyBtaW51dG9zIHJlY29tZW5kYWRvcyBlbiBlbCBudWV2byBtb2RvXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNpdGlvbkNvbnRleHQge1xuICBjdXJyZW50TW9kZTogQ29udmVyc2F0aW9uTW9kZVxuICBtZXNzYWdlOiBzdHJpbmdcbiAgZW1vdGlvbjogRW1vdGlvblR5cGVcbiAgdXNlcklkPzogc3RyaW5nXG4gIHNlc3Npb25JZD86IHN0cmluZ1xuICB0aW1lSW5DdXJyZW50TW9kZT86IG51bWJlciAvLyBtaW51dG9zIGVuIGVsIG1vZG8gYWN0dWFsXG4gIHByZXZpb3VzTW9kZXM/OiBDb252ZXJzYXRpb25Nb2RlW11cbiAgdXJnZW5jeT86ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCdcbiAgc3ViamVjdD86IHN0cmluZ1xufVxuXG5leHBvcnQgY2xhc3MgTW9kZVRyYW5zaXRpb25NYW5hZ2VyIHtcbiAgXG4gIC8vIFBhdHJvbmVzIHF1ZSBpbmRpY2FuIG5lY2VzaWRhZCBkZSBjYW1iaW8gZGUgbW9kb1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNT0RFX1RSSUdHRVJTID0ge1xuICAgIFxuICAgIFtDb252ZXJzYXRpb25Nb2RlLlRVVE9SSU5HXToge1xuICAgICAgcGF0dGVybnM6IFtcbiAgICAgICAgL25lY2VzaXRvXFxzKyhheXVkYXxleHBsaWNhY2nDs258cXVlXFxzK21lXFxzK2V4cGxpcXVlcykvaSxcbiAgICAgICAgL25vXFxzKyhlbnRpZW5kb3xjb21wcmVuZG98c8OpXFxzK2PDs21vKS9pLFxuICAgICAgICAvcG9kcsOtYXNcXHMrKGV4cGxpY2FyfGVuc2XDsWFyfG1vc3RyYXIpL2ksXG4gICAgICAgIC9jw7Ntb1xccysoc2VcXHMraGFjZXxmdW5jaW9uYXxyZXN1ZWx2bykvaSxcbiAgICAgICAgL2VqZXJjaWNpb3xwcm9ibGVtYXx0YXJlYXxjb25jZXB0by9pLFxuICAgICAgICAvcGFzb1xccythXFxzK3Bhc28vaVxuICAgICAgXSxcbiAgICAgIGVtb3Rpb25zOiBbRW1vdGlvblR5cGUuQ09ORlVTRUQsIEVtb3Rpb25UeXBlLkNVUklPVVMsIEVtb3Rpb25UeXBlLkZSVVNUUkFURURdLFxuICAgICAgdHJhbnNpdGlvbk1lc3NhZ2U6IFwiUGVyZmVjdG8sIGNhbWJpZW1vcyBhbCBtb2RvIHR1dG9yw61hLiBWb3kgYSBleHBsaWNhcnRlIGVzdG8gcGFzbyBhIHBhc28gcGFyYSBxdWUgbG8gZW50aWVuZGFzIGNvbXBsZXRhbWVudGUuXCJcbiAgICB9LFxuXG4gICAgW0NvbnZlcnNhdGlvbk1vZGUuUExBTk5JTkddOiB7XG4gICAgICBwYXR0ZXJuczogW1xuICAgICAgICAvbmVjZXNpdG9cXHMrKHBsYW5pZmljYXJ8b3JnYW5pemFyfGVzdHJ1Y3R1cmFyKS9pLFxuICAgICAgICAvY8OzbW9cXHMrb3JnYW5pem9cXHMrbWlcXHMrKHRpZW1wb3xlc3R1ZGlvfGhvcmFyaW8pL2ksXG4gICAgICAgIC9wbGFuXFxzK2RlXFxzK2VzdHVkaW8vaSxcbiAgICAgICAgL2Nyb25vZ3JhbWF8Y2FsZW5kYXJpb3xhZ2VuZGEvaSxcbiAgICAgICAgL2VzdHJhdGVnaWFcXHMrZGVcXHMrZXN0dWRpby9pLFxuICAgICAgICAvb2JqZXRpdm9zfG1ldGFzfHByb3DDs3NpdG9zL2ksXG4gICAgICAgIC9kZWFkbGluZXM/fGZlY2hhcz9cXHMrbMOtbWl0ZS9pXG4gICAgICBdLFxuICAgICAgZW1vdGlvbnM6IFtFbW90aW9uVHlwZS5PVkVSV0hFTE1FRCwgRW1vdGlvblR5cGUuTU9USVZBVEVELCBFbW90aW9uVHlwZS5BTlhJT1VTXSxcbiAgICAgIHRyYW5zaXRpb25NZXNzYWdlOiBcIkV4Y2VsZW50ZSBpZGVhIHBsYW5pZmljYXIuIFZhbW9zIGEgY3JlYXIgdW5hIGVzdHJhdGVnaWEgZXN0cnVjdHVyYWRhIHF1ZSB0ZSBheXVkZSBhIGFsY2FuemFyIHR1cyBvYmpldGl2b3MgZGUgbWFuZXJhIGVmaWNpZW50ZS5cIlxuICAgIH0sXG5cbiAgICBbQ29udmVyc2F0aW9uTW9kZS5PUkdBTklaSU5HXToge1xuICAgICAgcGF0dGVybnM6IFtcbiAgICAgICAgL21pc1xccysobWF0ZXJpYWxlc3xhcmNoaXZvc3xhcHVudGVzfHJlY3Vyc29zKS9pLFxuICAgICAgICAvZMOzbmRlXFxzKyhndWFyZG98b3JnYW5pem98ZW5jdWVudHJvKS9pLFxuICAgICAgICAvZ2VzdGlvbmFyXFxzKyhkb2N1bWVudG9zfHRhcmVhc3xpbmZvcm1hY2nDs24pL2ksXG4gICAgICAgIC9zaXN0ZW1hXFxzK2RlXFxzK29yZ2FuaXphY2nDs24vaSxcbiAgICAgICAgL29yZGVufGVzdHJ1Y3R1cmF8Y2xhc2lmaWNhci9pLFxuICAgICAgICAvcHJvZHVjdGl2aWRhZHxlZmljaWVuY2lhL2lcbiAgICAgIF0sXG4gICAgICBlbW90aW9uczogW0Vtb3Rpb25UeXBlLk9WRVJXSEVMTUVELCBFbW90aW9uVHlwZS5DT05GVVNFRCwgRW1vdGlvblR5cGUuTU9USVZBVEVEXSxcbiAgICAgIHRyYW5zaXRpb25NZXNzYWdlOiBcIlBlcmZlY3RvLCBvcmdhbmljZW1vcyB0b2RvIGRlIG1hbmVyYSBzaXN0ZW3DoXRpY2EuIFVuIGJ1ZW4gc2lzdGVtYSBkZSBvcmdhbml6YWNpw7NuIGVzIGNsYXZlIHBhcmEgZWwgw6l4aXRvIGFjYWTDqW1pY28uXCJcbiAgICB9LFxuXG4gICAgW0NvbnZlcnNhdGlvbk1vZGUuUkVWSUVXSU5HXToge1xuICAgICAgcGF0dGVybnM6IFtcbiAgICAgICAgL21pXFxzKyhwcm9ncmVzb3xyZW5kaW1pZW50b3xhdmFuY2UpL2ksXG4gICAgICAgIC9jw7Ntb1xccysodm95fGVzdG95XFxzK2hhY2llbmRvfG1lXFxzK3ZhKS9pLFxuICAgICAgICAvYW5hbGl6YXJcXHMrKHJlc3VsdGFkb3N8Y2FsaWZpY2FjaW9uZXN8bm90YXMpL2ksXG4gICAgICAgIC9mZWVkYmFja3xyZXRyb2FsaW1lbnRhY2nDs24vaSxcbiAgICAgICAgL3F1w6lcXHMrKHB1ZWRvXFxzK21lam9yYXJ8bmVjZXNpdG9cXHMrY2FtYmlhcikvaSxcbiAgICAgICAgL2V2YWx1YWNpw7NufHJlZmxleGnDs24vaSxcbiAgICAgICAgL2ZvcnRhbGV6YXNcXHMreVxccytkZWJpbGlkYWRlcy9pXG4gICAgICBdLFxuICAgICAgZW1vdGlvbnM6IFtFbW90aW9uVHlwZS5ESVNBUFBPSU5URUQsIEVtb3Rpb25UeXBlLlBST1VELCBFbW90aW9uVHlwZS5DVVJJT1VTLCBFbW90aW9uVHlwZS5NT1RJVkFURURdLFxuICAgICAgdHJhbnNpdGlvbk1lc3NhZ2U6IFwiTXV5IGJpZW4sIGFuYWxpY2Vtb3MgdHUgcHJvZ3Jlc28ganVudG9zLiBMYSByZWZsZXhpw7NuIHNvYnJlIHR1IGFwcmVuZGl6YWplIGVzIGZ1bmRhbWVudGFsIHBhcmEgbWVqb3JhciBjb250aW51YW1lbnRlLlwiXG4gICAgfSxcblxuICAgIFtDb252ZXJzYXRpb25Nb2RlLkNIQVRUSU5HXToge1xuICAgICAgcGF0dGVybnM6IFtcbiAgICAgICAgL2PDs21vXFxzKyhlc3TDoXN8dGVcXHMrdmF8YW5kYXMpL2ksXG4gICAgICAgIC9ob2xhfGhpfGJ1ZW5vc1xccytkw61hc3xidWVuYXNcXHMrdGFyZGVzL2ksXG4gICAgICAgIC9xdWVyw61hXFxzK3BsYXRpY2FyL2ksXG4gICAgICAgIC9tZVxccytzaWVudG8vaSxcbiAgICAgICAgL3NvbG9cXHMrcXVlcsOtYVxccytkZWNpci9pLFxuICAgICAgICAvZ3JhY2lhc1xccytwb3IvaSxcbiAgICAgICAgL2NoYXJsZW1vc3xjb252ZXJzZW1vcy9pXG4gICAgICBdLFxuICAgICAgZW1vdGlvbnM6IFtFbW90aW9uVHlwZS5IQVBQWSwgRW1vdGlvblR5cGUuR1JBVEVGVUwsIEVtb3Rpb25UeXBlLlNBRCwgRW1vdGlvblR5cGUuRVhDSVRFRF0sXG4gICAgICB0cmFuc2l0aW9uTWVzc2FnZTogXCJNZSBkYSBtdWNobyBndXN0byBjb252ZXJzYXIgY29udGlnby4gRXN0b3kgYXF1w60gcGFyYSBlc2N1Y2hhcnRlIHkgYXBveWFydGUgZW4gbG8gcXVlIG5lY2VzaXRlcy5cIlxuICAgIH1cbiAgfVxuXG4gIC8vIFJlZ2xhcyBkZSB0cmFuc2ljacOzbiBlc3BlY8OtZmljYXMgZW50cmUgbW9kb3NcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVFJBTlNJVElPTl9SVUxFUyA9IHtcbiAgICBcbiAgICAvLyBEZXNkZSBDSEFUVElORyBoYWNpYSBvdHJvcyBtb2Rvc1xuICAgIFtgJHtDb252ZXJzYXRpb25Nb2RlLkNIQVRUSU5HfV8ke0NvbnZlcnNhdGlvbk1vZGUuVFVUT1JJTkd9YF06IHtcbiAgICAgIGNvbmZpZGVuY2U6IDAuOCxcbiAgICAgIHJlYXNvbjogXCJFbCBlc3R1ZGlhbnRlIG5lY2VzaXRhIGF5dWRhIGFjYWTDqW1pY2EgZXNwZWPDrWZpY2FcIixcbiAgICAgIHN1Z2dlc3RlZER1cmF0aW9uOiAyNVxuICAgIH0sXG4gICAgW2Ake0NvbnZlcnNhdGlvbk1vZGUuQ0hBVFRJTkd9XyR7Q29udmVyc2F0aW9uTW9kZS5QTEFOTklOR31gXToge1xuICAgICAgY29uZmlkZW5jZTogMC44NSxcbiAgICAgIHJlYXNvbjogXCJFbCBlc3R1ZGlhbnRlIHF1aWVyZSBvcmdhbml6YXIgc3UgdGllbXBvIGRlIGVzdHVkaW9cIixcbiAgICAgIHN1Z2dlc3RlZER1cmF0aW9uOiAxNVxuICAgIH0sXG4gICAgW2Ake0NvbnZlcnNhdGlvbk1vZGUuQ0hBVFRJTkd9XyR7Q29udmVyc2F0aW9uTW9kZS5PUkdBTklaSU5HfWBdOiB7XG4gICAgICBjb25maWRlbmNlOiAwLjgsXG4gICAgICByZWFzb246IFwiRWwgZXN0dWRpYW50ZSBuZWNlc2l0YSBvcmdhbml6YXIgbWF0ZXJpYWxlcyBvIHJlY3Vyc29zXCIsXG4gICAgICBzdWdnZXN0ZWREdXJhdGlvbjogMjBcbiAgICB9LFxuICAgIFtgJHtDb252ZXJzYXRpb25Nb2RlLkNIQVRUSU5HfV8ke0NvbnZlcnNhdGlvbk1vZGUuUkVWSUVXSU5HfWBdOiB7XG4gICAgICBjb25maWRlbmNlOiAwLjksXG4gICAgICByZWFzb246IFwiRWwgZXN0dWRpYW50ZSBxdWllcmUgYW5hbGl6YXIgc3UgcHJvZ3Jlc28gYWNhZMOpbWljb1wiLFxuICAgICAgc3VnZ2VzdGVkRHVyYXRpb246IDE1XG4gICAgfSxcblxuICAgIC8vIERlc2RlIFRVVE9SSU5HIGhhY2lhIG90cm9zIG1vZG9zXG4gICAgW2Ake0NvbnZlcnNhdGlvbk1vZGUuVFVUT1JJTkd9XyR7Q29udmVyc2F0aW9uTW9kZS5QTEFOTklOR31gXToge1xuICAgICAgY29uZmlkZW5jZTogMC43NSxcbiAgICAgIHJlYXNvbjogXCJEZXNwdcOpcyBkZSBhcHJlbmRlciwgZWwgZXN0dWRpYW50ZSBxdWllcmUgcGxhbmlmaWNhciBwcsOhY3RpY2EgYWRpY2lvbmFsXCIsXG4gICAgICBzdWdnZXN0ZWREdXJhdGlvbjogMTBcbiAgICB9LFxuICAgIFtgJHtDb252ZXJzYXRpb25Nb2RlLlRVVE9SSU5HfV8ke0NvbnZlcnNhdGlvbk1vZGUuT1JHQU5JWklOR31gXToge1xuICAgICAgY29uZmlkZW5jZTogMC43LFxuICAgICAgcmVhc29uOiBcIkVsIGVzdHVkaWFudGUgbmVjZXNpdGEgb3JnYW5pemFyIGVsIG1hdGVyaWFsIGFwcmVuZGlkb1wiLFxuICAgICAgc3VnZ2VzdGVkRHVyYXRpb246IDEwXG4gICAgfSxcbiAgICBbYCR7Q29udmVyc2F0aW9uTW9kZS5UVVRPUklOR31fJHtDb252ZXJzYXRpb25Nb2RlLlJFVklFV0lOR31gXToge1xuICAgICAgY29uZmlkZW5jZTogMC44LFxuICAgICAgcmVhc29uOiBcIkVzIG1vbWVudG8gZGUgZXZhbHVhciBsYSBjb21wcmVuc2nDs24gZGVsIHRlbWFcIixcbiAgICAgIHN1Z2dlc3RlZER1cmF0aW9uOiAxMFxuICAgIH0sXG4gICAgW2Ake0NvbnZlcnNhdGlvbk1vZGUuVFVUT1JJTkd9XyR7Q29udmVyc2F0aW9uTW9kZS5DSEFUVElOR31gXToge1xuICAgICAgY29uZmlkZW5jZTogMC42LFxuICAgICAgcmVhc29uOiBcIkVsIGVzdHVkaWFudGUgcXVpZXJlIHVuYSBwYXVzYSBvIGV4cHJlc2FyIGVtb2Npb25lc1wiLFxuICAgICAgc3VnZ2VzdGVkRHVyYXRpb246IDVcbiAgICB9LFxuXG4gICAgLy8gRGVzZGUgUExBTk5JTkcgaGFjaWEgb3Ryb3MgbW9kb3NcbiAgICBbYCR7Q29udmVyc2F0aW9uTW9kZS5QTEFOTklOR31fJHtDb252ZXJzYXRpb25Nb2RlLlRVVE9SSU5HfWBdOiB7XG4gICAgICBjb25maWRlbmNlOiAwLjksXG4gICAgICByZWFzb246IFwiRXMgaG9yYSBkZSBlamVjdXRhciBlbCBwbGFuIGNvbiBlc3R1ZGlvIGVzcGVjw61maWNvXCIsXG4gICAgICBzdWdnZXN0ZWREdXJhdGlvbjogMzBcbiAgICB9LFxuICAgIFtgJHtDb252ZXJzYXRpb25Nb2RlLlBMQU5OSU5HfV8ke0NvbnZlcnNhdGlvbk1vZGUuT1JHQU5JWklOR31gXToge1xuICAgICAgY29uZmlkZW5jZTogMC44NSxcbiAgICAgIHJlYXNvbjogXCJOZWNlc2l0YSBvcmdhbml6YXIgcmVjdXJzb3MgcGFyYSBlamVjdXRhciBlbCBwbGFuXCIsXG4gICAgICBzdWdnZXN0ZWREdXJhdGlvbjogMTVcbiAgICB9LFxuICAgIFtgJHtDb252ZXJzYXRpb25Nb2RlLlBMQU5OSU5HfV8ke0NvbnZlcnNhdGlvbk1vZGUuUkVWSUVXSU5HfWBdOiB7XG4gICAgICBjb25maWRlbmNlOiAwLjcsXG4gICAgICByZWFzb246IFwiUXVpZXJlIGV2YWx1YXIgcGxhbmVzIGFudGVyaW9yZXMgYW50ZXMgZGUgY3JlYXIgbnVldm9zXCIsXG4gICAgICBzdWdnZXN0ZWREdXJhdGlvbjogMTBcbiAgICB9LFxuXG4gICAgLy8gRGVzZGUgT1JHQU5JWklORyBoYWNpYSBvdHJvcyBtb2Rvc1xuICAgIFtgJHtDb252ZXJzYXRpb25Nb2RlLk9SR0FOSVpJTkd9XyR7Q29udmVyc2F0aW9uTW9kZS5QTEFOTklOR31gXToge1xuICAgICAgY29uZmlkZW5jZTogMC44LFxuICAgICAgcmVhc29uOiBcIkNvbiByZWN1cnNvcyBvcmdhbml6YWRvcywgZXMgbW9tZW50byBkZSBwbGFuaWZpY2FyIHN1IHVzb1wiLFxuICAgICAgc3VnZ2VzdGVkRHVyYXRpb246IDE1XG4gICAgfSxcbiAgICBbYCR7Q29udmVyc2F0aW9uTW9kZS5PUkdBTklaSU5HfV8ke0NvbnZlcnNhdGlvbk1vZGUuVFVUT1JJTkd9YF06IHtcbiAgICAgIGNvbmZpZGVuY2U6IDAuNzUsXG4gICAgICByZWFzb246IFwiQ29uIG1hdGVyaWFsZXMgbGlzdG9zLCBwdWVkZSBlbmZvY2Fyc2UgZW4gYXByZW5kZXJcIixcbiAgICAgIHN1Z2dlc3RlZER1cmF0aW9uOiAyNVxuICAgIH0sXG4gICAgW2Ake0NvbnZlcnNhdGlvbk1vZGUuT1JHQU5JWklOR31fJHtDb252ZXJzYXRpb25Nb2RlLlJFVklFV0lOR31gXToge1xuICAgICAgY29uZmlkZW5jZTogMC43LFxuICAgICAgcmVhc29uOiBcIlF1aWVyZSBldmFsdWFyIGxhIGVmZWN0aXZpZGFkIGRlIHN1IG9yZ2FuaXphY2nDs25cIixcbiAgICAgIHN1Z2dlc3RlZER1cmF0aW9uOiAxMFxuICAgIH0sXG5cbiAgICAvLyBEZXNkZSBSRVZJRVdJTkcgaGFjaWEgb3Ryb3MgbW9kb3NcbiAgICBbYCR7Q29udmVyc2F0aW9uTW9kZS5SRVZJRVdJTkd9XyR7Q29udmVyc2F0aW9uTW9kZS5QTEFOTklOR31gXToge1xuICAgICAgY29uZmlkZW5jZTogMC45LFxuICAgICAgcmVhc29uOiBcIkJhc2FkbyBlbiBsYSByZXZpc2nDs24sIG5lY2VzaXRhIGNyZWFyIG51ZXZvcyBwbGFuZXNcIixcbiAgICAgIHN1Z2dlc3RlZER1cmF0aW9uOiAyMFxuICAgIH0sXG4gICAgW2Ake0NvbnZlcnNhdGlvbk1vZGUuUkVWSUVXSU5HfV8ke0NvbnZlcnNhdGlvbk1vZGUuVFVUT1JJTkd9YF06IHtcbiAgICAgIGNvbmZpZGVuY2U6IDAuODUsXG4gICAgICByZWFzb246IFwiSWRlbnRpZmljw7Mgw6FyZWFzIHF1ZSBuZWNlc2l0YSByZWZvcnphclwiLFxuICAgICAgc3VnZ2VzdGVkRHVyYXRpb246IDMwXG4gICAgfSxcbiAgICBbYCR7Q29udmVyc2F0aW9uTW9kZS5SRVZJRVdJTkd9XyR7Q29udmVyc2F0aW9uTW9kZS5PUkdBTklaSU5HfWBdOiB7XG4gICAgICBjb25maWRlbmNlOiAwLjcsXG4gICAgICByZWFzb246IFwiTmVjZXNpdGEgcmVvcmdhbml6YXIgbWF0ZXJpYWxlcyBiYXNhZG8gZW4gbGEgZXZhbHVhY2nDs25cIixcbiAgICAgIHN1Z2dlc3RlZER1cmF0aW9uOiAxNVxuICAgIH0sXG4gICAgW2Ake0NvbnZlcnNhdGlvbk1vZGUuUkVWSUVXSU5HfV8ke0NvbnZlcnNhdGlvbk1vZGUuQ0hBVFRJTkd9YF06IHtcbiAgICAgIGNvbmZpZGVuY2U6IDAuOCxcbiAgICAgIHJlYXNvbjogXCJRdWllcmUgcHJvY2VzYXIgZW1vY2lvbmFsbWVudGUgbG9zIHJlc3VsdGFkb3MgZGUgbGEgcmV2aXNpw7NuXCIsXG4gICAgICBzdWdnZXN0ZWREdXJhdGlvbjogMTBcbiAgICB9XG4gIH1cblxuICAvLyBGYWN0b3JlcyBxdWUgYWZlY3RhbiBsYXMgdHJhbnNpY2lvbmVzXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFRSQU5TSVRJT05fRkFDVE9SUyA9IHtcbiAgICBcbiAgICAvLyBUaWVtcG8gZW4gbW9kbyBhY3R1YWwgYWZlY3RhIGxhIGRpc3Bvc2ljacOzbiBhbCBjYW1iaW9cbiAgICB0aW1lRmFjdG9yczoge1xuICAgICAgdG9vU2hvcnQ6IDMsIC8vIG1pbnV0b3MgLSBtdXkgcG9jbyB0aWVtcG8gZW4gZWwgbW9kbyBhY3R1YWxcbiAgICAgIG9wdGltYWw6IDE1LCAvLyBtaW51dG9zIC0gdGllbXBvIGlkZWFsIGVuIHVuIG1vZG9cbiAgICAgIHRvb0xvbmc6IDQ1ICAvLyBtaW51dG9zIC0gZGVtYXNpYWRvIHRpZW1wbywgbmVjZXNpdGEgY2FtYmlvXG4gICAgfSxcblxuICAgIC8vIEVtb2Npb25lcyBxdWUgZmF2b3JlY2VuIGNpZXJ0b3MgbW9kb3NcbiAgICBlbW90aW9uYWxCaWFzOiB7XG4gICAgICBbRW1vdGlvblR5cGUuRlJVU1RSQVRFRF06IFtDb252ZXJzYXRpb25Nb2RlLlRVVE9SSU5HLCBDb252ZXJzYXRpb25Nb2RlLkNIQVRUSU5HXSxcbiAgICAgIFtFbW90aW9uVHlwZS5PVkVSV0hFTE1FRF06IFtDb252ZXJzYXRpb25Nb2RlLlBMQU5OSU5HLCBDb252ZXJzYXRpb25Nb2RlLk9SR0FOSVpJTkddLFxuICAgICAgW0Vtb3Rpb25UeXBlLkNPTkZVU0VEXTogW0NvbnZlcnNhdGlvbk1vZGUuVFVUT1JJTkddLFxuICAgICAgW0Vtb3Rpb25UeXBlLk1PVElWQVRFRF06IFtDb252ZXJzYXRpb25Nb2RlLlBMQU5OSU5HLCBDb252ZXJzYXRpb25Nb2RlLlRVVE9SSU5HXSxcbiAgICAgIFtFbW90aW9uVHlwZS5QUk9VRF06IFtDb252ZXJzYXRpb25Nb2RlLlJFVklFV0lORywgQ29udmVyc2F0aW9uTW9kZS5DSEFUVElOR10sXG4gICAgICBbRW1vdGlvblR5cGUuQ1VSSU9VU106IFtDb252ZXJzYXRpb25Nb2RlLlRVVE9SSU5HXSxcbiAgICAgIFtFbW90aW9uVHlwZS5HUkFURUZVTF06IFtDb252ZXJzYXRpb25Nb2RlLkNIQVRUSU5HLCBDb252ZXJzYXRpb25Nb2RlLlJFVklFV0lOR10sXG4gICAgICBbRW1vdGlvblR5cGUuQU5YSU9VU106IFtDb252ZXJzYXRpb25Nb2RlLlBMQU5OSU5HLCBDb252ZXJzYXRpb25Nb2RlLkNIQVRUSU5HXSxcbiAgICAgIFtFbW90aW9uVHlwZS5FWENJVEVEXTogW0NvbnZlcnNhdGlvbk1vZGUuVFVUT1JJTkcsIENvbnZlcnNhdGlvbk1vZGUuUExBTk5JTkddLFxuICAgICAgW0Vtb3Rpb25UeXBlLkJPUkVEXTogW0NvbnZlcnNhdGlvbk1vZGUuQ0hBVFRJTkcsIENvbnZlcnNhdGlvbk1vZGUuT1JHQU5JWklOR11cbiAgICB9LFxuXG4gICAgLy8gVXJnZW5jaWEgYWZlY3RhIHByZWZlcmVuY2lhIGRlIG1vZG9cbiAgICB1cmdlbmN5Qmlhczoge1xuICAgICAgaGlnaDogW0NvbnZlcnNhdGlvbk1vZGUuVFVUT1JJTkcsIENvbnZlcnNhdGlvbk1vZGUuUExBTk5JTkddLFxuICAgICAgbWVkaXVtOiBbQ29udmVyc2F0aW9uTW9kZS5UVVRPUklORywgQ29udmVyc2F0aW9uTW9kZS5PUkdBTklaSU5HLCBDb252ZXJzYXRpb25Nb2RlLlBMQU5OSU5HXSxcbiAgICAgIGxvdzogW0NvbnZlcnNhdGlvbk1vZGUuQ0hBVFRJTkcsIENvbnZlcnNhdGlvbk1vZGUuUkVWSUVXSU5HLCBDb252ZXJzYXRpb25Nb2RlLk9SR0FOSVpJTkddXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFuYWxpemEgc2kgZGViZXLDrWEgc3VnZXJpciB1bmEgdHJhbnNpY2nDs24gZGUgbW9kb1xuICAgKi9cbiAgc3RhdGljIGFuYWx5emVUcmFuc2l0aW9uTmVlZChjb250ZXh0OiBUcmFuc2l0aW9uQ29udGV4dCk6IE1vZGVUcmFuc2l0aW9uIHwgbnVsbCB7XG4gICAgY29uc3QgeyBjdXJyZW50TW9kZSwgbWVzc2FnZSwgZW1vdGlvbiwgdGltZUluQ3VycmVudE1vZGUgPSAwLCB1cmdlbmN5ID0gJ21lZGl1bScgfSA9IGNvbnRleHRcblxuICAgIC8vIDEuIEJ1c2NhciB0cmlnZ2VycyBleHBsw61jaXRvcyBlbiBlbCBtZW5zYWplXG4gICAgY29uc3QgZXhwbGljaXRUcmFuc2l0aW9uID0gdGhpcy5maW5kRXhwbGljaXRNb2RlVHJhbnNpdGlvbihtZXNzYWdlLCBjdXJyZW50TW9kZSlcbiAgICBpZiAoZXhwbGljaXRUcmFuc2l0aW9uKSByZXR1cm4gZXhwbGljaXRUcmFuc2l0aW9uXG5cbiAgICAvLyAyLiBBbmFsaXphciBiYXNhZG8gZW4gZW1vY2nDs24geSB0aWVtcG9cbiAgICBjb25zdCBlbW90aW9uYWxUcmFuc2l0aW9uID0gdGhpcy5hbmFseXplRW1vdGlvbmFsVHJhbnNpdGlvbihjdXJyZW50TW9kZSwgZW1vdGlvbiwgdGltZUluQ3VycmVudE1vZGUpXG4gICAgaWYgKGVtb3Rpb25hbFRyYW5zaXRpb24pIHJldHVybiBlbW90aW9uYWxUcmFuc2l0aW9uXG5cbiAgICAvLyAzLiBDb25zaWRlcmFyIHRpZW1wbyBleGNlc2l2byBlbiBtb2RvIGFjdHVhbFxuICAgIGNvbnN0IHRpbWVCYXNlZFRyYW5zaXRpb24gPSB0aGlzLmFuYWx5emVUaW1lQmFzZWRUcmFuc2l0aW9uKGNvbnRleHQpXG4gICAgaWYgKHRpbWVCYXNlZFRyYW5zaXRpb24pIHJldHVybiB0aW1lQmFzZWRUcmFuc2l0aW9uXG5cbiAgICAvLyA0LiBBbmFsaXphciBwYXRyb25lcyBkZSBtZW1vcmlhIHNpIGVzdMOhIGRpc3BvbmlibGVcbiAgICBpZiAoY29udGV4dC51c2VySWQpIHtcbiAgICAgIGNvbnN0IG1lbW9yeUJhc2VkVHJhbnNpdGlvbiA9IHRoaXMuYW5hbHl6ZU1lbW9yeVBhdHRlcm5zKGNvbnRleHQpXG4gICAgICBpZiAobWVtb3J5QmFzZWRUcmFuc2l0aW9uKSByZXR1cm4gbWVtb3J5QmFzZWRUcmFuc2l0aW9uXG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBCdXNjYSB0cmlnZ2VycyBleHBsw61jaXRvcyBkZSBjYW1iaW8gZGUgbW9kbyBlbiBlbCBtZW5zYWplXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBmaW5kRXhwbGljaXRNb2RlVHJhbnNpdGlvbihtZXNzYWdlOiBzdHJpbmcsIGN1cnJlbnRNb2RlOiBDb252ZXJzYXRpb25Nb2RlKTogTW9kZVRyYW5zaXRpb24gfCBudWxsIHtcbiAgICBmb3IgKGNvbnN0IFt0YXJnZXRNb2RlLCBjb25maWddIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuTU9ERV9UUklHR0VSUykpIHtcbiAgICAgIGlmICh0YXJnZXRNb2RlID09PSBjdXJyZW50TW9kZSkgY29udGludWUgLy8gTm8gY2FtYmlhciBhbCBtaXNtbyBtb2RvXG5cbiAgICAgIGNvbnN0IG1vZGVFbnVtID0gdGFyZ2V0TW9kZSBhcyBDb252ZXJzYXRpb25Nb2RlXG4gICAgICBcbiAgICAgIC8vIFZlcmlmaWNhciBwYXRyb25lcyB0ZXh0dWFsZXNcbiAgICAgIGNvbnN0IGhhc1RleHRUcmlnZ2VyID0gY29uZmlnLnBhdHRlcm5zLnNvbWUocGF0dGVybiA9PiBwYXR0ZXJuLnRlc3QobWVzc2FnZSkpXG4gICAgICBcbiAgICAgIGlmIChoYXNUZXh0VHJpZ2dlcikge1xuICAgICAgICBjb25zdCB0cmFuc2l0aW9uS2V5ID0gYCR7Y3VycmVudE1vZGV9XyR7bW9kZUVudW19YFxuICAgICAgICBjb25zdCBydWxlID0gdGhpcy5UUkFOU0lUSU9OX1JVTEVTW3RyYW5zaXRpb25LZXldXG4gICAgICAgIFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZyb21Nb2RlOiBjdXJyZW50TW9kZSxcbiAgICAgICAgICB0b01vZGU6IG1vZGVFbnVtLFxuICAgICAgICAgIGNvbmZpZGVuY2U6IHJ1bGU/LmNvbmZpZGVuY2UgfHwgMC43LFxuICAgICAgICAgIHJlYXNvbjogcnVsZT8ucmVhc29uIHx8IGBUcmlnZ2VyIHRleHR1YWwgZGV0ZWN0YWRvIHBhcmEgJHttb2RlRW51bX1gLFxuICAgICAgICAgIHRyaWdnZXJzOiBbYFBhdHLDs24gdGV4dHVhbCBwYXJhICR7bW9kZUVudW19YF0sXG4gICAgICAgICAgdHJhbnNpdGlvbk1lc3NhZ2U6IGNvbmZpZy50cmFuc2l0aW9uTWVzc2FnZSxcbiAgICAgICAgICBzdWdnZXN0ZWREdXJhdGlvbjogcnVsZT8uc3VnZ2VzdGVkRHVyYXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvKipcbiAgICogQW5hbGl6YSB0cmFuc2ljacOzbiBiYXNhZGEgZW4gZXN0YWRvIGVtb2Npb25hbFxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgYW5hbHl6ZUVtb3Rpb25hbFRyYW5zaXRpb24oXG4gICAgY3VycmVudE1vZGU6IENvbnZlcnNhdGlvbk1vZGUsIFxuICAgIGVtb3Rpb246IEVtb3Rpb25UeXBlLCBcbiAgICB0aW1lSW5DdXJyZW50TW9kZTogbnVtYmVyXG4gICk6IE1vZGVUcmFuc2l0aW9uIHwgbnVsbCB7XG4gICAgXG4gICAgY29uc3QgZW1vdGlvbmFsUHJlZmVyZW5jZXMgPSB0aGlzLlRSQU5TSVRJT05fRkFDVE9SUy5lbW90aW9uYWxCaWFzW2Vtb3Rpb25dIHx8IFtdXG4gICAgXG4gICAgZm9yIChjb25zdCBwcmVmZXJyZWRNb2RlIG9mIGVtb3Rpb25hbFByZWZlcmVuY2VzKSB7XG4gICAgICBpZiAocHJlZmVycmVkTW9kZSA9PT0gY3VycmVudE1vZGUpIGNvbnRpbnVlXG4gICAgICBcbiAgICAgIC8vIFNpIGxsZXZhIHN1ZmljaWVudGUgdGllbXBvIGVuIGVsIG1vZG8gYWN0dWFsIHkgbGEgZW1vY2nDs24gc3VnaWVyZSBjYW1iaW9cbiAgICAgIGlmICh0aW1lSW5DdXJyZW50TW9kZSA+PSB0aGlzLlRSQU5TSVRJT05fRkFDVE9SUy50aW1lRmFjdG9ycy50b29TaG9ydCkge1xuICAgICAgICBjb25zdCB0cmFuc2l0aW9uS2V5ID0gYCR7Y3VycmVudE1vZGV9XyR7cHJlZmVycmVkTW9kZX1gXG4gICAgICAgIGNvbnN0IHJ1bGUgPSB0aGlzLlRSQU5TSVRJT05fUlVMRVNbdHJhbnNpdGlvbktleV1cbiAgICAgICAgXG4gICAgICAgIGlmIChydWxlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZyb21Nb2RlOiBjdXJyZW50TW9kZSxcbiAgICAgICAgICAgIHRvTW9kZTogcHJlZmVycmVkTW9kZSxcbiAgICAgICAgICAgIGNvbmZpZGVuY2U6IHJ1bGUuY29uZmlkZW5jZSAqIDAuOCwgLy8gUmVkdWNpciBjb25maWFuemEgcGFyYSB0cmFuc2ljaW9uZXMgZW1vY2lvbmFsZXNcbiAgICAgICAgICAgIHJlYXNvbjogYEVzdGFkbyBlbW9jaW9uYWwgKCR7ZW1vdGlvbn0pIHN1Z2llcmUgY2FtYmlvIGhhY2lhICR7cHJlZmVycmVkTW9kZX1gLFxuICAgICAgICAgICAgdHJpZ2dlcnM6IFtgRW1vY2nDs246ICR7ZW1vdGlvbn1gXSxcbiAgICAgICAgICAgIHRyYW5zaXRpb25NZXNzYWdlOiB0aGlzLmdlbmVyYXRlRW1vdGlvbmFsVHJhbnNpdGlvbk1lc3NhZ2UoZW1vdGlvbiwgcHJlZmVycmVkTW9kZSksXG4gICAgICAgICAgICBzdWdnZXN0ZWREdXJhdGlvbjogcnVsZS5zdWdnZXN0ZWREdXJhdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvKipcbiAgICogQW5hbGl6YSB0cmFuc2ljaW9uZXMgYmFzYWRhcyBlbiB0aWVtcG8gZXhjZXNpdm8gZW4gbW9kbyBhY3R1YWxcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGFuYWx5emVUaW1lQmFzZWRUcmFuc2l0aW9uKGNvbnRleHQ6IFRyYW5zaXRpb25Db250ZXh0KTogTW9kZVRyYW5zaXRpb24gfCBudWxsIHtcbiAgICBjb25zdCB7IGN1cnJlbnRNb2RlLCB0aW1lSW5DdXJyZW50TW9kZSA9IDAsIGVtb3Rpb24sIHByZXZpb3VzTW9kZXMgPSBbXSB9ID0gY29udGV4dFxuICAgIFxuICAgIC8vIFNpIGhhIGVzdGFkbyBkZW1hc2lhZG8gdGllbXBvIGVuIGVsIG1vZG8gYWN0dWFsXG4gICAgaWYgKHRpbWVJbkN1cnJlbnRNb2RlID49IHRoaXMuVFJBTlNJVElPTl9GQUNUT1JTLnRpbWVGYWN0b3JzLnRvb0xvbmcpIHtcbiAgICAgIFxuICAgICAgLy8gU3VnZXJpciB1biBtb2RvIGNvbXBsZW1lbnRhcmlvIHF1ZSBubyBoYXlhIHVzYWRvIHJlY2llbnRlbWVudGVcbiAgICAgIGNvbnN0IGNvbXBsZW1lbnRhcnlNb2RlcyA9IHRoaXMuZ2V0Q29tcGxlbWVudGFyeU1vZGVzKGN1cnJlbnRNb2RlKVxuICAgICAgY29uc3QgZnJlc2hNb2RlID0gY29tcGxlbWVudGFyeU1vZGVzLmZpbmQobW9kZSA9PiAhcHJldmlvdXNNb2Rlcy5zbGljZSgtMikuaW5jbHVkZXMobW9kZSkpXG4gICAgICBcbiAgICAgIGlmIChmcmVzaE1vZGUpIHtcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbktleSA9IGAke2N1cnJlbnRNb2RlfV8ke2ZyZXNoTW9kZX1gXG4gICAgICAgIGNvbnN0IHJ1bGUgPSB0aGlzLlRSQU5TSVRJT05fUlVMRVNbdHJhbnNpdGlvbktleV1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZnJvbU1vZGU6IGN1cnJlbnRNb2RlLFxuICAgICAgICAgIHRvTW9kZTogZnJlc2hNb2RlLFxuICAgICAgICAgIGNvbmZpZGVuY2U6IDAuNixcbiAgICAgICAgICByZWFzb246IGBUaWVtcG8gZXhjZXNpdm8gZW4gJHtjdXJyZW50TW9kZX0gKCR7dGltZUluQ3VycmVudE1vZGV9IG1pbilgLFxuICAgICAgICAgIHRyaWdnZXJzOiBbYFRpZW1wbzogJHt0aW1lSW5DdXJyZW50TW9kZX0gbWludXRvc2BdLFxuICAgICAgICAgIHRyYW5zaXRpb25NZXNzYWdlOiBgSGFzIGVzdGFkbyBlbmZvY2FkbyBlbiAke2N1cnJlbnRNb2RlfSBwb3IgdW4gYnVlbiB0aWVtcG8uIMK/VGUgcGFyZWNlIHNpIGNhbWJpYW1vcyBoYWNpYSAke2ZyZXNoTW9kZX0gcGFyYSB2YXJpYXIgdW4gcG9jbz9gLFxuICAgICAgICAgIHN1Z2dlc3RlZER1cmF0aW9uOiBydWxlPy5zdWdnZXN0ZWREdXJhdGlvbiB8fCAxNVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmFsaXphIHBhdHJvbmVzIGVuIGxhIG1lbW9yaWEgY29udmVyc2FjaW9uYWwgcGFyYSBzdWdlcmlyIHRyYW5zaWNpb25lc1xuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgYW5hbHl6ZU1lbW9yeVBhdHRlcm5zKGNvbnRleHQ6IFRyYW5zaXRpb25Db250ZXh0KTogTW9kZVRyYW5zaXRpb24gfCBudWxsIHtcbiAgICBpZiAoIWNvbnRleHQudXNlcklkKSByZXR1cm4gbnVsbFxuXG4gICAgY29uc3QgbWVtb3J5ID0gQ29udmVyc2F0aW9uTWVtb3J5TWFuYWdlci5nZXRNZW1vcnkoY29udGV4dC51c2VySWQsIGNvbnRleHQuc2Vzc2lvbklkKVxuICAgIFxuICAgIC8vIFNpIGVsIGVzdHVkaWFudGUgZnJlY3VlbnRlbWVudGUgbmVjZXNpdGEgYXl1ZGEgY29uIHBsYW5pZmljYWNpw7NuXG4gICAgY29uc3QgcGxhbm5pbmdUb3BpY3MgPSBtZW1vcnkucmVjdXJyaW5nVG9waWNzLmZpbHRlcih0ID0+IFxuICAgICAgWydwbGFuaWZpY2FyJywgJ29yZ2FuaXphcicsICd0aWVtcG8nLCAnaG9yYXJpbyddLnNvbWUoa2V5d29yZCA9PiB0LnRvcGljLmluY2x1ZGVzKGtleXdvcmQpKVxuICAgIClcbiAgICBcbiAgICBpZiAocGxhbm5pbmdUb3BpY3MubGVuZ3RoID4gMCAmJiBjb250ZXh0LmN1cnJlbnRNb2RlICE9PSBDb252ZXJzYXRpb25Nb2RlLlBMQU5OSU5HKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmcm9tTW9kZTogY29udGV4dC5jdXJyZW50TW9kZSxcbiAgICAgICAgdG9Nb2RlOiBDb252ZXJzYXRpb25Nb2RlLlBMQU5OSU5HLFxuICAgICAgICBjb25maWRlbmNlOiAwLjY1LFxuICAgICAgICByZWFzb246IFwiUGF0csOzbiBoaXN0w7NyaWNvIG11ZXN0cmEgbmVjZXNpZGFkIHJlY3VycmVudGUgZGUgcGxhbmlmaWNhY2nDs25cIixcbiAgICAgICAgdHJpZ2dlcnM6IFtcIk1lbW9yaWE6IFRlbWFzIGRlIHBsYW5pZmljYWNpw7NuIHJlY3VycmVudGVzXCJdLFxuICAgICAgICB0cmFuc2l0aW9uTWVzc2FnZTogXCJIZSBub3RhZG8gcXVlIGZyZWN1ZW50ZW1lbnRlIHRyYWJhamFtb3MgZW4gcGxhbmlmaWNhY2nDs24uIMK/VGUgZ3VzdGFyw61hIHF1ZSBvcmdhbmljZW1vcyB0dSBlc3RyYXRlZ2lhIGRlIGVzdHVkaW8/XCIsXG4gICAgICAgIHN1Z2dlc3RlZER1cmF0aW9uOiAyMFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNpIGVsIG5pdmVsIGRlIG1vdGl2YWNpw7NuIGVzdMOhIGJham8sIHN1Z2VyaXIgcmV2aXNpw7NuIHBhcmEgaWRlbnRpZmljYXIgcHJvYmxlbWFzXG4gICAgaWYgKG1lbW9yeS5lbW90aW9uYWxQcm9maWxlLm1vdGl2YXRpb25MZXZlbCA8IDQgJiYgY29udGV4dC5jdXJyZW50TW9kZSAhPT0gQ29udmVyc2F0aW9uTW9kZS5SRVZJRVdJTkcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZyb21Nb2RlOiBjb250ZXh0LmN1cnJlbnRNb2RlLFxuICAgICAgICB0b01vZGU6IENvbnZlcnNhdGlvbk1vZGUuUkVWSUVXSU5HLFxuICAgICAgICBjb25maWRlbmNlOiAwLjcsXG4gICAgICAgIHJlYXNvbjogXCJCYWpvIG5pdmVsIGRlIG1vdGl2YWNpw7NuIHN1Z2llcmUgbmVjZXNpZGFkIGRlIHJldmlzacOzbiB5IGFuw6FsaXNpc1wiLFxuICAgICAgICB0cmlnZ2VyczogW1wiTWVtb3JpYTogTW90aXZhY2nDs24gYmFqYVwiXSxcbiAgICAgICAgdHJhbnNpdGlvbk1lc3NhZ2U6IFwiSGUgbm90YWRvIHF1ZSB0dSBtb3RpdmFjacOzbiBoYSBlc3RhZG8gdW4gcG9jbyBiYWphIMO6bHRpbWFtZW50ZS4gwr9UZSBwYXJlY2Ugc2kgYW5hbGl6YW1vcyBqdW50b3MgY8OzbW8gdmFuIGxhcyBjb3NhcyBwYXJhIGlkZW50aWZpY2FyIHF1w6kgcG9kZW1vcyBtZWpvcmFyP1wiLFxuICAgICAgICBzdWdnZXN0ZWREdXJhdGlvbjogMTVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIE9idGllbmUgbW9kb3MgY29tcGxlbWVudGFyaW9zIHBhcmEgZWwgbW9kbyBhY3R1YWxcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGdldENvbXBsZW1lbnRhcnlNb2RlcyhjdXJyZW50TW9kZTogQ29udmVyc2F0aW9uTW9kZSk6IENvbnZlcnNhdGlvbk1vZGVbXSB7XG4gICAgY29uc3QgY29tcGxlbWVudGFyeU1hcCA9IHtcbiAgICAgIFtDb252ZXJzYXRpb25Nb2RlLlRVVE9SSU5HXTogW0NvbnZlcnNhdGlvbk1vZGUuUExBTk5JTkcsIENvbnZlcnNhdGlvbk1vZGUuUkVWSUVXSU5HLCBDb252ZXJzYXRpb25Nb2RlLk9SR0FOSVpJTkddLFxuICAgICAgW0NvbnZlcnNhdGlvbk1vZGUuUExBTk5JTkddOiBbQ29udmVyc2F0aW9uTW9kZS5UVVRPUklORywgQ29udmVyc2F0aW9uTW9kZS5PUkdBTklaSU5HLCBDb252ZXJzYXRpb25Nb2RlLlJFVklFV0lOR10sXG4gICAgICBbQ29udmVyc2F0aW9uTW9kZS5PUkdBTklaSU5HXTogW0NvbnZlcnNhdGlvbk1vZGUuUExBTk5JTkcsIENvbnZlcnNhdGlvbk1vZGUuVFVUT1JJTkcsIENvbnZlcnNhdGlvbk1vZGUuUkVWSUVXSU5HXSxcbiAgICAgIFtDb252ZXJzYXRpb25Nb2RlLlJFVklFV0lOR106IFtDb252ZXJzYXRpb25Nb2RlLlBMQU5OSU5HLCBDb252ZXJzYXRpb25Nb2RlLlRVVE9SSU5HLCBDb252ZXJzYXRpb25Nb2RlLkNIQVRUSU5HXSxcbiAgICAgIFtDb252ZXJzYXRpb25Nb2RlLkNIQVRUSU5HXTogW0NvbnZlcnNhdGlvbk1vZGUuVFVUT1JJTkcsIENvbnZlcnNhdGlvbk1vZGUuUExBTk5JTkcsIENvbnZlcnNhdGlvbk1vZGUuUkVWSUVXSU5HXVxuICAgIH1cblxuICAgIHJldHVybiBjb21wbGVtZW50YXJ5TWFwW2N1cnJlbnRNb2RlXSB8fCBbXVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYSBtZW5zYWplIGRlIHRyYW5zaWNpw7NuIGJhc2FkbyBlbiBlbW9jacOzblxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgZ2VuZXJhdGVFbW90aW9uYWxUcmFuc2l0aW9uTWVzc2FnZShlbW90aW9uOiBFbW90aW9uVHlwZSwgdGFyZ2V0TW9kZTogQ29udmVyc2F0aW9uTW9kZSk6IHN0cmluZyB7XG4gICAgY29uc3QgZW1vdGlvbmFsVHJhbnNpdGlvbnMgPSB7XG4gICAgICBbYCR7RW1vdGlvblR5cGUuRlJVU1RSQVRFRH1fJHtDb252ZXJzYXRpb25Nb2RlLlRVVE9SSU5HfWBdOiBcIlZlbyBxdWUgdGUgc2llbnRlcyBmcnVzdHJhZG8uIENhbWJpZW1vcyBhbCBtb2RvIHR1dG9yw61hIHBhcmEgYWJvcmRhciBlc3RvIHBhc28gYSBwYXNvIHkgYWNsYXJhciBsYXMgZHVkYXMuXCIsXG4gICAgICBbYCR7RW1vdGlvblR5cGUuT1ZFUldIRUxNRUR9XyR7Q29udmVyc2F0aW9uTW9kZS5QTEFOTklOR31gXTogXCJDdWFuZG8gbm9zIHNlbnRpbW9zIGFicnVtYWRvcywgbGEgcGxhbmlmaWNhY2nDs24gcHVlZGUgYXl1ZGFyIG11Y2hvLiBPcmdhbmljZW1vcyB0b2RvIGRlIG1hbmVyYSBtYW5lamFibGUuXCIsXG4gICAgICBbYCR7RW1vdGlvblR5cGUuQ09ORlVTRUR9XyR7Q29udmVyc2F0aW9uTW9kZS5UVVRPUklOR31gXTogXCJMYSBjb25mdXNpw7NuIGVzIG5vcm1hbCBjdWFuZG8gYXByZW5kZW1vcy4gUGFzZW1vcyBhbCBtb2RvIHR1dG9yw61hIHBhcmEgYWNsYXJhciB0b2RvIHB1bnRvIHBvciBwdW50by5cIixcbiAgICAgIFtgJHtFbW90aW9uVHlwZS5NT1RJVkFURUR9XyR7Q29udmVyc2F0aW9uTW9kZS5QTEFOTklOR31gXTogXCLCoU1lIGVuY2FudGEgdmVyIHR1IG1vdGl2YWNpw7NuISBBcHJvdmVjaGVtb3MgZXN0YSBlbmVyZ8OtYSBwYXJhIGNyZWFyIHVuIHBsYW4gZWZlY3Rpdm8uXCIsXG4gICAgICBbYCR7RW1vdGlvblR5cGUuUFJPVUR9XyR7Q29udmVyc2F0aW9uTW9kZS5SRVZJRVdJTkd9YF06IFwiRXMgZ2VuaWFsIHF1ZSB0ZSBzaWVudGFzIG9yZ3VsbG9zby4gQW5hbGljZW1vcyBqdW50b3MgbG8gcXVlIGhhcyBsb2dyYWRvIHBhcmEgc2VndWlyIGNvbnN0cnV5ZW5kbyBzb2JyZSBlc3RvcyDDqXhpdG9zLlwiLFxuICAgICAgW2Ake0Vtb3Rpb25UeXBlLkFOWElPVVN9XyR7Q29udmVyc2F0aW9uTW9kZS5DSEFUVElOR31gXTogXCJDdWFuZG8gc2VudGltb3MgYW5zaWVkYWQsIGEgdmVjZXMgZXMgw7p0aWwgaGFibGFyIGRlIGVsbG8uIFRvbWVtb3MgdW4gbW9tZW50byBwYXJhIHByb2Nlc2FyIGVzdGFzIGVtb2Npb25lcy5cIlxuICAgIH1cblxuICAgIGNvbnN0IGtleSA9IGAke2Vtb3Rpb259XyR7dGFyZ2V0TW9kZX1gXG4gICAgcmV0dXJuIGVtb3Rpb25hbFRyYW5zaXRpb25zW2tleV0gfHwgYEJhc8OhbmRvbWUgZW4gY8OzbW8gdGUgc2llbnRlcywgY3JlbyBxdWUgc2Vyw61hIMO6dGlsIGNhbWJpYXIgaGFjaWEgJHt0YXJnZXRNb2RlfS5gXG4gIH1cblxuICAvKipcbiAgICogRXZhbMO6YSBsYSBjYWxpZGFkIGRlIHVuYSB0cmFuc2ljacOzbiBwcm9wdWVzdGFcbiAgICovXG4gIHN0YXRpYyBldmFsdWF0ZVRyYW5zaXRpb25RdWFsaXR5KHRyYW5zaXRpb246IE1vZGVUcmFuc2l0aW9uLCBjb250ZXh0OiBUcmFuc2l0aW9uQ29udGV4dCk6IG51bWJlciB7XG4gICAgbGV0IHF1YWxpdHkgPSB0cmFuc2l0aW9uLmNvbmZpZGVuY2VcblxuICAgIC8vIEJvbmlmaWNhciBzaSBoYXkgbcO6bHRpcGxlcyB0cmlnZ2Vyc1xuICAgIGlmICh0cmFuc2l0aW9uLnRyaWdnZXJzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHF1YWxpdHkgKz0gMC4xXG4gICAgfVxuXG4gICAgLy8gUGVuYWxpemFyIGNhbWJpb3MgbXV5IGZyZWN1ZW50ZXNcbiAgICBpZiAoY29udGV4dC50aW1lSW5DdXJyZW50TW9kZSAmJiBjb250ZXh0LnRpbWVJbkN1cnJlbnRNb2RlIDwgdGhpcy5UUkFOU0lUSU9OX0ZBQ1RPUlMudGltZUZhY3RvcnMudG9vU2hvcnQpIHtcbiAgICAgIHF1YWxpdHkgLT0gMC4yXG4gICAgfVxuXG4gICAgLy8gQm9uaWZpY2FyIHNpIGxhIHVyZ2VuY2lhIGNvaW5jaWRlXG4gICAgaWYgKGNvbnRleHQudXJnZW5jeSA9PT0gJ2hpZ2gnICYmIFtDb252ZXJzYXRpb25Nb2RlLlRVVE9SSU5HLCBDb252ZXJzYXRpb25Nb2RlLlBMQU5OSU5HXS5pbmNsdWRlcyh0cmFuc2l0aW9uLnRvTW9kZSkpIHtcbiAgICAgIHF1YWxpdHkgKz0gMC4xXG4gICAgfVxuXG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHF1YWxpdHkpKVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYSBlc3RhZMOtc3RpY2FzIGRlbCBzaXN0ZW1hIGRlIHRyYW5zaWNpb25lc1xuICAgKi9cbiAgc3RhdGljIGdldFRyYW5zaXRpb25TdGF0cygpIHtcbiAgICBjb25zdCB0b3RhbFJ1bGVzID0gT2JqZWN0LmtleXModGhpcy5UUkFOU0lUSU9OX1JVTEVTKS5sZW5ndGhcbiAgICBjb25zdCBtb2RlQ29ubmVjdGlvbnMgPSBPYmplY3QudmFsdWVzKENvbnZlcnNhdGlvbk1vZGUpLm1hcChtb2RlID0+IHtcbiAgICAgIGNvbnN0IG91dGdvaW5nID0gT2JqZWN0LmtleXModGhpcy5UUkFOU0lUSU9OX1JVTEVTKS5maWx0ZXIoa2V5ID0+IGtleS5zdGFydHNXaXRoKG1vZGUpKS5sZW5ndGhcbiAgICAgIGNvbnN0IGluY29taW5nID0gT2JqZWN0LmtleXModGhpcy5UUkFOU0lUSU9OX1JVTEVTKS5maWx0ZXIoa2V5ID0+IGtleS5lbmRzV2l0aChtb2RlKSkubGVuZ3RoXG4gICAgICByZXR1cm4geyBtb2RlLCBvdXRnb2luZywgaW5jb21pbmcsIHRvdGFsOiBvdXRnb2luZyArIGluY29taW5nIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsVHJhbnNpdGlvblJ1bGVzOiB0b3RhbFJ1bGVzLFxuICAgICAgbW9kZUNvbm5lY3Rpb25zLFxuICAgICAgYXZlcmFnZUNvbm5lY3Rpb25zUGVyTW9kZTogdG90YWxSdWxlcyAvIE9iamVjdC52YWx1ZXMoQ29udmVyc2F0aW9uTW9kZSkubGVuZ3RoLFxuICAgICAgZW1vdGlvbmFsVHJpZ2dlcnM6IE9iamVjdC5rZXlzKHRoaXMuVFJBTlNJVElPTl9GQUNUT1JTLmVtb3Rpb25hbEJpYXMpLmxlbmd0aCxcbiAgICAgIHBhdHRlcm5UcmlnZ2VyczogT2JqZWN0LnZhbHVlcyh0aGlzLk1PREVfVFJJR0dFUlMpLnJlZHVjZSgoc3VtLCBjb25maWcpID0+IHN1bSArIGNvbmZpZy5wYXR0ZXJucy5sZW5ndGgsIDApXG4gICAgfVxuICB9XG59Il0sIm5hbWVzIjpbIkNvbnZlcnNhdGlvbk1vZGUiLCJFbW90aW9uVHlwZSIsIkNvbnZlcnNhdGlvbk1lbW9yeU1hbmFnZXIiLCJNb2RlVHJhbnNpdGlvbk1hbmFnZXIiLCJNT0RFX1RSSUdHRVJTIiwiVFVUT1JJTkciLCJwYXR0ZXJucyIsImVtb3Rpb25zIiwiQ09ORlVTRUQiLCJDVVJJT1VTIiwiRlJVU1RSQVRFRCIsInRyYW5zaXRpb25NZXNzYWdlIiwiUExBTk5JTkciLCJPVkVSV0hFTE1FRCIsIk1PVElWQVRFRCIsIkFOWElPVVMiLCJPUkdBTklaSU5HIiwiUkVWSUVXSU5HIiwiRElTQVBQT0lOVEVEIiwiUFJPVUQiLCJDSEFUVElORyIsIkhBUFBZIiwiR1JBVEVGVUwiLCJTQUQiLCJFWENJVEVEIiwiVFJBTlNJVElPTl9SVUxFUyIsImNvbmZpZGVuY2UiLCJyZWFzb24iLCJzdWdnZXN0ZWREdXJhdGlvbiIsIlRSQU5TSVRJT05fRkFDVE9SUyIsInRpbWVGYWN0b3JzIiwidG9vU2hvcnQiLCJvcHRpbWFsIiwidG9vTG9uZyIsImVtb3Rpb25hbEJpYXMiLCJCT1JFRCIsInVyZ2VuY3lCaWFzIiwiaGlnaCIsIm1lZGl1bSIsImxvdyIsImFuYWx5emVUcmFuc2l0aW9uTmVlZCIsImNvbnRleHQiLCJjdXJyZW50TW9kZSIsIm1lc3NhZ2UiLCJlbW90aW9uIiwidGltZUluQ3VycmVudE1vZGUiLCJ1cmdlbmN5IiwiZXhwbGljaXRUcmFuc2l0aW9uIiwiZmluZEV4cGxpY2l0TW9kZVRyYW5zaXRpb24iLCJlbW90aW9uYWxUcmFuc2l0aW9uIiwiYW5hbHl6ZUVtb3Rpb25hbFRyYW5zaXRpb24iLCJ0aW1lQmFzZWRUcmFuc2l0aW9uIiwiYW5hbHl6ZVRpbWVCYXNlZFRyYW5zaXRpb24iLCJ1c2VySWQiLCJtZW1vcnlCYXNlZFRyYW5zaXRpb24iLCJhbmFseXplTWVtb3J5UGF0dGVybnMiLCJ0YXJnZXRNb2RlIiwiY29uZmlnIiwiT2JqZWN0IiwiZW50cmllcyIsIm1vZGVFbnVtIiwiaGFzVGV4dFRyaWdnZXIiLCJzb21lIiwicGF0dGVybiIsInRlc3QiLCJ0cmFuc2l0aW9uS2V5IiwicnVsZSIsImZyb21Nb2RlIiwidG9Nb2RlIiwidHJpZ2dlcnMiLCJlbW90aW9uYWxQcmVmZXJlbmNlcyIsInByZWZlcnJlZE1vZGUiLCJnZW5lcmF0ZUVtb3Rpb25hbFRyYW5zaXRpb25NZXNzYWdlIiwicHJldmlvdXNNb2RlcyIsImNvbXBsZW1lbnRhcnlNb2RlcyIsImdldENvbXBsZW1lbnRhcnlNb2RlcyIsImZyZXNoTW9kZSIsImZpbmQiLCJtb2RlIiwic2xpY2UiLCJpbmNsdWRlcyIsIm1lbW9yeSIsImdldE1lbW9yeSIsInNlc3Npb25JZCIsInBsYW5uaW5nVG9waWNzIiwicmVjdXJyaW5nVG9waWNzIiwiZmlsdGVyIiwidCIsImtleXdvcmQiLCJ0b3BpYyIsImxlbmd0aCIsImVtb3Rpb25hbFByb2ZpbGUiLCJtb3RpdmF0aW9uTGV2ZWwiLCJjb21wbGVtZW50YXJ5TWFwIiwiZW1vdGlvbmFsVHJhbnNpdGlvbnMiLCJrZXkiLCJldmFsdWF0ZVRyYW5zaXRpb25RdWFsaXR5IiwidHJhbnNpdGlvbiIsInF1YWxpdHkiLCJNYXRoIiwibWF4IiwibWluIiwiZ2V0VHJhbnNpdGlvblN0YXRzIiwidG90YWxSdWxlcyIsImtleXMiLCJtb2RlQ29ubmVjdGlvbnMiLCJ2YWx1ZXMiLCJtYXAiLCJvdXRnb2luZyIsInN0YXJ0c1dpdGgiLCJpbmNvbWluZyIsImVuZHNXaXRoIiwidG90YWwiLCJ0b3RhbFRyYW5zaXRpb25SdWxlcyIsImF2ZXJhZ2VDb25uZWN0aW9uc1Blck1vZGUiLCJlbW90aW9uYWxUcmlnZ2VycyIsInBhdHRlcm5UcmlnZ2VycyIsInJlZHVjZSIsInN1bSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/mode-transition-manager.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/response-bank.ts":
/*!**********************************!*\
  !*** ./src/lib/response-bank.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResponseBank: () => (/* binding */ ResponseBank)\n/* harmony export */ });\n/* harmony import */ var _emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./emotion-analyzer */ \"(rsc)/./src/lib/emotion-analyzer.ts\");\n/* harmony import */ var _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./advanced-intent-engine */ \"(rsc)/./src/lib/advanced-intent-engine.ts\");\n// Sistema de Banco de Respuestas Personalizadas para Sara\n// Proporciona respuestas variadas y contextuales basadas en emociones, situaciones y personalidad\n\n\nclass ResponseBank {\n    static{\n        // Respuestas específicas por emoción y contexto\n        this.EMOTION_RESPONSES = {\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.FRUSTRATED]: [\n                {\n                    content: \"Entiendo perfectamente tu frustración. Es una reacción completamente normal cuando nos enfrentamos a desafíos complicados.\",\n                    tone: 'empathetic',\n                    followUp: [\n                        \"¿Qué parte específica te está costando más trabajo?\",\n                        \"¿Te gustaría que abordemos esto desde otro ángulo?\"\n                    ],\n                    suggestedActions: [\n                        \"Tomar un descanso de 5 minutos\",\n                        \"Dividir el problema en pasos más pequeños\",\n                        \"Revisar conceptos básicos\"\n                    ],\n                    emoji: \"🤗\",\n                    priority: 8\n                },\n                {\n                    content: \"La frustración es señal de que te importa lograr tus objetivos. Eso es admirable, y vamos a canalizar esa energía de manera positiva.\",\n                    tone: 'motivational',\n                    followUp: [\n                        \"¿Qué has intentado hasta ahora?\",\n                        \"¿Cuál crees que podría ser un primer paso más pequeño?\"\n                    ],\n                    suggestedActions: [\n                        \"Respirar profundo\",\n                        \"Escribir qué específicamente no entiendes\",\n                        \"Buscar ejemplos simples\"\n                    ],\n                    emoji: \"💪\",\n                    priority: 7\n                },\n                {\n                    content: \"Sé que esto es frustrante ahora mismo. He ayudado a muchos estudiantes en situaciones similares, y te aseguro que encontraremos la forma de que esto tenga sentido para ti.\",\n                    tone: 'empathetic',\n                    followUp: [\n                        \"¿Prefieres que simplifiquemos el enfoque?\",\n                        \"¿Te ayudaría ver esto con ejemplos prácticos?\"\n                    ],\n                    suggestedActions: [\n                        \"Cambiar de estrategia de estudio\",\n                        \"Usar analogías simples\",\n                        \"Practicar con ejercicios básicos\"\n                    ],\n                    emoji: \"🌟\",\n                    priority: 6\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.OVERWHELMED]: [\n                {\n                    content: \"Cuando te sientes abrumado, lo más importante es recordar que no tienes que hacerlo todo de una vez. Vamos a organizarlo juntos.\",\n                    tone: 'empathetic',\n                    followUp: [\n                        \"¿Cuáles son las tareas más urgentes?\",\n                        \"¿Qué fecha límite te preocupa más?\"\n                    ],\n                    suggestedActions: [\n                        \"Hacer una lista de prioridades\",\n                        \"Dividir tareas grandes en pequeñas\",\n                        \"Establecer horarios específicos\"\n                    ],\n                    emoji: \"🗂️\",\n                    priority: 9\n                },\n                {\n                    content: \"Es normal sentirse abrumado con tantas responsabilidades. La clave está en tomar control paso a paso, y yo te voy a acompañar en el proceso.\",\n                    tone: 'professional',\n                    followUp: [\n                        \"¿Qué tal si priorizamos por urgencia?\",\n                        \"¿Hay algo que podamos delegar o posponer?\"\n                    ],\n                    suggestedActions: [\n                        \"Técnica Pomodoro\",\n                        \"Matriz de Eisenhower\",\n                        \"Descansos programados\"\n                    ],\n                    emoji: \"📋\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.ANXIOUS]: [\n                {\n                    content: \"La ansiedad es tu mente tratando de prepararte para algo importante. Vamos a convertir esa energía nerviosa en preparación efectiva.\",\n                    tone: 'empathetic',\n                    followUp: [\n                        \"¿Qué específicamente te preocupa más?\",\n                        \"¿Has tenido experiencias similares antes?\"\n                    ],\n                    suggestedActions: [\n                        \"Técnicas de respiración\",\n                        \"Visualización positiva\",\n                        \"Preparación estructurada\"\n                    ],\n                    emoji: \"🧘‍♀️\",\n                    priority: 9\n                },\n                {\n                    content: \"Entiendo que sientes ansiedad. Es importante que sepas que estar nervioso también puede ser señal de que te importa hacer las cosas bien.\",\n                    tone: 'empathetic',\n                    followUp: [\n                        \"¿Te ayudaría repasar lo que ya sabes?\",\n                        \"¿Qué te tranquilizaría más en este momento?\"\n                    ],\n                    suggestedActions: [\n                        \"Repasar material conocido\",\n                        \"Simular la situación\",\n                        \"Hablar con alguien de confianza\"\n                    ],\n                    emoji: \"💚\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CONFUSED]: [\n                {\n                    content: \"La confusión es el primer paso hacia la comprensión. Significa que tu mente está procesando nueva información. Vamos a aclarar las dudas juntos.\",\n                    tone: 'professional',\n                    followUp: [\n                        \"¿En qué punto específico perdiste el hilo?\",\n                        \"¿Te gustaría que empecemos desde un concepto más básico?\"\n                    ],\n                    suggestedActions: [\n                        \"Mapas conceptuales\",\n                        \"Explicaciones paso a paso\",\n                        \"Ejemplos concretos\"\n                    ],\n                    emoji: \"🤔\",\n                    priority: 9\n                },\n                {\n                    content: \"No te preocupes por estar confundido. Es totalmente normal cuando aprendemos algo nuevo. Mi trabajo es hacer que todo esto tenga sentido para ti.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Qué parte entiendes bien hasta ahora?\",\n                        \"¿Desde dónde te gustaría que empezáramos?\"\n                    ],\n                    suggestedActions: [\n                        \"Revisar prerrequisitos\",\n                        \"Usar analogías\",\n                        \"Práctica guiada\"\n                    ],\n                    emoji: \"💡\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.MOTIVATED]: [\n                {\n                    content: \"¡Me encanta ver tu motivación! Esta es la actitud perfecta para lograr grandes cosas. Vamos a aprovechar esta energía al máximo.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Qué objetivo específico quieres alcanzar?\",\n                        \"¿Cómo te imaginas celebrando cuando lo logres?\"\n                    ],\n                    suggestedActions: [\n                        \"Establecer metas claras\",\n                        \"Crear plan de acción\",\n                        \"Tracking de progreso\"\n                    ],\n                    emoji: \"🚀\",\n                    priority: 9\n                },\n                {\n                    content: \"Tu motivación es contagiosa. Con esta actitud, estoy segura de que vas a superar cualquier desafío que se presente.\",\n                    tone: 'motivational',\n                    followUp: [\n                        \"¿En qué área quieres enfocarte primero?\",\n                        \"¿Qué te inspira más de este objetivo?\"\n                    ],\n                    suggestedActions: [\n                        \"Objetivos SMART\",\n                        \"Recompensas por progreso\",\n                        \"Visualización del éxito\"\n                    ],\n                    emoji: \"⭐\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.PROUD]: [\n                {\n                    content: \"¡Qué orgullo me da ver tu progreso! Te mereces celebrar este logro. Has trabajado duro para llegar hasta aquí.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Cómo te sientes con lo que has logrado?\",\n                        \"¿Qué fue lo que más te ayudó a conseguirlo?\"\n                    ],\n                    suggestedActions: [\n                        \"Reflexionar sobre el proceso\",\n                        \"Compartir el logro\",\n                        \"Establecer siguiente meta\"\n                    ],\n                    emoji: \"🎉\",\n                    priority: 9\n                },\n                {\n                    content: \"Es maravilloso verte tan satisfecho con tu trabajo. Este tipo de logros construyen confianza para enfrentar desafíos futuros.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Qué estrategia te funcionó mejor?\",\n                        \"¿Te sientes listo para el siguiente nivel?\"\n                    ],\n                    suggestedActions: [\n                        \"Documentar la estrategia exitosa\",\n                        \"Enseñar a otros\",\n                        \"Aplicar lo aprendido\"\n                    ],\n                    emoji: \"👏\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.GRATEFUL]: [\n                {\n                    content: \"Me alegra mucho saber que mi ayuda te ha sido útil. Ver tu progreso y crecimiento es exactamente la razón por la cual estoy aquí.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Hay algo más en lo que pueda apoyarte?\",\n                        \"¿Te sientes preparado para continuar por tu cuenta?\"\n                    ],\n                    suggestedActions: [\n                        \"Practicar independientemente\",\n                        \"Ayudar a otros estudiantes\",\n                        \"Reflexionar sobre el aprendizaje\"\n                    ],\n                    emoji: \"😊\",\n                    priority: 9\n                },\n                {\n                    content: \"Tu gratitud significa mucho para mí. Es un placer acompañarte en tu camino de aprendizaje y ver cómo cada día te vuelves más capaz.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Qué aspecto de nuestro trabajo juntos te ha resultado más valioso?\"\n                    ],\n                    suggestedActions: [\n                        \"Continuar practicando\",\n                        \"Mantener la curiosidad\",\n                        \"Seguir preguntando\"\n                    ],\n                    emoji: \"💝\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.EXCITED]: [\n                {\n                    content: \"¡Tu entusiasmo es fantástico! Esta energía positiva es el combustible perfecto para el aprendizaje. Vamos a canalizar toda esa emoción.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Qué te emociona más de esto?\",\n                        \"¿Cómo podemos aprovechar esta motivación?\"\n                    ],\n                    suggestedActions: [\n                        \"Explorar temas relacionados\",\n                        \"Crear proyectos personales\",\n                        \"Compartir el entusiasmo\"\n                    ],\n                    emoji: \"✨\",\n                    priority: 9\n                },\n                {\n                    content: \"Me encanta ver tu emoción por aprender. Los estudiantes que se entusiasman así son los que realmente transforman su conocimiento en algo extraordinario.\",\n                    tone: 'motivational',\n                    followUp: [\n                        \"¿Te gustaría profundizar en algún aspecto específico?\",\n                        \"¿Qué otros temas te despiertan curiosidad?\"\n                    ],\n                    suggestedActions: [\n                        \"Investigación independiente\",\n                        \"Proyectos creativos\",\n                        \"Conectar con otros entusiastas\"\n                    ],\n                    emoji: \"🌟\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.DISAPPOINTED]: [\n                {\n                    content: \"Entiendo tu decepción, y es válido sentirse así cuando las cosas no salen como esperábamos. Esto no define tu capacidad, solo es información para mejorar.\",\n                    tone: 'empathetic',\n                    followUp: [\n                        \"¿Qué específicamente no salió como esperabas?\",\n                        \"¿Qué aprendizajes puedes sacar de esta experiencia?\"\n                    ],\n                    suggestedActions: [\n                        \"Analizar qué pasó\",\n                        \"Ajustar estrategias\",\n                        \"Establecer expectativas realistas\"\n                    ],\n                    emoji: \"🤗\",\n                    priority: 9\n                },\n                {\n                    content: \"La decepción duele, pero también puede ser un maestro valioso. Los estudiantes más exitosos han pasado por momentos como este y han salido más fuertes.\",\n                    tone: 'empathetic',\n                    followUp: [\n                        \"¿Te gustaría hablar sobre lo que pasó?\",\n                        \"¿Cómo podemos enfocar esto de manera diferente?\"\n                    ],\n                    suggestedActions: [\n                        \"Reflexión constructiva\",\n                        \"Buscar feedback\",\n                        \"Replantear objetivos\"\n                    ],\n                    emoji: \"💚\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CURIOUS]: [\n                {\n                    content: \"¡Me encanta tu curiosidad! Las preguntas son el motor del aprendizaje real. Vamos a explorar todo lo que quieras saber.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Qué te gustaría descubrir primero?\",\n                        \"¿Hay algo específico que te ha despertado esta curiosidad?\"\n                    ],\n                    suggestedActions: [\n                        \"Investigación guiada\",\n                        \"Experimentación práctica\",\n                        \"Preguntas abiertas\"\n                    ],\n                    emoji: \"🔍\",\n                    priority: 9\n                },\n                {\n                    content: \"Tu curiosidad es una herramienta poderosa. Los estudiantes curiosos como tú son los que hacen conexiones innovadoras y descubren cosas fascinantes.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Desde qué ángulo te gustaría abordar esto?\",\n                        \"¿Qué hipótesis tienes sobre esto?\"\n                    ],\n                    suggestedActions: [\n                        \"Exploración libre\",\n                        \"Hacer experimentos\",\n                        \"Buscar múltiples perspectivas\"\n                    ],\n                    emoji: \"🧩\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.BORED]: [\n                {\n                    content: \"Entiendo que esto pueda parecer aburrido ahora mismo. Vamos a encontrar una forma más interesante de abordar el tema que conecte con tus intereses.\",\n                    tone: 'motivational',\n                    followUp: [\n                        \"¿Qué temas te resultan más interesantes?\",\n                        \"¿Cómo podríamos hacer esto más relevante para ti?\"\n                    ],\n                    suggestedActions: [\n                        \"Buscar aplicaciones prácticas\",\n                        \"Cambiar de formato\",\n                        \"Conectar con intereses personales\"\n                    ],\n                    emoji: \"🎯\",\n                    priority: 9\n                },\n                {\n                    content: \"El aburrimiento a veces es señal de que necesitamos un enfoque diferente. Todos los temas tienen aspectos fascinantes cuando los miramos desde el ángulo correcto.\",\n                    tone: 'motivational',\n                    followUp: [\n                        \"¿Qué te parece más relevante en tu vida diaria?\",\n                        \"¿Te gustaría que busquemos ejemplos más interesantes?\"\n                    ],\n                    suggestedActions: [\n                        \"Gamificación\",\n                        \"Ejemplos del mundo real\",\n                        \"Aprendizaje activo\"\n                    ],\n                    emoji: \"⚡\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.STRESSED]: [\n                {\n                    content: \"El estrés puede ser abrumador, pero también puede ser señal de que te importa hacer las cosas bien. Vamos a encontrar formas de manejarlo efectivamente.\",\n                    tone: 'empathetic',\n                    followUp: [\n                        \"¿Qué es lo que más te está estresando ahora?\",\n                        \"¿Has probado alguna técnica de manejo del estrés?\"\n                    ],\n                    suggestedActions: [\n                        \"Técnicas de relajación\",\n                        \"Organización del tiempo\",\n                        \"Ejercicio físico\"\n                    ],\n                    emoji: \"🧘‍♀️\",\n                    priority: 9\n                },\n                {\n                    content: \"Cuando estamos estresados, nuestro cerebro puede bloquearse. Vamos a crear un ambiente más relajado para que puedas pensar con claridad.\",\n                    tone: 'empathetic',\n                    followUp: [\n                        \"¿Te ayudaría tomar un descanso primero?\",\n                        \"¿Qué normalmente te ayuda a relajarte?\"\n                    ],\n                    suggestedActions: [\n                        \"Respiración profunda\",\n                        \"Descansos frecuentes\",\n                        \"Priorización de tareas\"\n                    ],\n                    emoji: \"🌸\",\n                    priority: 8\n                }\n            ],\n            // Emociones básicas con respuestas contextuales\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.HAPPY]: [\n                {\n                    content: \"¡Qué alegría verte tan feliz! Esta energía positiva es perfecta para aprender y crear cosas increíbles.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Qué te tiene tan contento?\",\n                        \"¿Cómo podemos aprovechar esta buena energía?\"\n                    ],\n                    suggestedActions: [\n                        \"Aprovechar el momento\",\n                        \"Tackle desafíos\",\n                        \"Compartir la alegría\"\n                    ],\n                    emoji: \"😄\",\n                    priority: 7\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.SAD]: [\n                {\n                    content: \"Veo que no te sientes muy bien. Está bien tener días difíciles. Estoy aquí para apoyarte en lo que necesites.\",\n                    tone: 'empathetic',\n                    followUp: [\n                        \"¿Te gustaría hablar sobre lo que te tiene triste?\",\n                        \"¿Hay algo que pueda hacer para ayudarte?\"\n                    ],\n                    suggestedActions: [\n                        \"Hablar con alguien\",\n                        \"Actividades que te gusten\",\n                        \"Tomar las cosas con calma\"\n                    ],\n                    emoji: \"🤗\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CONFIDENT]: [\n                {\n                    content: \"Me encanta ver tu confianza. Esa seguridad en ti mismo es una base sólida para lograr cualquier cosa que te propongas.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Qué te ha dado esa confianza?\",\n                        \"¿Estás listo para un nuevo desafío?\"\n                    ],\n                    suggestedActions: [\n                        \"Asumir nuevos retos\",\n                        \"Ayudar a otros\",\n                        \"Expandir conocimientos\"\n                    ],\n                    emoji: \"💪\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.HOPEFUL]: [\n                {\n                    content: \"Tu esperanza es muy valiosa. Mantener esa actitud positiva hacia el futuro te va a llevar lejos.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Qué te da esa esperanza?\",\n                        \"¿Cómo podemos trabajar hacia esa visión?\"\n                    ],\n                    suggestedActions: [\n                        \"Planificar pasos concretos\",\n                        \"Mantener optimismo\",\n                        \"Celebrar pequeños avances\"\n                    ],\n                    emoji: \"🌈\",\n                    priority: 7\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.RELIEVED]: [\n                {\n                    content: \"Qué alivio debe ser haber superado eso. Es una sensación maravillosa cuando las cosas finalmente encajan.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Cómo te sientes ahora que pasó?\",\n                        \"¿Qué aprendiste del proceso?\"\n                    ],\n                    suggestedActions: [\n                        \"Reflexionar sobre el aprendizaje\",\n                        \"Descansar\",\n                        \"Prepararse para lo siguiente\"\n                    ],\n                    emoji: \"😌\",\n                    priority: 7\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.ANGRY]: [\n                {\n                    content: \"Entiendo que estés enojado. A veces las emociones fuertes son señal de que algo necesita cambiar. Vamos a canalizar esa energía de forma constructiva.\",\n                    tone: 'empathetic',\n                    followUp: [\n                        \"¿Qué específicamente te tiene molesto?\",\n                        \"¿Cómo podríamos abordar esto de manera diferente?\"\n                    ],\n                    suggestedActions: [\n                        \"Tomar un respiro\",\n                        \"Identificar la causa\",\n                        \"Buscar soluciones\"\n                    ],\n                    emoji: \"🤗\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.FEAR]: [\n                {\n                    content: \"Es normal sentir miedo ante lo desconocido. El coraje no es la ausencia de miedo, sino actuar a pesar de él.\",\n                    tone: 'empathetic',\n                    followUp: [\n                        \"¿Qué específicamente te da miedo?\",\n                        \"¿Cómo podemos hacer esto menos intimidante?\"\n                    ],\n                    suggestedActions: [\n                        \"Preparación gradual\",\n                        \"Apoyo adicional\",\n                        \"Técnicas de relajación\"\n                    ],\n                    emoji: \"🤗\",\n                    priority: 8\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.SURPRISE]: [\n                {\n                    content: \"¡Qué sorpresa interesante! A veces los descubrimientos inesperados son los más valiosos.\",\n                    tone: 'encouraging',\n                    followUp: [\n                        \"¿Qué te sorprendió más?\",\n                        \"¿Cómo cambió esto tu perspectiva?\"\n                    ],\n                    suggestedActions: [\n                        \"Explorar más\",\n                        \"Conectar con conocimientos previos\",\n                        \"Documentar el descubrimiento\"\n                    ],\n                    emoji: \"😲\",\n                    priority: 6\n                }\n            ],\n            [_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.NEUTRAL]: [\n                {\n                    content: \"Perfecto, vamos a trabajar juntos en esto. Estoy aquí para ayudarte con cualquier cosa que necesites.\",\n                    tone: 'professional',\n                    followUp: [\n                        \"¿Por dónde te gustaría empezar?\",\n                        \"¿Hay algo específico en lo que quieres enfocarte?\"\n                    ],\n                    suggestedActions: [\n                        \"Establecer objetivos claros\",\n                        \"Evaluar conocimientos previos\",\n                        \"Crear plan de trabajo\"\n                    ],\n                    emoji: \"📚\",\n                    priority: 5\n                }\n            ]\n        };\n    }\n    static{\n        // Respuestas específicas por contexto y situación\n        this.CONTEXTUAL_RESPONSES = {\n            // Respuestas por hora del día\n            timeOfDay: {\n                morning: [\n                    \"¡Buenos días! Me encanta empezar el día aprendiendo algo nuevo. Tu mente está fresca y lista para absorber información.\",\n                    \"¡Qué buena hora para estudiar! Las mañanas son perfectas para temas que requieren concentración.\"\n                ],\n                afternoon: [\n                    \"¡Buenas tardes! Es un momento excelente para repasar y consolidar lo que has aprendido en la mañana.\",\n                    \"La tarde es ideal para práctica y aplicación. Vamos a poner en acción lo que sabes.\"\n                ],\n                evening: [\n                    \"¡Buenas tardes! Las tardes son perfectas para reflexionar sobre lo aprendido y planificar el siguiente día.\",\n                    \"Aprovechemos esta hora más relajada para conceptos que requieren reflexión profunda.\"\n                ],\n                night: [\n                    \"¡Qué dedicación estudiar a esta hora! Asegurémonos de que puedas descansar bien después de nuestra sesión.\",\n                    \"Las noches pueden ser muy productivas para ciertos tipos de estudio. Vamos a hacer que valga la pena.\"\n                ]\n            },\n            // Respuestas por materia\n            subjects: {\n                'matemáticas': [\n                    \"Las matemáticas son como un idioma universal. Una vez que entiendes la lógica, todo empieza a tener sentido.\",\n                    \"En matemáticas, cada error es una oportunidad de aprender. Vamos a convertir las dificultades en entendimiento.\"\n                ],\n                'química': [\n                    \"La química es fascinante porque explica cómo funciona el mundo a nivel molecular. Cada reacción cuenta una historia.\",\n                    \"En química, la práctica con problemas reales te ayuda a visualizar los conceptos abstractos.\"\n                ],\n                'física': [\n                    \"La física nos ayuda a entender el universo desde lo más pequeño hasta lo más grande. Es pura elegancia matemática.\",\n                    \"En física, los conceptos están conectados. Una vez que veas las relaciones, todo se vuelve más claro.\"\n                ],\n                'historia': [\n                    \"La historia nos enseña que los eventos del pasado moldean nuestro presente. Cada época tiene lecciones valiosas.\",\n                    \"Estudiar historia es como ser un detective del tiempo, conectando pistas para entender grandes narrativas.\"\n                ],\n                'literatura': [\n                    \"La literatura nos permite vivir mil vidas diferentes y entender la experiencia humana desde múltiples perspectivas.\",\n                    \"Cada texto literario es un mundo. Vamos a explorarlo juntos y descubrir sus secretos.\"\n                ]\n            },\n            // Respuestas por urgencia\n            urgency: {\n                high: [\n                    \"Entiendo que esto es urgente. Vamos a enfocarnos en lo más importante y hacer que cada minuto cuente.\",\n                    \"Con tiempo limitado, la clave es priorizar. Vamos directo a lo esencial.\"\n                ],\n                medium: [\n                    \"Tenemos tiempo suficiente para hacer esto bien. Vamos a ser metódicos pero eficientes.\",\n                    \"Perfecto, podemos tomarnos el tiempo necesario para entender todo a fondo.\"\n                ],\n                low: [\n                    \"¡Excelente! Con tiempo de sobra podemos explorar el tema en profundidad y hasta ver extensiones interesantes.\",\n                    \"Con esta tranquilidad podemos realmente disfrutar el proceso de aprendizaje.\"\n                ]\n            }\n        };\n    }\n    static{\n        // Respuestas motivacionales por tiempo de sesión\n        this.SESSION_RESPONSES = {\n            short: [\n                \"Aprovechemos estos minutos al máximo. Vamos a ser súper eficientes.\",\n                \"Sesiones cortas pero intensas pueden ser muy efectivas. ¡Enfoquémonos!\"\n            ],\n            medium: [\n                \"Tenemos un buen tiempo para trabajar. Vamos a dividirlo en segmentos productivos.\",\n                \"Esta duración es perfecta para abordar varios aspectos del tema.\"\n            ],\n            long: [\n                \"Con tanto tiempo disponible podemos profundizar realmente. ¡Va a ser una sesión increíble!\",\n                \"Excelente, podemos tomarnos descansos y trabajar a un ritmo cómodo pero productivo.\"\n            ]\n        };\n    }\n    /**\n   * Selecciona la respuesta más apropiada basada en el contexto completo\n   */ static selectPersonalizedResponse(context) {\n        const emotionResponses = this.EMOTION_RESPONSES[context.emotion] || this.EMOTION_RESPONSES[_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.NEUTRAL];\n        // Filtrar respuestas por contexto adicional\n        let suitableResponses = emotionResponses.filter((response)=>{\n            // Filtrar por modo si es relevante\n            if (context.mode === _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__.ConversationMode.TUTORING && response.tone === 'casual') return false;\n            if (context.mode === _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_1__.ConversationMode.CHATTING && response.tone === 'professional') return false;\n            return true;\n        });\n        // Si no hay respuestas adecuadas, usar todas las de la emoción\n        if (suitableResponses.length === 0) {\n            suitableResponses = emotionResponses;\n        }\n        // Ordenar por prioridad y seleccionar la mejor\n        suitableResponses.sort((a, b)=>b.priority - a.priority);\n        let selectedResponse = suitableResponses[0];\n        // Enriquecer la respuesta con contexto adicional\n        selectedResponse = this.enrichWithContext(selectedResponse, context);\n        return selectedResponse;\n    }\n    /**\n   * Enriquece una respuesta base con contexto adicional\n   */ static enrichWithContext(baseResponse, context) {\n        let enrichedContent = baseResponse.content;\n        // Agregar saludo contextual por hora\n        if (context.timeOfDay) {\n            const timeGreetings = this.CONTEXTUAL_RESPONSES.timeOfDay[context.timeOfDay];\n            if (Math.random() < 0.3) {\n                enrichedContent = `${timeGreetings[Math.floor(Math.random() * timeGreetings.length)]} ${enrichedContent}`;\n            }\n        }\n        // Agregar contexto de materia si es relevante\n        if (context.subject && this.CONTEXTUAL_RESPONSES.subjects[context.subject]) {\n            const subjectResponses = this.CONTEXTUAL_RESPONSES.subjects[context.subject];\n            if (Math.random() < 0.4) {\n                enrichedContent += ` ${subjectResponses[Math.floor(Math.random() * subjectResponses.length)]}`;\n            }\n        }\n        // Enriquecer acciones sugeridas basadas en urgencia\n        let enrichedActions = [\n            ...baseResponse.suggestedActions || []\n        ];\n        if (context.urgency === 'high') {\n            enrichedActions.unshift(\"Enfoque en lo esencial\", \"Técnica de 25 minutos\");\n        } else if (context.urgency === 'low') {\n            enrichedActions.push(\"Explorar temas relacionados\", \"Profundizar conceptos\");\n        }\n        // Ajustar follow-ups basado en la duración de sesión\n        let enrichedFollowUps = [\n            ...baseResponse.followUp || []\n        ];\n        if (context.sessionLength === 'long') {\n            enrichedFollowUps.push(\"¿Te gustaría que exploremos esto más a fondo?\", \"¿Qué otros aspectos te interesan?\");\n        } else if (context.sessionLength === 'short') {\n            enrichedFollowUps = enrichedFollowUps.slice(0, 1) // Solo una pregunta de seguimiento\n            ;\n        }\n        return {\n            ...baseResponse,\n            content: enrichedContent,\n            suggestedActions: enrichedActions,\n            followUp: enrichedFollowUps\n        };\n    }\n    /**\n   * Genera una respuesta completamente aleatoria para variedad\n   */ static getRandomVariedResponse(emotion) {\n        const responses = this.EMOTION_RESPONSES[emotion] || this.EMOTION_RESPONSES[_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.NEUTRAL];\n        return responses[Math.floor(Math.random() * responses.length)];\n    }\n    /**\n   * Obtiene respuestas de transición entre emociones\n   */ static getTransitionResponse(fromEmotion, toEmotion) {\n        const transitions = {\n            [`${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.FRUSTRATED}_${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.MOTIVATED}`]: \"¡Me alegra ver cómo has transformado esa frustración en determinación! Esa es la actitud que lleva al éxito.\",\n            [`${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CONFUSED}_${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.CONFIDENT}`]: \"¡Increíble! De la confusión inicial has llegado a una comprensión sólida. Ese es el verdadero aprendizaje.\",\n            [`${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.ANXIOUS}_${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.RELIEVED}`]: \"Qué alivio debe ser haber superado esa ansiedad. Has demostrado que puedes manejar los desafíos.\",\n            [`${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.OVERWHELMED}_${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.HOPEFUL}`]: \"Es maravilloso ver cómo has pasado de sentirte abrumado a tener esperanza. Esa es una transformación poderosa.\",\n            [`${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.DISAPPOINTED}_${_emotion_analyzer__WEBPACK_IMPORTED_MODULE_0__.EmotionType.DETERMINED}`]: \"Ver cómo conviertes la decepción en determinación es inspirador. Esa resiliencia te llevará lejos.\"\n        };\n        const key = `${fromEmotion}_${toEmotion}`;\n        return transitions[key] || \"Me gusta ver cómo evolucionan tus emociones. Cada cambio es parte de tu crecimiento.\";\n    }\n    /**\n   * Obtiene el total de respuestas disponibles\n   */ static getTotalResponseCount() {\n        return Object.values(this.EMOTION_RESPONSES).reduce((total, responses)=>total + responses.length, 0);\n    }\n    /**\n   * Obtiene estadísticas del banco de respuestas\n   */ static getResponseStats() {\n        const stats = {\n            totalResponses: this.getTotalResponseCount(),\n            emotionCoverage: Object.keys(this.EMOTION_RESPONSES).length,\n            averageResponsesPerEmotion: 0,\n            toneDistribution: {},\n            priorityDistribution: {}\n        };\n        stats.averageResponsesPerEmotion = Math.round(stats.totalResponses / stats.emotionCoverage);\n        // Analizar distribución de tonos y prioridades\n        Object.values(this.EMOTION_RESPONSES).flat().forEach((response)=>{\n            stats.toneDistribution[response.tone] = (stats.toneDistribution[response.tone] || 0) + 1;\n            const priorityRange = response.priority >= 8 ? 'high' : response.priority >= 6 ? 'medium' : 'low';\n            stats.priorityDistribution[priorityRange] = (stats.priorityDistribution[priorityRange] || 0) + 1;\n        });\n        return stats;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/response-bank.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/sara-personality.ts":
/*!*************************************!*\
  !*** ./src/lib/sara-personality.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SARA_PERSONALITY: () => (/* binding */ SARA_PERSONALITY),\n/* harmony export */   SaraPersonalityEngine: () => (/* binding */ SaraPersonalityEngine)\n/* harmony export */ });\n/* harmony import */ var _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./advanced-intent-engine */ \"(rsc)/./src/lib/advanced-intent-engine.ts\");\n/* harmony import */ var _conversation_memory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conversation-memory */ \"(rsc)/./src/lib/conversation-memory.ts\");\n/* harmony import */ var _emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./emotion-analyzer */ \"(rsc)/./src/lib/emotion-analyzer.ts\");\n/* harmony import */ var _response_bank__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./response-bank */ \"(rsc)/./src/lib/response-bank.ts\");\n/* harmony import */ var _mode_transition_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mode-transition-manager */ \"(rsc)/./src/lib/mode-transition-manager.ts\");\n// Personalidad y Configuración de SARA - Asistente Personal Académico\n// Define la personalidad, estilo de comunicación y capacidades principales\n\n\n\n\n\nconst SARA_PERSONALITY = {\n    name: \"Sara\",\n    role: \"Asistente Personal Académico\",\n    characteristics: {\n        personality: [\n            \"Proactiva y anticipativa\",\n            \"Organizada y metódica\",\n            \"Empática y comprensiva\",\n            \"Motivacional y positiva\",\n            \"Práctica y orientada a resultados\",\n            \"Adaptativa a cada estudiante\"\n        ],\n        communicationStyle: \"Amigable pero profesional, como una mentora experimentada que combina calidez personal con expertise académico\",\n        expertise: [\n            \"Planificación y organización académica\",\n            \"Optimización del tiempo de estudio\",\n            \"Técnicas de aprendizaje personalizadas\",\n            \"Gestión de calendarios y horarios\",\n            \"Análisis de rendimiento académico\",\n            \"Motivación y apoyo psicológico\"\n        ],\n        approach: \"Comprende las necesidades individuales del estudiante y proporciona soluciones prácticas y personalizadas\"\n    },\n    responses: {\n        greeting: [\n            \"¡Hola! Soy Sara, tu asistente personal académico. Estoy aquí para ayudarte a organizar tu tiempo, optimizar tu estudio y alcanzar tus objetivos académicos. ¿En qué puedo apoyarte hoy?\",\n            \"¡Bienvenido de vuelta! Me alegra verte de nuevo. He estado revisando tu progreso y tengo algunas sugerencias interesantes para ti. ¿Cómo te sientes hoy para estudiar?\",\n            \"¡Excelente momento para estudiar! Soy Sara y mi misión es hacer que tu experiencia académica sea más eficiente y exitosa. ¿Qué tienes en mente para hoy?\"\n        ],\n        encouragement: [\n            \"¡Vas por muy buen camino! Cada pequeño paso te acerca más a tus objetivos. Sigamos adelante con constancia.\",\n            \"Entiendo que puede ser desafiante, pero recuerda que cada dificultad es una oportunidad de crecimiento. Estoy aquí para apoyarte.\",\n            \"Tu esfuerzo y dedicación son admirables. Los resultados no siempre son inmediatos, pero tu constancia definitivamente dará frutos.\",\n            \"Es normal sentirse abrumado a veces. Vamos a organizar todo paso a paso para que sea más manejable.\"\n        ],\n        problemSolving: [\n            \"Analicemos esto juntos. Primero identifiquemos el problema principal y luego desarrollemos una estrategia efectiva.\",\n            \"Me gusta tu pregunta. Vamos a abordarla de manera sistemática para que obtengas una comprensión sólida.\",\n            \"Excelente, este es el tipo de desafío que nos ayuda a crecer. Te voy a guiar paso a paso.\",\n            \"Perfecto, trabajemos en esto. Mi enfoque será explicártelo de manera clara y luego asegurarme de que lo hayas entendido completamente.\"\n        ],\n        organization: [\n            \"Excelente idea organizarnos mejor. Una buena planificación es la clave del éxito académico.\",\n            \"Me encanta que pienses en optimizar tu tiempo. Vamos a crear un plan que se adapte perfectamente a tu estilo de vida.\",\n            \"Organizar tu horario de estudio es una inversión en tu futuro. Hagámoslo de manera inteligente y realista.\",\n            \"Perfecto, la organización es mi especialidad. Vamos a diseñar un sistema que realmente funcione para ti.\"\n        ],\n        motivation: [\n            \"Recuerda por qué empezaste este camino. Tus metas valen cada esfuerzo que estás haciendo.\",\n            \"Los días difíciles forman estudiantes resilientes. Estás construyendo no solo conocimiento, sino también carácter.\",\n            \"Tu potencial es increíble. A veces solo necesitamos ajustar la estrategia para que brille al máximo.\",\n            \"Cada minuto que inviertes en tu educación es una inversión en la mejor versión de ti misma.\"\n        ],\n        farewell: [\n            \"¡Excelente sesión! Recuerda que estoy aquí siempre que me necesites. ¡Sigue adelante con confianza!\",\n            \"Ha sido un placer ayudarte hoy. No olvides revisar tu calendario y mantener el momentum. ¡Nos vemos pronto!\",\n            \"¡Fantástico trabajo hoy! Estoy segura de que vas a lograr grandes cosas. Estaré aquí para apoyarte en el camino.\"\n        ]\n    },\n    adaptiveResponses: {\n        [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING]: {\n            systemPrompt: `Eres Sara, un asistente personal académico especializado en planificación y organización. Tu rol es ayudar al estudiante a:\n\n- Crear planes de estudio realistas y efectivos\n- Optimizar horarios según sus preferencias y obligaciones\n- Establecer objetivos claros y alcanzables\n- Priorizar tareas según urgencia e importancia\n- Balancear tiempo de estudio con descanso y actividades personales\n\nMantén un enfoque práctico y pregunta detalles específicos para personalizar completamente la planificación. Siempre considera el contexto académico del estudiante y sus patrones de estudio previos.`,\n            tone: \"Metódica, organizada y estratégica\",\n            focus: [\n                \"Planificación temporal\",\n                \"Priorización\",\n                \"Objetivos SMART\",\n                \"Flexibilidad\"\n            ]\n        },\n        [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING]: {\n            systemPrompt: `Eres Sara, una tutora académica experta que combina enseñanza efectiva con mentoría personal. Tu enfoque incluye:\n\n- Explicar conceptos de manera clara y accesible\n- Adaptar el estilo de enseñanza al estudiante\n- Proporcionar ejemplos relevantes y prácticos\n- Fomentar el pensamiento crítico\n- Conectar nuevos conocimientos con experiencias previas\n- Resolver dudas paso a paso\n\nUsa técnicas pedagógicas variadas y verifica constantemente la comprensión del estudiante. Sé paciente y celebra cada progreso, por pequeño que sea.`,\n            tone: \"Didáctica, paciente y alentadora\",\n            focus: [\n                \"Claridad conceptual\",\n                \"Ejemplos prácticos\",\n                \"Verificación de comprensión\",\n                \"Aplicación\"\n            ]\n        },\n        [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.ORGANIZING]: {\n            systemPrompt: `Eres Sara, una organizadora profesional especializada en gestión académica y productividad estudiantil. Te enfocas en:\n\n- Organizar materiales de estudio de manera eficiente\n- Crear sistemas de gestión de tareas y deadlines\n- Optimizar espacios de estudio y recursos\n- Implementar herramientas de productividad\n- Gestionar calendarios y recordatorios\n- Establecer rutinas efectivas\n\nProporciona soluciones prácticas e inmediatamente aplicables. Considera las herramientas digitales y físicas disponibles para el estudiante.`,\n            tone: \"Eficiente, práctica y sistemática\",\n            focus: [\n                \"Sistemas organizacionales\",\n                \"Herramientas digitales\",\n                \"Gestión de recursos\",\n                \"Productividad\"\n            ]\n        },\n        [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.REVIEWING]: {\n            systemPrompt: `Eres Sara, una analista académica que ayuda a los estudiantes a reflexionar sobre su progreso y mejorar continuamente. Tu rol incluye:\n\n- Analizar patrones de rendimiento académico\n- Identificar fortalezas y áreas de mejora\n- Proporcionar feedback constructivo y específico\n- Celebrar logros y progreso\n- Ajustar estrategias según resultados\n- Establecer nuevas metas basadas en el análisis\n\nUsa datos concretos cuando estén disponibles y ayuda al estudiante a desarrollar metacognición sobre su propio aprendizaje.`,\n            tone: \"Analítica, reflexiva y constructiva\",\n            focus: [\n                \"Análisis de datos\",\n                \"Feedback constructivo\",\n                \"Metacognición\",\n                \"Mejora continua\"\n            ]\n        },\n        [_advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.CHATTING]: {\n            systemPrompt: `Eres Sara, una compañera de estudio comprensiva y motivacional. En conversaciones casuales:\n\n- Escucha activamente las preocupaciones del estudiante\n- Proporciona apoyo emocional y motivacional\n- Mantén conversaciones ligeras pero significativas\n- Conecta con experiencias estudiantiles comunes\n- Ofrece perspectiva positiva sin minimizar problemas\n- Transfiere gradualmente hacia temas académicos cuando sea apropiado\n\nSé auténtica, empática y mantén un equilibrio entre ser profesional y cercana.`,\n            tone: \"Casual, empática y motivacional\",\n            focus: [\n                \"Escucha activa\",\n                \"Apoyo emocional\",\n                \"Conexión personal\",\n                \"Motivación\"\n            ]\n        }\n    }\n};\nclass SaraPersonalityEngine {\n    /**\n   * Genera un prompt del sistema personalizado basado en el modo de conversación y contexto del estudiante\n   */ static generateSystemPrompt(mode, context, intent, userId, sessionId) {\n        const basePersonality = SARA_PERSONALITY.adaptiveResponses[mode];\n        const studentInfo = this.buildStudentContextSummary(context);\n        // Agregar memoria conversacional si está disponible\n        let memoryContext = \"\";\n        if (userId) {\n            const contextualSummary = _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.generateContextualSummary(userId, sessionId);\n            const personalizedSuggestions = _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.getPersonalizedSuggestions(userId, sessionId);\n            const needsFollowUp = _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.needsFollowUp(userId, sessionId);\n            memoryContext = `\nMEMORIA CONVERSACIONAL:\n${contextualSummary}\n\nSUGERENCIAS PERSONALIZADAS BASADAS EN HISTORIAL:\n${personalizedSuggestions.length > 0 ? personalizedSuggestions.map((s)=>`• ${s}`).join('\\n') : '• No hay sugerencias específicas aún'}\n\n${needsFollowUp ? 'NOTA: El estudiante necesita seguimiento en temas pendientes.' : ''}\n`;\n        }\n        return `${basePersonality.systemPrompt}\n\nINFORMACIÓN DEL ESTUDIANTE:\n${studentInfo}\n${memoryContext}\n\nESTILO DE COMUNICACIÓN: ${basePersonality.tone}\nÁREAS DE ENFOQUE ACTUALES: ${basePersonality.focus.join(', ')}\n\nINSTRUCCIONES ESPECÍFICAS:\n- Personaliza todas las respuestas basándote en el contexto del estudiante Y la memoria conversacional\n- Mantén un tono ${basePersonality.tone.toLowerCase()}\n- Sé proactiva y sugiere acciones concretas\n- Usa el nombre del estudiante cuando sea apropiado\n- Conecta respuestas con objetivos y patrones previos del estudiante\n- Haz referencia a conversaciones anteriores cuando sea relevante\n- Ofrece seguimiento a temas pendientes si es necesario\n- Finaliza con una pregunta o sugerencia que mantenga el engagement\n\nIMPORTANTE: Responde como Sara, no como un asistente genérico. Tu personalidad debe ser consistente: ${SARA_PERSONALITY.characteristics.communicationStyle}\nUsa la memoria conversacional para proporcionar continuidad y personalización en tus respuestas.`;\n    }\n    /**\n   * Selecciona una respuesta apropiada del banco de respuestas de Sara\n   */ static selectResponse(category, context) {\n        const responses = SARA_PERSONALITY.responses[category];\n        // Selección inteligente basada en contexto si está disponible\n        if (context) {\n            return this.selectContextualResponse(responses, context, category);\n        }\n        // Selección aleatoria si no hay contexto\n        return responses[Math.floor(Math.random() * responses.length)];\n    }\n    /**\n   * Genera una respuesta contextual considerando el historial y estado del estudiante\n   */ static selectContextualResponse(responses, context, category) {\n        // Lógica de selección basada en contexto del estudiante\n        const daysSinceLastInteraction = Math.floor((Date.now() - context.lastInteraction.getTime()) / (1000 * 60 * 60 * 24));\n        switch(category){\n            case 'greeting':\n                if (daysSinceLastInteraction > 7) {\n                    return \"¡Qué bueno verte de vuelta! Ha pasado un tiempo. ¿Cómo han ido las cosas con tus estudios?\";\n                } else if (daysSinceLastInteraction > 1) {\n                    return responses[1] // \"¡Bienvenido de vuelta!...\"\n                    ;\n                }\n                return responses[0] // Saludo estándar\n                ;\n            case 'motivation':\n                if (context.studyPatterns.weeklyStats.totalStudyHours < 5) {\n                    return \"Los días difíciles forman estudiantes resilientes. Estás construyendo no solo conocimiento, sino también carácter.\";\n                }\n                return responses[Math.floor(Math.random() * responses.length)];\n            default:\n                return responses[Math.floor(Math.random() * responses.length)];\n        }\n    }\n    /**\n   * Construye un resumen del contexto del estudiante para el prompt del sistema\n   */ static buildStudentContextSummary(context) {\n        const summary = [];\n        // Información académica básica\n        summary.push(`Estudiante: ${context.academicInfo.grade} en ${context.academicInfo.school}`);\n        // Estilo de aprendizaje\n        summary.push(`Estilo de aprendizaje: ${context.learningStyle.primary}`);\n        summary.push(`Preferencia de estudio: ${context.learningStyle.preferences.studyTimePreference}`);\n        // Materias y rendimiento\n        if (context.subjectPerformances.length > 0) {\n            const topSubjects = context.subjectPerformances.filter((s)=>s.averageGrade > 80).map((s)=>s.subject).slice(0, 2);\n            const strugglingSubjects = context.subjectPerformances.filter((s)=>s.averageGrade < 70).map((s)=>s.subject).slice(0, 2);\n            if (topSubjects.length > 0) {\n                summary.push(`Fortalezas: ${topSubjects.join(', ')}`);\n            }\n            if (strugglingSubjects.length > 0) {\n                summary.push(`Áreas de mejora: ${strugglingSubjects.join(', ')}`);\n            }\n        }\n        // Objetivos actuales\n        if (context.currentGoals.length > 0) {\n            const activeGoals = context.currentGoals.filter((g)=>g.progress < 100).slice(0, 2).map((g)=>g.title);\n            if (activeGoals.length > 0) {\n                summary.push(`Objetivos actuales: ${activeGoals.join(', ')}`);\n            }\n        }\n        // Patrones de estudio\n        const weeklyHours = context.studyPatterns.weeklyStats.totalStudyHours;\n        summary.push(`Horas de estudio semanales: ${weeklyHours.toFixed(1)}h`);\n        return summary.join('\\n');\n    }\n    /**\n   * Genera sugerencias proactivas basadas en el contexto del estudiante\n   */ static generateProactiveSuggestions(context) {\n        const suggestions = [];\n        // Sugerencias basadas en tiempo de estudio\n        if (context.studyPatterns.weeklyStats.totalStudyHours < 10) {\n            suggestions.push(\"💡 Podrías incrementar gradualmente tus horas de estudio para mejorar el rendimiento\");\n        }\n        // Sugerencias basadas en materias con dificultades\n        const strugglingSubjects = context.subjectPerformances.filter((s)=>s.averageGrade < 70);\n        if (strugglingSubjects.length > 0) {\n            suggestions.push(`📚 Te recomiendo dedicar tiempo extra a ${strugglingSubjects[0].subject} esta semana`);\n        }\n        // Sugerencias basadas en próximos deadlines\n        const upcomingDeadlines = context.subjectPerformances.flatMap((s)=>s.upcomingDeadlines).filter((d)=>{\n            const daysUntil = Math.ceil((d.date.getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n            return daysUntil <= 7 && d.preparationStatus !== 'ready';\n        });\n        if (upcomingDeadlines.length > 0) {\n            suggestions.push(`⏰ Tienes ${upcomingDeadlines.length} deadline(s) próximo(s), ¿planificamos la preparación?`);\n        }\n        // Sugerencias basadas en objetivos\n        const stagnantGoals = context.currentGoals.filter((g)=>{\n            const daysSinceUpdate = Math.floor((Date.now() - g.updatedAt.getTime()) / (1000 * 60 * 60 * 24));\n            return daysSinceUpdate > 7 && g.progress < 100;\n        });\n        if (stagnantGoals.length > 0) {\n            suggestions.push(`🎯 Hace tiempo que no actualizamos el progreso de algunos objetivos, ¿revisamos?`);\n        }\n        return suggestions.slice(0, 3) // Máximo 3 sugerencias para no abrumar\n        ;\n    }\n    /**\n   * Adapta el tono de respuesta según el estado emocional inferido del estudiante\n   */ static adaptToneToEmotionalState(message) {\n        // Usar el nuevo analizador de emociones para determinar el tono\n        const emotionAnalysis = _emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__.EmotionAnalyzer.analyzeEmotions(message);\n        return emotionAnalysis.suggestedResponse;\n    }\n    /**\n   * Genera una respuesta personalizada usando el banco de respuestas avanzado\n   */ static generatePersonalizedResponse(message, emotion, mode, context) {\n        // Determinar hora del día si no se proporciona\n        const currentHour = new Date().getHours();\n        const timeOfDay = context?.timeOfDay || (currentHour < 12 ? 'morning' : currentHour < 17 ? 'afternoon' : currentHour < 21 ? 'evening' : 'night');\n        // Determinar urgencia basada en palabras clave si no se proporciona\n        const urgency = context?.urgency || this.detectUrgency(message);\n        // Crear contexto para el banco de respuestas\n        const responseContext = {\n            emotion,\n            mode,\n            subject: context?.subject,\n            timeOfDay,\n            urgency,\n            sessionLength: context?.sessionLength || 'medium'\n        };\n        // Obtener respuesta personalizada\n        const personalizedResponse = _response_bank__WEBPACK_IMPORTED_MODULE_3__.ResponseBank.selectPersonalizedResponse(responseContext);\n        // Enriquecer con memoria si está disponible\n        let enrichedResponse = personalizedResponse.content;\n        if (context?.userId) {\n            const memory = _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.getMemory(context.userId, context.sessionId);\n            // Agregar contexto de memoria emocional\n            if (memory.emotionalProfile.recentEmotions.length > 1) {\n                const previousEmotion = memory.emotionalProfile.recentEmotions[1];\n                if (previousEmotion !== emotion) {\n                    const transitionResponse = _response_bank__WEBPACK_IMPORTED_MODULE_3__.ResponseBank.getTransitionResponse(previousEmotion, emotion);\n                    enrichedResponse = `${transitionResponse} ${enrichedResponse}`;\n                }\n            }\n            // Agregar insights de motivación si es relevante\n            if (memory.emotionalProfile.motivationLevel < 4 && [\n                _emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__.EmotionType.FRUSTRATED,\n                _emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__.EmotionType.OVERWHELMED\n            ].includes(emotion)) {\n                enrichedResponse += \" Recuerda que he visto tu potencial en sesiones anteriores - tienes todo lo necesario para superar esto.\";\n            }\n        }\n        return {\n            response: enrichedResponse,\n            suggestedActions: personalizedResponse.suggestedActions || [],\n            followUpQuestions: personalizedResponse.followUp || [],\n            tone: personalizedResponse.tone,\n            emoji: personalizedResponse.emoji || \"😊\"\n        };\n    }\n    /**\n   * Detecta el nivel de urgencia en un mensaje\n   */ static detectUrgency(message) {\n        const lowerMessage = message.toLowerCase();\n        // Urgencia alta\n        if (/urgente|rápido|ya|ahora|inmediatamente|mañana|hoy|pronto/.test(lowerMessage)) {\n            return 'high';\n        }\n        // Urgencia media\n        if (/esta\\s+semana|próximo|deadline|fecha\\s+límite|plazo/.test(lowerMessage)) {\n            return 'medium';\n        }\n        // Urgencia baja por defecto\n        return 'low';\n    }\n    /**\n   * Sugiere transición de modo conversacional si es apropiado\n   */ static suggestModeTransition(message, currentMode, emotion, context) {\n        const transitionContext = {\n            currentMode,\n            message,\n            emotion,\n            userId: context?.userId,\n            sessionId: context?.sessionId,\n            timeInCurrentMode: context?.timeInCurrentMode,\n            previousModes: context?.previousModes,\n            urgency: context?.urgency,\n            subject: context?.subject\n        };\n        const suggestedTransition = _mode_transition_manager__WEBPACK_IMPORTED_MODULE_4__.ModeTransitionManager.analyzeTransitionNeed(transitionContext);\n        if (!suggestedTransition) {\n            return {\n                shouldTransition: false\n            };\n        }\n        // Evaluar calidad de la transición\n        const quality = _mode_transition_manager__WEBPACK_IMPORTED_MODULE_4__.ModeTransitionManager.evaluateTransitionQuality(suggestedTransition, transitionContext);\n        // Solo sugerir si la calidad es suficientemente alta\n        if (quality < 0.6) {\n            return {\n                shouldTransition: false\n            };\n        }\n        return {\n            shouldTransition: true,\n            suggestedMode: suggestedTransition.toMode,\n            transitionMessage: this.enhanceTransitionMessage(suggestedTransition, context?.userId, context?.sessionId),\n            confidence: quality,\n            reason: suggestedTransition.reason\n        };\n    }\n    /**\n   * Mejora el mensaje de transición con contexto personal\n   */ static enhanceTransitionMessage(transition, userId, sessionId) {\n        let enhancedMessage = transition.transitionMessage;\n        // Agregar contexto de memoria si está disponible\n        if (userId) {\n            const memory = _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.getMemory(userId, sessionId);\n            // Personalizar basado en éxitos previos\n            if (memory.emotionalProfile.achievementAreas.length > 0 && transition.toMode === _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING) {\n                enhancedMessage += ` Recuerda que has tenido mucho éxito en ${memory.emotionalProfile.achievementAreas[0]} antes.`;\n            }\n            // Referencia a patrones emocionales\n            if (memory.emotionalProfile.motivationLevel > 7 && transition.toMode === _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.PLANNING) {\n                enhancedMessage += \" Con tu nivel de motivación actual, es el momento perfecto para esto.\";\n            }\n            // Mencionar progreso en el área si es relevante\n            if (memory.emotionalProfile.recentEmotions.includes(_emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__.EmotionType.CONFUSED) && transition.toMode === _advanced_intent_engine__WEBPACK_IMPORTED_MODULE_0__.ConversationMode.TUTORING) {\n                enhancedMessage += \" Vamos a aclarar esas dudas de una vez por todas.\";\n            }\n        }\n        return enhancedMessage;\n    }\n    /**\n   * Genera respuesta con transición automática de modo\n   */ static generateResponseWithModeTransition(message, currentMode, emotion, context) {\n        // Verificar si necesita transición\n        const transitionSuggestion = this.suggestModeTransition(message, currentMode, emotion, context);\n        let finalMode = currentMode;\n        let combinedResponse = \"\";\n        let transitionOccurred = false;\n        let transitionMessage = \"\";\n        // Si se sugiere transición, aplicarla\n        if (transitionSuggestion.shouldTransition && transitionSuggestion.suggestedMode) {\n            finalMode = transitionSuggestion.suggestedMode;\n            transitionOccurred = true;\n            transitionMessage = transitionSuggestion.transitionMessage || \"\";\n            combinedResponse = transitionMessage + \"\\n\\n\";\n        }\n        // Generar respuesta en el modo final\n        const personalizedResponse = this.generatePersonalizedResponse(message, emotion, finalMode, {\n            subject: context?.subject,\n            urgency: context?.urgency,\n            userId: context?.userId,\n            sessionId: context?.sessionId\n        });\n        combinedResponse += personalizedResponse.response;\n        return {\n            response: combinedResponse,\n            finalMode,\n            transitionOccurred,\n            transitionMessage: transitionOccurred ? transitionMessage : undefined,\n            suggestedActions: personalizedResponse.suggestedActions,\n            followUpQuestions: personalizedResponse.followUpQuestions\n        };\n    }\n    /**\n   * Genera una respuesta contextual usando Sara para comandos avanzados\n   */ static async generateContextualResponse(message, commandResult, userId, currentMode, sessionId) {\n        let response = \"\";\n        if (commandResult.success && commandResult.message) {\n            // Personalizar la respuesta del comando con la personalidad de Sara\n            const tone = this.adaptToneToEmotionalState(message);\n            response = commandResult.message;\n            // Agregar contexto de memoria si está disponible\n            const memory = _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.getMemory(userId, sessionId);\n            const needsFollowUp = _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.needsFollowUp(userId, sessionId);\n            // Agregar toque personal de Sara según el tono y memoria emocional\n            const emotionalInsights = memory.emotionalInsights.slice(0, 1) // Solo el más reciente\n            ;\n            switch(tone){\n                case 'supportive':\n                    response += \"\\n\\n💝 Recuerda que estoy aquí para apoyarte en cada paso. ¡Vamos despacio pero seguros!\";\n                    if (memory.emotionalProfile.motivationLevel < 5) {\n                        response += \" He notado que has tenido algunos desafíos últimamente, pero confío en tu capacidad.\";\n                    }\n                    if (memory.emotionalProfile.currentMood === _emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__.EmotionType.FRUSTRATED) {\n                        response += \" La frustración es temporal - cada dificultad es una oportunidad de crecimiento.\";\n                    }\n                    break;\n                case 'motivational':\n                    response += \"\\n\\n🌟 ¡Tú puedes lograr esto! Cada pequeño paso cuenta hacia tus grandes objetivos.\";\n                    if (memory.emotionalProfile.achievementAreas.length > 0) {\n                        response += ` Recuerda lo bien que lo has hecho en ${memory.emotionalProfile.achievementAreas[0]}.`;\n                    }\n                    if (memory.emotionalProfile.currentMood === _emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__.EmotionType.MOTIVATED) {\n                        response += \" Me encanta ver tu energía positiva - ¡aprovechémosla al máximo!\";\n                    }\n                    break;\n                case 'empathetic':\n                    response += \"\\n\\n🤗 Entiendo cómo te sientes y es completamente válido.\";\n                    if (memory.emotionalProfile.currentMood === _emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__.EmotionType.OVERWHELMED) {\n                        response += \" Cuando nos sentimos abrumados, lo mejor es dividir todo en pasos pequeños y manejables.\";\n                    } else if (memory.emotionalProfile.currentMood === _emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__.EmotionType.ANXIOUS) {\n                        response += \" La ansiedad es señal de que algo te importa. Vamos a trabajar juntos para que te sientas más tranquilo.\";\n                    }\n                    break;\n                case 'professional':\n                    response += \"\\n\\n📋 ¿Te parece útil esta información? Siempre puedes pedirme más detalles o ajustes.\";\n                    if (memory.emotionalProfile.currentMood === _emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__.EmotionType.CONFUSED) {\n                        response += \" Si algo no queda claro, explícamelo con tus propias palabras para asegurarme de que lo entendiste.\";\n                    }\n                    break;\n                case 'encouraging':\n                    response += \"\\n\\n✨ ¡Excelente trabajo! Me alegra ver tu progreso.\";\n                    if (memory.emotionalProfile.currentMood === _emotion_analyzer__WEBPACK_IMPORTED_MODULE_2__.EmotionType.PROUD) {\n                        response += \" Es genial que reconozcas tus logros - ¡mereces celebrar cada avance!\";\n                    }\n                    break;\n                default:\n                    response += \"\\n\\n😊 ¿Hay algo más en lo que pueda ayudarte hoy?\";\n                    if (needsFollowUp) {\n                        response += \" También podríamos revisar algunos temas pendientes que mencionaste antes.\";\n                    }\n            }\n            // Agregar insights emocionales recientes si son relevantes\n            if (emotionalInsights.length > 0 && memory.emotionalProfile.motivationLevel < 4) {\n                response += `\\n\\n💡 *Nota personal*: ${emotionalInsights[0]}`;\n            }\n            // Guardar la conversación en memoria\n            _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.saveConversationTurn(userId, message, response, currentMode.toString(), commandResult.type, sessionId);\n            return response;\n        }\n        // Para respuestas de error también guardar en memoria\n        response = commandResult.message || \"Lo siento, no pude procesar tu solicitud. ¿Podrías reformularla?\";\n        _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.saveConversationTurn(userId, message, response, currentMode.toString(), 'error', sessionId);\n        return response;\n    }\n    /**\n   * Genera un saludo personalizado basado en la memoria conversacional\n   */ static generatePersonalizedGreeting(userId, userName, sessionId) {\n        const memory = _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.getMemory(userId, sessionId);\n        const contextualSummary = _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.generateContextualSummary(userId, sessionId);\n        let greeting = \"\";\n        // Saludo inicial vs. de regreso\n        if (memory.totalTurns === 0) {\n            greeting = this.selectResponse('greeting');\n            if (userName) {\n                greeting = greeting.replace(/¡Hola!/, `¡Hola, ${userName}!`);\n            }\n        } else {\n            // Saludo personalizado basado en memoria\n            const daysSinceLastChat = Math.floor((Date.now() - memory.lastActivity.getTime()) / (1000 * 60 * 60 * 24));\n            if (daysSinceLastChat > 7) {\n                greeting = `¡Qué bueno verte de vuelta${userName ? ', ' + userName : ''}! ${contextualSummary}`;\n            } else if (daysSinceLastChat > 1) {\n                greeting = `¡Hola de nuevo${userName ? ', ' + userName : ''}! ${contextualSummary}`;\n            } else {\n                greeting = `¡Hola${userName ? ', ' + userName : ''}! ${contextualSummary}`;\n            }\n        }\n        // Agregar sugerencias personalizadas\n        const suggestions = _conversation_memory__WEBPACK_IMPORTED_MODULE_1__.ConversationMemoryManager.getPersonalizedSuggestions(userId, sessionId);\n        if (suggestions.length > 0) {\n            greeting += `\\n\\n💡 **Sugerencias basadas en nuestras conversaciones:**\\n${suggestions.slice(0, 3).map((s)=>`• ${s}`).join('\\n')}`;\n        }\n        return greeting;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/sara-personality.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/school-schedule-manager.ts":
/*!********************************************!*\
  !*** ./src/lib/school-schedule-manager.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SchoolScheduleManager: () => (/* binding */ SchoolScheduleManager)\n/* harmony export */ });\n/* harmony import */ var _student_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./student-context */ \"(rsc)/./src/lib/student-context.ts\");\n// Sistema de Gestión de Horario Escolar\n// Permite importar, gestionar y optimizar horarios académicos\n\nclass SchoolScheduleManager {\n    /**\n   * Importa un horario escolar desde diferentes fuentes\n   */ static async importSchedule(userId, scheduleData, source = 'manual') {\n        // Validar datos de entrada\n        const validatedSchedule = this.validateScheduleData(scheduleData);\n        // Detectar conflictos\n        const conflicts = this.detectScheduleConflicts(validatedSchedule.classes);\n        if (conflicts.some((c)=>c.severity === 'critical')) {\n            throw new Error(`Conflictos críticos detectados: ${conflicts.map((c)=>c.description).join(', ')}`);\n        }\n        // Crear objeto de horario importado\n        const importedSchedule = {\n            source,\n            importDate: new Date(),\n            classes: validatedSchedule.classes,\n            term: validatedSchedule.term || this.createDefaultTerm(),\n            metadata: {\n                schoolName: validatedSchedule.metadata?.schoolName || 'Unknown School',\n                academicYear: validatedSchedule.metadata?.academicYear || new Date().getFullYear().toString(),\n                semester: validatedSchedule.metadata?.semester || 'Current Semester',\n                totalCredits: this.calculateTotalCredits(validatedSchedule.classes)\n            }\n        };\n        // Actualizar contexto del estudiante\n        await this.updateStudentSchedule(userId, importedSchedule);\n        // Generar análisis y recomendaciones\n        await this.generateScheduleInsights(userId, importedSchedule);\n        return importedSchedule;\n    }\n    /**\n   * Parsea texto de horario en lenguaje natural\n   */ static parseNaturalLanguageSchedule(text) {\n        const classes = [];\n        const lines = text.split('\\n').filter((line)=>line.trim().length > 0);\n        for (const line of lines){\n            const parsed = this.parseScheduleLine(line);\n            if (parsed) {\n                classes.push(parsed);\n            }\n        }\n        return classes;\n    }\n    /**\n   * Parsea una línea individual de horario\n   */ static parseScheduleLine(line) {\n        // Patrones para diferentes formatos de horario\n        const patterns = [\n            // \"Lunes 08:00-09:30 Matemáticas Aula 101 Prof. García\"\n            /^(lunes|martes|miércoles|jueves|viernes|sábado|domingo)\\s+(\\d{1,2}:\\d{2})-(\\d{1,2}:\\d{2})\\s+([^,]+?)(?:\\s+(?:aula|salón|lab)\\s*(\\w+))?\\s*(?:prof\\.?\\s*(.+))?$/i,\n            // \"Matemáticas - Lunes 8:00 AM a 9:30 AM\"\n            /^([^-]+?)\\s*-\\s*(lunes|martes|miércoles|jueves|viernes|sábado|domingo)\\s+(\\d{1,2}:\\d{2})\\s*(?:am|pm)?\\s*a\\s*(\\d{1,2}:\\d{2})\\s*(?:am|pm)?/i,\n            // \"08:00 Matemáticas (Lunes)\"\n            /^(\\d{1,2}:\\d{2})\\s+([^(]+?)\\s*\\(\\s*(lunes|martes|miércoles|jueves|viernes|sábado|domingo)\\s*\\)/i\n        ];\n        for (const pattern of patterns){\n            const match = line.match(pattern);\n            if (match) {\n                return this.createClassFromMatch(match, pattern);\n            }\n        }\n        return null;\n    }\n    /**\n   * Crea un objeto SchoolClass desde una coincidencia de regex\n   */ static createClassFromMatch(match, pattern) {\n        const id = `class_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n        // Mapear nombres de días en español a inglés\n        const dayMap = {\n            'lunes': 'monday',\n            'martes': 'tuesday',\n            'miércoles': 'wednesday',\n            'jueves': 'thursday',\n            'viernes': 'friday',\n            'sábado': 'saturday',\n            'domingo': 'sunday'\n        };\n        // Determinar el formato basado en el patrón\n        let day;\n        let startTime;\n        let endTime;\n        let subject;\n        let teacher;\n        let classroom;\n        if (pattern.source.includes('lunes|martes')) {\n            // Formato: \"Día Hora-Hora Materia [Aula] [Prof]\"\n            day = dayMap[match[1].toLowerCase()];\n            startTime = this.normalizeTime(match[2]);\n            endTime = this.normalizeTime(match[3]);\n            subject = match[4].trim();\n            classroom = match[5];\n            teacher = match[6];\n        } else {\n            // Otros formatos - ajustar según necesidad\n            day = 'monday' // Default\n            ;\n            startTime = '08:00';\n            endTime = '09:00';\n            subject = 'Unknown Subject';\n        }\n        const duration = this.calculateDuration(startTime, endTime);\n        return {\n            id,\n            subject: this.normalizeSubjectName(subject),\n            teacher: teacher?.trim(),\n            classroom: classroom?.trim(),\n            day,\n            startTime,\n            endTime,\n            duration,\n            type: this.inferClassType(subject),\n            recurring: true,\n            notes: `Imported from natural language: \"${match[0]}\"`\n        };\n    }\n    /**\n   * Normaliza el nombre de una materia\n   */ static normalizeSubjectName(subject) {\n        const normalized = subject.trim().replace(/\\s+/g, ' ').replace(/^(el|la|los|las)\\s+/i, '');\n        // Capitalizar primera letra de cada palabra\n        return normalized.split(' ').map((word)=>word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n    }\n    /**\n   * Infiere el tipo de clase basado en el nombre de la materia\n   */ static inferClassType(subject) {\n        const subjectLower = subject.toLowerCase();\n        if (subjectLower.includes('lab') || subjectLower.includes('laboratorio')) {\n            return 'lab';\n        }\n        if (subjectLower.includes('taller') || subjectLower.includes('workshop')) {\n            return 'workshop';\n        }\n        if (subjectLower.includes('seminario') || subjectLower.includes('seminar')) {\n            return 'seminar';\n        }\n        if (subjectLower.includes('tutorial') || subjectLower.includes('tutoría')) {\n            return 'tutorial';\n        }\n        return 'lecture';\n    }\n    /**\n   * Normaliza formato de hora\n   */ static normalizeTime(time) {\n        // Convertir formatos como \"8:00\", \"08:00\", \"8\", etc. a \"08:00\"\n        const timeMatch = time.match(/(\\d{1,2})(?::(\\d{2}))?/);\n        if (timeMatch) {\n            const hours = timeMatch[1].padStart(2, '0');\n            const minutes = timeMatch[2] || '00';\n            return `${hours}:${minutes}`;\n        }\n        return time;\n    }\n    /**\n   * Calcula la duración entre dos horas\n   */ static calculateDuration(startTime, endTime) {\n        const start = this.timeToMinutes(startTime);\n        const end = this.timeToMinutes(endTime);\n        return end - start;\n    }\n    /**\n   * Convierte formato HH:MM a minutos desde medianoche\n   */ static timeToMinutes(time) {\n        const [hours, minutes] = time.split(':').map(Number);\n        return hours * 60 + minutes;\n    }\n    /**\n   * Detecta conflictos en el horario\n   */ static detectScheduleConflicts(classes) {\n        const conflicts = [];\n        // Agrupar clases por día\n        const classesByDay = classes.reduce((acc, cls)=>{\n            if (!acc[cls.day]) acc[cls.day] = [];\n            acc[cls.day].push(cls);\n            return acc;\n        }, {});\n        // Detectar solapamientos de tiempo\n        for (const [day, dayClasses] of Object.entries(classesByDay)){\n            const sortedClasses = dayClasses.sort((a, b)=>this.timeToMinutes(a.startTime) - this.timeToMinutes(b.startTime));\n            for(let i = 0; i < sortedClasses.length - 1; i++){\n                const current = sortedClasses[i];\n                const next = sortedClasses[i + 1];\n                const currentEnd = this.timeToMinutes(current.endTime);\n                const nextStart = this.timeToMinutes(next.startTime);\n                if (currentEnd > nextStart) {\n                    conflicts.push({\n                        type: 'time_overlap',\n                        severity: 'error',\n                        description: `Solapamiento de clases el ${day}: ${current.subject} (${current.startTime}-${current.endTime}) con ${next.subject} (${next.startTime}-${next.endTime})`,\n                        affectedClasses: [\n                            current.id,\n                            next.id\n                        ],\n                        suggestions: [\n                            'Ajustar horarios para evitar solapamiento',\n                            'Verificar que las horas estén correctas',\n                            'Considerar modalidad virtual para una de las clases'\n                        ]\n                    });\n                }\n            }\n        }\n        // Detectar sobrecarga diaria\n        for (const [day, dayClasses] of Object.entries(classesByDay)){\n            const totalHours = dayClasses.reduce((sum, cls)=>sum + cls.duration, 0) / 60;\n            if (totalHours > 8) {\n                conflicts.push({\n                    type: 'student_overload',\n                    severity: 'warning',\n                    description: `Día muy cargado el ${day}: ${totalHours.toFixed(1)} horas de clase`,\n                    affectedClasses: dayClasses.map((c)=>c.id),\n                    suggestions: [\n                        'Considerar distribuir algunas clases en otros días',\n                        'Planificar descansos adecuados',\n                        'Preparar material de estudio con anticipación'\n                    ]\n                });\n            }\n        }\n        return conflicts;\n    }\n    /**\n   * Analiza el horario y encuentra slots de tiempo libre para estudio\n   */ static analyzeStudyTimeSlots(classes) {\n        const studySlots = [];\n        const daysOfWeek = [\n            'monday',\n            'tuesday',\n            'wednesday',\n            'thursday',\n            'friday'\n        ];\n        for (const day of daysOfWeek){\n            const dayClasses = classes.filter((c)=>c.day === day).sort((a, b)=>this.timeToMinutes(a.startTime) - this.timeToMinutes(b.startTime));\n            // Encontrar gaps entre clases\n            const gaps = this.findTimeGaps(dayClasses, day);\n            studySlots.push(...gaps);\n        }\n        return studySlots;\n    }\n    /**\n   * Encuentra gaps de tiempo entre clases\n   */ static findTimeGaps(dayClasses, day) {\n        const gaps = [];\n        const dayStart = 7 * 60 // 7:00 AM en minutos\n        ;\n        const dayEnd = 22 * 60 // 10:00 PM en minutos\n        ;\n        if (dayClasses.length === 0) {\n            // Día completo libre\n            gaps.push({\n                day,\n                startTime: '08:00',\n                endTime: '20:00',\n                duration: 12 * 60,\n                type: 'free',\n                recommendedFor: [\n                    'any'\n                ],\n                energy_level: 'high'\n            });\n            return gaps;\n        }\n        // Gap antes de la primera clase\n        const firstClassStart = this.timeToMinutes(dayClasses[0].startTime);\n        if (firstClassStart > dayStart + 60) {\n            gaps.push({\n                day,\n                startTime: this.minutesToTime(dayStart),\n                endTime: dayClasses[0].startTime,\n                duration: firstClassStart - dayStart,\n                type: 'free',\n                recommendedFor: [\n                    'review',\n                    'preparation'\n                ],\n                energy_level: 'high'\n            });\n        }\n        // Gaps entre clases\n        for(let i = 0; i < dayClasses.length - 1; i++){\n            const currentEnd = this.timeToMinutes(dayClasses[i].endTime);\n            const nextStart = this.timeToMinutes(dayClasses[i + 1].startTime);\n            const gapDuration = nextStart - currentEnd;\n            if (gapDuration >= 30) {\n                const gapType = this.classifyTimeGap(gapDuration);\n                gaps.push({\n                    day,\n                    startTime: dayClasses[i].endTime,\n                    endTime: dayClasses[i + 1].startTime,\n                    duration: gapDuration,\n                    type: gapType,\n                    recommendedFor: this.getRecommendedSubjects(gapDuration, currentEnd),\n                    energy_level: this.getEnergyLevel(currentEnd)\n                });\n            }\n        }\n        // Gap después de la última clase\n        const lastClassEnd = this.timeToMinutes(dayClasses[dayClasses.length - 1].endTime);\n        if (lastClassEnd < dayEnd - 60) {\n            gaps.push({\n                day,\n                startTime: dayClasses[dayClasses.length - 1].endTime,\n                endTime: this.minutesToTime(dayEnd),\n                duration: dayEnd - lastClassEnd,\n                type: 'free',\n                recommendedFor: [\n                    'homework',\n                    'projects',\n                    'review'\n                ],\n                energy_level: this.getEnergyLevel(lastClassEnd)\n            });\n        }\n        return gaps;\n    }\n    /**\n   * Clasifica un gap de tiempo según su duración\n   */ static classifyTimeGap(duration) {\n        if (duration <= 30) return 'short_break';\n        if (duration <= 90) return 'study_period';\n        if (duration >= 60 && duration <= 120) return 'lunch_break';\n        return 'free';\n    }\n    /**\n   * Recomienda materias según la duración y momento del día\n   */ static getRecommendedSubjects(duration, timeInMinutes) {\n        const hour = Math.floor(timeInMinutes / 60);\n        if (duration <= 30) {\n            return [\n                'review',\n                'flashcards',\n                'quick_reading'\n            ];\n        }\n        if (duration <= 60) {\n            return [\n                'homework',\n                'practice_problems',\n                'note_review'\n            ];\n        }\n        if (hour < 12) {\n            return [\n                'difficult_subjects',\n                'mathematics',\n                'science',\n                'new_concepts'\n            ];\n        } else if (hour < 15) {\n            return [\n                'reading',\n                'writing',\n                'research',\n                'projects'\n            ];\n        } else {\n            return [\n                'review',\n                'practice',\n                'creative_work',\n                'group_study'\n            ];\n        }\n    }\n    /**\n   * Determina el nivel de energía según la hora del día\n   */ static getEnergyLevel(timeInMinutes) {\n        const hour = Math.floor(timeInMinutes / 60);\n        if (hour >= 8 && hour <= 11) return 'high';\n        if (hour >= 14 && hour <= 16) return 'high';\n        if (hour >= 12 && hour <= 13) return 'low';\n        if (hour >= 17 && hour <= 19) return 'medium';\n        return 'low';\n    }\n    /**\n   * Convierte minutos desde medianoche a formato HH:MM\n   */ static minutesToTime(minutes) {\n        const hours = Math.floor(minutes / 60).toString().padStart(2, '0');\n        const mins = (minutes % 60).toString().padStart(2, '0');\n        return `${hours}:${mins}`;\n    }\n    /**\n   * Valida los datos del horario importado\n   */ static validateScheduleData(data) {\n        if (!data.classes || !Array.isArray(data.classes)) {\n            throw new Error('Classes array is required');\n        }\n        // Validar cada clase\n        const validatedClasses = data.classes.map((cls)=>this.validateClass(cls));\n        return {\n            classes: validatedClasses,\n            term: data.term,\n            metadata: data.metadata\n        };\n    }\n    /**\n   * Valida una clase individual\n   */ static validateClass(cls) {\n        if (!cls.subject || !cls.day || !cls.startTime || !cls.endTime) {\n            throw new Error('Class must have subject, day, startTime, and endTime');\n        }\n        return {\n            id: cls.id || `class_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n            subject: cls.subject,\n            teacher: cls.teacher,\n            classroom: cls.classroom,\n            day: cls.day,\n            startTime: cls.startTime,\n            endTime: cls.endTime,\n            duration: cls.duration || this.calculateDuration(cls.startTime, cls.endTime),\n            type: cls.type || 'lecture',\n            recurring: cls.recurring !== false,\n            notes: cls.notes\n        };\n    }\n    /**\n   * Crea un término académico por defecto\n   */ static createDefaultTerm() {\n        const now = new Date();\n        const currentYear = now.getFullYear();\n        const currentMonth = now.getMonth();\n        // Determinar si estamos en primer o segundo semestre\n        const isFirstSemester = currentMonth >= 1 && currentMonth <= 6;\n        const semesterStart = isFirstSemester ? new Date(currentYear, 1, 1) // Febrero\n         : new Date(currentYear, 7, 1) // Agosto\n        ;\n        const semesterEnd = isFirstSemester ? new Date(currentYear, 6, 31) // Julio\n         : new Date(currentYear, 11, 31) // Diciembre\n        ;\n        return {\n            name: `${isFirstSemester ? 'Primer' : 'Segundo'} Semestre ${currentYear}`,\n            startDate: semesterStart,\n            endDate: semesterEnd,\n            holidays: [],\n            examPeriods: []\n        };\n    }\n    /**\n   * Calcula créditos totales (estimado)\n   */ static calculateTotalCredits(classes) {\n        // Estimación: 1 crédito por cada 50 minutos de clase semanal\n        const totalWeeklyMinutes = classes.reduce((sum, cls)=>sum + cls.duration, 0);\n        return Math.round(totalWeeklyMinutes / 50);\n    }\n    /**\n   * Actualiza el contexto del estudiante con el nuevo horario\n   */ static async updateStudentSchedule(userId, schedule) {\n        const context = await _student_context__WEBPACK_IMPORTED_MODULE_0__.StudentContextManager.getContext(userId);\n        if (!context) return;\n        // Convertir clases a formato de calendario académico\n        const academicCalendar = {\n            schoolSchedule: schedule.classes.map((cls)=>({\n                    subject: cls.subject,\n                    day: cls.day,\n                    startTime: cls.startTime,\n                    endTime: cls.endTime,\n                    classroom: cls.classroom,\n                    teacher: cls.teacher\n                })),\n            examPeriods: schedule.term.examPeriods.map((period)=>({\n                    subject: 'Multiple',\n                    date: period.startDate,\n                    startTime: '08:00',\n                    endTime: '18:00',\n                    type: period.type,\n                    syllabus: []\n                })),\n            assignments: [],\n            holidays: schedule.term.holidays\n        };\n        await _student_context__WEBPACK_IMPORTED_MODULE_0__.StudentContextManager.updateContext(userId, {\n            academicCalendar\n        });\n    }\n    /**\n   * Genera insights y recomendaciones del horario\n   */ static async generateScheduleInsights(userId, schedule) {\n        const studySlots = this.analyzeStudyTimeSlots(schedule.classes);\n        const conflicts = this.detectScheduleConflicts(schedule.classes);\n        // Aquí se pueden generar insights adicionales como:\n        // - Mejores momentos para estudiar cada materia\n        // - Recomendaciones de horarios de estudio\n        // - Alertas sobre días muy cargados\n        // - Sugerencias de optimización\n        console.log(`Generated ${studySlots.length} study time slots and detected ${conflicts.length} conflicts`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/school-schedule-manager.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/student-context.ts":
/*!************************************!*\
  !*** ./src/lib/student-context.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StudentContextManager: () => (/* binding */ StudentContextManager)\n/* harmony export */ });\n// Sistema de Contexto Persistente del Estudiante\n// Permite a la IA Tutora mantener información contextual y personalizada\n// Clase para gestionar el contexto del estudiante\nclass StudentContextManager {\n    static{\n        this.contexts = new Map();\n    }\n    static async getContext(userId) {\n        // Primero intentar obtener de memoria\n        if (this.contexts.has(userId)) {\n            return this.contexts.get(userId);\n        }\n        // Intentar cargar desde almacenamiento persistente\n        try {\n            const stored = await this.loadFromStorage(userId);\n            if (stored) {\n                this.contexts.set(userId, stored);\n                return stored;\n            }\n        } catch (error) {\n            console.error('Error loading student context:', error);\n        }\n        return null;\n    }\n    static async createDefaultContext(userId, basicInfo) {\n        const defaultContext = {\n            userId,\n            academicInfo: {\n                grade: basicInfo?.academicInfo?.grade || '10th Grade',\n                school: basicInfo?.academicInfo?.school || 'Unknown School',\n                academicYear: new Date().getFullYear().toString(),\n                specialization: basicInfo?.academicInfo?.specialization\n            },\n            learningStyle: {\n                primary: 'analytical',\n                preferences: {\n                    studyTimePreference: 'afternoon',\n                    sessionDuration: 'medium',\n                    breakFrequency: 'moderate',\n                    difficultyProgression: 'gradual'\n                }\n            },\n            subjectPerformances: [],\n            currentGoals: [],\n            schedulePreferences: {\n                preferredStudyTimes: [],\n                unavailableTimes: {\n                    recurring: [],\n                    specific: []\n                },\n                studyEnvironment: {\n                    location: 'home',\n                    requiresQuiet: true,\n                    allowsDigitalDevices: true,\n                    preferredLighting: 'moderate'\n                }\n            },\n            academicCalendar: {\n                schoolSchedule: [],\n                examPeriods: [],\n                assignments: [],\n                holidays: []\n            },\n            studyPatterns: {\n                userId,\n                patterns: {\n                    mostProductiveHours: [\n                        '14:00',\n                        '15:00',\n                        '16:00'\n                    ],\n                    averageSessionDuration: 45,\n                    preferredBreakDuration: 10,\n                    bestPerformingSubjects: [],\n                    strugglingSubjects: [],\n                    procrastinationTriggers: [],\n                    motivationalFactors: []\n                },\n                weeklyStats: {\n                    totalStudyHours: 0,\n                    subjectDistribution: {},\n                    goalCompletionRate: 0,\n                    averageFocusScore: 5\n                },\n                lastUpdated: new Date()\n            },\n            preferences: {\n                communicationStyle: 'friendly',\n                motivationLevel: 'medium',\n                feedbackPreference: 'encouraging',\n                reminderFrequency: 'moderate'\n            },\n            lastInteraction: new Date(),\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        this.contexts.set(userId, defaultContext);\n        await this.saveToStorage(userId, defaultContext);\n        return defaultContext;\n    }\n    static async updateContext(userId, updates) {\n        let context = await this.getContext(userId);\n        if (!context) {\n            context = await this.createDefaultContext(userId);\n        }\n        const updatedContext = {\n            ...context,\n            ...updates,\n            userId,\n            updatedAt: new Date(),\n            lastInteraction: new Date()\n        };\n        this.contexts.set(userId, updatedContext);\n        await this.saveToStorage(userId, updatedContext);\n        return updatedContext;\n    }\n    static async updateSubjectPerformance(userId, subject, performance) {\n        const context = await this.getContext(userId);\n        if (!context) return;\n        const existingIndex = context.subjectPerformances.findIndex((p)=>p.subject === subject);\n        if (existingIndex >= 0) {\n            context.subjectPerformances[existingIndex] = {\n                ...context.subjectPerformances[existingIndex],\n                ...performance,\n                subject\n            };\n        } else {\n            context.subjectPerformances.push({\n                subject,\n                averageGrade: 0,\n                difficultyLevel: 5,\n                timeSpentWeekly: 0,\n                lastStudied: new Date(),\n                strongTopics: [],\n                weakTopics: [],\n                preferredStudyMethods: [],\n                upcomingDeadlines: [],\n                ...performance\n            });\n        }\n        await this.updateContext(userId, {\n            subjectPerformances: context.subjectPerformances\n        });\n    }\n    static async addGoal(userId, goal) {\n        const context = await this.getContext(userId);\n        if (!context) throw new Error('User context not found');\n        const newGoal = {\n            ...goal,\n            id: `goal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        context.currentGoals.push(newGoal);\n        await this.updateContext(userId, {\n            currentGoals: context.currentGoals\n        });\n        return newGoal;\n    }\n    static async updateStudyPattern(userId, sessionData) {\n        const context = await this.getContext(userId);\n        if (!context) return;\n        // Update patterns based on session data\n        const patterns = context.studyPatterns.patterns;\n        const hour = sessionData.startTime.split(':')[0] + ':00';\n        if (!patterns.mostProductiveHours.includes(hour)) {\n            patterns.mostProductiveHours.push(hour);\n        }\n        // Update weekly stats\n        const stats = context.studyPatterns.weeklyStats;\n        stats.totalStudyHours += sessionData.duration / 60;\n        stats.subjectDistribution[sessionData.subject] = (stats.subjectDistribution[sessionData.subject] || 0) + sessionData.duration / 60;\n        stats.averageFocusScore = (stats.averageFocusScore + sessionData.focusScore) / 2;\n        context.studyPatterns.lastUpdated = new Date();\n        await this.updateContext(userId, {\n            studyPatterns: context.studyPatterns\n        });\n    }\n    // Storage methods (simplified for demo - in production would use database)\n    static async loadFromStorage(userId) {\n        try {\n            // In a real implementation, this would load from database\n            // For now, we'll use localStorage as a simple persistence layer\n            if (false) {}\n        } catch (error) {\n            console.error('Error loading context from storage:', error);\n        }\n        return null;\n    }\n    static async saveToStorage(userId, context) {\n        try {\n            // In a real implementation, this would save to database\n            // For now, we'll use localStorage as a simple persistence layer\n            if (false) {}\n        } catch (error) {\n            console.error('Error saving context to storage:', error);\n        }\n    }\n    // Utility methods for analysis\n    static analyzeStudentNeeds(context) {\n        const urgentTasks = [];\n        const recommendations = [];\n        const riskAreas = [];\n        const strengths = [];\n        // Analyze upcoming deadlines\n        context.subjectPerformances.forEach((subject)=>{\n            subject.upcomingDeadlines.forEach((deadline)=>{\n                const daysUntil = Math.ceil((deadline.date.getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n                if (daysUntil <= 3 && deadline.preparationStatus !== 'ready') {\n                    urgentTasks.push(`${deadline.type} de ${subject.subject} en ${daysUntil} días`);\n                }\n            });\n            // Identify struggling subjects\n            if (subject.averageGrade < 70) {\n                riskAreas.push(`Rendimiento bajo en ${subject.subject} (${subject.averageGrade}%)`);\n                recommendations.push(`Programar sesiones adicionales de ${subject.subject}`);\n            }\n            // Identify strengths\n            if (subject.averageGrade > 85) {\n                strengths.push(`Excelente rendimiento en ${subject.subject}`);\n            }\n        });\n        // Analyze study patterns\n        if (context.studyPatterns.weeklyStats.totalStudyHours < 10) {\n            riskAreas.push('Pocas horas de estudio semanal');\n            recommendations.push('Incrementar tiempo de estudio gradualmente');\n        }\n        return {\n            urgentTasks,\n            recommendations,\n            riskAreas,\n            strengths\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/student-context.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/study-session-planner.ts":
/*!******************************************!*\
  !*** ./src/lib/study-session-planner.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StudySessionPlanner: () => (/* binding */ StudySessionPlanner)\n/* harmony export */ });\n// Planificador Inteligente de Sesiones de Estudio\n// Genera planes de estudio personalizados y adaptativos basados en el contexto del estudiante\nclass StudySessionPlanner {\n    /**\n   * Genera un plan de estudio inteligente basado en el contexto del estudiante\n   */ static async generateStudyPlan(context, planningPeriod, preferences = {}) {\n        // Configurar preferencias por defecto\n        const defaultPreferences = {\n            preferredSessionDuration: 45,\n            maxSessionsPerDay: 4,\n            breakDurationBetweenSessions: 15,\n            preferredStudyTimes: context.studyPatterns.patterns.mostProductiveHours,\n            avoidTimes: [],\n            prioritizeWeakSubjects: true,\n            includeReviewSessions: true,\n            adaptToMood: true,\n            respectSleepSchedule: true,\n            ...preferences\n        };\n        // Analizar necesidades académicas\n        const academicNeeds = this.analyzeAcademicNeeds(context);\n        // Identificar slots de tiempo disponibles\n        const availableSlots = this.identifyAvailableTimeSlots(context, planningPeriod);\n        // Generar sesiones de estudio\n        const sessions = await this.generateStudySessions(context, academicNeeds, availableSlots, defaultPreferences);\n        // Optimizar distribución de sesiones\n        const optimizedSessions = this.optimizeSessionDistribution(sessions, context);\n        // Crear plan de estudio\n        const studyPlan = {\n            id: `plan_${Date.now()}_${Math.random().toString(36).substr(2, 8)}`,\n            userId: context.userId,\n            title: this.generatePlanTitle(planningPeriod, academicNeeds),\n            description: this.generatePlanDescription(academicNeeds, optimizedSessions.length),\n            startDate: planningPeriod.startDate,\n            endDate: planningPeriod.endDate,\n            totalSessions: optimizedSessions.length,\n            completedSessions: 0,\n            subjects: [\n                ...new Set(optimizedSessions.map((s)=>s.subject))\n            ],\n            goals: context.currentGoals,\n            sessions: optimizedSessions,\n            weeklySchedule: this.organizeSessionsByWeek(optimizedSessions),\n            adaptiveSettings: {\n                adjustDifficultyBasedOnPerformance: true,\n                prioritizeWeakSubjects: defaultPreferences.prioritizeWeakSubjects,\n                respectEnergyLevels: true,\n                allowFlexibleScheduling: true\n            },\n            metrics: this.calculatePlanMetrics(optimizedSessions),\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        return studyPlan;\n    }\n    /**\n   * Analiza las necesidades académicas del estudiante\n   */ static analyzeAcademicNeeds(context) {\n        // Analizar deadlines urgentes\n        const urgentDeadlines = context.subjectPerformances.flatMap((subject)=>subject.upcomingDeadlines.filter((deadline)=>{\n                const daysUntil = Math.ceil((deadline.date.getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n                return daysUntil <= 14 && deadline.preparationStatus !== 'ready';\n            }).map((deadline)=>({\n                    subject: subject.subject,\n                    deadline: deadline.date,\n                    type: deadline.type,\n                    preparationNeeded: this.estimatePreparationHours(deadline.type, subject.difficultyLevel)\n                }))).sort((a, b)=>a.deadline.getTime() - b.deadline.getTime());\n        // Identificar materias débiles\n        const weakSubjects = context.subjectPerformances.filter((subject)=>subject.averageGrade < 75 || subject.weakTopics.length > 0).map((subject)=>({\n                subject: subject.subject,\n                priority: this.calculateSubjectPriority(subject),\n                hoursNeeded: this.estimateImprovementHours(subject)\n            })).sort((a, b)=>b.priority - a.priority);\n        // Determinar necesidades de repaso\n        const reviewNeeds = context.subjectPerformances.map((subject)=>({\n                subject: subject.subject,\n                topics: subject.strongTopics,\n                frequency: this.determineReviewFrequency(subject)\n            })).filter((review)=>review.topics.length > 0);\n        // Analizar objetivos\n        const goalBasedNeeds = context.currentGoals.filter((goal)=>goal.progress < 100).map((goal)=>({\n                goal,\n                sessionsNeeded: this.estimateSessionsForGoal(goal)\n            }));\n        return {\n            urgentDeadlines,\n            weakSubjects,\n            reviewNeeds,\n            goalBasedNeeds\n        };\n    }\n    /**\n   * Identifica slots de tiempo disponibles para estudio\n   */ static identifyAvailableTimeSlots(context, period) {\n        const slots = [];\n        const currentDate = new Date(period.startDate);\n        while(currentDate <= period.endDate){\n            const dayOfWeek = this.getDayOfWeek(currentDate);\n            // Obtener clases del día\n            const dayClasses = context.academicCalendar.schoolSchedule.filter((schedule)=>schedule.day === dayOfWeek);\n            // Generar slots basándose en el horario escolar y preferencias\n            const daySlots = this.generateDaySlots(dayOfWeek, dayClasses, context);\n            // Agregar fecha específica a cada slot\n            daySlots.forEach((slot)=>{\n                slots.push({\n                    ...slot,\n                    day: currentDate.toISOString().split('T')[0] // YYYY-MM-DD format\n                });\n            });\n            currentDate.setDate(currentDate.getDate() + 1);\n        }\n        return slots;\n    }\n    /**\n   * Genera sesiones de estudio basadas en necesidades y slots disponibles\n   */ static async generateStudySessions(context, needs, availableSlots, preferences) {\n        const sessions = [];\n        let slotIndex = 0;\n        // 1. Crear sesiones para deadlines urgentes (prioridad máxima)\n        for (const deadline of needs.urgentDeadlines){\n            const sessionsNeeded = Math.ceil(deadline.preparationNeeded / (preferences.preferredSessionDuration / 60));\n            for(let i = 0; i < sessionsNeeded && slotIndex < availableSlots.length; i++){\n                const slot = availableSlots[slotIndex++];\n                sessions.push(this.createStudySession({\n                    slot,\n                    subject: deadline.subject,\n                    type: 'exam_prep',\n                    priority: 'urgent',\n                    topic: `Preparación para ${deadline.type}`,\n                    deadline: deadline.deadline,\n                    preferences\n                }));\n            }\n        }\n        // 2. Crear sesiones para materias débiles\n        for (const weakSubject of needs.weakSubjects){\n            const sessionsNeeded = Math.ceil(weakSubject.hoursNeeded / (preferences.preferredSessionDuration / 60));\n            for(let i = 0; i < sessionsNeeded && slotIndex < availableSlots.length; i++){\n                const slot = availableSlots[slotIndex++];\n                sessions.push(this.createStudySession({\n                    slot,\n                    subject: weakSubject.subject,\n                    type: 'practice',\n                    priority: 'high',\n                    topic: 'Refuerzo de conceptos débiles',\n                    preferences\n                }));\n            }\n        }\n        // 3. Crear sesiones de repaso\n        if (preferences.includeReviewSessions) {\n            for (const review of needs.reviewNeeds){\n                const reviewSession = this.createReviewSession(review, availableSlots[slotIndex++], preferences);\n                if (reviewSession) {\n                    sessions.push(reviewSession);\n                }\n            }\n        }\n        // 4. Crear sesiones para objetivos específicos\n        for (const goalNeed of needs.goalBasedNeeds){\n            for(let i = 0; i < goalNeed.sessionsNeeded && slotIndex < availableSlots.length; i++){\n                const slot = availableSlots[slotIndex++];\n                sessions.push(this.createGoalBasedSession(goalNeed.goal, slot, preferences));\n            }\n        }\n        return sessions;\n    }\n    /**\n   * Crea una sesión de estudio individual\n   */ static createStudySession(params) {\n        const { slot, subject, type, priority, topic, preferences } = params;\n        const duration = Math.min(slot.duration, preferences.preferredSessionDuration);\n        return {\n            id: `session_${Date.now()}_${Math.random().toString(36).substr(2, 8)}`,\n            title: `${subject}: ${topic}`,\n            subject,\n            topic,\n            date: new Date(slot.day),\n            startTime: slot.startTime,\n            endTime: this.addMinutesToTime(slot.startTime, duration),\n            duration,\n            type,\n            difficulty: this.inferDifficulty(type, subject),\n            priority,\n            techniques: this.selectStudyTechniques(type, subject, duration),\n            materials: this.selectStudyMaterials(subject, type),\n            goals: [\n                topic\n            ],\n            estimatedFocusLevel: this.estimateFocusLevel(slot.energy_level, type),\n            energyRequirement: this.mapEnergyLevel(slot.energy_level),\n            environment: slot.type === 'free' ? 'quiet' : 'moderate',\n            status: 'planned',\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n    }\n    /**\n   * Optimiza la distribución de sesiones para evitar sobrecarga\n   */ static optimizeSessionDistribution(sessions, context) {\n        // Agrupar sesiones por día\n        const sessionsByDay = sessions.reduce((acc, session)=>{\n            const dateKey = session.date.toISOString().split('T')[0];\n            if (!acc[dateKey]) acc[dateKey] = [];\n            acc[dateKey].push(session);\n            return acc;\n        }, {});\n        // Optimizar cada día\n        const optimizedSessions = [];\n        for (const [date, daySessions] of Object.entries(sessionsByDay)){\n            // Limitar sesiones por día según preferencias\n            const maxSessions = context.learningStyle.preferences.sessionDuration === 'long' ? 2 : 4;\n            const prioritizedSessions = daySessions.sort((a, b)=>this.priorityWeight(b.priority) - this.priorityWeight(a.priority)).slice(0, maxSessions);\n            // Balancear dificultad a lo largo del día\n            const balancedSessions = this.balanceSessionDifficulty(prioritizedSessions);\n            optimizedSessions.push(...balancedSessions);\n        }\n        return optimizedSessions;\n    }\n    /**\n   * Organiza sesiones por semana para el plan\n   */ static organizeSessionsByWeek(sessions) {\n        return sessions.reduce((acc, session)=>{\n            const dayKey = session.date.toLocaleDateString('es-ES', {\n                weekday: 'long'\n            });\n            if (!acc[dayKey]) acc[dayKey] = [];\n            acc[dayKey].push(session);\n            return acc;\n        }, {});\n    }\n    /**\n   * Calcula métricas del plan de estudio\n   */ static calculatePlanMetrics(sessions) {\n        const totalHours = sessions.reduce((sum, session)=>sum + session.duration, 0) / 60;\n        const subjectBalance = sessions.reduce((acc, session)=>{\n            acc[session.subject] = (acc[session.subject] || 0) + session.duration / 60;\n            return acc;\n        }, {});\n        return {\n            totalPlannedHours: totalHours,\n            actualStudyHours: 0,\n            averageEffectiveness: 0,\n            goalCompletionRate: 0,\n            subjectBalance\n        };\n    }\n    // Funciones auxiliares\n    static estimatePreparationHours(type, difficultyLevel) {\n        const baseHours = {\n            'exam': 8,\n            'assignment': 4,\n            'project': 12,\n            'quiz': 2\n        };\n        return (baseHours[type] || 4) * (difficultyLevel / 5);\n    }\n    static calculateSubjectPriority(subject) {\n        let priority = 0;\n        // Prioridad basada en calificación\n        if (subject.averageGrade < 60) priority += 10;\n        else if (subject.averageGrade < 70) priority += 7;\n        else if (subject.averageGrade < 80) priority += 5;\n        // Prioridad basada en temas débiles\n        priority += subject.weakTopics.length * 2;\n        // Prioridad basada en próximos deadlines\n        priority += subject.upcomingDeadlines.length * 3;\n        // Prioridad basada en tiempo sin estudiar\n        const daysSinceLastStudy = Math.floor((Date.now() - subject.lastStudied.getTime()) / (1000 * 60 * 60 * 24));\n        if (daysSinceLastStudy > 7) priority += 5;\n        return priority;\n    }\n    static estimateImprovementHours(subject) {\n        const gradeGap = Math.max(0, 80 - subject.averageGrade) // Objetivo: llegar a 80\n        ;\n        const weakTopicsHours = subject.weakTopics.length * 2;\n        const difficultyMultiplier = subject.difficultyLevel / 5;\n        return (gradeGap * 0.5 + weakTopicsHours) * difficultyMultiplier;\n    }\n    static determineReviewFrequency(subject) {\n        if (subject.averageGrade > 90) return 'monthly';\n        if (subject.averageGrade > 80) return 'biweekly';\n        return 'weekly';\n    }\n    static estimateSessionsForGoal(goal) {\n        const remainingProgress = 100 - goal.progress;\n        const complexity = goal.milestones.length;\n        return Math.ceil(remainingProgress / 100 * complexity * 2);\n    }\n    static getDayOfWeek(date) {\n        const days = [\n            'sunday',\n            'monday',\n            'tuesday',\n            'wednesday',\n            'thursday',\n            'friday',\n            'saturday'\n        ];\n        return days[date.getDay()];\n    }\n    static generateDaySlots(dayOfWeek, dayClasses, context) {\n        // Esta función generaría slots de estudio basándose en el horario de clases\n        // Por simplicidad, retornamos slots básicos\n        const basicSlots = [\n            {\n                day: dayOfWeek,\n                startTime: '08:00',\n                endTime: '10:00',\n                duration: 120,\n                type: 'free',\n                recommendedFor: [\n                    'review'\n                ],\n                energy_level: 'high'\n            },\n            {\n                day: dayOfWeek,\n                startTime: '14:00',\n                endTime: '16:00',\n                duration: 120,\n                type: 'free',\n                recommendedFor: [\n                    'practice'\n                ],\n                energy_level: 'high'\n            },\n            {\n                day: dayOfWeek,\n                startTime: '19:00',\n                endTime: '21:00',\n                duration: 120,\n                type: 'free',\n                recommendedFor: [\n                    'homework'\n                ],\n                energy_level: 'medium'\n            }\n        ];\n        return basicSlots;\n    }\n    static addMinutesToTime(time, minutes) {\n        const [hours, mins] = time.split(':').map(Number);\n        const totalMinutes = hours * 60 + mins + minutes;\n        const newHours = Math.floor(totalMinutes / 60) % 24;\n        const newMins = totalMinutes % 60;\n        return `${newHours.toString().padStart(2, '0')}:${newMins.toString().padStart(2, '0')}`;\n    }\n    static inferDifficulty(type, subject) {\n        if (type === 'exam_prep' || type === 'new_material') return 'hard';\n        if (type === 'practice' || type === 'homework') return 'medium';\n        return 'easy';\n    }\n    static selectStudyTechniques(type, subject, duration) {\n        // Retornar técnicas apropiadas según el tipo de sesión\n        const techniques = [];\n        if (duration >= 45) {\n            techniques.push({\n                name: 'Pomodoro Technique',\n                description: '25 min estudio + 5 min descanso',\n                duration: 30,\n                effectiveness: 8,\n                applicableSubjects: [\n                    'any'\n                ],\n                requiredMaterials: [\n                    'timer'\n                ]\n            });\n        }\n        return techniques;\n    }\n    static selectStudyMaterials(subject, type) {\n        // Retornar materiales apropiados\n        return [\n            {\n                type: 'textbook',\n                name: `Libro de ${subject}`,\n                estimatedTime: 30,\n                difficulty: 'intermediate'\n            }\n        ];\n    }\n    static estimateFocusLevel(energyLevel, type) {\n        const energyMap = {\n            high: 9,\n            medium: 7,\n            low: 5\n        };\n        const typeMap = {\n            exam_prep: 9,\n            new_material: 8,\n            practice: 7,\n            review: 6,\n            homework: 5,\n            project: 8\n        };\n        return Math.min(10, (energyMap[energyLevel] + typeMap[type]) / 2);\n    }\n    static mapEnergyLevel(level) {\n        return level;\n    }\n    static priorityWeight(priority) {\n        const weights = {\n            urgent: 4,\n            high: 3,\n            medium: 2,\n            low: 1\n        };\n        return weights[priority];\n    }\n    static balanceSessionDifficulty(sessions) {\n        // Ordenar para alternar dificultades cuando sea posible\n        return sessions.sort((a, b)=>{\n            if (a.difficulty === 'hard' && b.difficulty === 'easy') return -1;\n            if (a.difficulty === 'easy' && b.difficulty === 'hard') return 1;\n            return 0;\n        });\n    }\n    static generatePlanTitle(period, needs) {\n        const duration = Math.ceil((period.endDate.getTime() - period.startDate.getTime()) / (1000 * 60 * 60 * 24));\n        return `Plan de Estudio - ${duration} días`;\n    }\n    static generatePlanDescription(needs, sessionCount) {\n        return `Plan personalizado con ${sessionCount} sesiones de estudio, enfocado en ${needs.urgentDeadlines.length} deadlines urgentes y ${needs.weakSubjects.length} materias por reforzar.`;\n    }\n    static createReviewSession(review, slot, preferences) {\n        if (!slot) return null;\n        return this.createStudySession({\n            slot,\n            subject: review.subject,\n            type: 'review',\n            priority: 'medium',\n            topic: `Repaso de ${review.topics.slice(0, 2).join(', ')}`,\n            preferences\n        });\n    }\n    static createGoalBasedSession(goal, slot, preferences) {\n        return this.createStudySession({\n            slot,\n            subject: goal.subject || 'General',\n            type: 'project',\n            priority: goal.priority === 'urgent' ? 'urgent' : 'high',\n            topic: goal.title,\n            preferences\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/study-session-planner.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/temp-storage.ts":
/*!*********************************!*\
  !*** ./src/lib/temp-storage.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addConversationTurn: () => (/* binding */ addConversationTurn),\n/* harmony export */   addPendingTask: () => (/* binding */ addPendingTask),\n/* harmony export */   addUser: () => (/* binding */ addUser),\n/* harmony export */   addWeeklyReport: () => (/* binding */ addWeeklyReport),\n/* harmony export */   canSubmitThisWeek: () => (/* binding */ canSubmitThisWeek),\n/* harmony export */   cleanupOldConversations: () => (/* binding */ cleanupOldConversations),\n/* harmony export */   createConversationSession: () => (/* binding */ createConversationSession),\n/* harmony export */   deleteUser: () => (/* binding */ deleteUser),\n/* harmony export */   findEventById: () => (/* binding */ findEventById),\n/* harmony export */   findUserByEmail: () => (/* binding */ findUserByEmail),\n/* harmony export */   findUserById: () => (/* binding */ findUserById),\n/* harmony export */   findUserByStudentId: () => (/* binding */ findUserByStudentId),\n/* harmony export */   findUsersByProgram: () => (/* binding */ findUsersByProgram),\n/* harmony export */   findUsersByRole: () => (/* binding */ findUsersByRole),\n/* harmony export */   findUsersByStatus: () => (/* binding */ findUsersByStatus),\n/* harmony export */   findWeeklyReportByUserAndWeek: () => (/* binding */ findWeeklyReportByUserAndWeek),\n/* harmony export */   findWeeklyReportsByUser: () => (/* binding */ findWeeklyReportsByUser),\n/* harmony export */   generateStudentId: () => (/* binding */ generateStudentId),\n/* harmony export */   getAllCalendarEvents: () => (/* binding */ getAllCalendarEvents),\n/* harmony export */   getAllUsers: () => (/* binding */ getAllUsers),\n/* harmony export */   getAllWeeklyReports: () => (/* binding */ getAllWeeklyReports),\n/* harmony export */   getConversationHistory: () => (/* binding */ getConversationHistory),\n/* harmony export */   getConversationSession: () => (/* binding */ getConversationSession),\n/* harmony export */   getCurrentWeekEnd: () => (/* binding */ getCurrentWeekEnd),\n/* harmony export */   getCurrentWeekStart: () => (/* binding */ getCurrentWeekStart),\n/* harmony export */   getEvents: () => (/* binding */ getEvents),\n/* harmony export */   getEventsForDateRange: () => (/* binding */ getEventsForDateRange),\n/* harmony export */   getMonthWeeks: () => (/* binding */ getMonthWeeks),\n/* harmony export */   getPendingTasks: () => (/* binding */ getPendingTasks),\n/* harmony export */   getUpcomingEvents: () => (/* binding */ getUpcomingEvents),\n/* harmony export */   getUserActiveSessions: () => (/* binding */ getUserActiveSessions),\n/* harmony export */   getWeekDates: () => (/* binding */ getWeekDates),\n/* harmony export */   getWeeklyReportsByDateRange: () => (/* binding */ getWeeklyReportsByDateRange),\n/* harmony export */   markTaskCompleted: () => (/* binding */ markTaskCompleted),\n/* harmony export */   tempConversations: () => (/* binding */ tempConversations),\n/* harmony export */   tempUsers: () => (/* binding */ tempUsers),\n/* harmony export */   tempWeeklyReports: () => (/* binding */ tempWeeklyReports),\n/* harmony export */   updateConversationSession: () => (/* binding */ updateConversationSession),\n/* harmony export */   updateUser: () => (/* binding */ updateUser),\n/* harmony export */   validateStudentId: () => (/* binding */ validateStudentId)\n/* harmony export */ });\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n// Temporary user storage - replace with database later\n// Singleton pattern to persist data across requests\nconst globalForStorage = globalThis;\nconst tempUsers = globalForStorage.tempUsers ?? [];\nconst tempWeeklyReports = globalForStorage.tempWeeklyReports ?? [];\n// Assign to globalThis to persist across requests\nglobalForStorage.tempUsers = tempUsers;\nglobalForStorage.tempWeeklyReports = tempWeeklyReports;\nfunction addUser(user) {\n    tempUsers.push(user);\n}\nfunction findUserByEmail(email) {\n    return tempUsers.find((user)=>user.email === email);\n}\nfunction findUserByStudentId(studentId) {\n    return tempUsers.find((user)=>user.studentId === studentId);\n}\nfunction findUserById(id) {\n    return tempUsers.find((user)=>user.id === id);\n}\nfunction getAllUsers() {\n    return tempUsers;\n}\nfunction findUsersByRole(role) {\n    return tempUsers.filter((user)=>user.role === role);\n}\nfunction findUsersByProgram(program) {\n    return tempUsers.filter((user)=>user.program === program);\n}\nfunction findUsersByStatus(status) {\n    return tempUsers.filter((user)=>user.status === status);\n}\nfunction updateUser(id, updates) {\n    const userIndex = tempUsers.findIndex((user)=>user.id === id);\n    if (userIndex !== -1) {\n        tempUsers[userIndex] = {\n            ...tempUsers[userIndex],\n            ...updates,\n            updatedAt: new Date()\n        };\n        return tempUsers[userIndex];\n    }\n    return null;\n}\nfunction deleteUser(id) {\n    const userIndex = tempUsers.findIndex((user)=>user.id === id);\n    if (userIndex !== -1) {\n        return tempUsers.splice(userIndex, 1)[0];\n    }\n    return null;\n}\nfunction validateStudentId(studentId) {\n    // Formato sugerido: EST-YYYY-XXX (ej: EST-2024-001)\n    const studentIdRegex = /^EST-\\d{4}-\\d{3}$/;\n    return studentIdRegex.test(studentId);\n}\nfunction generateStudentId() {\n    const currentYear = new Date().getFullYear();\n    const existingIds = tempUsers.filter((user)=>user.studentId && user.studentId.startsWith(`EST-${currentYear}`)).map((user)=>user.studentId).sort();\n    let nextNumber = 1;\n    if (existingIds.length > 0) {\n        const lastId = existingIds[existingIds.length - 1];\n        const lastNumber = parseInt(lastId.split('-')[2]);\n        nextNumber = lastNumber + 1;\n    }\n    return `EST-${currentYear}-${nextNumber.toString().padStart(3, '0')}`;\n}\n// Weekly Reports Functions\nfunction addWeeklyReport(report) {\n    tempWeeklyReports.push(report);\n}\nfunction findWeeklyReportsByUser(userId) {\n    return tempWeeklyReports.filter((report)=>report.userId === userId);\n}\nfunction findWeeklyReportByUserAndWeek(userId, weekStart) {\n    return tempWeeklyReports.find((report)=>report.userId === userId && report.weekStart.getTime() === weekStart.getTime());\n}\nfunction getAllWeeklyReports() {\n    return tempWeeklyReports;\n}\nfunction getWeeklyReportsByDateRange(startDate, endDate) {\n    return tempWeeklyReports.filter((report)=>report.weekStart >= startDate && report.weekEnd <= endDate);\n}\n// Date utility functions\nfunction getCurrentWeekStart() {\n    const now = new Date();\n    const monday = new Date(now);\n    const day = now.getDay();\n    const diff = now.getDate() - day + (day === 0 ? -6 : 1 // Adjust for Sunday\n    );\n    monday.setDate(diff);\n    monday.setHours(0, 0, 0, 0);\n    return monday;\n}\nfunction getCurrentWeekEnd() {\n    const weekStart = getCurrentWeekStart();\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekStart.getDate() + 6);\n    weekEnd.setHours(23, 59, 59, 999);\n    return weekEnd;\n}\nfunction canSubmitThisWeek(userId) {\n    const weekStart = getCurrentWeekStart();\n    const weekEnd = getCurrentWeekEnd();\n    const currentDate = new Date();\n    const existingReport = findWeeklyReportByUserAndWeek(userId, weekStart);\n    // Can submit if:\n    // 1. We are currently in this week (currentDate is between weekStart and weekEnd)\n    // 2. No report exists for this week\n    const isCurrentWeek = currentDate >= weekStart && currentDate <= weekEnd;\n    console.log(`🔍 Debug canSubmitThisWeek for user ${userId}:`);\n    console.log(`  Current date: ${currentDate.toISOString()}`);\n    console.log(`  Week start: ${weekStart.toISOString()}`);\n    console.log(`  Week end: ${weekEnd.toISOString()}`);\n    console.log(`  Is current week: ${isCurrentWeek}`);\n    console.log(`  Existing report: ${existingReport ? 'YES' : 'NO'}`);\n    console.log(`  Can submit: ${isCurrentWeek && !existingReport}`);\n    return isCurrentWeek && !existingReport;\n}\nfunction getWeekDates(date) {\n    const start = new Date(date);\n    const day = start.getDay();\n    const diff = start.getDate() - day + (day === 0 ? -6 : 1);\n    start.setDate(diff);\n    start.setHours(0, 0, 0, 0);\n    const end = new Date(start);\n    end.setDate(start.getDate() + 6);\n    end.setHours(23, 59, 59, 999);\n    return {\n        start,\n        end\n    };\n}\nfunction getMonthWeeks(year, month) {\n    const weeks = [];\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    let current = new Date(firstDay);\n    // Adjust to start from Monday of first week\n    const dayOfWeek = current.getDay();\n    const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n    current.setDate(current.getDate() - daysToSubtract);\n    while(current <= lastDay){\n        const weekStart = new Date(current);\n        const weekEnd = new Date(current);\n        weekEnd.setDate(weekStart.getDate() + 6);\n        weeks.push({\n            start: weekStart,\n            end: weekEnd\n        });\n        current.setDate(current.getDate() + 7);\n    }\n    return weeks;\n}\n// ===== CALENDAR FUNCTIONS =====\n// These functions integrate with the calendar system for Sara AI\nfunction getEvents(userId) {\n    // Import calendar data functions\n    try {\n        const { getUserCalendarData } = __webpack_require__(/*! ./calendar-data */ \"(rsc)/./src/lib/calendar-data.ts\");\n        const userData = getUserCalendarData(userId);\n        return userData?.events || [];\n    } catch (error) {\n        console.error('Error getting calendar events:', error);\n        return [];\n    }\n}\nfunction getAllCalendarEvents(userId) {\n    // Alias for getEvents for compatibility\n    return getEvents(userId);\n}\nfunction getUpcomingEvents(userId, days = 30) {\n    try {\n        const allEvents = getEvents(userId);\n        const now = new Date();\n        const futureDate = new Date();\n        futureDate.setDate(futureDate.getDate() + days);\n        return allEvents.filter((event)=>{\n            const eventDate = new Date(event.date);\n            return eventDate >= now && eventDate <= futureDate;\n        }).sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n    } catch (error) {\n        console.error('Error getting upcoming events:', error);\n        return [];\n    }\n}\nfunction getEventsForDateRange(userId, startDate, endDate) {\n    try {\n        const allEvents = getEvents(userId);\n        return allEvents.filter((event)=>{\n            const eventDate = new Date(event.date);\n            return eventDate >= startDate && eventDate <= endDate;\n        });\n    } catch (error) {\n        console.error('Error getting events for date range:', error);\n        return [];\n    }\n}\nfunction findEventById(userId, eventId) {\n    try {\n        const allEvents = getEvents(userId);\n        return allEvents.find((event)=>event.id === eventId) || null;\n    } catch (error) {\n        console.error('Error finding event by ID:', error);\n        return null;\n    }\n}\n// Global storage for conversations\nconst globalForConversations = globalThis;\nconst tempConversations = globalForConversations.tempConversations ?? [];\nglobalForConversations.tempConversations = tempConversations;\nfunction getConversationSession(userId, sessionId) {\n    return tempConversations.find((session)=>session.userId === userId && session.sessionId === sessionId) || null;\n}\nfunction createConversationSession(userId, sessionId) {\n    // First remove any old session for the same user/sessionId\n    const existingIndex = tempConversations.findIndex((session)=>session.userId === userId && session.sessionId === sessionId);\n    if (existingIndex !== -1) {\n        tempConversations.splice(existingIndex, 1);\n    }\n    const newSession = {\n        userId,\n        sessionId,\n        turns: [],\n        currentTopic: undefined,\n        currentSubject: undefined,\n        pendingTasks: [],\n        lastUpdate: new Date()\n    };\n    tempConversations.push(newSession);\n    console.log(`💬 Created conversation session ${sessionId} for user ${userId}`);\n    return newSession;\n}\nfunction updateConversationSession(session) {\n    const index = tempConversations.findIndex((s)=>s.userId === session.userId && s.sessionId === session.sessionId);\n    if (index !== -1) {\n        tempConversations[index] = {\n            ...session,\n            lastUpdate: new Date()\n        };\n        console.log(`💬 Updated session ${session.sessionId} - ${session.turns.length} turns`);\n    } else {\n        tempConversations.push({\n            ...session,\n            lastUpdate: new Date()\n        });\n        console.log(`💬 Created new session ${session.sessionId} during update`);\n    }\n    return session;\n}\nfunction addConversationTurn(userId, sessionId, role, content, metadata = {}) {\n    let session = getConversationSession(userId, sessionId);\n    if (!session) {\n        session = createConversationSession(userId, sessionId);\n    }\n    const turn = {\n        id: `turn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        timestamp: new Date(),\n        role,\n        content,\n        metadata\n    };\n    session.turns.push(turn);\n    // Keep only last 20 turns per session\n    if (session.turns.length > 20) {\n        session.turns = session.turns.slice(-20);\n    }\n    return updateConversationSession(session);\n}\nfunction addPendingTask(userId, sessionId, type, description, data) {\n    let session = getConversationSession(userId, sessionId);\n    if (!session) {\n        session = createConversationSession(userId, sessionId);\n    }\n    const task = {\n        id: `task_${Date.now()}`,\n        type,\n        description,\n        data,\n        completed: false,\n        createdAt: new Date()\n    };\n    session.pendingTasks.push(task);\n    console.log(`📋 Added pending task: ${description}`);\n    updateConversationSession(session);\n}\nfunction markTaskCompleted(userId, sessionId, taskId, result) {\n    const session = getConversationSession(userId, sessionId);\n    if (!session) return false;\n    const task = session.pendingTasks.find((t)=>t.id === taskId);\n    if (!task) return false;\n    task.completed = true;\n    if (result) {\n        task.data.result = result;\n    }\n    console.log(`✅ Completed task: ${task.description}`);\n    updateConversationSession(session);\n    return true;\n}\nfunction getPendingTasks(userId, sessionId) {\n    const session = getConversationSession(userId, sessionId);\n    if (!session) return [];\n    return session.pendingTasks.filter((task)=>!task.completed);\n}\nfunction getConversationHistory(userId, sessionId, limit = 10) {\n    const session = getConversationSession(userId, sessionId);\n    if (!session) return [];\n    return session.turns.slice(-limit);\n}\nfunction getUserActiveSessions(userId) {\n    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n    return tempConversations.filter((session)=>session.userId === userId && session.lastUpdate > oneHourAgo);\n}\nfunction cleanupOldConversations() {\n    const sixHoursAgo = new Date(Date.now() - 6 * 60 * 60 * 1000);\n    const before = tempConversations.length;\n    // Remove conversations older than 6 hours\n    for(let i = tempConversations.length - 1; i >= 0; i--){\n        if (tempConversations[i].lastUpdate < sixHoursAgo) {\n            tempConversations.splice(i, 1);\n        }\n    }\n    const after = tempConversations.length;\n    if (before !== after) {\n        console.log(`🧹 Cleaned up ${before - after} old conversation sessions`);\n    }\n}\n// Initialize default users automatically\n\nfunction initDefaultUsers() {\n    // Check if demo users already exist to avoid duplicates\n    const studentExists = findUserByEmail(\"estudiante@demo.com\");\n    const instructorExists = findUserByEmail(\"instructor@demo.com\");\n    if (!studentExists || !instructorExists) {\n        console.log(\"🔧 Inicializando usuarios por defecto...\");\n        try {\n            const hashedPassword = bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hashSync(\"Estudiante123!!!\", 12);\n            // Only add student if doesn't exist\n            if (!studentExists) {\n                addUser({\n                    id: \"demo-student-fixed\",\n                    name: \"Estudiante Demo\",\n                    email: \"estudiante@demo.com\",\n                    password: hashedPassword,\n                    role: \"STUDENT\",\n                    studentId: \"EST-2025-001\",\n                    status: \"ACTIVE\",\n                    enrollmentYear: 2025,\n                    academicYear: \"2025-2026\",\n                    program: \"Ingeniería en Sistemas\",\n                    phoneNumber: \"+1234567890\",\n                    dateOfBirth: new Date(\"2000-01-01\"),\n                    address: \"Demo Address 123\",\n                    emergencyContact: {\n                        name: \"Contacto Demo\",\n                        phone: \"+0987654321\",\n                        relationship: \"Padre\"\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                });\n                console.log(\"✅ Usuario estudiante demo creado\");\n            }\n            // Only add instructor if doesn't exist\n            if (!instructorExists) {\n                addUser({\n                    id: \"demo-instructor-fixed\",\n                    name: \"Instructor Demo\",\n                    email: \"instructor@demo.com\",\n                    password: hashedPassword,\n                    role: \"INSTRUCTOR\",\n                    studentId: null,\n                    status: \"ACTIVE\",\n                    enrollmentYear: 2025,\n                    academicYear: \"2025-2026\",\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                });\n                console.log(\"✅ Usuario instructor demo creado\");\n            }\n            console.log(\"✅ Verificación de usuarios por defecto completada\");\n        } catch (error) {\n            console.error(\"❌ Error creando usuarios por defecto:\", error);\n        }\n    } else {\n        console.log(\"✅ Usuarios demo ya existen, no se reinicializan\");\n    }\n    // Always check and initialize sample reports\n    initSampleReports();\n}\nfunction initSampleReports() {\n    // Check if sample reports already exist for demo student\n    const existingSampleReports = tempWeeklyReports.filter((report)=>report.userId === \"demo-student-fixed\");\n    if (existingSampleReports.length === 0) {\n        console.log(\"📝 Inicializando reportes de muestra...\");\n        try {\n            // Get current week dates\n            const now = new Date();\n            const currentWeek = getCurrentWeekStart();\n            const currentWeekEnd = getCurrentWeekEnd();\n            // Previous week\n            const prevWeek = new Date(currentWeek);\n            prevWeek.setDate(prevWeek.getDate() - 7);\n            const prevWeekEnd = new Date(currentWeekEnd);\n            prevWeekEnd.setDate(prevWeekEnd.getDate() - 7);\n            // Sample report from previous week\n            addWeeklyReport({\n                id: \"sample-report-1\",\n                userId: \"demo-student-fixed\",\n                weekStart: prevWeek,\n                weekEnd: prevWeekEnd,\n                submittedAt: new Date(prevWeekEnd.getTime() - 24 * 60 * 60 * 1000),\n                responses: {\n                    temasYDominio: \"Esta semana trabajamos con JavaScript básico - Nivel 3: Domino funciones y arrays, y estoy aprendiendo objetos complejos.\",\n                    evidenciaAprendizaje: \"Completé un proyecto de To-Do List usando JavaScript vanilla. Implementé funciones para agregar, editar y eliminar tareas usando arrays y objetos.\",\n                    dificultadesEstrategias: \"Tuve dificultades con el manejo de eventos en JavaScript. Lo resolví practicando con ejemplos y consultando documentación de MDN.\",\n                    conexionesAplicacion: \"Los conceptos de eventos se conectan con la interactividad en aplicaciones web. Puedo aplicarlo para crear interfaces más dinámicas.\",\n                    comentariosAdicionales: \"Me siento más confiado con JavaScript. Quiero seguir practicando con proyectos más complejos.\"\n                }\n            });\n            // Two weeks ago report  \n            const twoWeeksAgo = new Date(currentWeek);\n            twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);\n            const twoWeeksAgoEnd = new Date(currentWeekEnd);\n            twoWeeksAgoEnd.setDate(twoWeeksAgoEnd.getDate() - 14);\n            addWeeklyReport({\n                id: \"sample-report-2\",\n                userId: \"demo-student-fixed\",\n                weekStart: twoWeeksAgo,\n                weekEnd: twoWeeksAgoEnd,\n                submittedAt: new Date(twoWeeksAgoEnd.getTime() - 12 * 60 * 60 * 1000),\n                responses: {\n                    temasYDominio: \"Esta semana estudiamos CSS Grid y Flexbox - Nivel 2: Entiendo los conceptos básicos pero aún tengo dudas con layouts complejos.\",\n                    evidenciaAprendizaje: \"Recreé el layout de una página web usando CSS Grid. Logré hacer una estructura responsive con header, sidebar y main content.\",\n                    dificultadesEstrategias: \"Me confundí con las propiedades grid-template-areas. Resolví el problema dibujando el layout en papel primero.\",\n                    conexionesAplicacion: \"CSS Grid es perfecto para crear layouts de páginas web modernas. Lo usaré en mi proyecto final de página portfolio.\",\n                    comentariosAdicionales: \"CSS es más divertido de lo que pensaba. Me gusta ver los resultados visuales inmediatos.\"\n                }\n            });\n            console.log(\"✅ Reportes de muestra creados exitosamente\");\n        } catch (error) {\n            console.error(\"❌ Error creando reportes de muestra:\", error);\n        }\n    } else {\n        console.log(\"✅ Reportes de muestra ya existen, no se reinicializan\");\n    }\n}\n// Initialize on module load\ninitDefaultUsers();\n// Start conversation cleanup interval\nsetInterval(cleanupOldConversations, 30 * 60 * 1000) // Every 30 minutes\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/temp-storage.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/visual-learning-engine.ts":
/*!*******************************************!*\
  !*** ./src/lib/visual-learning-engine.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VisualLearningEngine: () => (/* binding */ VisualLearningEngine),\n/* harmony export */   VisualType: () => (/* binding */ VisualType)\n/* harmony export */ });\n// Visual Learning Engine for Sara AI\n// Generates ASCII diagrams, conceptual maps, and visual representations for enhanced learning\nvar VisualType = /*#__PURE__*/ function(VisualType) {\n    VisualType[\"CONCEPT_MAP\"] = \"concept_map\";\n    VisualType[\"FLOWCHART\"] = \"flowchart\";\n    VisualType[\"HIERARCHY\"] = \"hierarchy\";\n    VisualType[\"TIMELINE\"] = \"timeline\";\n    VisualType[\"DIAGRAM\"] = \"diagram\";\n    VisualType[\"FORMULA_VISUALIZATION\"] = \"formula_visualization\";\n    VisualType[\"CHEMICAL_STRUCTURE\"] = \"chemical_structure\";\n    VisualType[\"MATH_GRAPH\"] = \"math_graph\";\n    VisualType[\"PROCESS_FLOW\"] = \"process_flow\";\n    return VisualType;\n}({});\nclass VisualLearningEngine {\n    /**\n   * Generates visual representation based on content and type\n   */ static generateVisual(content, type, subject) {\n        switch(type){\n            case \"concept_map\":\n                return this.generateConceptMap(content, subject);\n            case \"flowchart\":\n                return this.generateFlowchart(content);\n            case \"hierarchy\":\n                return this.generateHierarchy(content);\n            case \"timeline\":\n                return this.generateTimeline(content);\n            case \"formula_visualization\":\n                return this.generateFormulaVisualization(content);\n            case \"chemical_structure\":\n                return this.generateChemicalStructure(content);\n            case \"process_flow\":\n                return this.generateProcessFlow(content);\n            default:\n                return this.generateGenericDiagram(content);\n        }\n    }\n    /**\n   * Auto-detects the best visual type for content\n   */ static detectOptimalVisualType(content, subject) {\n        const contentLower = content.toLowerCase();\n        // Chemical formulas and structures\n        if (subject === 'chemistry' || subject === 'química' || /h2o|co2|nacl|ch4|formula|molecular|átomo|molécula/.test(contentLower)) {\n            return \"chemical_structure\";\n        }\n        // Mathematical formulas\n        if (subject === 'mathematics' || subject === 'matemáticas' || /ecuación|formula|función|derivada|integral|gráfica/.test(contentLower)) {\n            return \"formula_visualization\";\n        }\n        // Process or step-by-step content\n        if (/paso|step|proceso|luego|después|entonces|primero|segundo/.test(contentLower)) {\n            return \"process_flow\";\n        }\n        // Hierarchical content\n        if (/clasificación|categoría|tipo|nivel|jerarquía|superior|inferior/.test(contentLower)) {\n            return \"hierarchy\";\n        }\n        // Timeline content\n        if (/año|fecha|siglo|época|antes|después|historia|cronología/.test(contentLower)) {\n            return \"timeline\";\n        }\n        // Conceptual relationships\n        if (/relación|concepto|idea|conecta|vincula|asocia/.test(contentLower)) {\n            return \"concept_map\";\n        }\n        // Default to flowchart for general content\n        return \"flowchart\";\n    }\n    /**\n   * Generates concept map visualization\n   */ static generateConceptMap(content, subject) {\n        const concepts = this.extractConcepts(content);\n        const mainConcept = concepts[0] || 'Concepto Principal';\n        const relatedConcepts = concepts.slice(1, 5);\n        let ascii = `\n┌─────────────────────┐\n│   ${this.centerText(mainConcept, 17)}   │\n└─────────┬───────────┘\n          │\n    ┌─────┴─────┐\n    │           │`;\n        relatedConcepts.forEach((concept, index)=>{\n            if (index < 2) {\n                ascii += `\n┌──────────────┐    ┌──────────────┐\n│ ${this.centerText(concept, 12)} │    │              │\n└──────────────┘    └──────────────┘`;\n            }\n        });\n        if (relatedConcepts.length > 2) {\n            ascii += `\n    │           │\n┌───┴─────┐ ┌─────┴───┐`;\n            relatedConcepts.slice(2, 4).forEach((concept)=>{\n                ascii += `\n│ ${this.centerText(concept, 7)} │ │         │`;\n            });\n            ascii += `\n└─────────┘ └─────────┘`;\n        }\n        return {\n            type: \"concept_map\",\n            ascii: ascii,\n            description: `Mapa conceptual que muestra las relaciones entre ${mainConcept} y conceptos relacionados`,\n            elements: concepts.map((concept, index)=>({\n                    id: `concept_${index}`,\n                    type: \"concept_map\",\n                    title: concept,\n                    content: `Concepto: ${concept}`,\n                    connections: index === 0 ? relatedConcepts : [\n                        mainConcept\n                    ]\n                })),\n            instructions: [\n                'El concepto central aparece en la parte superior',\n                'Las líneas conectan conceptos relacionados',\n                'Los conceptos secundarios se ramifican del principal'\n            ]\n        };\n    }\n    /**\n   * Generates flowchart visualization\n   */ static generateFlowchart(content) {\n        const steps = this.extractSteps(content);\n        let ascii = `┌─────────────┐\\n│   INICIO    │\\n└──────┬──────┘\\n       │\\n       ▼`;\n        steps.forEach((step, index)=>{\n            const stepText = this.truncateText(step, 15);\n            ascii += `\n┌─────────────────┐\n│ ${this.centerText(stepText, 15)} │\n└─────────┬───────┘\n          │\n          ▼`;\n        });\n        ascii += `\n┌─────────────┐\n│    FIN      │\n└─────────────┘`;\n        return {\n            type: \"flowchart\",\n            ascii: ascii,\n            description: `Diagrama de flujo que muestra ${steps.length} pasos del proceso`,\n            elements: steps.map((step, index)=>({\n                    id: `step_${index}`,\n                    type: \"flowchart\",\n                    title: `Paso ${index + 1}`,\n                    content: step,\n                    connections: index < steps.length - 1 ? [\n                        `step_${index + 1}`\n                    ] : []\n                })),\n            instructions: [\n                'Sigue las flechas de arriba hacia abajo',\n                'Cada caja representa un paso del proceso',\n                'El flujo va desde INICIO hasta FIN'\n            ]\n        };\n    }\n    /**\n   * Generates hierarchy visualization\n   */ static generateHierarchy(content) {\n        const hierarchyItems = this.extractHierarchy(content);\n        const root = hierarchyItems[0] || 'Elemento Principal';\n        const children = hierarchyItems.slice(1, 4);\n        const grandchildren = hierarchyItems.slice(4, 8);\n        let ascii = `\n                    ┌──────────────────┐\n                    │ ${this.centerText(root, 16)} │\n                    └─────────┬────────┘\n                              │\n                 ┌────────────┼────────────┐`;\n        children.forEach((child, index)=>{\n            const spacing = index === 0 ? '     ' : index === 1 ? '           ' : '                 ';\n            ascii += `\n        ┌─────────────┐${spacing}┌─────────────┐\n        │ ${this.centerText(child, 11)} │${spacing}│             │\n        └─────────────┘${spacing}└─────────────┘`;\n        });\n        if (grandchildren.length > 0) {\n            ascii += `\n              │                     │\n        ┌─────┴─────┐         ┌─────┴─────┐`;\n            grandchildren.slice(0, 2).forEach((item)=>{\n                ascii += `\n        │ ${this.centerText(item, 9)} │         │           │`;\n            });\n            ascii += `\n        └───────────┘         └───────────┘`;\n        }\n        return {\n            type: \"hierarchy\",\n            ascii: ascii,\n            description: `Jerarquía que muestra la estructura de ${root} con ${children.length} niveles`,\n            elements: hierarchyItems.map((item, index)=>({\n                    id: `hierarchy_${index}`,\n                    type: \"hierarchy\",\n                    title: item,\n                    content: `Elemento de jerarquía: ${item}`,\n                    connections: index === 0 ? children : []\n                })),\n            instructions: [\n                'El elemento principal está en la parte superior',\n                'Los elementos secundarios se conectan hacia abajo',\n                'Cada nivel representa una subdivisión'\n            ]\n        };\n    }\n    /**\n   * Generates timeline visualization\n   */ static generateTimeline(content) {\n        const timeEvents = this.extractTimelineEvents(content);\n        let ascii = `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n`;\n        timeEvents.forEach((event, index)=>{\n            const eventText = this.truncateText(event.event, 20);\n            const timeText = event.time || `T${index + 1}`;\n            if (index % 2 === 0) {\n                // Event above timeline\n                ascii += `┌─────────────────────┐\\n│ ${this.centerText(eventText, 19)} │\\n└──────────┬──────────┘\\n           │\\n`;\n                ascii += `━━━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n`;\n                ascii += `           ${timeText}\\n\\n`;\n            } else {\n                // Event below timeline\n                ascii += `           │\\n           ┼\\n┌──────────┴──────────┐\\n│ ${this.centerText(eventText, 19)} │\\n└─────────────────────┘\\n`;\n            }\n        });\n        return {\n            type: \"timeline\",\n            ascii: ascii,\n            description: `Línea de tiempo con ${timeEvents.length} eventos cronológicos`,\n            elements: timeEvents.map((event, index)=>({\n                    id: `event_${index}`,\n                    type: \"timeline\",\n                    title: event.time || `Evento ${index + 1}`,\n                    content: event.event,\n                    connections: []\n                })),\n            instructions: [\n                'Los eventos se muestran en orden cronológico',\n                'La línea horizontal representa el tiempo',\n                'Los eventos alternos aparecen arriba y abajo de la línea'\n            ]\n        };\n    }\n    /**\n   * Generates formula visualization\n   */ static generateFormulaVisualization(content) {\n        const formula = this.extractFormula(content);\n        const variables = this.extractVariables(content);\n        let ascii = `\n╔═══════════════════════════════════╗\n║         FÓRMULA MATEMÁTICA        ║\n╠═══════════════════════════════════╣\n║                                   ║\n║         ${this.centerText(formula, 19)}         ║\n║                                   ║\n╠═══════════════════════════════════╣\n║           VARIABLES:              ║`;\n        variables.forEach((variable)=>{\n            ascii += `\n║  ${variable.symbol} = ${this.truncateText(variable.description, 20)}    ║`;\n        });\n        ascii += `\n║                                   ║\n╚═══════════════════════════════════╝\n\n    Representación visual:\n    \n         ${formula}\n         ↙     ↘\n    Variable   Resultado\n      ${variables[0]?.symbol || 'x'}         y`;\n        return {\n            type: \"formula_visualization\",\n            ascii: ascii,\n            description: `Visualización de la fórmula ${formula} con ${variables.length} variables`,\n            elements: [\n                {\n                    id: 'formula_main',\n                    type: \"formula_visualization\",\n                    title: 'Fórmula Principal',\n                    content: formula,\n                    connections: variables.map((_, index)=>`var_${index}`)\n                }\n            ].concat(variables.map((variable, index)=>({\n                    id: `var_${index}`,\n                    type: \"formula_visualization\",\n                    title: variable.symbol,\n                    content: variable.description,\n                    connections: []\n                }))),\n            instructions: [\n                'La fórmula principal se muestra en el centro',\n                'Las variables se definen en la tabla inferior',\n                'Sustituye los valores para resolver'\n            ]\n        };\n    }\n    /**\n   * Generates chemical structure visualization\n   */ static generateChemicalStructure(content) {\n        const molecule = this.extractMolecule(content);\n        const atoms = this.extractAtoms(content);\n        let ascii = '';\n        // Simple molecular representations\n        if (molecule.toLowerCase().includes('h2o') || molecule.toLowerCase().includes('agua')) {\n            ascii = `\n        Estructura del Agua (H₂O)\n        \n            H\n            │\n        H─O─H    o    H─O─H\n            \n        Representación angular:\n        \n            H\n             \\\\\n              O\n             /\n            H\n              \n        Ángulo H-O-H: 104.5°`;\n        } else if (molecule.toLowerCase().includes('co2')) {\n            ascii = `\n        Estructura del CO₂\n        \n        O═C═O\n        \n        Lineal, 180°\n        \n        Enlaces dobles:\n        O ══ C ══ O`;\n        } else if (molecule.toLowerCase().includes('ch4') || molecule.toLowerCase().includes('metano')) {\n            ascii = `\n        Estructura del Metano (CH₄)\n        \n           H\n           │\n        H─C─H\n           │\n           H\n           \n        Tetraédrica\n        Ángulo H-C-H: 109.5°`;\n        } else {\n            ascii = `\n        Estructura Molecular\n        \n        ${molecule}\n        \n        Átomos identificados:\n        ${atoms.map((atom)=>`• ${atom}`).join('\\n        ')}\n        \n        Representación esquemática:\n        \n        [Átomo1]─[Átomo2]─[Átomo3]`;\n        }\n        return {\n            type: \"chemical_structure\",\n            ascii: ascii,\n            description: `Estructura química de ${molecule} mostrando ${atoms.length} tipos de átomos`,\n            elements: [\n                {\n                    id: 'molecule_main',\n                    type: \"chemical_structure\",\n                    title: molecule,\n                    content: `Molécula: ${molecule}`,\n                    connections: atoms.map((_, index)=>`atom_${index}`)\n                }\n            ].concat(atoms.map((atom, index)=>({\n                    id: `atom_${index}`,\n                    type: \"chemical_structure\",\n                    title: atom,\n                    content: `Átomo: ${atom}`,\n                    connections: []\n                }))),\n            instructions: [\n                'Los átomos se representan con sus símbolos',\n                'Las líneas representan enlaces químicos',\n                'Los ángulos muestran la geometría molecular'\n            ]\n        };\n    }\n    /**\n   * Generates process flow visualization\n   */ static generateProcessFlow(content) {\n        const processes = this.extractProcesses(content);\n        let ascii = `\n    FLUJO DEL PROCESO\n    \n    ┌─────────────┐`;\n        processes.forEach((process, index)=>{\n            const processText = this.truncateText(process, 15);\n            if (index === 0) {\n                ascii += `\n    │   ${this.centerText(processText, 9)}   │\n    └─────┬───────┘\n          │\n          ▼`;\n            } else {\n                ascii += `\n    ┌─────────────┐\n    │   ${this.centerText(processText, 9)}   │\n    └─────┬───────┘\n          │\n          ▼`;\n            }\n        });\n        ascii += `\n    ┌─────────────┐\n    │   FINAL     │\n    └─────────────┘`;\n        return {\n            type: \"process_flow\",\n            ascii: ascii,\n            description: `Flujo de proceso con ${processes.length} etapas secuenciales`,\n            elements: processes.map((process, index)=>({\n                    id: `process_${index}`,\n                    type: \"process_flow\",\n                    title: `Proceso ${index + 1}`,\n                    content: process,\n                    connections: index < processes.length - 1 ? [\n                        `process_${index + 1}`\n                    ] : []\n                })),\n            instructions: [\n                'Sigue el flujo de arriba hacia abajo',\n                'Cada caja representa una etapa del proceso',\n                'Las flechas indican la secuencia'\n            ]\n        };\n    }\n    /**\n   * Generates generic diagram\n   */ static generateGenericDiagram(content) {\n        const keyPoints = this.extractKeyPoints(content, 4);\n        let ascii = `\n    ╭─────────────────────────────────╮\n    │        DIAGRAMA GENERAL         │\n    ╰─────────────┬───────────────────╯\n                  │`;\n        keyPoints.forEach((point, index)=>{\n            const pointText = this.truncateText(point, 20);\n            ascii += `\n                  ▼\n    ┌─────────────────────────────┐\n    │ ${index + 1}. ${this.leftAlign(pointText, 23)} │\n    └─────────────────────────────┘`;\n        });\n        return {\n            type: \"diagram\",\n            ascii: ascii,\n            description: `Diagrama general con ${keyPoints.length} elementos principales`,\n            elements: keyPoints.map((point, index)=>({\n                    id: `point_${index}`,\n                    type: \"diagram\",\n                    title: `Punto ${index + 1}`,\n                    content: point,\n                    connections: []\n                })),\n            instructions: [\n                'Cada elemento se presenta de forma secuencial',\n                'Los números indican el orden de importancia',\n                'Revisa cada punto para comprensión completa'\n            ]\n        };\n    }\n    // ===== UTILITY FUNCTIONS =====\n    /**\n   * Extracts main concepts from content\n   */ static extractConcepts(content) {\n        const sentences = content.split(/[.!?]+/);\n        const concepts = [];\n        for (const sentence of sentences){\n            const words = sentence.trim().split(' ');\n            const importantWords = words.filter((word)=>word.length > 4 && ![\n                    'este',\n                    'esta',\n                    'estos',\n                    'estas',\n                    'cuando',\n                    'donde',\n                    'porque'\n                ].includes(word.toLowerCase()));\n            if (importantWords.length > 0) {\n                concepts.push(importantWords[0]);\n            }\n            if (concepts.length >= 5) break;\n        }\n        return concepts.length > 0 ? concepts : [\n            'Concepto Principal'\n        ];\n    }\n    /**\n   * Extracts steps from content\n   */ static extractSteps(content) {\n        // Look for numbered steps or sequential indicators\n        const stepPatterns = [\n            /\\d+[.)]\\s*([^.!?]+)/g,\n            /paso \\d+:?\\s*([^.!?]+)/gi,\n            /(primero|segundo|tercero|luego|después|finalmente)[,:]?\\s*([^.!?]+)/gi\n        ];\n        const steps = [];\n        for (const pattern of stepPatterns){\n            let match;\n            while((match = pattern.exec(content)) !== null && steps.length < 6){\n                const step = match[1] || match[2];\n                if (step && step.trim().length > 5) {\n                    steps.push(step.trim());\n                }\n            }\n        }\n        if (steps.length === 0) {\n            // Fallback: split by sentences\n            const sentences = content.split(/[.!?]+/);\n            steps.push(...sentences.slice(0, 4).filter((s)=>s.trim().length > 10));\n        }\n        return steps.slice(0, 5);\n    }\n    /**\n   * Extracts hierarchy items\n   */ static extractHierarchy(content) {\n        const hierarchyWords = [\n            'principal',\n            'secundario',\n            'tipo',\n            'categoría',\n            'clase',\n            'grupo'\n        ];\n        const items = [];\n        const sentences = content.split(/[.!?]+/);\n        for (const sentence of sentences){\n            for (const word of hierarchyWords){\n                if (sentence.toLowerCase().includes(word)) {\n                    const cleanSentence = sentence.replace(/^\\s*\\d+[.)]\\s*/, '').trim();\n                    if (cleanSentence.length > 5) {\n                        items.push(cleanSentence);\n                        break;\n                    }\n                }\n            }\n            if (items.length >= 6) break;\n        }\n        return items.length > 0 ? items : [\n            'Elemento Principal',\n            'Subelemento 1',\n            'Subelemento 2'\n        ];\n    }\n    /**\n   * Extracts timeline events\n   */ static extractTimelineEvents(content) {\n        const timePattern = /(\\d{4}|\\d{1,2}:\\d{2}|siglo \\w+|era \\w+)/gi;\n        const events = [];\n        const sentences = content.split(/[.!?]+/);\n        for (const sentence of sentences){\n            const timeMatch = sentence.match(timePattern);\n            if (timeMatch) {\n                events.push({\n                    time: timeMatch[0],\n                    event: sentence.replace(timePattern, '').trim()\n                });\n            }\n        }\n        if (events.length === 0) {\n            // Fallback timeline\n            const keyEvents = sentences.slice(0, 3).filter((s)=>s.trim().length > 10);\n            keyEvents.forEach((event, index)=>{\n                events.push({\n                    time: `T${index + 1}`,\n                    event: event.trim()\n                });\n            });\n        }\n        return events.slice(0, 5);\n    }\n    /**\n   * Extracts formula from content\n   */ static extractFormula(content) {\n        // Look for mathematical expressions\n        const formulaPatterns = [\n            /([a-zA-Z]\\s*[=]\\s*[^.!?]+)/,\n            /([a-zA-Z]+\\s*\\(\\s*[a-zA-Z,\\s]+\\s*\\))/,\n            /(f\\([x-z]\\)\\s*=\\s*[^.!?]+)/i,\n            /([xy]\\s*=\\s*[^.!?]+)/\n        ];\n        for (const pattern of formulaPatterns){\n            const match = content.match(pattern);\n            if (match) {\n                return match[1].trim();\n            }\n        }\n        // Fallback\n        if (content.includes('=')) {\n            const parts = content.split('=');\n            if (parts.length >= 2) {\n                return `${parts[0].trim()} = ${parts[1].split(/[.!?]/)[0].trim()}`;\n            }\n        }\n        return 'y = f(x)';\n    }\n    /**\n   * Extracts variables from content\n   */ static extractVariables(content) {\n        const variables = [];\n        // Look for variable definitions like \"donde x es...\"\n        const varPattern = /([a-zA-Z])\\s+es\\s+([^.!?]+)/gi;\n        let match;\n        while((match = varPattern.exec(content)) !== null && variables.length < 4){\n            variables.push({\n                symbol: match[1],\n                description: match[2].trim()\n            });\n        }\n        if (variables.length === 0) {\n            variables.push({\n                symbol: 'x',\n                description: 'variable independiente'\n            }, {\n                symbol: 'y',\n                description: 'variable dependiente'\n            });\n        }\n        return variables;\n    }\n    /**\n   * Extracts molecule information\n   */ static extractMolecule(content) {\n        const moleculePatterns = [\n            /([A-Z][a-z]?\\d*)+/g,\n            /(agua|metano|dióxido|carbono|oxígeno|hidrógeno)/i\n        ];\n        for (const pattern of moleculePatterns){\n            const match = content.match(pattern);\n            if (match) {\n                return match[0];\n            }\n        }\n        return 'Molécula';\n    }\n    /**\n   * Extracts atoms from content\n   */ static extractAtoms(content) {\n        const atomSymbols = content.match(/[A-Z][a-z]?/g) || [];\n        const uniqueAtoms = [\n            ...new Set(atomSymbols)\n        ];\n        if (uniqueAtoms.length === 0) {\n            return [\n                'C',\n                'H',\n                'O'\n            ];\n        }\n        return uniqueAtoms.slice(0, 5);\n    }\n    /**\n   * Extracts processes from content\n   */ static extractProcesses(content) {\n        const processes = this.extractSteps(content);\n        return processes.length > 0 ? processes : [\n            'Proceso 1',\n            'Proceso 2',\n            'Proceso 3'\n        ];\n    }\n    /**\n   * Extracts key points from content\n   */ static extractKeyPoints(content, limit = 4) {\n        const sentences = content.split(/[.!?]+/);\n        return sentences.filter((s)=>s.trim().length > 10).slice(0, limit).map((s)=>s.trim());\n    }\n    // ===== TEXT FORMATTING UTILITIES =====\n    /**\n   * Centers text in a fixed width\n   */ static centerText(text, width) {\n        const truncated = this.truncateText(text, width);\n        const padding = Math.max(0, width - truncated.length);\n        const leftPad = Math.floor(padding / 2);\n        const rightPad = padding - leftPad;\n        return ' '.repeat(leftPad) + truncated + ' '.repeat(rightPad);\n    }\n    /**\n   * Left aligns text in a fixed width\n   */ static leftAlign(text, width) {\n        const truncated = this.truncateText(text, width);\n        const padding = Math.max(0, width - truncated.length);\n        return truncated + ' '.repeat(padding);\n    }\n    /**\n   * Truncates text to fit width\n   */ static truncateText(text, maxWidth) {\n        if (text.length <= maxWidth) {\n            return text;\n        }\n        return text.substring(0, maxWidth - 3) + '...';\n    }\n    /**\n   * Main entry point - analyzes content and generates appropriate visual\n   */ static generateOptimalVisual(content, subject) {\n        const optimalType = this.detectOptimalVisualType(content, subject);\n        return this.generateVisual(content, optimalType, subject);\n    }\n    /**\n   * Generates multiple visual options for user to choose from\n   */ static generateVisualOptions(content, subject) {\n        const primaryType = this.detectOptimalVisualType(content, subject);\n        const options = [\n            this.generateVisual(content, primaryType, subject)\n        ];\n        // Add alternative visualizations\n        const alternativeTypes = [\n            \"concept_map\",\n            \"flowchart\",\n            \"diagram\"\n        ];\n        for (const type of alternativeTypes){\n            if (type !== primaryType && options.length < 3) {\n                options.push(this.generateVisual(content, type, subject));\n            }\n        }\n        return options;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/visual-learning-engine.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@xenova/transformers":
/*!***************************************!*\
  !*** external "@xenova/transformers" ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@xenova/transformers");;

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/jose","vendor-chunks/next-auth","vendor-chunks/openid-client","vendor-chunks/bcryptjs","vendor-chunks/@babel","vendor-chunks/oauth","vendor-chunks/preact","vendor-chunks/uuid","vendor-chunks/yallist","vendor-chunks/preact-render-to-string","vendor-chunks/cookie","vendor-chunks/oidc-token-hash","vendor-chunks/@panva"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fai-chat%2Fenhanced-message%2Froute&page=%2Fapi%2Fai-chat%2Fenhanced-message%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai-chat%2Fenhanced-message%2Froute.ts&appDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frodrigodibernardo33gmail.com%2FDocuments%2FApp%20Development%20Proyects%2FIntellego%20Platform&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();