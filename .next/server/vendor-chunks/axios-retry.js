/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/axios-retry";
exports.ids = ["vendor-chunks/axios-retry"];
exports.modules = {

/***/ "(rsc)/./node_modules/axios-retry/index.js":
/*!*******************************************!*\
  !*** ./node_modules/axios-retry/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const axiosRetry = (__webpack_require__(/*! ./lib/cjs/index */ \"(rsc)/./node_modules/axios-retry/lib/cjs/index.js\")[\"default\"]);\n\nmodule.exports = axiosRetry;\nmodule.exports[\"default\"] = axiosRetry;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXhpb3MtcmV0cnkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsbUJBQW1CLDRHQUFrQzs7QUFFckQ7QUFDQSx5QkFBc0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2RyaWdvZGliZXJuYXJkbzMzZ21haWwuY29tL0RvY3VtZW50cy9BcHAgRGV2ZWxvcG1lbnQgUHJveWVjdHMvSW50ZWxsZWdvIFBsYXRmb3JtL25vZGVfbW9kdWxlcy9heGlvcy1yZXRyeS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBheGlvc1JldHJ5ID0gcmVxdWlyZSgnLi9saWIvY2pzL2luZGV4JykuZGVmYXVsdDtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvc1JldHJ5O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zUmV0cnk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/axios-retry/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/axios-retry/lib/cjs/index.js":
/*!***************************************************!*\
  !*** ./node_modules/axios-retry/lib/cjs/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(rsc)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.isNetworkError = isNetworkError;\nexports.isRetryableError = isRetryableError;\nexports.isSafeRequestError = isSafeRequestError;\nexports.isIdempotentRequestError = isIdempotentRequestError;\nexports.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\nexports.exponentialDelay = exponentialDelay;\nexports[\"default\"] = axiosRetry;\nexports.DEFAULT_OPTIONS = exports.namespace = void 0;\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"(rsc)/./node_modules/@babel/runtime/regenerator/index.js\"));\n\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(rsc)/./node_modules/@babel/runtime/helpers/typeof.js\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(rsc)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\"));\n\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(rsc)/./node_modules/@babel/runtime/helpers/defineProperty.js\"));\n\nvar _isRetryAllowed = _interopRequireDefault(__webpack_require__(/*! is-retry-allowed */ \"(rsc)/./node_modules/is-retry-allowed/index.js\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar namespace = 'axios-retry';\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\nexports.namespace = namespace;\n\nfunction isNetworkError(error) {\n  var CODE_EXCLUDE_LIST = ['ERR_CANCELED', 'ECONNABORTED'];\n  return !error.response && Boolean(error.code) && // Prevents retrying cancelled requests\n  !CODE_EXCLUDE_LIST.includes(error.code) && // Prevents retrying timed out & cancelled requests\n  (0, _isRetryAllowed.default)(error) // Prevents retrying unsafe errors\n  ;\n}\n\nvar SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nvar IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\nfunction isRetryableError(error) {\n  return error.code !== 'ECONNABORTED' && (!error.response || error.response.status >= 500 && error.response.status <= 599);\n}\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\n\nfunction isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\n\nfunction isIdempotentRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\n\nfunction isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n/**\n * @return {number} - delay in milliseconds, always 0\n */\n\n\nfunction noDelay() {\n  return 0;\n}\n/**\n * Set delayFactor 1000 for an exponential delay to occur on the order\n * of seconds\n * @param  {number} [retryNumber=0]\n * @param  {Error}  error - unused; for existing API of retryDelay callback\n * @param  {number} [delayFactor=100] milliseconds\n * @return {number} - delay in milliseconds\n */\n\n\nfunction exponentialDelay() {\n  var retryNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var error = arguments.length > 1 ? arguments[1] : undefined;\n  var delayFactor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  var delay = Math.pow(2, retryNumber) * delayFactor;\n  var randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay\n\n  return delay + randomSum;\n}\n/** @type {IAxiosRetryConfig} */\n\n\nvar DEFAULT_OPTIONS = {\n  retries: 3,\n  retryCondition: isNetworkOrIdempotentRequestError,\n  retryDelay: noDelay,\n  shouldResetTimeout: false,\n  onRetry: function onRetry() {}\n};\n/**\n * Returns the axios-retry options for the current request\n * @param  {AxiosRequestConfig} config\n * @param  {IAxiosRetryConfig} defaultOptions\n * @return {IAxiosRetryConfigExtended}\n */\n\nexports.DEFAULT_OPTIONS = DEFAULT_OPTIONS;\n\nfunction getRequestOptions(config, defaultOptions) {\n  return _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), defaultOptions), config[namespace]);\n}\n/**\n * Initializes and returns the retry state for the given request/config\n * @param  {AxiosRequestConfig} config\n * @param  {IAxiosRetryConfig} defaultOptions\n * @return {IAxiosRetryConfigExtended}\n */\n\n\nfunction getCurrentState(config, defaultOptions) {\n  var currentState = getRequestOptions(config, defaultOptions);\n  currentState.retryCount = currentState.retryCount || 0;\n  config[namespace] = currentState;\n  return currentState;\n}\n/**\n * @param  {Axios} axios\n * @param  {AxiosRequestConfig} config\n */\n\n\nfunction fixConfig(axios, config) {\n  if (axios.defaults.agent === config.agent) {\n    delete config.agent;\n  }\n\n  if (axios.defaults.httpAgent === config.httpAgent) {\n    delete config.httpAgent;\n  }\n\n  if (axios.defaults.httpsAgent === config.httpsAgent) {\n    delete config.httpsAgent;\n  }\n}\n/**\n * Checks retryCondition if request can be retried. Handles it's returning value or Promise.\n * @param  {IAxiosRetryConfigExtended} currentState\n * @param  {Error} error\n * @return {Promise<boolean>}\n */\n\n\nfunction shouldRetry(_x, _x2) {\n  return _shouldRetry.apply(this, arguments);\n}\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Exponential back-off retry delay between requests\n * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});\n *\n * // Custom retry delay\n * axiosRetry(axios, { retryDelay : (retryCount) => {\n *   return retryCount * 1000;\n * }});\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Allows request-specific configuration\n * client\n *   .get('/test', {\n *     'axios-retry': {\n *       retries: 0\n *     }\n *   })\n *   .catch(error => { // The first request fails\n *     error !== undefined\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [defaultOptions]\n * @param {number} [defaultOptions.retries=3] Number of retries\n * @param {boolean} [defaultOptions.shouldResetTimeout=false]\n *        Defines if the timeout should be reset between retries\n * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]\n *        A function to determine if the error can be retried\n * @param {Function} [defaultOptions.retryDelay=noDelay]\n *        A function to determine the delay between retry requests\n * @param {Function} [defaultOptions.onRetry=()=>{}]\n *        A function to get notified when a retry occurs\n * @return {{ requestInterceptorId: number, responseInterceptorId: number }}\n *        The ids of the interceptors added to the request and to the response (so they can be ejected at a later time)\n */\n\n\nfunction _shouldRetry() {\n  _shouldRetry = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(currentState, error) {\n    var retries, retryCondition, shouldRetryOrPromise, shouldRetryPromiseResult;\n    return _regenerator.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            retries = currentState.retries, retryCondition = currentState.retryCondition;\n            shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error); // This could be a promise\n\n            if (!((0, _typeof2.default)(shouldRetryOrPromise) === 'object')) {\n              _context2.next = 13;\n              break;\n            }\n\n            _context2.prev = 3;\n            _context2.next = 6;\n            return shouldRetryOrPromise;\n\n          case 6:\n            shouldRetryPromiseResult = _context2.sent;\n            return _context2.abrupt(\"return\", shouldRetryPromiseResult !== false);\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](3);\n            return _context2.abrupt(\"return\", false);\n\n          case 13:\n            return _context2.abrupt(\"return\", shouldRetryOrPromise);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 10]]);\n  }));\n  return _shouldRetry.apply(this, arguments);\n}\n\nfunction axiosRetry(axios, defaultOptions) {\n  var requestInterceptorId = axios.interceptors.request.use(function (config) {\n    var currentState = getCurrentState(config, defaultOptions);\n    currentState.lastRequestTime = Date.now();\n    return config;\n  });\n  var responseInterceptorId = axios.interceptors.response.use(null, /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(error) {\n      var config, currentState, retryDelay, shouldResetTimeout, onRetry, delay, lastRequestDuration, timeout;\n      return _regenerator.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              config = error.config; // If we have no information to retry the request\n\n              if (config) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", Promise.reject(error));\n\n            case 3:\n              currentState = getCurrentState(config, defaultOptions);\n              _context.next = 6;\n              return shouldRetry(currentState, error);\n\n            case 6:\n              if (!_context.sent) {\n                _context.next = 21;\n                break;\n              }\n\n              currentState.retryCount += 1;\n              retryDelay = currentState.retryDelay, shouldResetTimeout = currentState.shouldResetTimeout, onRetry = currentState.onRetry;\n              delay = retryDelay(currentState.retryCount, error); // Axios fails merging this configuration to the default configuration because it has an issue\n              // with circular structures: https://github.com/mzabriskie/axios/issues/370\n\n              fixConfig(axios, config);\n\n              if (!(!shouldResetTimeout && config.timeout && currentState.lastRequestTime)) {\n                _context.next = 17;\n                break;\n              }\n\n              lastRequestDuration = Date.now() - currentState.lastRequestTime;\n              timeout = config.timeout - lastRequestDuration - delay;\n\n              if (!(timeout <= 0)) {\n                _context.next = 16;\n                break;\n              }\n\n              return _context.abrupt(\"return\", Promise.reject(error));\n\n            case 16:\n              config.timeout = timeout;\n\n            case 17:\n              config.transformRequest = [function (data) {\n                return data;\n              }];\n              _context.next = 20;\n              return onRetry(currentState.retryCount, error, config);\n\n            case 20:\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                return setTimeout(function () {\n                  return resolve(axios(config));\n                }, delay);\n              }));\n\n            case 21:\n              return _context.abrupt(\"return\", Promise.reject(error));\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  return {\n    requestInterceptorId: requestInterceptorId,\n    responseInterceptorId: responseInterceptorId\n  };\n} // Compatibility with CommonJS\n\n\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.exponentialDelay = exponentialDelay;\naxiosRetry.isRetryableError = isRetryableError;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/axios-retry/lib/cjs/index.js\n");

/***/ })

};
;