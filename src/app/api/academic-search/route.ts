// API Endpoint para B√∫squeda Acad√©mica Integrada con WebSearch
import { NextRequest, NextResponse } from 'next/server'
import { AcademicSearchEngine, AcademicSearchQuery } from '@/lib/academic-search-engine'
import { WebSearchIntegration } from '@/lib/web-search-integration'
import { NotificationService, NotificationTrigger } from '@/lib/notification-service'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { 
      topic, 
      subject, 
      searchType, 
      level, 
      language, 
      userId, 
      sessionId,
      generateNotification 
    } = body

    if (!topic) {
      return NextResponse.json({
        success: false,
        error: 'topic es requerido'
      }, { status: 400 })
    }

    // Crear query acad√©mico
    const searchQuery: AcademicSearchQuery = {
      topic,
      subject,
      searchType: searchType || 'explanation',
      level: level || 'basic',
      language: language || 'es',
      userId,
      sessionId
    }

    // Realizar b√∫squeda acad√©mica con integraci√≥n web
    const searchResults = await WebSearchIntegration.performAcademicWebSearch(searchQuery)

    // Generar notificaci√≥n proactiva si se solicita
    let notification = null
    if (generateNotification && userId) {
      notification = await NotificationService.createAcademicNotification(
        userId,
        searchQuery,
        NotificationTrigger.KNOWLEDGE_GAP,
        'üîç B√∫squeda Acad√©mica Completada',
        `He encontrado recursos valiosos sobre ${topic} que pueden ayudarte.`
      )
    }

    return NextResponse.json({
      success: true,
      searchResults,
      notification,
      query: searchQuery,
      message: 'B√∫squeda acad√©mica completada exitosamente'
    })

  } catch (error) {
    console.error('Error in academic search:', error)
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Error desconocido',
      message: 'Error al realizar b√∫squeda acad√©mica'
    }, { status: 500 })
  }
}

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const action = searchParams.get('action')

  switch (action) {
    case 'smart_search':
      return await handleSmartSearch(request)
    
    case 'stats':
      return await handleSearchStats(request)
    
    default:
      return NextResponse.json({
        success: false,
        error: 'Acci√≥n no reconocida',
        availableActions: ['smart_search', 'stats']
      }, { status: 400 })
  }
}

/**
 * Maneja b√∫squeda inteligente basada en contexto conversacional
 */
async function handleSmartSearch(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const message = searchParams.get('message')
    const userId = searchParams.get('userId')
    const sessionId = searchParams.get('sessionId')

    if (!message) {
      return NextResponse.json({
        success: false,
        error: 'message es requerido para b√∫squeda inteligente'
      }, { status: 400 })
    }

    // Realizar b√∫squeda inteligente
    const smartSearchResult = await AcademicSearchEngine.smartSearch(message, userId || undefined, sessionId || undefined)

    if (!smartSearchResult) {
      return NextResponse.json({
        success: true,
        searchResults: null,
        message: 'No se detect√≥ una consulta de b√∫squeda en el mensaje'
      })
    }

    // Generar notificaci√≥n autom√°tica para b√∫squedas inteligentes
    let notification = null
    if (userId) {
      notification = await NotificationService.createAcademicNotification(
        userId,
        smartSearchResult.query,
        NotificationTrigger.LEARNING_OPPORTUNITY,
        'üß† B√∫squeda Inteligente',
        `Sara detect√≥ tu necesidad de informaci√≥n sobre ${smartSearchResult.query.topic} y encontr√≥ recursos √∫tiles.`
      )
    }

    return NextResponse.json({
      success: true,
      searchResults: smartSearchResult,
      notification,
      detectedQuery: smartSearchResult.query,
      message: 'B√∫squeda inteligente completada exitosamente'
    })

  } catch (error) {
    console.error('Error in smart search:', error)
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Error desconocido',
      message: 'Error al realizar b√∫squeda inteligente'
    }, { status: 500 })
  }
}

/**
 * Maneja estad√≠sticas del sistema de b√∫squeda
 */
async function handleSearchStats(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const userId = searchParams.get('userId')

    // Obtener estad√≠sticas de notificaciones relacionadas con b√∫squedas
    const notificationStats = NotificationService.getNotificationStats(userId || undefined)

    const searchStats = {
      notificationStats,
      webSearchIntegration: {
        enabled: true,
        fallbackMode: false // En producci√≥n, esto depender√≠a de la disponibilidad del WebSearch tool
      },
      academicSearchEngine: {
        totalSearchTypes: 5, // explanation, examples, exercises, resources, research
        supportedLanguages: ['es', 'en'],
        supportedLevels: ['basic', 'intermediate', 'advanced']
      },
      systemStatus: {
        webSearchEnabled: true,
        notificationsEnabled: notificationStats.novuEnabled || true,
        academicAnalysisEnabled: true
      }
    }

    return NextResponse.json({
      success: true,
      stats: searchStats,
      timestamp: new Date().toISOString(),
      message: 'Estad√≠sticas del sistema de b√∫squeda obtenidas exitosamente'
    })

  } catch (error) {
    console.error('Error getting search stats:', error)
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Error desconocido',
      message: 'Error al obtener estad√≠sticas de b√∫squeda'
    }, { status: 500 })
  }
}