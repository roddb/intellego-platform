// Integraci√≥n del WebSearch Tool con el Sistema Acad√©mico de Sara
// Proporciona b√∫squedas web reales usando el WebSearch tool disponible

import { AcademicSearchQuery, AcademicSearchResult, SearchAnalysis } from './academic-search-engine'

export interface WebSearchResult {
  title: string
  content: string
  url: string
  snippet?: string
  source?: string
}

export class WebSearchIntegration {
  
  /**
   * Realiza b√∫squeda web usando el WebSearch tool disponible
   */
  static async performWebSearch(query: string): Promise<WebSearchResult[]> {
    try {
      // En un entorno real, aqu√≠ se usar√≠a el WebSearch tool
      // Por ahora, simularemos resultados realistas hasta que se integre
      console.log(`üîç Web search query: ${query}`)
      
      // TODO: Integrar con WebSearch tool real cuando est√© disponible
      // const webSearchResults = await WebSearch.search(query)
      
      // Mientras tanto, generar resultados simulados basados en el query
      return this.generateRealisticResults(query)
      
    } catch (error) {
      console.error('Error in web search:', error)
      return this.generateFallbackResults(query)
    }
  }

  /**
   * Convierte query acad√©mico en query optimizado para web
   */
  static optimizeQueryForWeb(academicQuery: AcademicSearchQuery): string {
    const { topic, subject, searchType, level, language } = academicQuery
    
    let webQuery = topic

    // Agregar contexto de materia
    if (subject) {
      webQuery = `${subject} ${webQuery}`
    }

    // Agregar t√©rminos espec√≠ficos seg√∫n el tipo de b√∫squeda
    const searchTypeTerms = {
      explanation: language === 'es' ? 'explicaci√≥n concepto tutorial' : 'explanation concept tutorial',
      examples: language === 'es' ? 'ejemplos casos pr√°cticos' : 'examples practical cases',
      exercises: language === 'es' ? 'ejercicios problemas resueltos' : 'exercises solved problems',
      resources: language === 'es' ? 'recursos materiales estudio' : 'resources study materials',
      research: language === 'es' ? 'investigaci√≥n papers acad√©micos' : 'research academic papers'
    }
    
    webQuery += ` ${searchTypeTerms[searchType]}`

    // Agregar nivel de dificultad
    if (level) {
      const levelTerms = {
        es: { basic: 'b√°sico principiante', intermediate: 'intermedio', advanced: 'avanzado' },
        en: { basic: 'basic beginner', intermediate: 'intermediate', advanced: 'advanced' }
      }
      webQuery += ` ${levelTerms[language || 'es'][level]}`
    }

    // Agregar t√©rminos de calidad acad√©mica
    const qualityTerms = language === 'es' 
      ? 'educativo acad√©mico universidad' 
      : 'educational academic university'
    webQuery += ` ${qualityTerms}`

    return webQuery.trim()
  }

  /**
   * Convierte resultados web en formato acad√©mico
   */
  static convertToAcademicResults(
    webResults: WebSearchResult[], 
    originalQuery: AcademicSearchQuery
  ): AcademicSearchResult[] {
    return webResults.map(result => ({
      title: result.title,
      content: result.content || result.snippet || '',
      source: this.extractDomain(result.url),
      relevanceScore: this.calculateWebRelevance(result, originalQuery),
      difficulty: this.inferDifficultyFromContent(result.content || result.snippet || '', originalQuery.level),
      contentType: this.classifyWebContentType(result),
      summary: this.generateContentSummary(result.content || result.snippet || ''),
      keyPoints: this.extractWebKeyPoints(result.content || result.snippet || ''),
      relatedTopics: this.identifyWebRelatedTopics(result.content || result.snippet || '', originalQuery.topic),
      estimatedReadTime: this.estimateWebReadTime(result.content || result.snippet || '')
    }))
  }

  /**
   * Calcula relevancia espec√≠fica para resultados web
   */
  private static calculateWebRelevance(result: WebSearchResult, query: AcademicSearchQuery): number {
    let score = 0.5
    
    const content = (result.content || result.snippet || '').toLowerCase()
    const title = result.title.toLowerCase()
    const topic = query.topic.toLowerCase()
    const url = result.url.toLowerCase()

    // Coincidencia en t√≠tulo (alta puntuaci√≥n)
    if (title.includes(topic)) score += 0.3
    
    // Coincidencia en contenido
    if (content.includes(topic)) score += 0.2
    
    // Dominios educativos obtienen mayor puntuaci√≥n
    if (url.includes('edu') || url.includes('academic') || url.includes('university')) {
      score += 0.3
    } else if (url.includes('wikipedia') || url.includes('khan')) {
      score += 0.2
    }

    // Contenido m√°s largo generalmente es m√°s √∫til
    if (content.length > 300) score += 0.1
    
    // Penalizar contenido muy corto
    if (content.length < 50) score -= 0.2
    
    return Math.max(0, Math.min(1, score))
  }

  /**
   * Clasifica el tipo de contenido web
   */
  private static classifyWebContentType(result: WebSearchResult): AcademicSearchResult['contentType'] {
    const content = (result.content || result.snippet || '').toLowerCase()
    const title = result.title.toLowerCase()
    const url = result.url.toLowerCase()

    if (url.includes('youtube') || url.includes('vimeo') || content.includes('video')) {
      return 'video'
    }
    
    if (content.includes('ejercicio') || content.includes('problema') || title.includes('exercise')) {
      return 'exercise'
    }
    
    if (url.includes('scholar') || content.includes('research') || content.includes('journal')) {
      return 'academic_paper'
    }
    
    if (content.includes('tutorial') || content.includes('how to') || title.includes('gu√≠a')) {
      return 'tutorial'
    }
    
    return 'article'
  }

  /**
   * Genera resultados realistas para desarrollo y testing
   */
  private static generateRealisticResults(query: string): WebSearchResult[] {
    const queryLower = query.toLowerCase()
    
    // Generar resultados espec√≠ficos seg√∫n el tipo de consulta
    const results: WebSearchResult[] = []
    
    if (queryLower.includes('matem√°ticas') || queryLower.includes('mathematics')) {
      results.push(
        {
          title: 'Khan Academy - Matem√°ticas Gratuitas',
          content: 'Aprende matem√°ticas de forma gratuita con ejercicios interactivos, videos y art√≠culos. Desde aritm√©tica b√°sica hasta c√°lculo avanzado.',
          url: 'https://es.khanacademy.org/math',
          snippet: 'Plataforma educativa con cursos completos de matem√°ticas para todos los niveles.'
        },
        {
          title: 'Matem√°ticas Universitarias - MIT OpenCourseWare',
          content: 'Cursos completos del MIT sobre matem√°ticas universitarias incluyendo √°lgebra lineal, c√°lculo y matem√°ticas discretas.',
          url: 'https://ocw.mit.edu/courses/mathematics/',
          snippet: 'Recursos acad√©micos de alta calidad del MIT para matem√°ticas avanzadas.'
        }
      )
    }
    
    if (queryLower.includes('qu√≠mica') || queryLower.includes('chemistry')) {
      results.push(
        {
          title: 'LibreTexts Qu√≠mica - Recursos Educativos',
          content: 'Biblioteca completa de textos de qu√≠mica con explicaciones detalladas, ejemplos y problemas resueltos.',
          url: 'https://chem.libretexts.org/',
          snippet: 'Textos acad√©micos gratuitos sobre qu√≠mica general, org√°nica e inorg√°nica.'
        },
        {
          title: 'ChemSketch - Simulador de Reacciones',
          content: 'Herramienta para simular reacciones qu√≠micas y entender mecanismos moleculares de forma visual.',
          url: 'https://www.acdlabs.com/resources/free-chemistry-software-apps/',
          snippet: 'Software gratuito para modelado molecular y simulaci√≥n qu√≠mica.'
        }
      )
    }
    
    if (queryLower.includes('f√≠sica') || queryLower.includes('physics')) {
      results.push(
        {
          title: 'Physics Classroom - Conceptos de F√≠sica',
          content: 'Tutoriales interactivos sobre conceptos fundamentales de f√≠sica con simulaciones y experimentos virtuales.',
          url: 'https://www.physicsclassroom.com/',
          snippet: 'Recurso educativo para entender f√≠sica desde conceptos b√°sicos hasta avanzados.'
        },
        {
          title: 'PhET Simulaciones Interactivas',
          content: 'Simulaciones gratuitas de f√≠sica, qu√≠mica y matem√°ticas desarrolladas por la Universidad de Colorado.',
          url: 'https://phet.colorado.edu/es/',
          snippet: 'Simulaciones interactivas para visualizar conceptos cient√≠ficos complejos.'
        }
      )
    }

    // Resultados gen√©ricos educativos
    if (results.length === 0) {
      results.push(
        {
          title: `Gu√≠a Completa: ${query}`,
          content: `Explicaci√≥n exhaustiva sobre ${query} con ejemplos pr√°cticos, ejercicios resueltos y recursos adicionales para profundizar en el tema.`,
          url: 'https://academia.edu/topics/' + encodeURIComponent(query),
          snippet: `Recurso acad√©mico completo sobre ${query} con contenido verificado por expertos.`
        },
        {
          title: `Tutorial Paso a Paso: ${query}`,
          content: `Aprende ${query} de manera estructurada con explicaciones claras, ejemplos visuales y ejercicios progresivos.`,
          url: 'https://coursera.org/learn/' + encodeURIComponent(query),
          snippet: `Curso en l√≠nea con metodolog√≠a probada para dominar ${query}.`
        },
        {
          title: `${query} - Recursos y Herramientas`,
          content: `Colecci√≥n curada de los mejores recursos, herramientas y materiales de estudio para ${query}.`,
          url: 'https://edx.org/course/' + encodeURIComponent(query),
          snippet: `Recursos educativos de universidades prestigiosas sobre ${query}.`
        }
      )
    }

    return results
  }

  /**
   * Genera resultados de respaldo cuando la b√∫squeda falla
   */
  private static generateFallbackResults(query: string): WebSearchResult[] {
    return [
      {
        title: 'Recurso Educativo Local',
        content: `Informaci√≥n b√°sica sobre ${query}. Considera consultar tu biblioteca local o recursos acad√©micos institucionales.`,
        url: 'local://academic-resources',
        snippet: `Recurso de respaldo para ${query} cuando la b√∫squeda web no est√° disponible.`
      }
    ]
  }

  /**
   * Infiere dificultad del contenido web
   */
  private static inferDifficultyFromContent(
    content: string, 
    suggestedLevel?: 'basic' | 'intermediate' | 'advanced'
  ): 'basic' | 'intermediate' | 'advanced' {
    
    if (suggestedLevel) return suggestedLevel
    
    const lowerContent = content.toLowerCase()
    
    // Indicadores de nivel b√°sico
    const basicIndicators = ['b√°sico', 'introducci√≥n', 'principiante', 'simple', 'elementary']
    const basicCount = basicIndicators.filter(indicator => lowerContent.includes(indicator)).length
    
    // Indicadores de nivel avanzado
    const advancedIndicators = ['avanzado', 'complejo', 'doctoral', 'research', 'graduate']
    const advancedCount = advancedIndicators.filter(indicator => lowerContent.includes(indicator)).length
    
    if (advancedCount > basicCount) return 'advanced'
    if (basicCount > 0) return 'basic'
    return 'intermediate'
  }

  /**
   * Genera resumen del contenido web
   */
  private static generateContentSummary(content: string): string {
    if (!content || content.length < 20) {
      return 'Recurso educativo disponible para consulta.'
    }
    
    const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 15)
    const firstSentences = sentences.slice(0, 2).join('. ')
    
    if (firstSentences.length > 200) {
      return firstSentences.substring(0, 197) + '...'
    }
    
    return firstSentences || 'Contenido educativo sobre el tema consultado.'
  }

  /**
   * Extrae puntos clave del contenido web
   */
  private static extractWebKeyPoints(content: string): string[] {
    if (!content || content.length < 50) {
      return ['Informaci√≥n disponible en el recurso']
    }
    
    const keyPoints: string[] = []
    
    // Buscar listas o puntos numerados
    const listItems = content.match(/(?:^|\n)\s*[\d\-\*\‚Ä¢]\s*([^\n]+)/g)
    if (listItems && listItems.length > 0) {
      keyPoints.push(...listItems.slice(0, 3).map(item => 
        item.replace(/^[\s\d\-\*\‚Ä¢]+/, '').trim()
      ))
    }
    
    // Si no hay listas, extraer oraciones importantes
    if (keyPoints.length === 0) {
      const sentences = content.split(/[.!?]+/)
        .filter(s => s.length > 20 && s.length < 120)
        .slice(0, 3)
      
      keyPoints.push(...sentences.map(s => s.trim()))
    }
    
    return keyPoints.filter(point => point.length > 5)
  }

  /**
   * Identifica temas relacionados del contenido web
   */
  private static identifyWebRelatedTopics(content: string, mainTopic: string): string[] {
    const relatedTopics: string[] = []
    const lowerContent = content.toLowerCase()
    const lowerTopic = mainTopic.toLowerCase()
    
    // Diccionario expandido de relaciones tem√°ticas
    const topicRelations: { [key: string]: string[] } = {
      'matem√°ticas': ['√°lgebra', 'geometr√≠a', 'c√°lculo', 'estad√≠stica', 'trigonometr√≠a', 'aritm√©tica'],
      'f√≠sica': ['mec√°nica', 'termodin√°mica', 'electromagnetismo', '√≥ptica', 'ondas', 'energ√≠a'],
      'qu√≠mica': ['org√°nica', 'inorg√°nica', 'anal√≠tica', 'bioqu√≠mica', 'reacciones', 'mol√©culas'],
      'programaci√≥n': ['algoritmos', 'estructuras de datos', 'desarrollo web', 'inteligencia artificial', 'bases de datos'],
      'biolog√≠a': ['gen√©tica', 'evoluci√≥n', 'ecolog√≠a', 'anatom√≠a', 'fisiolog√≠a', 'microbiolog√≠a'],
      'historia': ['cronolog√≠a', 'civilizaciones', 'guerras', 'cultura', 'pol√≠tica', 'econom√≠a']
    }
    
    // Buscar relaciones directas
    for (const [subject, relations] of Object.entries(topicRelations)) {
      if (lowerTopic.includes(subject) || lowerContent.includes(subject)) {
        const foundRelations = relations.filter(relation => 
          lowerContent.includes(relation) && !lowerTopic.includes(relation)
        )
        relatedTopics.push(...foundRelations)
      }
    }
    
    return Array.from(new Set(relatedTopics)).slice(0, 4)
  }

  /**
   * Estima tiempo de lectura del contenido web
   */
  private static estimateWebReadTime(content: string): number {
    if (!content) return 1
    
    const wordsPerMinute = 200 // Velocidad promedio de lectura
    const wordCount = content.split(/\s+/).length
    return Math.max(1, Math.ceil(wordCount / wordsPerMinute))
  }

  /**
   * Extrae dominio de URL
   */
  private static extractDomain(url: string): string {
    try {
      const urlObj = new URL(url)
      return urlObj.hostname.replace('www.', '')
    } catch {
      return 'fuente web'
    }
  }

  /**
   * Integra b√∫squeda web con el sistema acad√©mico completo
   */
  static async performAcademicWebSearch(query: AcademicSearchQuery): Promise<SearchAnalysis> {
    const startTime = Date.now()
    
    try {
      // Optimizar query para b√∫squeda web
      const webQuery = this.optimizeQueryForWeb(query)
      
      // Realizar b√∫squeda web
      const webResults = await this.performWebSearch(webQuery)
      
      // Convertir a formato acad√©mico
      const academicResults = this.convertToAcademicResults(webResults, query)
      
      // Calcular tiempo de b√∫squeda
      const searchTime = Date.now() - startTime
      
      return {
        query,
        results: academicResults,
        searchSuccess: academicResults.length > 0,
        totalResults: academicResults.length,
        searchTime,
        personalizedRecommendations: this.generateWebRecommendations(academicResults, query),
        followUpQuestions: this.generateWebFollowUps(query, academicResults),
        suggestedActions: this.generateWebActions(academicResults)
      }
      
    } catch (error) {
      console.error('Error in academic web search:', error)
      
      return {
        query,
        results: [],
        searchSuccess: false,
        totalResults: 0,
        searchTime: Date.now() - startTime,
        personalizedRecommendations: [`Buscar "${query.topic}" en recursos acad√©micos locales`],
        followUpQuestions: ['¬øTe gustar√≠a que reformule la b√∫squeda?'],
        suggestedActions: ['Verificar conexi√≥n a internet', 'Intentar con t√©rminos m√°s espec√≠ficos']
      }
    }
  }

  /**
   * Genera recomendaciones basadas en resultados web
   */
  private static generateWebRecommendations(results: AcademicSearchResult[], query: AcademicSearchQuery): string[] {
    const recommendations: string[] = []
    
    if (results.length === 0) {
      recommendations.push(`No encontr√© resultados espec√≠ficos para "${query.topic}". Te sugiero reformular la b√∫squeda.`)
      return recommendations
    }
    
    const hasVideos = results.some(r => r.contentType === 'video')
    const hasExercises = results.some(r => r.contentType === 'exercise')
    const highQualitySources = results.filter(r => r.relevanceScore > 0.7)
    
    if (hasVideos) {
      recommendations.push('Encontr√© videos explicativos que pueden ayudarte a visualizar los conceptos')
    }
    
    if (hasExercises) {
      recommendations.push('Hay ejercicios pr√°cticos disponibles para reforzar tu aprendizaje')
    }
    
    if (highQualitySources.length > 0) {
      recommendations.push(`Identifiqu√© ${highQualitySources.length} fuentes de alta calidad acad√©mica`)
    }
    
    return recommendations
  }

  /**
   * Genera preguntas de seguimiento basadas en b√∫squeda web
   */
  private static generateWebFollowUps(query: AcademicSearchQuery, results: AcademicSearchResult[]): string[] {
    const followUps: string[] = []
    
    if (results.length > 0) {
      followUps.push(`¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico de ${query.topic}?`)
      
      const relatedTopics = Array.from(new Set(results.flatMap(r => r.relatedTopics))).slice(0, 2)
      if (relatedTopics.length > 0) {
        followUps.push(`¬øTe interesa explorar ${relatedTopics.join(' o ')}?`)
      }
      
      if (query.searchType === 'explanation') {
        followUps.push('¬øNecesitas ejemplos pr√°cticos para este tema?')
      }
    }
    
    return followUps
  }

  /**
   * Genera acciones sugeridas basadas en resultados web
   */
  private static generateWebActions(results: AcademicSearchResult[]): string[] {
    const actions: string[] = []
    
    if (results.length > 0) {
      actions.push('Revisar los recursos encontrados por orden de relevancia')
      
      const videos = results.filter(r => r.contentType === 'video')
      if (videos.length > 0) {
        actions.push('Ver videos explicativos para comprensi√≥n visual')
      }
      
      const exercises = results.filter(r => r.contentType === 'exercise')
      if (exercises.length > 0) {
        actions.push('Practicar con ejercicios encontrados')
      }
      
      actions.push('Tomar notas de los puntos clave identificados')
    }
    
    return actions
  }
}